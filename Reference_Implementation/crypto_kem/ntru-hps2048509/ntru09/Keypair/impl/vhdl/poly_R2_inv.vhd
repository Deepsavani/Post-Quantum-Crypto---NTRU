-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity poly_R2_inv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    r_coeffs_ce0 : OUT STD_LOGIC;
    r_coeffs_we0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    a_coeffs_ce0 : OUT STD_LOGIC;
    a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of poly_R2_inv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (46 downto 0) := "00000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (46 downto 0) := "00000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (46 downto 0) := "00000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (46 downto 0) := "00000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (46 downto 0) := "00000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (46 downto 0) := "00000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (46 downto 0) := "00001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (46 downto 0) := "00010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (46 downto 0) := "00100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (46 downto 0) := "01000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (46 downto 0) := "10000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv16_1FC : STD_LOGIC_VECTOR (15 downto 0) := "0000000111111100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1FC : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000111111100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv9_1FD : STD_LOGIC_VECTOR (8 downto 0) := "111111101";
    constant ap_const_lv10_3F7 : STD_LOGIC_VECTOR (9 downto 0) := "1111110111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_1FC : STD_LOGIC_VECTOR (9 downto 0) := "0111111100";
    constant ap_const_lv11_1FD : STD_LOGIC_VECTOR (10 downto 0) := "00111111101";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_1FC : STD_LOGIC_VECTOR (8 downto 0) := "111111100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_1FD : STD_LOGIC_VECTOR (9 downto 0) := "0111111101";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_3FA : STD_LOGIC_VECTOR (9 downto 0) := "1111111010";
    constant ap_const_lv15_5BBF : STD_LOGIC_VECTOR (14 downto 0) := "101101110111111";
    constant ap_const_lv15_5DBC : STD_LOGIC_VECTOR (14 downto 0) := "101110110111100";
    constant ap_const_lv9_41 : STD_LOGIC_VECTOR (8 downto 0) := "001000001";
    constant ap_const_lv15_5FB9 : STD_LOGIC_VECTOR (14 downto 0) := "101111110111001";
    constant ap_const_lv15_61B6 : STD_LOGIC_VECTOR (14 downto 0) := "110000110110110";
    constant ap_const_lv9_47 : STD_LOGIC_VECTOR (8 downto 0) := "001000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_25_fu_592_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond9_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_26_fu_604_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_27_fu_621_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_27_reg_1655 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_195_fu_627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_195_reg_1660 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond7_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_28_fu_647_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond6_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_8_fu_664_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_8_reg_1696 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal k_6_cast_cast_fu_702_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal k_6_cast_cast_reg_1701 : STD_LOGIC_VECTOR (29 downto 0);
    signal exitcond5_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_r_coeffs_load_reg_1706 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_257_fu_706_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_257_reg_1712 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_assign_cast_fu_710_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_assign_cast_reg_1717 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_258_fu_728_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_258_reg_1722 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_fu_736_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_67_reg_1727 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i3_cast_fu_752_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i3_cast_reg_1732 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_20_fu_766_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_20_reg_1741 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal temp_r_coeffs_addr_8_reg_1746 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_i5_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal g_coeffs_addr_4_reg_1751 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_21_fu_809_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_21_reg_1759 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal b_coeffs_addr_6_reg_1764 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_i9_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_coeffs_addr_11_reg_1769 : STD_LOGIC_VECTOR (8 downto 0);
    signal degf_3_fu_851_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal degf_3_reg_1774 : STD_LOGIC_VECTOR (15 downto 0);
    signal degg_2_fu_857_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal degg_2_reg_1779 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_204_fu_863_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_204_reg_1784 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_22_fu_902_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_22_reg_1793 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exitcond4_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_r_coeffs_addr_10_reg_1803 : STD_LOGIC_VECTOR (8 downto 0);
    signal g_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal g_coeffs_load_3_reg_1808 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_210_fu_1627_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_210_reg_1813 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_24_fu_931_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_24_reg_1821 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal exitcond3_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_coeffs_addr_7_reg_1831 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_1836 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_coeffs_load_reg_1841 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_216_fu_953_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_216_reg_1846 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal exitcond_i_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal done_reg_444 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_r_coeffs_addr_12_reg_1859 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_31_fu_981_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_31_reg_1864 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_70_fu_996_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_70_reg_1869 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal exitcond_i3_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_coeffs_addr_10_reg_1882 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_32_fu_1038_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_32_reg_1887 : STD_LOGIC_VECTOR (8 downto 0);
    signal degf_4_fu_1044_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal degf_4_reg_1892 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_7_fu_1048_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_7_reg_1897 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_317_reg_1902 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_29_fu_1088_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_29_reg_1910 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp_199_fu_1094_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_199_reg_1915 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond2_fu_1082_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_30_fu_1109_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_30_reg_1928 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_200_fu_1115_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_200_reg_1933 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond1_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_9_fu_1131_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_9_reg_1941 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal exitcond_fu_1125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_assign_2_cast_fu_1152_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_assign_2_cast_reg_1951 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal i_23_fu_1176_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_23_reg_1964 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal tmp_261_fu_1182_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_261_reg_1969 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i8_fu_1170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_coeffs_addr_12_reg_1980 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_48_fu_1280_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal start_pos_fu_1284_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal start_pos_reg_1990 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal end_pos_fu_1292_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal end_pos_reg_1996 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_273_fu_1359_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_273_reg_2002 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_276_fu_1369_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_276_reg_2007 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_297_fu_1473_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_297_reg_2012 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal b_coeffs_ce0 : STD_LOGIC;
    signal b_coeffs_we0 : STD_LOGIC;
    signal b_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_coeffs_ce0 : STD_LOGIC;
    signal f_coeffs_we0 : STD_LOGIC;
    signal f_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal g_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal g_coeffs_ce0 : STD_LOGIC;
    signal g_coeffs_we0 : STD_LOGIC;
    signal g_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_353 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_364 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond8_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_375 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_3_reg_386 : STD_LOGIC_VECTOR (8 downto 0);
    signal degf_reg_397 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal k_reg_409 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_421 : STD_LOGIC_VECTOR (9 downto 0);
    signal degg_reg_432 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_i4_reg_456 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_i8_reg_467 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_4_reg_478 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_5_reg_489 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal i_i_reg_500 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_i2_reg_511 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal i_6_reg_522 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal k_1_reg_533 : STD_LOGIC_VECTOR (29 downto 0);
    signal i_7_reg_543 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_554 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal i_i7_reg_566 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal tmp_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_196_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_365_i_fu_772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_365_i2_fu_815_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_209_fu_908_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_213_fu_937_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_112_i_fu_965_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_114_i_fu_976_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_107_i_fu_1022_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_109_i_fu_1033_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_207_fu_1160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_208_fu_1165_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2_cast_fu_1230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2335_cast_fu_1265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_367_i2_fu_882_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_368_i2_fu_889_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_110_i_fu_1067_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_105_i_fu_1076_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_315_fu_1610_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mask_fu_1620_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_312_cast_fu_636_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_367_i_fu_789_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_212_fu_918_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_115_i_fu_987_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_111_i_fu_1003_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_368_i_fu_796_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_577_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_577_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_255_fu_632_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_197_fu_674_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_256_fu_680_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_cast_fu_670_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_319_cast_cast_fu_688_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_6_fu_696_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_257_fu_706_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_322_cast_fu_714_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_323_cast_fu_718_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_198_fu_722_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp21_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal swap_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_366_i_fu_778_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_fu_784_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp22_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_202_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_201_fu_821_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_329_cast_fu_837_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_203_fu_845_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_366_i2_fu_871_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_2_fu_877_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_211_fu_914_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_214_fu_1631_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_215_fu_949_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_113_i_fu_970_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_106_i_fu_1016_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_108_i_fu_1027_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_217_fu_1053_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_7_cast_fu_1099_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_cast_fu_1121_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1142_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_259_fu_1148_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1142_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal adjSize_fu_1186_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal adjSize309_cast_fu_1196_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mem_index_gep_fu_1200_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_262_fu_1206_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal addrCmp_fu_1210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex_fu_1216_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal gepindex2_fu_1222_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal mem_index_gep2_fu_1235_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_280_fu_1241_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal addrCmp2_fu_1245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex4_fu_1251_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal gepindex5_fu_1257_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_260_fu_1270_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_264_fu_1299_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_265_fu_1303_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_267_fu_1317_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_269_fu_1329_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_266_fu_1307_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_268_fu_1323_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_270_fu_1335_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_272_fu_1351_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_271_fu_1343_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_274_fu_1365_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_282_fu_1381_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_283_fu_1385_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_281_fu_1375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_285_fu_1399_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_287_fu_1411_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_284_fu_1389_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_286_fu_1405_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_288_fu_1417_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_290_fu_1433_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_291_fu_1441_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_289_fu_1425_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_292_fu_1447_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_293_fu_1451_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_294_fu_1455_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_295_fu_1461_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_296_fu_1467_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_275_fu_1477_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_277_fu_1480_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_278_fu_1486_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_279_fu_1491_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i9_fu_1495_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i2_fu_1500_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_391_i_fu_1505_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_299_fu_1510_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_300_fu_1513_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_302_fu_1520_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_303_fu_1526_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_305_fu_1542_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_304_fu_1534_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_306_fu_1550_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_301_fu_1516_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_307_fu_1556_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_310_fu_1568_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_311_fu_1574_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_308_fu_1560_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_309_fu_1564_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_313_fu_1592_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_314_fu_1598_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_312_fu_1584_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_demorgan_fu_1604_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_316_fu_1617_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1142_ap_start : STD_LOGIC;
    signal grp_fu_1142_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (46 downto 0);

    component crypto_kem_keypair_urem_10ns_10ns_10_14_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component crypto_kem_keypair_mul_mul_16s_16s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_S3_inv_b_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    b_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 509,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_coeffs_address0,
        ce0 => b_coeffs_ce0,
        we0 => b_coeffs_we0,
        d0 => b_coeffs_d0,
        q0 => b_coeffs_q0);

    f_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 509,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_coeffs_address0,
        ce0 => f_coeffs_ce0,
        we0 => f_coeffs_we0,
        d0 => f_coeffs_d0,
        q0 => f_coeffs_q0);

    g_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 509,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => g_coeffs_address0,
        ce0 => g_coeffs_ce0,
        we0 => g_coeffs_we0,
        d0 => g_coeffs_d0,
        q0 => g_coeffs_q0);

    crypto_kem_keypair_urem_10ns_10ns_10_14_seq_1_U54 : component crypto_kem_keypair_urem_10ns_10ns_10_14_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 14,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_1142_ap_start,
        done => grp_fu_1142_ap_done,
        din0 => grp_fu_1142_p0,
        din1 => ap_const_lv10_1FD,
        ce => ap_const_logic_1,
        dout => grp_fu_1142_p2);

    crypto_kem_keypair_mul_mul_16s_16s_16_1_1_U55 : component crypto_kem_keypair_mul_mul_16s_16s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => temp_r_coeffs_load_reg_1706,
        din1 => g_coeffs_load_3_reg_1808,
        dout => tmp_210_fu_1627_p2);

    crypto_kem_keypair_mul_mul_16s_16s_16_1_1_U56 : component crypto_kem_keypair_mul_mul_16s_16s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => temp_r_coeffs_load_reg_1706,
        din1 => r_coeffs_load_reg_1841,
        dout => tmp_214_fu_1631_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    degf_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond6_fu_641_p2 = ap_const_lv1_1))) then 
                degf_reg_397 <= ap_const_lv16_1FC;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                degf_reg_397 <= degf_4_reg_1892;
            end if; 
        end if;
    end process;

    degg_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond6_fu_641_p2 = ap_const_lv1_1))) then 
                degg_reg_432 <= ap_const_lv16_1FC;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                degg_reg_432 <= degg_2_reg_1779;
            end if; 
        end if;
    end process;

    done_reg_444_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond6_fu_641_p2 = ap_const_lv1_1))) then 
                done_reg_444 <= ap_const_lv1_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                done_reg_444 <= tmp_317_reg_1902;
            end if; 
        end if;
    end process;

    i_1_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_1_reg_364 <= i_26_fu_604_p2;
            elsif (((exitcond9_fu_581_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_364 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_2_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond8_fu_598_p2 = ap_const_lv1_1))) then 
                i_2_reg_375 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_2_reg_375 <= i_27_reg_1655;
            end if; 
        end if;
    end process;

    i_3_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_615_p2 = ap_const_lv1_1))) then 
                i_3_reg_386 <= ap_const_lv9_0;
            elsif (((exitcond6_fu_641_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_3_reg_386 <= i_28_fu_647_p2;
            end if; 
        end if;
    end process;

    i_4_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_4_reg_478 <= i_22_reg_1793;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_i9_fu_803_p2 = ap_const_lv1_1))) then 
                i_4_reg_478 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_5_reg_489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond4_fu_896_p2 = ap_const_lv1_1))) then 
                i_5_reg_489 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_5_reg_489 <= i_24_reg_1821;
            end if; 
        end if;
    end process;

    i_6_reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                i_6_reg_522 <= i_29_reg_1910;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond5_fu_658_p2 = ap_const_lv1_1))) then 
                i_6_reg_522 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_7_reg_543_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond2_fu_1082_p2 = ap_const_lv1_1))) then 
                i_7_reg_543 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond_i8_fu_1170_p2 = ap_const_lv1_1))) then 
                i_7_reg_543 <= i_30_reg_1928;
            end if; 
        end if;
    end process;

    i_i2_reg_511_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_i2_reg_511 <= i_32_reg_1887;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_i2_reg_511 <= ap_const_lv9_1;
            end if; 
        end if;
    end process;

    i_i4_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_i4_reg_456 <= i_20_reg_1741;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_i4_reg_456 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_i7_reg_566_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                i_i7_reg_566 <= i_23_reg_1964;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and (exitcond_fu_1125_p2 = ap_const_lv1_1))) then 
                i_i7_reg_566 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i8_reg_467_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_i5_fu_760_p2 = ap_const_lv1_1))) then 
                i_i8_reg_467 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_i8_reg_467 <= i_21_reg_1759;
            end if; 
        end if;
    end process;

    i_i_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                i_i_reg_500 <= i_31_reg_1864;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond3_fu_925_p2 = ap_const_lv1_1))) then 
                i_i_reg_500 <= ap_const_lv9_1;
            end if; 
        end if;
    end process;

    i_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_353 <= i_25_fu_592_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_353 <= ap_const_lv9_1;
            end if; 
        end if;
    end process;

    j_1_reg_554_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1103_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                j_1_reg_554 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                j_1_reg_554 <= j_9_reg_1941;
            end if; 
        end if;
    end process;

    j_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond6_fu_641_p2 = ap_const_lv1_1))) then 
                j_reg_421 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                j_reg_421 <= j_8_reg_1696;
            end if; 
        end if;
    end process;

    k_1_reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond2_fu_1082_p2 = ap_const_lv1_1))) then 
                k_1_reg_533 <= k_6_cast_cast_reg_1701;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond_i8_fu_1170_p2 = ap_const_lv1_1))) then 
                k_1_reg_533 <= tmp_48_fu_1280_p1;
            end if; 
        end if;
    end process;

    k_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond6_fu_641_p2 = ap_const_lv1_1))) then 
                k_reg_409 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                k_reg_409 <= k_7_reg_1897;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (exitcond_fu_1125_p2 = ap_const_lv1_1))) then
                b_assign_2_cast_reg_1951 <= b_assign_2_cast_fu_1152_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i9_fu_803_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                b_coeffs_addr_6_reg_1764 <= tmp_365_i2_fu_815_p1(9 - 1 downto 0);
                r_coeffs_addr_11_reg_1769 <= tmp_365_i2_fu_815_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_925_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                b_coeffs_addr_7_reg_1831 <= tmp_213_fu_937_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_i9_fu_803_p2 = ap_const_lv1_1))) then
                degf_3_reg_1774 <= degf_3_fu_851_p2;
                degg_2_reg_1779 <= degg_2_fu_857_p2;
                tmp_204_reg_1784 <= tmp_204_fu_863_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond_i3_fu_1010_p2 = ap_const_lv1_1))) then
                degf_4_reg_1892 <= degf_4_fu_1044_p2;
                k_7_reg_1897 <= k_7_fu_1048_p2;
                tmp_317_reg_1902 <= tmp_217_fu_1053_p2(15 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                    end_pos_reg_1996(3) <= end_pos_fu_1292_p2(3);
                    start_pos_reg_1990(3) <= start_pos_fu_1284_p3(3);
                    tmp_273_reg_2002(4 downto 1) <= tmp_273_fu_1359_p2(4 downto 1);
                tmp_276_reg_2007 <= tmp_276_fu_1369_p2;
                tmp_297_reg_2012 <= tmp_297_fu_1473_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i5_fu_760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                g_coeffs_addr_4_reg_1751 <= tmp_365_i_fu_772_p1(9 - 1 downto 0);
                temp_r_coeffs_addr_8_reg_1746 <= tmp_365_i_fu_772_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                g_coeffs_load_3_reg_1808 <= g_coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_20_reg_1741 <= i_20_fu_766_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_21_reg_1759 <= i_21_fu_809_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_22_reg_1793 <= i_22_fu_902_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                i_23_reg_1964 <= i_23_fu_1176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_24_reg_1821 <= i_24_fu_931_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_27_reg_1655 <= i_27_fu_621_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                i_29_reg_1910 <= i_29_fu_1088_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                i_30_reg_1928 <= i_30_fu_1109_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_959_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                i_31_reg_1864 <= i_31_fu_981_p2;
                temp_r_coeffs_addr_12_reg_1859 <= tmp_114_i_fu_976_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i3_fu_1010_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                i_32_reg_1887 <= i_32_fu_1038_p2;
                r_coeffs_addr_10_reg_1882 <= tmp_109_i_fu_1033_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_8_reg_1696 <= j_8_fu_664_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                j_9_reg_1941 <= j_9_fu_1131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond5_fu_658_p2 = ap_const_lv1_1))) then
                k_6_cast_cast_reg_1701 <= k_6_cast_cast_fu_702_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i8_fu_1170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                r_coeffs_addr_12_reg_1980 <= gepindex2335_cast_fu_1265_p1(9 - 1 downto 0);
                tmp_261_reg_1969 <= tmp_261_fu_1182_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                r_coeffs_load_reg_1841 <= r_coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    s_assign_cast_reg_1717(0) <= s_assign_cast_fu_710_p1(0);
                temp_r_coeffs_load_reg_1706 <= f_coeffs_q0;
                tmp_257_reg_1712 <= tmp_257_fu_706_p1;
                tmp_258_reg_1722 <= tmp_198_fu_722_p2(15 downto 15);
                    tmp_67_reg_1727(0) <= tmp_67_fu_736_p1(0);
                tmp_i3_cast_reg_1732 <= tmp_i3_cast_fu_752_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_896_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                temp_r_coeffs_addr_10_reg_1803 <= tmp_209_fu_908_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_615_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_195_reg_1660(8 downto 0) <= tmp_195_fu_627_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_1082_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    tmp_199_reg_1915(8 downto 0) <= tmp_199_fu_1094_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_1103_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                tmp_200_reg_1933 <= tmp_200_fu_1115_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_210_reg_1813 <= tmp_210_fu_1627_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp_216_reg_1846 <= tmp_216_fu_953_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_i_70_reg_1869 <= tmp_i_70_fu_996_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond3_fu_925_p2 = ap_const_lv1_1))) then
                tmp_i_reg_1836 <= tmp_i_fu_943_p2;
            end if;
        end if;
    end process;
    tmp_195_reg_1660(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    s_assign_cast_reg_1717(9 downto 1) <= "000000000";
    tmp_67_reg_1727(15 downto 1) <= "000000000000000";
    tmp_199_reg_1915(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    start_pos_reg_1990(2 downto 0) <= "000";
    end_pos_reg_1996(2 downto 0) <= "111";
    tmp_273_reg_2002(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond9_fu_581_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond7_fu_615_p2, ap_CS_fsm_state6, exitcond6_fu_641_p2, ap_CS_fsm_state7, exitcond5_fu_658_p2, ap_CS_fsm_state9, exitcond_i5_fu_760_p2, ap_CS_fsm_state11, exitcond_i9_fu_803_p2, ap_CS_fsm_state13, exitcond4_fu_896_p2, ap_CS_fsm_state17, exitcond3_fu_925_p2, ap_CS_fsm_state21, exitcond_i_fu_959_p2, ap_CS_fsm_state24, exitcond_i3_fu_1010_p2, ap_CS_fsm_state27, exitcond2_fu_1082_p2, ap_CS_fsm_state29, exitcond1_fu_1103_p2, ap_CS_fsm_state30, exitcond_fu_1125_p2, ap_CS_fsm_state45, exitcond_i8_fu_1170_p2, exitcond8_fu_598_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond9_fu_581_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond8_fu_598_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_615_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond6_fu_641_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond5_fu_658_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_i5_fu_760_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_i9_fu_803_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond4_fu_896_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond3_fu_925_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond_i_fu_959_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond_i3_fu_1010_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond2_fu_1082_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond1_fu_1103_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (exitcond_fu_1125_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (exitcond_i8_fu_1170_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_coeffs_address0 <= tmp_195_fu_627_p1(9 - 1 downto 0);

    a_coeffs_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_coeffs_ce0 <= ap_const_logic_1;
        else 
            a_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    addrCmp2_fu_1245_p2 <= "1" when (unsigned(mem_index_gep2_fu_1235_p2) < unsigned(ap_const_lv15_61B6)) else "0";
    addrCmp_fu_1210_p2 <= "1" when (unsigned(mem_index_gep_fu_1200_p2) < unsigned(ap_const_lv15_5DBC)) else "0";
    adjSize309_cast_fu_1196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(adjSize_fu_1186_p4),15));
    adjSize_fu_1186_p4 <= i_i7_reg_566(9 downto 1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state29, exitcond1_fu_1103_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond1_fu_1103_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state29, exitcond1_fu_1103_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond1_fu_1103_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_assign_2_cast_fu_1152_p3 <= 
        ap_const_lv8_FF when (tmp_259_fu_1148_p1(0) = '1') else 
        ap_const_lv8_0;

    b_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, exitcond9_fu_581_p2, ap_CS_fsm_state11, b_coeffs_addr_6_reg_1764, b_coeffs_addr_7_reg_1831, ap_CS_fsm_state18, ap_CS_fsm_state27, tmp_199_fu_1094_p1, ap_CS_fsm_state12, ap_CS_fsm_state20, tmp_fu_587_p1, tmp_365_i2_fu_815_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            b_coeffs_address0 <= tmp_199_fu_1094_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            b_coeffs_address0 <= b_coeffs_addr_7_reg_1831;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            b_coeffs_address0 <= b_coeffs_addr_6_reg_1764;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            b_coeffs_address0 <= tmp_365_i2_fu_815_p1(9 - 1 downto 0);
        elsif (((exitcond9_fu_581_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            b_coeffs_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif (((exitcond9_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            b_coeffs_address0 <= tmp_fu_587_p1(9 - 1 downto 0);
        else 
            b_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    b_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, exitcond9_fu_581_p2, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state27, ap_CS_fsm_state12, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((exitcond9_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((exitcond9_fu_581_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            b_coeffs_ce0 <= ap_const_logic_1;
        else 
            b_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_coeffs_d0_assign_proc : process(ap_CS_fsm_state2, exitcond9_fu_581_p2, tmp_216_reg_1846, ap_CS_fsm_state12, ap_CS_fsm_state20, tmp_367_i2_fu_882_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            b_coeffs_d0 <= tmp_216_reg_1846;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            b_coeffs_d0 <= tmp_367_i2_fu_882_p2;
        elsif (((exitcond9_fu_581_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            b_coeffs_d0 <= ap_const_lv16_1;
        elsif (((exitcond9_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            b_coeffs_d0 <= ap_const_lv16_0;
        else 
            b_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    b_coeffs_we0_assign_proc : process(ap_CS_fsm_state2, exitcond9_fu_581_p2, ap_CS_fsm_state12, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((exitcond9_fu_581_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((exitcond9_fu_581_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            b_coeffs_we0 <= ap_const_logic_1;
        else 
            b_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    degf_3_fu_851_p2 <= (tmp_203_fu_845_p2 xor degf_reg_397);
    degf_4_fu_1044_p2 <= std_logic_vector(unsigned(degf_3_reg_1774) - unsigned(tmp_67_reg_1727));
    degg_2_fu_857_p2 <= (tmp_203_fu_845_p2 xor degg_reg_432);
    end_pos_fu_1292_p2 <= (start_pos_fu_1284_p3 or ap_const_lv4_7);
    exitcond1_fu_1103_p2 <= "1" when (i_7_reg_543 = ap_const_lv4_A) else "0";
    exitcond2_fu_1082_p2 <= "1" when (i_6_reg_522 = ap_const_lv9_1FD) else "0";
    exitcond3_fu_925_p2 <= "1" when (i_5_reg_489 = ap_const_lv9_1FD) else "0";
    exitcond4_fu_896_p2 <= "1" when (i_4_reg_478 = ap_const_lv9_1FD) else "0";
    exitcond5_fu_658_p2 <= "1" when (j_reg_421 = ap_const_lv10_3F7) else "0";
    exitcond6_fu_641_p2 <= "1" when (i_3_reg_386 = ap_const_lv9_1FD) else "0";
    exitcond7_fu_615_p2 <= "1" when (i_2_reg_375 = ap_const_lv9_1FD) else "0";
    exitcond8_fu_598_p2 <= "1" when (i_1_reg_364 = ap_const_lv9_1FD) else "0";
    exitcond9_fu_581_p2 <= "1" when (i_reg_353 = ap_const_lv9_1FD) else "0";
    exitcond_fu_1125_p2 <= "1" when (j_1_reg_554 = ap_const_lv9_1FD) else "0";
    exitcond_i3_fu_1010_p2 <= "1" when (i_i2_reg_511 = ap_const_lv9_1FD) else "0";
    exitcond_i5_fu_760_p2 <= "1" when (i_i4_reg_456 = ap_const_lv9_1FD) else "0";
    exitcond_i8_fu_1170_p2 <= "1" when (i_i7_reg_566 = ap_const_lv10_3FA) else "0";
    exitcond_i9_fu_803_p2 <= "1" when (i_i8_reg_467 = ap_const_lv9_1FD) else "0";
    exitcond_i_fu_959_p2 <= "1" when (i_i_reg_500 = ap_const_lv9_1FD) else "0";

    f_coeffs_address0_assign_proc : process(tmp_195_reg_1660, ap_CS_fsm_state7, ap_CS_fsm_state9, temp_r_coeffs_addr_8_reg_1746, temp_r_coeffs_addr_10_reg_1803, ap_CS_fsm_state15, ap_CS_fsm_state21, exitcond_i_fu_959_p2, done_reg_444, temp_r_coeffs_addr_12_reg_1859, ap_CS_fsm_state23, ap_CS_fsm_state45, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state44, tmp_365_i_fu_772_p1, tmp_112_i_fu_965_p1, tmp_114_i_fu_976_p1, tmp_208_fu_1165_p1, gepindex2_cast_fu_1230_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            f_coeffs_address0 <= gepindex2_cast_fu_1230_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            f_coeffs_address0 <= tmp_208_fu_1165_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            f_coeffs_address0 <= temp_r_coeffs_addr_12_reg_1859;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond_i_fu_959_p2 = ap_const_lv1_1)))) then 
            f_coeffs_address0 <= ap_const_lv64_1FC(9 - 1 downto 0);
        elsif (((done_reg_444 = ap_const_lv1_0) and (exitcond_i_fu_959_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            f_coeffs_address0 <= tmp_114_i_fu_976_p1(9 - 1 downto 0);
        elsif (((exitcond_i_fu_959_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21) and (done_reg_444 = ap_const_lv1_1))) then 
            f_coeffs_address0 <= tmp_112_i_fu_965_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            f_coeffs_address0 <= temp_r_coeffs_addr_10_reg_1803;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            f_coeffs_address0 <= temp_r_coeffs_addr_8_reg_1746;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            f_coeffs_address0 <= tmp_365_i_fu_772_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            f_coeffs_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            f_coeffs_address0 <= tmp_195_reg_1660(9 - 1 downto 0);
        else 
            f_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    f_coeffs_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state21, exitcond_i_fu_959_p2, done_reg_444, ap_CS_fsm_state23, ap_CS_fsm_state45, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond_i_fu_959_p2 = ap_const_lv1_1)) or ((done_reg_444 = ap_const_lv1_0) and (exitcond_i_fu_959_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((exitcond_i_fu_959_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21) and (done_reg_444 = ap_const_lv1_1)))) then 
            f_coeffs_ce0 <= ap_const_logic_1;
        else 
            f_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    f_coeffs_d0_assign_proc : process(r_coeffs_q0, ap_CS_fsm_state23, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state44, tmp_312_cast_fu_636_p1, tmp_367_i_fu_789_p2, tmp_212_fu_918_p2, tmp_115_i_fu_987_p3, tmp_111_i_fu_1003_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            f_coeffs_d0 <= r_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            f_coeffs_d0 <= tmp_111_i_fu_1003_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            f_coeffs_d0 <= tmp_115_i_fu_987_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            f_coeffs_d0 <= tmp_212_fu_918_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            f_coeffs_d0 <= tmp_367_i_fu_789_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            f_coeffs_d0 <= tmp_312_cast_fu_636_p1;
        else 
            f_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    f_coeffs_we0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            f_coeffs_we0 <= ap_const_logic_1;
        else 
            f_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    g_coeffs_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, g_coeffs_addr_4_reg_1751, ap_CS_fsm_state13, ap_CS_fsm_state10, tmp_196_fu_653_p1, tmp_365_i_fu_772_p1, tmp_209_fu_908_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            g_coeffs_address0 <= tmp_209_fu_908_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            g_coeffs_address0 <= g_coeffs_addr_4_reg_1751;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            g_coeffs_address0 <= tmp_365_i_fu_772_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            g_coeffs_address0 <= tmp_196_fu_653_p1(9 - 1 downto 0);
        else 
            g_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    g_coeffs_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            g_coeffs_ce0 <= ap_const_logic_1;
        else 
            g_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    g_coeffs_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, tmp_368_i_fu_796_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            g_coeffs_d0 <= tmp_368_i_fu_796_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            g_coeffs_d0 <= ap_const_lv16_1;
        else 
            g_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    g_coeffs_we0_assign_proc : process(ap_CS_fsm_state6, exitcond6_fu_641_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((exitcond6_fu_641_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            g_coeffs_we0 <= ap_const_logic_1;
        else 
            g_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    gepindex2335_cast_fu_1265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gepindex5_fu_1257_p3),64));
    gepindex2_cast_fu_1230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gepindex2_fu_1222_p3),64));
    gepindex2_fu_1222_p3 <= 
        gepindex_fu_1216_p2 when (addrCmp_fu_1210_p2(0) = '1') else 
        ap_const_lv9_1FC;
    gepindex4_fu_1251_p2 <= std_logic_vector(unsigned(ap_const_lv9_47) + unsigned(tmp_280_fu_1241_p1));
    gepindex5_fu_1257_p3 <= 
        gepindex4_fu_1251_p2 when (addrCmp2_fu_1245_p2(0) = '1') else 
        ap_const_lv9_1FC;
    gepindex_fu_1216_p2 <= std_logic_vector(unsigned(ap_const_lv9_41) + unsigned(tmp_262_fu_1206_p1));

    grp_fu_1142_ap_start_assign_proc : process(ap_CS_fsm_state30, exitcond_fu_1125_p2)
    begin
        if (((exitcond_fu_1125_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_1142_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1142_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1142_p0 <= std_logic_vector(unsigned(tmp_200_reg_1933) + unsigned(j_1_cast_fu_1121_p1));

    grp_fu_577_p0_assign_proc : process(start_pos_fu_1284_p3, start_pos_reg_1990, ap_CS_fsm_state46, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_577_p0 <= start_pos_reg_1990;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_577_p0 <= start_pos_fu_1284_p3;
        else 
            grp_fu_577_p0 <= "XXXX";
        end if; 
    end process;


    grp_fu_577_p1_assign_proc : process(ap_CS_fsm_state46, end_pos_fu_1292_p2, end_pos_reg_1996, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_577_p1 <= end_pos_reg_1996;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_577_p1 <= end_pos_fu_1292_p2;
        else 
            grp_fu_577_p1 <= "XXXX";
        end if; 
    end process;

    grp_fu_577_p2 <= "1" when (unsigned(grp_fu_577_p0) > unsigned(grp_fu_577_p1)) else "0";
    i_20_fu_766_p2 <= std_logic_vector(unsigned(i_i4_reg_456) + unsigned(ap_const_lv9_1));
    i_21_fu_809_p2 <= std_logic_vector(unsigned(i_i8_reg_467) + unsigned(ap_const_lv9_1));
    i_22_fu_902_p2 <= std_logic_vector(unsigned(i_4_reg_478) + unsigned(ap_const_lv9_1));
    i_23_fu_1176_p2 <= std_logic_vector(unsigned(i_i7_reg_566) + unsigned(ap_const_lv10_1));
    i_24_fu_931_p2 <= std_logic_vector(unsigned(i_5_reg_489) + unsigned(ap_const_lv9_1));
    i_25_fu_592_p2 <= std_logic_vector(unsigned(i_reg_353) + unsigned(ap_const_lv9_1));
    i_26_fu_604_p2 <= std_logic_vector(unsigned(i_1_reg_364) + unsigned(ap_const_lv9_1));
    i_27_fu_621_p2 <= std_logic_vector(unsigned(i_2_reg_375) + unsigned(ap_const_lv9_1));
    i_28_fu_647_p2 <= std_logic_vector(unsigned(i_3_reg_386) + unsigned(ap_const_lv9_1));
    i_29_fu_1088_p2 <= std_logic_vector(unsigned(i_6_reg_522) + unsigned(ap_const_lv9_1));
    i_30_fu_1109_p2 <= std_logic_vector(unsigned(i_7_reg_543) + unsigned(ap_const_lv4_1));
    i_31_fu_981_p2 <= std_logic_vector(unsigned(i_i_reg_500) + unsigned(ap_const_lv9_1));
    i_32_fu_1038_p2 <= std_logic_vector(unsigned(i_i2_reg_511) + unsigned(ap_const_lv9_1));
    i_7_cast_fu_1099_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_543),10));
    j_1_cast_fu_1121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_554),10));
    j_8_fu_664_p2 <= std_logic_vector(unsigned(j_reg_421) + unsigned(ap_const_lv10_1));
    j_9_fu_1131_p2 <= std_logic_vector(unsigned(j_1_reg_554) + unsigned(ap_const_lv9_1));
        k_6_cast_cast_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(k_6_fu_696_p2),30));

    k_6_fu_696_p2 <= std_logic_vector(unsigned(k_cast_fu_670_p1) - unsigned(tmp_319_cast_cast_fu_688_p3));
    k_7_fu_1048_p2 <= std_logic_vector(unsigned(s_assign_cast_reg_1717) + unsigned(k_reg_409));
    k_cast_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_409),11));
    mask_fu_1620_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv2_1),to_integer(unsigned('0' & tmp_316_fu_1617_p1(2-1 downto 0)))));
    mem_index_gep2_fu_1235_p2 <= std_logic_vector(signed(ap_const_lv15_5FB9) + signed(adjSize309_cast_fu_1196_p1));
    mem_index_gep_fu_1200_p2 <= std_logic_vector(signed(ap_const_lv15_5BBF) + signed(adjSize309_cast_fu_1196_p1));
    p_demorgan_fu_1604_p2 <= (tmp_314_fu_1598_p2 and tmp_313_fu_1592_p2);

    r_coeffs_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11, r_coeffs_addr_11_reg_1769, ap_CS_fsm_state17, done_reg_444, ap_CS_fsm_state24, exitcond_i3_fu_1010_p2, r_coeffs_addr_10_reg_1882, tmp_199_reg_1915, ap_CS_fsm_state43, ap_CS_fsm_state45, r_coeffs_addr_12_reg_1980, ap_CS_fsm_state26, ap_CS_fsm_state12, ap_CS_fsm_state25, ap_CS_fsm_state28, ap_CS_fsm_state47, tmp_s_fu_610_p1, tmp_365_i2_fu_815_p1, tmp_213_fu_937_p1, tmp_107_i_fu_1022_p1, tmp_109_i_fu_1033_p1, tmp_207_fu_1160_p1, gepindex2335_cast_fu_1265_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            r_coeffs_address0 <= r_coeffs_addr_12_reg_1980;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            r_coeffs_address0 <= gepindex2335_cast_fu_1265_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            r_coeffs_address0 <= tmp_207_fu_1160_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            r_coeffs_address0 <= tmp_199_reg_1915(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            r_coeffs_address0 <= r_coeffs_addr_10_reg_1882;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond_i3_fu_1010_p2 = ap_const_lv1_1)))) then 
            r_coeffs_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif (((exitcond_i3_fu_1010_p2 = ap_const_lv1_0) and (done_reg_444 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            r_coeffs_address0 <= tmp_109_i_fu_1033_p1(9 - 1 downto 0);
        elsif (((exitcond_i3_fu_1010_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24) and (done_reg_444 = ap_const_lv1_1))) then 
            r_coeffs_address0 <= tmp_107_i_fu_1022_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_coeffs_address0 <= tmp_213_fu_937_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            r_coeffs_address0 <= r_coeffs_addr_11_reg_1769;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_coeffs_address0 <= tmp_365_i2_fu_815_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_coeffs_address0 <= tmp_s_fu_610_p1(9 - 1 downto 0);
        else 
            r_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    r_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state17, done_reg_444, ap_CS_fsm_state24, exitcond_i3_fu_1010_p2, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state26, ap_CS_fsm_state12, ap_CS_fsm_state25, ap_CS_fsm_state28, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond_i3_fu_1010_p2 = ap_const_lv1_1)) or ((exitcond_i3_fu_1010_p2 = ap_const_lv1_0) and (done_reg_444 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((exitcond_i3_fu_1010_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24) and (done_reg_444 = ap_const_lv1_1)))) then 
            r_coeffs_ce0 <= ap_const_logic_1;
        else 
            r_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_d0_assign_proc : process(ap_CS_fsm_state3, b_coeffs_q0, ap_CS_fsm_state26, ap_CS_fsm_state12, ap_CS_fsm_state25, ap_CS_fsm_state28, ap_CS_fsm_state47, tmp_368_i2_fu_889_p2, tmp_110_i_fu_1067_p3, tmp_105_i_fu_1076_p2, tmp_315_fu_1610_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            r_coeffs_d0 <= tmp_315_fu_1610_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            r_coeffs_d0 <= b_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            r_coeffs_d0 <= tmp_105_i_fu_1076_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            r_coeffs_d0 <= tmp_110_i_fu_1067_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            r_coeffs_d0 <= tmp_368_i2_fu_889_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_coeffs_d0 <= ap_const_lv16_0;
        else 
            r_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_we0_assign_proc : process(ap_CS_fsm_state3, exitcond8_fu_598_p2, ap_CS_fsm_state26, ap_CS_fsm_state12, ap_CS_fsm_state25, ap_CS_fsm_state28, ap_CS_fsm_state47, mask_fu_1620_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            r_coeffs_we0 <= mask_fu_1620_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((exitcond8_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            r_coeffs_we0 <= ap_const_lv2_3;
        else 
            r_coeffs_we0 <= ap_const_lv2_0;
        end if; 
    end process;

    s_assign_cast_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(done_reg_444),10));
    start_pos_fu_1284_p3 <= (tmp_261_reg_1969 & ap_const_lv3_0);
    swap_fu_746_p2 <= (tmp_258_fu_728_p3 and tmp21_fu_740_p2);
    t_2_fu_877_p2 <= (tmp_i3_cast_reg_1732 and tmp_366_i2_fu_871_p2);
    t_fu_784_p2 <= (tmp_i3_cast_reg_1732 and tmp_366_i_fu_778_p2);
    tmp21_fu_740_p2 <= (tmp_257_fu_706_p1 and done_reg_444);
    tmp22_fu_827_p2 <= (tmp_258_reg_1722 and done_reg_444);
    tmp_105_i_fu_1076_p2 <= (tmp_i_70_reg_1869 and r_coeffs_q0);
    tmp_106_i_fu_1016_p2 <= std_logic_vector(signed(ap_const_lv9_1FC) - signed(i_i2_reg_511));
    tmp_107_i_fu_1022_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_106_i_fu_1016_p2),64));
    tmp_108_i_fu_1027_p2 <= std_logic_vector(signed(ap_const_lv9_1FD) - signed(i_i2_reg_511));
    tmp_109_i_fu_1033_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_108_i_fu_1027_p2),64));
    tmp_110_i_fu_1067_p3 <= 
        r_coeffs_q0 when (done_reg_444(0) = '1') else 
        r_coeffs_q0;
    tmp_111_i_fu_1003_p2 <= (tmp_i_70_fu_996_p3 and f_coeffs_q0);
    tmp_112_i_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_500),64));
    tmp_113_i_fu_970_p2 <= std_logic_vector(unsigned(i_i_reg_500) + unsigned(ap_const_lv9_1FF));
    tmp_114_i_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_113_i_fu_970_p2),64));
    tmp_115_i_fu_987_p3 <= 
        f_coeffs_q0 when (done_reg_444(0) = '1') else 
        f_coeffs_q0;
    tmp_195_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_375),64));
    tmp_196_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_386),64));
    tmp_197_fu_674_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FC) - unsigned(k_reg_409));
    tmp_198_fu_722_p2 <= std_logic_vector(unsigned(tmp_322_cast_fu_714_p1) - unsigned(tmp_323_cast_fu_718_p1));
    tmp_199_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_522),64));
    tmp_200_fu_1115_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv10_1),to_integer(unsigned('0' & i_7_cast_fu_1099_p1(10-1 downto 0)))));
    tmp_201_fu_821_p2 <= (degg_reg_432 xor degf_reg_397);
    tmp_202_fu_832_p2 <= (tmp_257_reg_1712 and tmp22_fu_827_p2);
    tmp_203_fu_845_p2 <= (tmp_329_cast_fu_837_p3 and tmp_201_fu_821_p2);
    tmp_204_fu_863_p3 <= 
        ap_const_lv16_FFFF when (done_reg_444(0) = '1') else 
        ap_const_lv16_0;
    tmp_207_fu_1160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1142_p2),64));
    tmp_208_fu_1165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_554),64));
    tmp_209_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_478),64));
    tmp_211_fu_914_p2 <= (tmp_210_reg_1813 and tmp_204_reg_1784);
    tmp_212_fu_918_p2 <= (tmp_211_fu_914_p2 xor f_coeffs_q0);
    tmp_213_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_489),64));
    tmp_215_fu_949_p2 <= (tmp_214_fu_1631_p2 and tmp_204_reg_1784);
    tmp_216_fu_953_p2 <= (tmp_215_fu_949_p2 xor b_coeffs_q0);
    tmp_217_fu_1053_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(degf_4_fu_1044_p2));
    tmp_255_fu_632_p1 <= a_coeffs_q0(1 - 1 downto 0);
    tmp_256_fu_680_p3 <= tmp_197_fu_674_p2(9 downto 9);
    tmp_257_fu_706_p0 <= f_coeffs_q0;
    tmp_257_fu_706_p1 <= tmp_257_fu_706_p0(1 - 1 downto 0);
    tmp_258_fu_728_p3 <= tmp_198_fu_722_p2(15 downto 15);
    tmp_259_fu_1148_p1 <= k_1_reg_533(1 - 1 downto 0);
    tmp_260_fu_1270_p4 <= k_1_reg_533(29 downto 1);
    tmp_261_fu_1182_p1 <= i_i7_reg_566(1 - 1 downto 0);
    tmp_262_fu_1206_p1 <= mem_index_gep_fu_1200_p2(9 - 1 downto 0);
    tmp_264_fu_1299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos_fu_1284_p3),5));
    tmp_265_fu_1303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos_fu_1292_p2),5));
    
    tmp_266_fu_1307_p4_proc : process(f_coeffs_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_266_fu_1307_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := f_coeffs_q0;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for tmp_266_fu_1307_p4_i in 0 to 16-1 loop
                v0_cpy(tmp_266_fu_1307_p4_i) := f_coeffs_q0(16-1-tmp_266_fu_1307_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_266_fu_1307_p4 <= resvalue(16-1 downto 0);
    end process;

    tmp_267_fu_1317_p2 <= std_logic_vector(unsigned(tmp_264_fu_1299_p1) - unsigned(tmp_265_fu_1303_p1));
    tmp_268_fu_1323_p2 <= (tmp_264_fu_1299_p1 xor ap_const_lv5_F);
    tmp_269_fu_1329_p2 <= std_logic_vector(unsigned(tmp_265_fu_1303_p1) - unsigned(tmp_264_fu_1299_p1));
    tmp_270_fu_1335_p3 <= 
        tmp_267_fu_1317_p2 when (grp_fu_577_p2(0) = '1') else 
        tmp_269_fu_1329_p2;
    tmp_271_fu_1343_p3 <= 
        tmp_266_fu_1307_p4 when (grp_fu_577_p2(0) = '1') else 
        f_coeffs_q0;
    tmp_272_fu_1351_p3 <= 
        tmp_268_fu_1323_p2 when (grp_fu_577_p2(0) = '1') else 
        tmp_264_fu_1299_p1;
    tmp_273_fu_1359_p2 <= std_logic_vector(unsigned(ap_const_lv5_F) - unsigned(tmp_270_fu_1335_p3));
    tmp_274_fu_1365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_272_fu_1351_p3),16));
    tmp_275_fu_1477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_273_reg_2002),16));
    tmp_276_fu_1369_p2 <= std_logic_vector(shift_right(unsigned(tmp_271_fu_1343_p3),to_integer(unsigned('0' & tmp_274_fu_1365_p1(16-1 downto 0)))));
    tmp_277_fu_1480_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & tmp_275_fu_1477_p1(16-1 downto 0)))));
    tmp_278_fu_1486_p2 <= (tmp_277_fu_1480_p2 and tmp_276_reg_2007);
    tmp_279_fu_1491_p1 <= tmp_278_fu_1486_p2(8 - 1 downto 0);
    tmp_280_fu_1241_p1 <= mem_index_gep2_fu_1235_p2(9 - 1 downto 0);
    tmp_281_fu_1375_p2 <= "1" when (unsigned(start_pos_fu_1284_p3) > unsigned(end_pos_fu_1292_p2)) else "0";
    tmp_282_fu_1381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos_fu_1284_p3),5));
    tmp_283_fu_1385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos_fu_1292_p2),5));
    
    tmp_284_fu_1389_p4_proc : process(r_coeffs_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_284_fu_1389_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := r_coeffs_q0;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for tmp_284_fu_1389_p4_i in 0 to 16-1 loop
                v0_cpy(tmp_284_fu_1389_p4_i) := r_coeffs_q0(16-1-tmp_284_fu_1389_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_284_fu_1389_p4 <= resvalue(16-1 downto 0);
    end process;

    tmp_285_fu_1399_p2 <= std_logic_vector(unsigned(tmp_282_fu_1381_p1) - unsigned(tmp_283_fu_1385_p1));
    tmp_286_fu_1405_p2 <= (tmp_282_fu_1381_p1 xor ap_const_lv5_F);
    tmp_287_fu_1411_p2 <= std_logic_vector(unsigned(tmp_283_fu_1385_p1) - unsigned(tmp_282_fu_1381_p1));
    tmp_288_fu_1417_p3 <= 
        tmp_285_fu_1399_p2 when (tmp_281_fu_1375_p2(0) = '1') else 
        tmp_287_fu_1411_p2;
    tmp_289_fu_1425_p3 <= 
        tmp_284_fu_1389_p4 when (tmp_281_fu_1375_p2(0) = '1') else 
        r_coeffs_q0;
    tmp_290_fu_1433_p3 <= 
        tmp_286_fu_1405_p2 when (tmp_281_fu_1375_p2(0) = '1') else 
        tmp_282_fu_1381_p1;
    tmp_291_fu_1441_p2 <= std_logic_vector(unsigned(ap_const_lv5_F) - unsigned(tmp_288_fu_1417_p3));
    tmp_292_fu_1447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_290_fu_1433_p3),16));
    tmp_293_fu_1451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_291_fu_1441_p2),16));
    tmp_294_fu_1455_p2 <= std_logic_vector(shift_right(unsigned(tmp_289_fu_1425_p3),to_integer(unsigned('0' & tmp_292_fu_1447_p1(16-1 downto 0)))));
    tmp_295_fu_1461_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & tmp_293_fu_1451_p1(16-1 downto 0)))));
    tmp_296_fu_1467_p2 <= (tmp_295_fu_1461_p2 and tmp_294_fu_1455_p2);
    tmp_297_fu_1473_p1 <= tmp_296_fu_1467_p2(8 - 1 downto 0);
    tmp_299_fu_1510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos_reg_1990),5));
    tmp_300_fu_1513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos_reg_1996),5));
    tmp_301_fu_1516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_391_i_fu_1505_p2),16));
    tmp_302_fu_1520_p2 <= (tmp_299_fu_1510_p1 xor ap_const_lv5_F);
    tmp_303_fu_1526_p3 <= 
        tmp_299_fu_1510_p1 when (grp_fu_577_p2(0) = '1') else 
        tmp_300_fu_1513_p1;
    tmp_304_fu_1534_p3 <= 
        tmp_300_fu_1513_p1 when (grp_fu_577_p2(0) = '1') else 
        tmp_299_fu_1510_p1;
    tmp_305_fu_1542_p3 <= 
        tmp_302_fu_1520_p2 when (grp_fu_577_p2(0) = '1') else 
        tmp_299_fu_1510_p1;
    tmp_306_fu_1550_p2 <= (tmp_303_fu_1526_p3 xor ap_const_lv5_F);
    tmp_307_fu_1556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_305_fu_1542_p3),16));
    tmp_308_fu_1560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_304_fu_1534_p3),16));
    tmp_309_fu_1564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_306_fu_1550_p2),16));
    tmp_310_fu_1568_p2 <= std_logic_vector(shift_left(unsigned(tmp_301_fu_1516_p1),to_integer(unsigned('0' & tmp_307_fu_1556_p1(16-1 downto 0)))));
    
    tmp_311_fu_1574_p4_proc : process(tmp_310_fu_1568_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_311_fu_1574_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_310_fu_1568_p2;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for tmp_311_fu_1574_p4_i in 0 to 16-1 loop
                v0_cpy(tmp_311_fu_1574_p4_i) := tmp_310_fu_1568_p2(16-1-tmp_311_fu_1574_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_311_fu_1574_p4 <= resvalue(16-1 downto 0);
    end process;

    tmp_312_cast_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_255_fu_632_p1),16));
    tmp_312_fu_1584_p3 <= 
        tmp_311_fu_1574_p4 when (grp_fu_577_p2(0) = '1') else 
        tmp_310_fu_1568_p2;
    tmp_313_fu_1592_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & tmp_308_fu_1560_p1(16-1 downto 0)))));
    tmp_314_fu_1598_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & tmp_309_fu_1564_p1(16-1 downto 0)))));
    tmp_315_fu_1610_p2 <= (tmp_312_fu_1584_p3 and p_demorgan_fu_1604_p2);
    tmp_316_fu_1617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_261_reg_1969),2));
    tmp_319_cast_cast_fu_688_p3 <= 
        ap_const_lv11_1FD when (tmp_256_fu_680_p3(0) = '1') else 
        ap_const_lv11_0;
    tmp_322_cast_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(degf_reg_397),17));
    tmp_323_cast_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(degg_reg_432),17));
    tmp_329_cast_fu_837_p3 <= 
        ap_const_lv16_FFFF when (tmp_202_fu_832_p2(0) = '1') else 
        ap_const_lv16_0;
    tmp_365_i2_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i8_reg_467),64));
    tmp_365_i_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i4_reg_456),64));
    tmp_366_i2_fu_871_p2 <= (r_coeffs_q0 xor b_coeffs_q0);
    tmp_366_i_fu_778_p2 <= (g_coeffs_q0 xor f_coeffs_q0);
    tmp_367_i2_fu_882_p2 <= (t_2_fu_877_p2 xor b_coeffs_q0);
    tmp_367_i_fu_789_p2 <= (t_fu_784_p2 xor f_coeffs_q0);
    tmp_368_i2_fu_889_p2 <= (t_2_fu_877_p2 xor r_coeffs_q0);
    tmp_368_i_fu_796_p2 <= (t_fu_784_p2 xor g_coeffs_q0);
    tmp_391_i_fu_1505_p2 <= (tmp_i2_fu_1500_p2 xor tmp_297_reg_2012);
        tmp_48_fu_1280_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_260_fu_1270_p4),30));

    tmp_67_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(done_reg_444),16));
    tmp_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_353),64));
    tmp_i2_fu_1500_p2 <= (tmp_i9_fu_1495_p2 and b_assign_2_cast_reg_1951);
    tmp_i3_cast_fu_752_p3 <= 
        ap_const_lv16_FFFF when (swap_fu_746_p2(0) = '1') else 
        ap_const_lv16_0;
    tmp_i9_fu_1495_p2 <= (tmp_297_reg_2012 xor tmp_279_fu_1491_p1);
    tmp_i_70_fu_996_p3 <= 
        ap_const_lv16_FFFF when (tmp_i_reg_1836(0) = '1') else 
        ap_const_lv16_0;
    tmp_i_fu_943_p2 <= (done_reg_444 xor ap_const_lv1_1);
    tmp_s_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_364),64));
end behav;
