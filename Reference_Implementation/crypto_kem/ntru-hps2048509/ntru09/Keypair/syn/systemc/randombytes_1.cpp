// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "randombytes_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic randombytes_1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic randombytes_1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> randombytes_1::ap_ST_fsm_state1 = "1";
const sc_lv<10> randombytes_1::ap_ST_fsm_state2 = "10";
const sc_lv<10> randombytes_1::ap_ST_fsm_state3 = "100";
const sc_lv<10> randombytes_1::ap_ST_fsm_state4 = "1000";
const sc_lv<10> randombytes_1::ap_ST_fsm_state5 = "10000";
const sc_lv<10> randombytes_1::ap_ST_fsm_state6 = "100000";
const sc_lv<10> randombytes_1::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> randombytes_1::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> randombytes_1::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> randombytes_1::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> randombytes_1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> randombytes_1::ap_const_lv32_1 = "1";
const sc_lv<32> randombytes_1::ap_const_lv32_2 = "10";
const sc_lv<1> randombytes_1::ap_const_lv1_0 = "0";
const sc_lv<32> randombytes_1::ap_const_lv32_3 = "11";
const sc_lv<1> randombytes_1::ap_const_lv1_1 = "1";
const sc_lv<32> randombytes_1::ap_const_lv32_5 = "101";
const sc_lv<32> randombytes_1::ap_const_lv32_6 = "110";
const sc_lv<5> randombytes_1::ap_const_lv5_F = "1111";
const sc_lv<32> randombytes_1::ap_const_lv32_7 = "111";
const sc_lv<5> randombytes_1::ap_const_lv5_0 = "00000";
const sc_lv<32> randombytes_1::ap_const_lv32_8 = "1000";
const sc_lv<4> randombytes_1::ap_const_lv4_0 = "0000";
const sc_lv<32> randombytes_1::ap_const_lv32_9 = "1001";
const sc_lv<32> randombytes_1::ap_const_lv32_4 = "100";
const sc_lv<64> randombytes_1::ap_const_lv64_20 = "100000";
const sc_lv<64> randombytes_1::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<8> randombytes_1::ap_const_lv8_0 = "00000000";
const sc_lv<8> randombytes_1::ap_const_lv8_FF = "11111111";
const sc_lv<5> randombytes_1::ap_const_lv5_1F = "11111";
const sc_lv<8> randombytes_1::ap_const_lv8_1 = "1";
const sc_lv<32> randombytes_1::ap_const_lv32_3F = "111111";
const sc_lv<60> randombytes_1::ap_const_lv60_0 = "000000000000000000000000000000000000000000000000000000000000";
const sc_lv<5> randombytes_1::ap_const_lv5_10 = "10000";
const sc_lv<5> randombytes_1::ap_const_lv5_1 = "1";
const sc_lv<32> randombytes_1::ap_const_lv32_10 = "10000";
const sc_lv<64> randombytes_1::ap_const_lv64_FFFFFFFFFFFFFFF0 = "1111111111111111111111111111111111111111111111111111111111110000";
const sc_lv<4> randombytes_1::ap_const_lv4_1 = "1";
const sc_lv<11> randombytes_1::ap_const_lv11_387 = "1110000111";
const bool randombytes_1::ap_const_boolean_1 = true;

randombytes_1::randombytes_1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    block_U = new randombytes_block("block_U");
    block_U->clk(ap_clk);
    block_U->reset(ap_rst);
    block_U->address0(block_address0);
    block_U->ce0(block_ce0);
    block_U->we0(block_we0);
    block_U->d0(grp_AES256_ECB_1_fu_185_buffer_r_d0);
    block_U->q0(block_q0);
    block_U->address1(grp_AES256_ECB_1_fu_185_buffer_r_address1);
    block_U->ce1(block_ce1);
    block_U->we1(block_we1);
    block_U->d1(grp_AES256_ECB_1_fu_185_buffer_r_d1);
    grp_AES256_CTR_DRBG_Upda_fu_173 = new AES256_CTR_DRBG_Upda("grp_AES256_CTR_DRBG_Upda_fu_173");
    grp_AES256_CTR_DRBG_Upda_fu_173->ap_clk(ap_clk);
    grp_AES256_CTR_DRBG_Upda_fu_173->ap_rst(ap_rst);
    grp_AES256_CTR_DRBG_Upda_fu_173->ap_start(grp_AES256_CTR_DRBG_Upda_fu_173_ap_start);
    grp_AES256_CTR_DRBG_Upda_fu_173->ap_done(grp_AES256_CTR_DRBG_Upda_fu_173_ap_done);
    grp_AES256_CTR_DRBG_Upda_fu_173->ap_idle(grp_AES256_CTR_DRBG_Upda_fu_173_ap_idle);
    grp_AES256_CTR_DRBG_Upda_fu_173->ap_ready(grp_AES256_CTR_DRBG_Upda_fu_173_ap_ready);
    grp_AES256_CTR_DRBG_Upda_fu_173->V_address0(grp_AES256_CTR_DRBG_Upda_fu_173_V_address0);
    grp_AES256_CTR_DRBG_Upda_fu_173->V_ce0(grp_AES256_CTR_DRBG_Upda_fu_173_V_ce0);
    grp_AES256_CTR_DRBG_Upda_fu_173->V_we0(grp_AES256_CTR_DRBG_Upda_fu_173_V_we0);
    grp_AES256_CTR_DRBG_Upda_fu_173->V_d0(grp_AES256_CTR_DRBG_Upda_fu_173_V_d0);
    grp_AES256_CTR_DRBG_Upda_fu_173->V_q0(DRBG_ctx_V_q0);
    grp_AES256_CTR_DRBG_Upda_fu_173->V_address1(grp_AES256_CTR_DRBG_Upda_fu_173_V_address1);
    grp_AES256_CTR_DRBG_Upda_fu_173->V_ce1(grp_AES256_CTR_DRBG_Upda_fu_173_V_ce1);
    grp_AES256_CTR_DRBG_Upda_fu_173->V_q1(DRBG_ctx_V_q1);
    grp_AES256_CTR_DRBG_Upda_fu_173->DRBG_ctx_Key_address0(grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_address0);
    grp_AES256_CTR_DRBG_Upda_fu_173->DRBG_ctx_Key_ce0(grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_ce0);
    grp_AES256_CTR_DRBG_Upda_fu_173->DRBG_ctx_Key_we0(grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_we0);
    grp_AES256_CTR_DRBG_Upda_fu_173->DRBG_ctx_Key_d0(grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_d0);
    grp_AES256_CTR_DRBG_Upda_fu_173->DRBG_ctx_Key_q0(DRBG_ctx_Key_q0);
    grp_AES256_CTR_DRBG_Upda_fu_173->DRBG_ctx_Key_address1(grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_address1);
    grp_AES256_CTR_DRBG_Upda_fu_173->DRBG_ctx_Key_ce1(grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_ce1);
    grp_AES256_CTR_DRBG_Upda_fu_173->DRBG_ctx_Key_q1(DRBG_ctx_Key_q1);
    grp_AES256_ECB_1_fu_185 = new AES256_ECB_1("grp_AES256_ECB_1_fu_185");
    grp_AES256_ECB_1_fu_185->ap_clk(ap_clk);
    grp_AES256_ECB_1_fu_185->ap_rst(ap_rst);
    grp_AES256_ECB_1_fu_185->ap_start(grp_AES256_ECB_1_fu_185_ap_start);
    grp_AES256_ECB_1_fu_185->ap_done(grp_AES256_ECB_1_fu_185_ap_done);
    grp_AES256_ECB_1_fu_185->ap_idle(grp_AES256_ECB_1_fu_185_ap_idle);
    grp_AES256_ECB_1_fu_185->ap_ready(grp_AES256_ECB_1_fu_185_ap_ready);
    grp_AES256_ECB_1_fu_185->key_address0(grp_AES256_ECB_1_fu_185_key_address0);
    grp_AES256_ECB_1_fu_185->key_ce0(grp_AES256_ECB_1_fu_185_key_ce0);
    grp_AES256_ECB_1_fu_185->key_q0(DRBG_ctx_Key_q0);
    grp_AES256_ECB_1_fu_185->key_address1(grp_AES256_ECB_1_fu_185_key_address1);
    grp_AES256_ECB_1_fu_185->key_ce1(grp_AES256_ECB_1_fu_185_key_ce1);
    grp_AES256_ECB_1_fu_185->key_q1(DRBG_ctx_Key_q1);
    grp_AES256_ECB_1_fu_185->ctr_address0(grp_AES256_ECB_1_fu_185_ctr_address0);
    grp_AES256_ECB_1_fu_185->ctr_ce0(grp_AES256_ECB_1_fu_185_ctr_ce0);
    grp_AES256_ECB_1_fu_185->ctr_q0(DRBG_ctx_V_q0);
    grp_AES256_ECB_1_fu_185->ctr_address1(grp_AES256_ECB_1_fu_185_ctr_address1);
    grp_AES256_ECB_1_fu_185->ctr_ce1(grp_AES256_ECB_1_fu_185_ctr_ce1);
    grp_AES256_ECB_1_fu_185->ctr_q1(DRBG_ctx_V_q1);
    grp_AES256_ECB_1_fu_185->buffer_r_address0(grp_AES256_ECB_1_fu_185_buffer_r_address0);
    grp_AES256_ECB_1_fu_185->buffer_r_ce0(grp_AES256_ECB_1_fu_185_buffer_r_ce0);
    grp_AES256_ECB_1_fu_185->buffer_r_we0(grp_AES256_ECB_1_fu_185_buffer_r_we0);
    grp_AES256_ECB_1_fu_185->buffer_r_d0(grp_AES256_ECB_1_fu_185_buffer_r_d0);
    grp_AES256_ECB_1_fu_185->buffer_r_address1(grp_AES256_ECB_1_fu_185_buffer_r_address1);
    grp_AES256_ECB_1_fu_185->buffer_r_ce1(grp_AES256_ECB_1_fu_185_buffer_r_ce1);
    grp_AES256_ECB_1_fu_185->buffer_r_we1(grp_AES256_ECB_1_fu_185_buffer_r_we1);
    grp_AES256_ECB_1_fu_185->buffer_r_d1(grp_AES256_ECB_1_fu_185_buffer_r_d1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_DRBG_ctx_Key_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_address0 );
    sensitive << ( grp_AES256_ECB_1_fu_185_key_address0 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_DRBG_ctx_Key_address1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_address1 );
    sensitive << ( grp_AES256_ECB_1_fu_185_key_address1 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_DRBG_ctx_Key_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_ce0 );
    sensitive << ( grp_AES256_ECB_1_fu_185_key_ce0 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_DRBG_ctx_Key_ce1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_ce1 );
    sensitive << ( grp_AES256_ECB_1_fu_185_key_ce1 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_DRBG_ctx_Key_d0);
    sensitive << ( grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_d0 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_DRBG_ctx_Key_we0);
    sensitive << ( grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_we0 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_DRBG_ctx_V_address0);
    sensitive << ( DRBG_ctx_V_addr_reg_418 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_39_fu_237_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AES256_CTR_DRBG_Upda_fu_173_V_address0 );
    sensitive << ( grp_AES256_ECB_1_fu_185_ctr_address0 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_38_fu_232_p1 );

    SC_METHOD(thread_DRBG_ctx_V_address1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AES256_CTR_DRBG_Upda_fu_173_V_address1 );
    sensitive << ( grp_AES256_ECB_1_fu_185_ctr_address1 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_DRBG_ctx_V_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_39_fu_237_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AES256_CTR_DRBG_Upda_fu_173_V_ce0 );
    sensitive << ( grp_AES256_ECB_1_fu_185_ctr_ce0 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_DRBG_ctx_V_ce1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AES256_CTR_DRBG_Upda_fu_173_V_ce1 );
    sensitive << ( grp_AES256_ECB_1_fu_185_ctr_ce1 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_DRBG_ctx_V_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_39_fu_237_p2 );
    sensitive << ( grp_AES256_CTR_DRBG_Upda_fu_173_V_d0 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_40_fu_249_p2 );

    SC_METHOD(thread_DRBG_ctx_V_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_39_fu_237_p2 );
    sensitive << ( grp_AES256_CTR_DRBG_Upda_fu_173_V_we0 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_DRBG_ctx_reseed_counter_o);
    sensitive << ( DRBG_ctx_reseed_counter_i );
    sensitive << ( grp_AES256_CTR_DRBG_Upda_fu_173_ap_done );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_s_fu_378_p2 );

    SC_METHOD(thread_DRBG_ctx_reseed_counter_o_ap_vld);
    sensitive << ( grp_AES256_CTR_DRBG_Upda_fu_173_ap_done );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_AES256_CTR_DRBG_Upda_fu_173_ap_done );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_AES256_CTR_DRBG_Upda_fu_173_ap_done );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_block_address0);
    sensitive << ( icmp_reg_431 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( exitcond_fu_275_p2 );
    sensitive << ( tmp_43_fu_318_p2 );
    sensitive << ( grp_AES256_ECB_1_fu_185_buffer_r_address0 );
    sensitive << ( tmp_44_fu_287_p1 );
    sensitive << ( tmp_41_fu_313_p1 );

    SC_METHOD(thread_block_ce0);
    sensitive << ( icmp_reg_431 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( exitcond_fu_275_p2 );
    sensitive << ( tmp_43_fu_318_p2 );
    sensitive << ( grp_AES256_ECB_1_fu_185_buffer_r_ce0 );

    SC_METHOD(thread_block_ce1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AES256_ECB_1_fu_185_buffer_r_ce1 );

    SC_METHOD(thread_block_we0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AES256_ECB_1_fu_185_buffer_r_we0 );

    SC_METHOD(thread_block_we1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AES256_ECB_1_fu_185_buffer_r_we1 );

    SC_METHOD(thread_exitcond_fu_275_p2);
    sensitive << ( icmp_reg_431 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( loop_reg_149 );

    SC_METHOD(thread_grp_AES256_CTR_DRBG_Upda_fu_173_ap_start);
    sensitive << ( grp_AES256_CTR_DRBG_Upda_fu_173_ap_start_reg );

    SC_METHOD(thread_grp_AES256_ECB_1_fu_185_ap_start);
    sensitive << ( grp_AES256_ECB_1_fu_185_ap_start_reg );

    SC_METHOD(thread_i_8_fu_292_p2);
    sensitive << ( i_fu_74 );

    SC_METHOD(thread_icmp_fu_265_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AES256_ECB_1_fu_185_ap_done );
    sensitive << ( tmp_46_fu_256_p4 );

    SC_METHOD(thread_j_1_fu_243_p2);
    sensitive << ( j_reg_137 );

    SC_METHOD(thread_j_cast_fu_220_p1);
    sensitive << ( j_reg_137 );

    SC_METHOD(thread_loop_1_fu_281_p2);
    sensitive << ( loop_reg_149 );

    SC_METHOD(thread_loop_2_fu_323_p2);
    sensitive << ( loop1_reg_161 );

    SC_METHOD(thread_sum2_cast_fu_369_p1);
    sensitive << ( sum2_fu_363_p2 );

    SC_METHOD(thread_sum2_fu_363_p2);
    sensitive << ( tmp_104_cast_fu_358_p2 );

    SC_METHOD(thread_sum_cast_fu_349_p1);
    sensitive << ( sum_fu_343_p2 );

    SC_METHOD(thread_sum_fu_343_p2);
    sensitive << ( tmp_102_cast_fu_338_p2 );

    SC_METHOD(thread_tmp_102_cast_fu_338_p2);
    sensitive << ( tmp_47_reg_435 );
    sensitive << ( tmp_36_fu_334_p1 );

    SC_METHOD(thread_tmp_104_cast_fu_358_p2);
    sensitive << ( tmp_47_reg_435 );
    sensitive << ( tmp_37_fu_354_p1 );

    SC_METHOD(thread_tmp_36_fu_334_p1);
    sensitive << ( loop_reg_149 );

    SC_METHOD(thread_tmp_37_fu_354_p1);
    sensitive << ( loop1_reg_161 );

    SC_METHOD(thread_tmp_38_fu_232_p1);
    sensitive << ( j_cast_fu_220_p1 );

    SC_METHOD(thread_tmp_39_fu_237_p2);
    sensitive << ( DRBG_ctx_V_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp_40_fu_249_p2);
    sensitive << ( DRBG_ctx_V_q0 );

    SC_METHOD(thread_tmp_41_fu_313_p1);
    sensitive << ( loop1_reg_161 );

    SC_METHOD(thread_tmp_42_fu_224_p3);
    sensitive << ( j_reg_137 );

    SC_METHOD(thread_tmp_43_fu_318_p2);
    sensitive << ( p_0_load_reg_405 );
    sensitive << ( icmp_reg_431 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_41_fu_313_p1 );

    SC_METHOD(thread_tmp_44_fu_287_p1);
    sensitive << ( loop_reg_149 );

    SC_METHOD(thread_tmp_46_fu_256_p4);
    sensitive << ( p_0_load_reg_405 );

    SC_METHOD(thread_tmp_47_fu_271_p1);
    sensitive << ( i_fu_74 );

    SC_METHOD(thread_tmp_fu_214_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_0_fu_70 );

    SC_METHOD(thread_tmp_s_fu_378_p2);
    sensitive << ( DRBG_ctx_reseed_counter_i );

    SC_METHOD(thread_x_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( sum_cast_fu_349_p1 );
    sensitive << ( sum2_cast_fu_369_p1 );

    SC_METHOD(thread_x_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_x_d0);
    sensitive << ( block_q0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_x_we0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_xlen_assign_fu_298_p2);
    sensitive << ( p_0_load_reg_405 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_42_fu_224_p3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_39_fu_237_p2 );
    sensitive << ( icmp_reg_431 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_AES256_ECB_1_fu_185_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( exitcond_fu_275_p2 );
    sensitive << ( tmp_43_fu_318_p2 );
    sensitive << ( grp_AES256_CTR_DRBG_Upda_fu_173_ap_done );
    sensitive << ( tmp_fu_214_p2 );
    sensitive << ( ap_CS_fsm_state10 );

    ap_CS_fsm = "0000000001";
    grp_AES256_CTR_DRBG_Upda_fu_173_ap_start_reg = SC_LOGIC_0;
    grp_AES256_ECB_1_fu_185_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "randombytes_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x_address0, "(port)x_address0");
    sc_trace(mVcdFile, x_ce0, "(port)x_ce0");
    sc_trace(mVcdFile, x_we0, "(port)x_we0");
    sc_trace(mVcdFile, x_d0, "(port)x_d0");
    sc_trace(mVcdFile, DRBG_ctx_V_address0, "(port)DRBG_ctx_V_address0");
    sc_trace(mVcdFile, DRBG_ctx_V_ce0, "(port)DRBG_ctx_V_ce0");
    sc_trace(mVcdFile, DRBG_ctx_V_we0, "(port)DRBG_ctx_V_we0");
    sc_trace(mVcdFile, DRBG_ctx_V_d0, "(port)DRBG_ctx_V_d0");
    sc_trace(mVcdFile, DRBG_ctx_V_q0, "(port)DRBG_ctx_V_q0");
    sc_trace(mVcdFile, DRBG_ctx_V_address1, "(port)DRBG_ctx_V_address1");
    sc_trace(mVcdFile, DRBG_ctx_V_ce1, "(port)DRBG_ctx_V_ce1");
    sc_trace(mVcdFile, DRBG_ctx_V_q1, "(port)DRBG_ctx_V_q1");
    sc_trace(mVcdFile, DRBG_ctx_Key_address0, "(port)DRBG_ctx_Key_address0");
    sc_trace(mVcdFile, DRBG_ctx_Key_ce0, "(port)DRBG_ctx_Key_ce0");
    sc_trace(mVcdFile, DRBG_ctx_Key_we0, "(port)DRBG_ctx_Key_we0");
    sc_trace(mVcdFile, DRBG_ctx_Key_d0, "(port)DRBG_ctx_Key_d0");
    sc_trace(mVcdFile, DRBG_ctx_Key_q0, "(port)DRBG_ctx_Key_q0");
    sc_trace(mVcdFile, DRBG_ctx_Key_address1, "(port)DRBG_ctx_Key_address1");
    sc_trace(mVcdFile, DRBG_ctx_Key_ce1, "(port)DRBG_ctx_Key_ce1");
    sc_trace(mVcdFile, DRBG_ctx_Key_q1, "(port)DRBG_ctx_Key_q1");
    sc_trace(mVcdFile, DRBG_ctx_reseed_counter_i, "(port)DRBG_ctx_reseed_counter_i");
    sc_trace(mVcdFile, DRBG_ctx_reseed_counter_o, "(port)DRBG_ctx_reseed_counter_o");
    sc_trace(mVcdFile, DRBG_ctx_reseed_counter_o_ap_vld, "(port)DRBG_ctx_reseed_counter_o_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, p_0_load_reg_405, "p_0_load_reg_405");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, DRBG_ctx_V_addr_reg_418, "DRBG_ctx_V_addr_reg_418");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_42_fu_224_p3, "tmp_42_fu_224_p3");
    sc_trace(mVcdFile, j_1_fu_243_p2, "j_1_fu_243_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_39_fu_237_p2, "tmp_39_fu_237_p2");
    sc_trace(mVcdFile, icmp_fu_265_p2, "icmp_fu_265_p2");
    sc_trace(mVcdFile, icmp_reg_431, "icmp_reg_431");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_ap_ready, "grp_AES256_ECB_1_fu_185_ap_ready");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_ap_done, "grp_AES256_ECB_1_fu_185_ap_done");
    sc_trace(mVcdFile, tmp_47_fu_271_p1, "tmp_47_fu_271_p1");
    sc_trace(mVcdFile, tmp_47_reg_435, "tmp_47_reg_435");
    sc_trace(mVcdFile, loop_1_fu_281_p2, "loop_1_fu_281_p2");
    sc_trace(mVcdFile, loop_1_reg_444, "loop_1_reg_444");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, exitcond_fu_275_p2, "exitcond_fu_275_p2");
    sc_trace(mVcdFile, loop_2_fu_323_p2, "loop_2_fu_323_p2");
    sc_trace(mVcdFile, loop_2_reg_457, "loop_2_reg_457");
    sc_trace(mVcdFile, tmp_43_fu_318_p2, "tmp_43_fu_318_p2");
    sc_trace(mVcdFile, block_address0, "block_address0");
    sc_trace(mVcdFile, block_ce0, "block_ce0");
    sc_trace(mVcdFile, block_we0, "block_we0");
    sc_trace(mVcdFile, block_q0, "block_q0");
    sc_trace(mVcdFile, block_ce1, "block_ce1");
    sc_trace(mVcdFile, block_we1, "block_we1");
    sc_trace(mVcdFile, grp_AES256_CTR_DRBG_Upda_fu_173_ap_start, "grp_AES256_CTR_DRBG_Upda_fu_173_ap_start");
    sc_trace(mVcdFile, grp_AES256_CTR_DRBG_Upda_fu_173_ap_done, "grp_AES256_CTR_DRBG_Upda_fu_173_ap_done");
    sc_trace(mVcdFile, grp_AES256_CTR_DRBG_Upda_fu_173_ap_idle, "grp_AES256_CTR_DRBG_Upda_fu_173_ap_idle");
    sc_trace(mVcdFile, grp_AES256_CTR_DRBG_Upda_fu_173_ap_ready, "grp_AES256_CTR_DRBG_Upda_fu_173_ap_ready");
    sc_trace(mVcdFile, grp_AES256_CTR_DRBG_Upda_fu_173_V_address0, "grp_AES256_CTR_DRBG_Upda_fu_173_V_address0");
    sc_trace(mVcdFile, grp_AES256_CTR_DRBG_Upda_fu_173_V_ce0, "grp_AES256_CTR_DRBG_Upda_fu_173_V_ce0");
    sc_trace(mVcdFile, grp_AES256_CTR_DRBG_Upda_fu_173_V_we0, "grp_AES256_CTR_DRBG_Upda_fu_173_V_we0");
    sc_trace(mVcdFile, grp_AES256_CTR_DRBG_Upda_fu_173_V_d0, "grp_AES256_CTR_DRBG_Upda_fu_173_V_d0");
    sc_trace(mVcdFile, grp_AES256_CTR_DRBG_Upda_fu_173_V_address1, "grp_AES256_CTR_DRBG_Upda_fu_173_V_address1");
    sc_trace(mVcdFile, grp_AES256_CTR_DRBG_Upda_fu_173_V_ce1, "grp_AES256_CTR_DRBG_Upda_fu_173_V_ce1");
    sc_trace(mVcdFile, grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_address0, "grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_address0");
    sc_trace(mVcdFile, grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_ce0, "grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_ce0");
    sc_trace(mVcdFile, grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_we0, "grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_we0");
    sc_trace(mVcdFile, grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_d0, "grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_d0");
    sc_trace(mVcdFile, grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_address1, "grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_address1");
    sc_trace(mVcdFile, grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_ce1, "grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_ce1");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_ap_start, "grp_AES256_ECB_1_fu_185_ap_start");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_ap_idle, "grp_AES256_ECB_1_fu_185_ap_idle");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_key_address0, "grp_AES256_ECB_1_fu_185_key_address0");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_key_ce0, "grp_AES256_ECB_1_fu_185_key_ce0");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_key_address1, "grp_AES256_ECB_1_fu_185_key_address1");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_key_ce1, "grp_AES256_ECB_1_fu_185_key_ce1");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_ctr_address0, "grp_AES256_ECB_1_fu_185_ctr_address0");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_ctr_ce0, "grp_AES256_ECB_1_fu_185_ctr_ce0");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_ctr_address1, "grp_AES256_ECB_1_fu_185_ctr_address1");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_ctr_ce1, "grp_AES256_ECB_1_fu_185_ctr_ce1");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_buffer_r_address0, "grp_AES256_ECB_1_fu_185_buffer_r_address0");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_buffer_r_ce0, "grp_AES256_ECB_1_fu_185_buffer_r_ce0");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_buffer_r_we0, "grp_AES256_ECB_1_fu_185_buffer_r_we0");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_buffer_r_d0, "grp_AES256_ECB_1_fu_185_buffer_r_d0");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_buffer_r_address1, "grp_AES256_ECB_1_fu_185_buffer_r_address1");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_buffer_r_ce1, "grp_AES256_ECB_1_fu_185_buffer_r_ce1");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_buffer_r_we1, "grp_AES256_ECB_1_fu_185_buffer_r_we1");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_buffer_r_d1, "grp_AES256_ECB_1_fu_185_buffer_r_d1");
    sc_trace(mVcdFile, j_reg_137, "j_reg_137");
    sc_trace(mVcdFile, tmp_fu_214_p2, "tmp_fu_214_p2");
    sc_trace(mVcdFile, loop_reg_149, "loop_reg_149");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, loop1_reg_161, "loop1_reg_161");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_AES256_CTR_DRBG_Upda_fu_173_ap_start_reg, "grp_AES256_CTR_DRBG_Upda_fu_173_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, grp_AES256_ECB_1_fu_185_ap_start_reg, "grp_AES256_ECB_1_fu_185_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_38_fu_232_p1, "tmp_38_fu_232_p1");
    sc_trace(mVcdFile, tmp_44_fu_287_p1, "tmp_44_fu_287_p1");
    sc_trace(mVcdFile, tmp_41_fu_313_p1, "tmp_41_fu_313_p1");
    sc_trace(mVcdFile, sum_cast_fu_349_p1, "sum_cast_fu_349_p1");
    sc_trace(mVcdFile, sum2_cast_fu_369_p1, "sum2_cast_fu_369_p1");
    sc_trace(mVcdFile, p_0_fu_70, "p_0_fu_70");
    sc_trace(mVcdFile, xlen_assign_fu_298_p2, "xlen_assign_fu_298_p2");
    sc_trace(mVcdFile, i_fu_74, "i_fu_74");
    sc_trace(mVcdFile, i_8_fu_292_p2, "i_8_fu_292_p2");
    sc_trace(mVcdFile, tmp_s_fu_378_p2, "tmp_s_fu_378_p2");
    sc_trace(mVcdFile, tmp_40_fu_249_p2, "tmp_40_fu_249_p2");
    sc_trace(mVcdFile, j_cast_fu_220_p1, "j_cast_fu_220_p1");
    sc_trace(mVcdFile, tmp_46_fu_256_p4, "tmp_46_fu_256_p4");
    sc_trace(mVcdFile, tmp_36_fu_334_p1, "tmp_36_fu_334_p1");
    sc_trace(mVcdFile, tmp_102_cast_fu_338_p2, "tmp_102_cast_fu_338_p2");
    sc_trace(mVcdFile, sum_fu_343_p2, "sum_fu_343_p2");
    sc_trace(mVcdFile, tmp_37_fu_354_p1, "tmp_37_fu_354_p1");
    sc_trace(mVcdFile, tmp_104_cast_fu_358_p2, "tmp_104_cast_fu_358_p2");
    sc_trace(mVcdFile, sum2_fu_363_p2, "sum2_fu_363_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

randombytes_1::~randombytes_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete block_U;
    delete grp_AES256_CTR_DRBG_Upda_fu_173;
    delete grp_AES256_ECB_1_fu_185;
}

void randombytes_1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_AES256_CTR_DRBG_Upda_fu_173_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_214_p2.read()))) {
            grp_AES256_CTR_DRBG_Upda_fu_173_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AES256_CTR_DRBG_Upda_fu_173_ap_ready.read())) {
            grp_AES256_CTR_DRBG_Upda_fu_173_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_AES256_ECB_1_fu_185_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            grp_AES256_ECB_1_fu_185_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AES256_ECB_1_fu_185_ap_ready.read())) {
            grp_AES256_ECB_1_fu_185_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_reg_431.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_275_p2.read()))) {
        i_fu_74 = i_8_fu_292_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_fu_74 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_214_p2.read()))) {
        j_reg_137 = ap_const_lv5_F;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(tmp_39_fu_237_p2.read(), ap_const_lv1_1))) {
        j_reg_137 = j_1_fu_243_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(grp_AES256_ECB_1_fu_185_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_265_p2.read()))) {
        loop1_reg_161 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        loop1_reg_161 = loop_2_reg_457.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(grp_AES256_ECB_1_fu_185_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_265_p2.read()))) {
        loop_reg_149 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        loop_reg_149 = loop_1_reg_444.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_431.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_43_fu_318_p2.read()))) {
        p_0_fu_70 = ap_const_lv64_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_reg_431.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_275_p2.read()))) {
        p_0_fu_70 = xlen_assign_fu_298_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_0_fu_70 = ap_const_lv64_20;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_42_fu_224_p3.read(), ap_const_lv1_0))) {
        DRBG_ctx_V_addr_reg_418 =  (sc_lv<4>) (tmp_38_fu_232_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(grp_AES256_ECB_1_fu_185_ap_done.read(), ap_const_logic_1))) {
        icmp_reg_431 = icmp_fu_265_p2.read();
        tmp_47_reg_435 = tmp_47_fu_271_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_reg_431.read()))) {
        loop_1_reg_444 = loop_1_fu_281_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_431.read()))) {
        loop_2_reg_457 = loop_2_fu_323_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        p_0_load_reg_405 = p_0_fu_70.read();
    }
}

void randombytes_1::thread_DRBG_ctx_Key_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_Key_address0 = grp_AES256_ECB_1_fu_185_key_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        DRBG_ctx_Key_address0 = grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_address0.read();
    } else {
        DRBG_ctx_Key_address0 = "XXXXX";
    }
}

void randombytes_1::thread_DRBG_ctx_Key_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_Key_address1 = grp_AES256_ECB_1_fu_185_key_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        DRBG_ctx_Key_address1 = grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_address1.read();
    } else {
        DRBG_ctx_Key_address1 = "XXXXX";
    }
}

void randombytes_1::thread_DRBG_ctx_Key_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_Key_ce0 = grp_AES256_ECB_1_fu_185_key_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        DRBG_ctx_Key_ce0 = grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_ce0.read();
    } else {
        DRBG_ctx_Key_ce0 = ap_const_logic_0;
    }
}

void randombytes_1::thread_DRBG_ctx_Key_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_Key_ce1 = grp_AES256_ECB_1_fu_185_key_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        DRBG_ctx_Key_ce1 = grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_ce1.read();
    } else {
        DRBG_ctx_Key_ce1 = ap_const_logic_0;
    }
}

void randombytes_1::thread_DRBG_ctx_Key_d0() {
    DRBG_ctx_Key_d0 = grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_d0.read();
}

void randombytes_1::thread_DRBG_ctx_Key_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        DRBG_ctx_Key_we0 = grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_we0.read();
    } else {
        DRBG_ctx_Key_we0 = ap_const_logic_0;
    }
}

void randombytes_1::thread_DRBG_ctx_V_address0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(tmp_39_fu_237_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_39_fu_237_p2.read())))) {
        DRBG_ctx_V_address0 = DRBG_ctx_V_addr_reg_418.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        DRBG_ctx_V_address0 =  (sc_lv<4>) (tmp_38_fu_232_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_V_address0 = grp_AES256_ECB_1_fu_185_ctr_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        DRBG_ctx_V_address0 = grp_AES256_CTR_DRBG_Upda_fu_173_V_address0.read();
    } else {
        DRBG_ctx_V_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void randombytes_1::thread_DRBG_ctx_V_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_V_address1 = grp_AES256_ECB_1_fu_185_ctr_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        DRBG_ctx_V_address1 = grp_AES256_CTR_DRBG_Upda_fu_173_V_address1.read();
    } else {
        DRBG_ctx_V_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void randombytes_1::thread_DRBG_ctx_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(tmp_39_fu_237_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_39_fu_237_p2.read())))) {
        DRBG_ctx_V_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_V_ce0 = grp_AES256_ECB_1_fu_185_ctr_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        DRBG_ctx_V_ce0 = grp_AES256_CTR_DRBG_Upda_fu_173_V_ce0.read();
    } else {
        DRBG_ctx_V_ce0 = ap_const_logic_0;
    }
}

void randombytes_1::thread_DRBG_ctx_V_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_V_ce1 = grp_AES256_ECB_1_fu_185_ctr_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        DRBG_ctx_V_ce1 = grp_AES256_CTR_DRBG_Upda_fu_173_V_ce1.read();
    } else {
        DRBG_ctx_V_ce1 = ap_const_logic_0;
    }
}

void randombytes_1::thread_DRBG_ctx_V_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_39_fu_237_p2.read()))) {
        DRBG_ctx_V_d0 = tmp_40_fu_249_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(tmp_39_fu_237_p2.read(), ap_const_lv1_1))) {
        DRBG_ctx_V_d0 = ap_const_lv8_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        DRBG_ctx_V_d0 = grp_AES256_CTR_DRBG_Upda_fu_173_V_d0.read();
    } else {
        DRBG_ctx_V_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void randombytes_1::thread_DRBG_ctx_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(tmp_39_fu_237_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_39_fu_237_p2.read())))) {
        DRBG_ctx_V_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        DRBG_ctx_V_we0 = grp_AES256_CTR_DRBG_Upda_fu_173_V_we0.read();
    } else {
        DRBG_ctx_V_we0 = ap_const_logic_0;
    }
}

void randombytes_1::thread_DRBG_ctx_reseed_counter_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(grp_AES256_CTR_DRBG_Upda_fu_173_ap_done.read(), ap_const_logic_1))) {
        DRBG_ctx_reseed_counter_o = tmp_s_fu_378_p2.read();
    } else {
        DRBG_ctx_reseed_counter_o = DRBG_ctx_reseed_counter_i.read();
    }
}

void randombytes_1::thread_DRBG_ctx_reseed_counter_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(grp_AES256_CTR_DRBG_Upda_fu_173_ap_done.read(), ap_const_logic_1))) {
        DRBG_ctx_reseed_counter_o_ap_vld = ap_const_logic_1;
    } else {
        DRBG_ctx_reseed_counter_o_ap_vld = ap_const_logic_0;
    }
}

void randombytes_1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void randombytes_1::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void randombytes_1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void randombytes_1::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void randombytes_1::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void randombytes_1::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void randombytes_1::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void randombytes_1::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void randombytes_1::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void randombytes_1::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void randombytes_1::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(grp_AES256_CTR_DRBG_Upda_fu_173_ap_done.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void randombytes_1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void randombytes_1::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(grp_AES256_CTR_DRBG_Upda_fu_173_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void randombytes_1::thread_block_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_431.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_43_fu_318_p2.read()))) {
        block_address0 =  (sc_lv<4>) (tmp_41_fu_313_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_reg_431.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_275_p2.read()))) {
        block_address0 =  (sc_lv<4>) (tmp_44_fu_287_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        block_address0 = grp_AES256_ECB_1_fu_185_buffer_r_address0.read();
    } else {
        block_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void randombytes_1::thread_block_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_reg_431.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_275_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_431.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_43_fu_318_p2.read())))) {
        block_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        block_ce0 = grp_AES256_ECB_1_fu_185_buffer_r_ce0.read();
    } else {
        block_ce0 = ap_const_logic_0;
    }
}

void randombytes_1::thread_block_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        block_ce1 = grp_AES256_ECB_1_fu_185_buffer_r_ce1.read();
    } else {
        block_ce1 = ap_const_logic_0;
    }
}

void randombytes_1::thread_block_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        block_we0 = grp_AES256_ECB_1_fu_185_buffer_r_we0.read();
    } else {
        block_we0 = ap_const_logic_0;
    }
}

void randombytes_1::thread_block_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        block_we1 = grp_AES256_ECB_1_fu_185_buffer_r_we1.read();
    } else {
        block_we1 = ap_const_logic_0;
    }
}

void randombytes_1::thread_exitcond_fu_275_p2() {
    exitcond_fu_275_p2 = (!loop_reg_149.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(loop_reg_149.read() == ap_const_lv5_10);
}

void randombytes_1::thread_grp_AES256_CTR_DRBG_Upda_fu_173_ap_start() {
    grp_AES256_CTR_DRBG_Upda_fu_173_ap_start = grp_AES256_CTR_DRBG_Upda_fu_173_ap_start_reg.read();
}

void randombytes_1::thread_grp_AES256_ECB_1_fu_185_ap_start() {
    grp_AES256_ECB_1_fu_185_ap_start = grp_AES256_ECB_1_fu_185_ap_start_reg.read();
}

void randombytes_1::thread_i_8_fu_292_p2() {
    i_8_fu_292_p2 = (!i_fu_74.read().is_01() || !ap_const_lv32_10.is_01())? sc_lv<32>(): (sc_biguint<32>(i_fu_74.read()) + sc_biguint<32>(ap_const_lv32_10));
}

void randombytes_1::thread_icmp_fu_265_p2() {
    icmp_fu_265_p2 = (!tmp_46_fu_256_p4.read().is_01() || !ap_const_lv60_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_46_fu_256_p4.read() == ap_const_lv60_0);
}

void randombytes_1::thread_j_1_fu_243_p2() {
    j_1_fu_243_p2 = (!j_reg_137.read().is_01() || !ap_const_lv5_1F.is_01())? sc_lv<5>(): (sc_bigint<5>(j_reg_137.read()) + sc_bigint<5>(ap_const_lv5_1F));
}

void randombytes_1::thread_j_cast_fu_220_p1() {
    j_cast_fu_220_p1 = esl_sext<32,5>(j_reg_137.read());
}

void randombytes_1::thread_loop_1_fu_281_p2() {
    loop_1_fu_281_p2 = (!loop_reg_149.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(loop_reg_149.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void randombytes_1::thread_loop_2_fu_323_p2() {
    loop_2_fu_323_p2 = (!loop1_reg_161.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(loop1_reg_161.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void randombytes_1::thread_sum2_cast_fu_369_p1() {
    sum2_cast_fu_369_p1 = esl_sext<64,11>(sum2_fu_363_p2.read());
}

void randombytes_1::thread_sum2_fu_363_p2() {
    sum2_fu_363_p2 = (!tmp_104_cast_fu_358_p2.read().is_01() || !ap_const_lv11_387.is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_104_cast_fu_358_p2.read()) + sc_biguint<11>(ap_const_lv11_387));
}

void randombytes_1::thread_sum_cast_fu_349_p1() {
    sum_cast_fu_349_p1 = esl_sext<64,11>(sum_fu_343_p2.read());
}

void randombytes_1::thread_sum_fu_343_p2() {
    sum_fu_343_p2 = (!tmp_102_cast_fu_338_p2.read().is_01() || !ap_const_lv11_387.is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_102_cast_fu_338_p2.read()) + sc_biguint<11>(ap_const_lv11_387));
}

void randombytes_1::thread_tmp_102_cast_fu_338_p2() {
    tmp_102_cast_fu_338_p2 = (!tmp_47_reg_435.read().is_01() || !tmp_36_fu_334_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_47_reg_435.read()) + sc_biguint<11>(tmp_36_fu_334_p1.read()));
}

void randombytes_1::thread_tmp_104_cast_fu_358_p2() {
    tmp_104_cast_fu_358_p2 = (!tmp_37_fu_354_p1.read().is_01() || !tmp_47_reg_435.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_37_fu_354_p1.read()) + sc_biguint<11>(tmp_47_reg_435.read()));
}

void randombytes_1::thread_tmp_36_fu_334_p1() {
    tmp_36_fu_334_p1 = esl_zext<11,5>(loop_reg_149.read());
}

void randombytes_1::thread_tmp_37_fu_354_p1() {
    tmp_37_fu_354_p1 = esl_zext<11,4>(loop1_reg_161.read());
}

void randombytes_1::thread_tmp_38_fu_232_p1() {
    tmp_38_fu_232_p1 = esl_zext<64,32>(j_cast_fu_220_p1.read());
}

void randombytes_1::thread_tmp_39_fu_237_p2() {
    tmp_39_fu_237_p2 = (!DRBG_ctx_V_q0.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(DRBG_ctx_V_q0.read() == ap_const_lv8_FF);
}

void randombytes_1::thread_tmp_40_fu_249_p2() {
    tmp_40_fu_249_p2 = (!DRBG_ctx_V_q0.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(DRBG_ctx_V_q0.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void randombytes_1::thread_tmp_41_fu_313_p1() {
    tmp_41_fu_313_p1 = esl_zext<64,4>(loop1_reg_161.read());
}

void randombytes_1::thread_tmp_42_fu_224_p3() {
    tmp_42_fu_224_p3 = j_reg_137.read().range(4, 4);
}

void randombytes_1::thread_tmp_43_fu_318_p2() {
    tmp_43_fu_318_p2 = (!tmp_41_fu_313_p1.read().is_01() || !p_0_load_reg_405.read().is_01())? sc_lv<1>(): (sc_biguint<64>(tmp_41_fu_313_p1.read()) < sc_biguint<64>(p_0_load_reg_405.read()));
}

void randombytes_1::thread_tmp_44_fu_287_p1() {
    tmp_44_fu_287_p1 = esl_zext<64,5>(loop_reg_149.read());
}

void randombytes_1::thread_tmp_46_fu_256_p4() {
    tmp_46_fu_256_p4 = p_0_load_reg_405.read().range(63, 4);
}

void randombytes_1::thread_tmp_47_fu_271_p1() {
    tmp_47_fu_271_p1 = i_fu_74.read().range(11-1, 0);
}

void randombytes_1::thread_tmp_fu_214_p2() {
    tmp_fu_214_p2 = (!p_0_fu_70.read().is_01() || !ap_const_lv64_0.is_01())? sc_lv<1>(): sc_lv<1>(p_0_fu_70.read() == ap_const_lv64_0);
}

void randombytes_1::thread_tmp_s_fu_378_p2() {
    tmp_s_fu_378_p2 = (!DRBG_ctx_reseed_counter_i.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(DRBG_ctx_reseed_counter_i.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void randombytes_1::thread_x_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        x_address0 =  (sc_lv<10>) (sum2_cast_fu_369_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        x_address0 =  (sc_lv<10>) (sum_cast_fu_349_p1.read());
    } else {
        x_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void randombytes_1::thread_x_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        x_ce0 = ap_const_logic_1;
    } else {
        x_ce0 = ap_const_logic_0;
    }
}

void randombytes_1::thread_x_d0() {
    x_d0 = block_q0.read();
}

void randombytes_1::thread_x_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        x_we0 = ap_const_logic_1;
    } else {
        x_we0 = ap_const_logic_0;
    }
}

void randombytes_1::thread_xlen_assign_fu_298_p2() {
    xlen_assign_fu_298_p2 = (!p_0_load_reg_405.read().is_01() || !ap_const_lv64_FFFFFFFFFFFFFFF0.is_01())? sc_lv<64>(): (sc_biguint<64>(p_0_load_reg_405.read()) + sc_bigint<64>(ap_const_lv64_FFFFFFFFFFFFFFF0));
}

void randombytes_1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_214_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_42_fu_224_p3.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_39_fu_237_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(grp_AES256_ECB_1_fu_185_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_431.read()) && 
   esl_seteq<1,1,1>(ap_const_lv1_0, tmp_43_fu_318_p2.read())) || 
  (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_reg_431.read()) && 
   esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_275_p2.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_431.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_43_fu_318_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(grp_AES256_CTR_DRBG_Upda_fu_173_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<10>) ("XXXXXXXXXX");
            break;
    }
}

}

