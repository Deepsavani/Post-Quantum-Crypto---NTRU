// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="crypto_kem_keypair,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tfbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.122000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=46,HLS_SYN_DSP=8,HLS_SYN_FF=5402,HLS_SYN_LUT=23628,HLS_VERSION=2018_3}" *)

module crypto_kem_keypair (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pk_address0,
        pk_ce0,
        pk_we0,
        pk_d0,
        pk_address1,
        pk_ce1,
        pk_we1,
        pk_d1,
        sk_address0,
        sk_ce0,
        sk_we0,
        sk_d0,
        sk_address1,
        sk_ce1,
        sk_we1,
        sk_d1,
        DRBG_ctx_V_address0,
        DRBG_ctx_V_ce0,
        DRBG_ctx_V_we0,
        DRBG_ctx_V_d0,
        DRBG_ctx_V_q0,
        DRBG_ctx_V_address1,
        DRBG_ctx_V_ce1,
        DRBG_ctx_V_q1,
        DRBG_ctx_Key_address0,
        DRBG_ctx_Key_ce0,
        DRBG_ctx_Key_we0,
        DRBG_ctx_Key_d0,
        DRBG_ctx_Key_q0,
        DRBG_ctx_Key_address1,
        DRBG_ctx_Key_ce1,
        DRBG_ctx_Key_q1,
        DRBG_ctx_reseed_counter_i,
        DRBG_ctx_reseed_counter_o,
        DRBG_ctx_reseed_counter_o_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] pk_address0;
output   pk_ce0;
output   pk_we0;
output  [7:0] pk_d0;
output  [9:0] pk_address1;
output   pk_ce1;
output   pk_we1;
output  [7:0] pk_d1;
output  [9:0] sk_address0;
output   sk_ce0;
output   sk_we0;
output  [7:0] sk_d0;
output  [9:0] sk_address1;
output   sk_ce1;
output   sk_we1;
output  [7:0] sk_d1;
output  [3:0] DRBG_ctx_V_address0;
output   DRBG_ctx_V_ce0;
output   DRBG_ctx_V_we0;
output  [7:0] DRBG_ctx_V_d0;
input  [7:0] DRBG_ctx_V_q0;
output  [3:0] DRBG_ctx_V_address1;
output   DRBG_ctx_V_ce1;
input  [7:0] DRBG_ctx_V_q1;
output  [4:0] DRBG_ctx_Key_address0;
output   DRBG_ctx_Key_ce0;
output   DRBG_ctx_Key_we0;
output  [7:0] DRBG_ctx_Key_d0;
input  [7:0] DRBG_ctx_Key_q0;
output  [4:0] DRBG_ctx_Key_address1;
output   DRBG_ctx_Key_ce1;
input  [7:0] DRBG_ctx_Key_q1;
input  [31:0] DRBG_ctx_reseed_counter_i;
output  [31:0] DRBG_ctx_reseed_counter_o;
output   DRBG_ctx_reseed_counter_o_ap_vld;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] sk_address0;
reg sk_ce0;
reg sk_we0;
reg[7:0] sk_d0;
reg sk_ce1;
reg sk_we1;
reg[3:0] DRBG_ctx_V_address0;
reg DRBG_ctx_V_ce0;
reg DRBG_ctx_V_we0;
reg[7:0] DRBG_ctx_V_d0;
reg[3:0] DRBG_ctx_V_address1;
reg DRBG_ctx_V_ce1;
reg[4:0] DRBG_ctx_Key_address0;
reg DRBG_ctx_Key_ce0;
reg DRBG_ctx_Key_we0;
reg[7:0] DRBG_ctx_Key_d0;
reg[4:0] DRBG_ctx_Key_address1;
reg DRBG_ctx_Key_ce1;
reg[31:0] DRBG_ctx_reseed_counter_o;
reg DRBG_ctx_reseed_counter_o_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] seed_address0;
reg    seed_ce0;
reg    seed_we0;
wire   [7:0] seed_q0;
reg    seed_ce1;
wire   [7:0] seed_q1;
wire    grp_owcpa_keypair_fu_34_ap_start;
wire    grp_owcpa_keypair_fu_34_ap_done;
wire    grp_owcpa_keypair_fu_34_ap_idle;
wire    grp_owcpa_keypair_fu_34_ap_ready;
wire   [9:0] grp_owcpa_keypair_fu_34_pk_address0;
wire    grp_owcpa_keypair_fu_34_pk_ce0;
wire    grp_owcpa_keypair_fu_34_pk_we0;
wire   [7:0] grp_owcpa_keypair_fu_34_pk_d0;
wire   [9:0] grp_owcpa_keypair_fu_34_pk_address1;
wire    grp_owcpa_keypair_fu_34_pk_ce1;
wire    grp_owcpa_keypair_fu_34_pk_we1;
wire   [7:0] grp_owcpa_keypair_fu_34_pk_d1;
wire   [9:0] grp_owcpa_keypair_fu_34_sk_address0;
wire    grp_owcpa_keypair_fu_34_sk_ce0;
wire    grp_owcpa_keypair_fu_34_sk_we0;
wire   [7:0] grp_owcpa_keypair_fu_34_sk_d0;
wire   [9:0] grp_owcpa_keypair_fu_34_sk_address1;
wire    grp_owcpa_keypair_fu_34_sk_ce1;
wire    grp_owcpa_keypair_fu_34_sk_we1;
wire   [7:0] grp_owcpa_keypair_fu_34_sk_d1;
wire   [11:0] grp_owcpa_keypair_fu_34_seed_address0;
wire    grp_owcpa_keypair_fu_34_seed_ce0;
wire   [11:0] grp_owcpa_keypair_fu_34_seed_address1;
wire    grp_owcpa_keypair_fu_34_seed_ce1;
wire    grp_randombytes_fu_43_ap_start;
wire    grp_randombytes_fu_43_ap_done;
wire    grp_randombytes_fu_43_ap_idle;
wire    grp_randombytes_fu_43_ap_ready;
wire   [11:0] grp_randombytes_fu_43_x_address0;
wire    grp_randombytes_fu_43_x_ce0;
wire    grp_randombytes_fu_43_x_we0;
wire   [7:0] grp_randombytes_fu_43_x_d0;
wire   [3:0] grp_randombytes_fu_43_DRBG_ctx_V_address0;
wire    grp_randombytes_fu_43_DRBG_ctx_V_ce0;
wire    grp_randombytes_fu_43_DRBG_ctx_V_we0;
wire   [7:0] grp_randombytes_fu_43_DRBG_ctx_V_d0;
wire   [3:0] grp_randombytes_fu_43_DRBG_ctx_V_address1;
wire    grp_randombytes_fu_43_DRBG_ctx_V_ce1;
wire   [4:0] grp_randombytes_fu_43_DRBG_ctx_Key_address0;
wire    grp_randombytes_fu_43_DRBG_ctx_Key_ce0;
wire    grp_randombytes_fu_43_DRBG_ctx_Key_we0;
wire   [7:0] grp_randombytes_fu_43_DRBG_ctx_Key_d0;
wire   [4:0] grp_randombytes_fu_43_DRBG_ctx_Key_address1;
wire    grp_randombytes_fu_43_DRBG_ctx_Key_ce1;
wire   [31:0] grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o;
wire    grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o_ap_vld;
wire    grp_randombytes_1_fu_59_ap_start;
wire    grp_randombytes_1_fu_59_ap_done;
wire    grp_randombytes_1_fu_59_ap_idle;
wire    grp_randombytes_1_fu_59_ap_ready;
wire   [9:0] grp_randombytes_1_fu_59_x_address0;
wire    grp_randombytes_1_fu_59_x_ce0;
wire    grp_randombytes_1_fu_59_x_we0;
wire   [7:0] grp_randombytes_1_fu_59_x_d0;
wire   [3:0] grp_randombytes_1_fu_59_DRBG_ctx_V_address0;
wire    grp_randombytes_1_fu_59_DRBG_ctx_V_ce0;
wire    grp_randombytes_1_fu_59_DRBG_ctx_V_we0;
wire   [7:0] grp_randombytes_1_fu_59_DRBG_ctx_V_d0;
wire   [3:0] grp_randombytes_1_fu_59_DRBG_ctx_V_address1;
wire    grp_randombytes_1_fu_59_DRBG_ctx_V_ce1;
wire   [4:0] grp_randombytes_1_fu_59_DRBG_ctx_Key_address0;
wire    grp_randombytes_1_fu_59_DRBG_ctx_Key_ce0;
wire    grp_randombytes_1_fu_59_DRBG_ctx_Key_we0;
wire   [7:0] grp_randombytes_1_fu_59_DRBG_ctx_Key_d0;
wire   [4:0] grp_randombytes_1_fu_59_DRBG_ctx_Key_address1;
wire    grp_randombytes_1_fu_59_DRBG_ctx_Key_ce1;
wire   [31:0] grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o;
wire    grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o_ap_vld;
reg    grp_owcpa_keypair_fu_34_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    grp_randombytes_fu_43_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_randombytes_1_fu_59_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_owcpa_keypair_fu_34_ap_start_reg = 1'b0;
#0 grp_randombytes_fu_43_ap_start_reg = 1'b0;
#0 grp_randombytes_1_fu_59_ap_start_reg = 1'b0;
end

crypto_kem_keypair_seed #(
    .DataWidth( 8 ),
    .AddressRange( 2413 ),
    .AddressWidth( 12 ))
seed_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(seed_address0),
    .ce0(seed_ce0),
    .we0(seed_we0),
    .d0(grp_randombytes_fu_43_x_d0),
    .q0(seed_q0),
    .address1(grp_owcpa_keypair_fu_34_seed_address1),
    .ce1(seed_ce1),
    .q1(seed_q1)
);

owcpa_keypair grp_owcpa_keypair_fu_34(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_owcpa_keypair_fu_34_ap_start),
    .ap_done(grp_owcpa_keypair_fu_34_ap_done),
    .ap_idle(grp_owcpa_keypair_fu_34_ap_idle),
    .ap_ready(grp_owcpa_keypair_fu_34_ap_ready),
    .pk_address0(grp_owcpa_keypair_fu_34_pk_address0),
    .pk_ce0(grp_owcpa_keypair_fu_34_pk_ce0),
    .pk_we0(grp_owcpa_keypair_fu_34_pk_we0),
    .pk_d0(grp_owcpa_keypair_fu_34_pk_d0),
    .pk_address1(grp_owcpa_keypair_fu_34_pk_address1),
    .pk_ce1(grp_owcpa_keypair_fu_34_pk_ce1),
    .pk_we1(grp_owcpa_keypair_fu_34_pk_we1),
    .pk_d1(grp_owcpa_keypair_fu_34_pk_d1),
    .sk_address0(grp_owcpa_keypair_fu_34_sk_address0),
    .sk_ce0(grp_owcpa_keypair_fu_34_sk_ce0),
    .sk_we0(grp_owcpa_keypair_fu_34_sk_we0),
    .sk_d0(grp_owcpa_keypair_fu_34_sk_d0),
    .sk_address1(grp_owcpa_keypair_fu_34_sk_address1),
    .sk_ce1(grp_owcpa_keypair_fu_34_sk_ce1),
    .sk_we1(grp_owcpa_keypair_fu_34_sk_we1),
    .sk_d1(grp_owcpa_keypair_fu_34_sk_d1),
    .seed_address0(grp_owcpa_keypair_fu_34_seed_address0),
    .seed_ce0(grp_owcpa_keypair_fu_34_seed_ce0),
    .seed_q0(seed_q0),
    .seed_address1(grp_owcpa_keypair_fu_34_seed_address1),
    .seed_ce1(grp_owcpa_keypair_fu_34_seed_ce1),
    .seed_q1(seed_q1)
);

randombytes grp_randombytes_fu_43(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_randombytes_fu_43_ap_start),
    .ap_done(grp_randombytes_fu_43_ap_done),
    .ap_idle(grp_randombytes_fu_43_ap_idle),
    .ap_ready(grp_randombytes_fu_43_ap_ready),
    .x_address0(grp_randombytes_fu_43_x_address0),
    .x_ce0(grp_randombytes_fu_43_x_ce0),
    .x_we0(grp_randombytes_fu_43_x_we0),
    .x_d0(grp_randombytes_fu_43_x_d0),
    .DRBG_ctx_V_address0(grp_randombytes_fu_43_DRBG_ctx_V_address0),
    .DRBG_ctx_V_ce0(grp_randombytes_fu_43_DRBG_ctx_V_ce0),
    .DRBG_ctx_V_we0(grp_randombytes_fu_43_DRBG_ctx_V_we0),
    .DRBG_ctx_V_d0(grp_randombytes_fu_43_DRBG_ctx_V_d0),
    .DRBG_ctx_V_q0(DRBG_ctx_V_q0),
    .DRBG_ctx_V_address1(grp_randombytes_fu_43_DRBG_ctx_V_address1),
    .DRBG_ctx_V_ce1(grp_randombytes_fu_43_DRBG_ctx_V_ce1),
    .DRBG_ctx_V_q1(DRBG_ctx_V_q1),
    .DRBG_ctx_Key_address0(grp_randombytes_fu_43_DRBG_ctx_Key_address0),
    .DRBG_ctx_Key_ce0(grp_randombytes_fu_43_DRBG_ctx_Key_ce0),
    .DRBG_ctx_Key_we0(grp_randombytes_fu_43_DRBG_ctx_Key_we0),
    .DRBG_ctx_Key_d0(grp_randombytes_fu_43_DRBG_ctx_Key_d0),
    .DRBG_ctx_Key_q0(DRBG_ctx_Key_q0),
    .DRBG_ctx_Key_address1(grp_randombytes_fu_43_DRBG_ctx_Key_address1),
    .DRBG_ctx_Key_ce1(grp_randombytes_fu_43_DRBG_ctx_Key_ce1),
    .DRBG_ctx_Key_q1(DRBG_ctx_Key_q1),
    .DRBG_ctx_reseed_counter_i(DRBG_ctx_reseed_counter_i),
    .DRBG_ctx_reseed_counter_o(grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o),
    .DRBG_ctx_reseed_counter_o_ap_vld(grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o_ap_vld)
);

randombytes_1 grp_randombytes_1_fu_59(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_randombytes_1_fu_59_ap_start),
    .ap_done(grp_randombytes_1_fu_59_ap_done),
    .ap_idle(grp_randombytes_1_fu_59_ap_idle),
    .ap_ready(grp_randombytes_1_fu_59_ap_ready),
    .x_address0(grp_randombytes_1_fu_59_x_address0),
    .x_ce0(grp_randombytes_1_fu_59_x_ce0),
    .x_we0(grp_randombytes_1_fu_59_x_we0),
    .x_d0(grp_randombytes_1_fu_59_x_d0),
    .DRBG_ctx_V_address0(grp_randombytes_1_fu_59_DRBG_ctx_V_address0),
    .DRBG_ctx_V_ce0(grp_randombytes_1_fu_59_DRBG_ctx_V_ce0),
    .DRBG_ctx_V_we0(grp_randombytes_1_fu_59_DRBG_ctx_V_we0),
    .DRBG_ctx_V_d0(grp_randombytes_1_fu_59_DRBG_ctx_V_d0),
    .DRBG_ctx_V_q0(DRBG_ctx_V_q0),
    .DRBG_ctx_V_address1(grp_randombytes_1_fu_59_DRBG_ctx_V_address1),
    .DRBG_ctx_V_ce1(grp_randombytes_1_fu_59_DRBG_ctx_V_ce1),
    .DRBG_ctx_V_q1(DRBG_ctx_V_q1),
    .DRBG_ctx_Key_address0(grp_randombytes_1_fu_59_DRBG_ctx_Key_address0),
    .DRBG_ctx_Key_ce0(grp_randombytes_1_fu_59_DRBG_ctx_Key_ce0),
    .DRBG_ctx_Key_we0(grp_randombytes_1_fu_59_DRBG_ctx_Key_we0),
    .DRBG_ctx_Key_d0(grp_randombytes_1_fu_59_DRBG_ctx_Key_d0),
    .DRBG_ctx_Key_q0(DRBG_ctx_Key_q0),
    .DRBG_ctx_Key_address1(grp_randombytes_1_fu_59_DRBG_ctx_Key_address1),
    .DRBG_ctx_Key_ce1(grp_randombytes_1_fu_59_DRBG_ctx_Key_ce1),
    .DRBG_ctx_Key_q1(DRBG_ctx_Key_q1),
    .DRBG_ctx_reseed_counter_i(DRBG_ctx_reseed_counter_i),
    .DRBG_ctx_reseed_counter_o(grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o),
    .DRBG_ctx_reseed_counter_o_ap_vld(grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_owcpa_keypair_fu_34_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_owcpa_keypair_fu_34_ap_start_reg <= 1'b1;
        end else if ((grp_owcpa_keypair_fu_34_ap_ready == 1'b1)) begin
            grp_owcpa_keypair_fu_34_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_randombytes_1_fu_59_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_randombytes_1_fu_59_ap_start_reg <= 1'b1;
        end else if ((grp_randombytes_1_fu_59_ap_ready == 1'b1)) begin
            grp_randombytes_1_fu_59_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_randombytes_fu_43_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_randombytes_fu_43_ap_start_reg <= 1'b1;
        end else if ((grp_randombytes_fu_43_ap_ready == 1'b1)) begin
            grp_randombytes_fu_43_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_Key_address0 = grp_randombytes_1_fu_59_DRBG_ctx_Key_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        DRBG_ctx_Key_address0 = grp_randombytes_fu_43_DRBG_ctx_Key_address0;
    end else begin
        DRBG_ctx_Key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_Key_address1 = grp_randombytes_1_fu_59_DRBG_ctx_Key_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        DRBG_ctx_Key_address1 = grp_randombytes_fu_43_DRBG_ctx_Key_address1;
    end else begin
        DRBG_ctx_Key_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_Key_ce0 = grp_randombytes_1_fu_59_DRBG_ctx_Key_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        DRBG_ctx_Key_ce0 = grp_randombytes_fu_43_DRBG_ctx_Key_ce0;
    end else begin
        DRBG_ctx_Key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_Key_ce1 = grp_randombytes_1_fu_59_DRBG_ctx_Key_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        DRBG_ctx_Key_ce1 = grp_randombytes_fu_43_DRBG_ctx_Key_ce1;
    end else begin
        DRBG_ctx_Key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_Key_d0 = grp_randombytes_1_fu_59_DRBG_ctx_Key_d0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        DRBG_ctx_Key_d0 = grp_randombytes_fu_43_DRBG_ctx_Key_d0;
    end else begin
        DRBG_ctx_Key_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_Key_we0 = grp_randombytes_1_fu_59_DRBG_ctx_Key_we0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        DRBG_ctx_Key_we0 = grp_randombytes_fu_43_DRBG_ctx_Key_we0;
    end else begin
        DRBG_ctx_Key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_V_address0 = grp_randombytes_1_fu_59_DRBG_ctx_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        DRBG_ctx_V_address0 = grp_randombytes_fu_43_DRBG_ctx_V_address0;
    end else begin
        DRBG_ctx_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_V_address1 = grp_randombytes_1_fu_59_DRBG_ctx_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        DRBG_ctx_V_address1 = grp_randombytes_fu_43_DRBG_ctx_V_address1;
    end else begin
        DRBG_ctx_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_V_ce0 = grp_randombytes_1_fu_59_DRBG_ctx_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        DRBG_ctx_V_ce0 = grp_randombytes_fu_43_DRBG_ctx_V_ce0;
    end else begin
        DRBG_ctx_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_V_ce1 = grp_randombytes_1_fu_59_DRBG_ctx_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        DRBG_ctx_V_ce1 = grp_randombytes_fu_43_DRBG_ctx_V_ce1;
    end else begin
        DRBG_ctx_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_V_d0 = grp_randombytes_1_fu_59_DRBG_ctx_V_d0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        DRBG_ctx_V_d0 = grp_randombytes_fu_43_DRBG_ctx_V_d0;
    end else begin
        DRBG_ctx_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_V_we0 = grp_randombytes_1_fu_59_DRBG_ctx_V_we0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        DRBG_ctx_V_we0 = grp_randombytes_fu_43_DRBG_ctx_V_we0;
    end else begin
        DRBG_ctx_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o_ap_vld == 1'b1))) begin
        DRBG_ctx_reseed_counter_o = grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o_ap_vld == 1'b1))) begin
        DRBG_ctx_reseed_counter_o = grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o;
    end else begin
        DRBG_ctx_reseed_counter_o = DRBG_ctx_reseed_counter_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        DRBG_ctx_reseed_counter_o_ap_vld = grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o_ap_vld;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        DRBG_ctx_reseed_counter_o_ap_vld = grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o_ap_vld;
    end else begin
        DRBG_ctx_reseed_counter_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_randombytes_1_fu_59_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_randombytes_1_fu_59_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        seed_address0 = grp_randombytes_fu_43_x_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        seed_address0 = grp_owcpa_keypair_fu_34_seed_address0;
    end else begin
        seed_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        seed_ce0 = grp_randombytes_fu_43_x_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        seed_ce0 = grp_owcpa_keypair_fu_34_seed_ce0;
    end else begin
        seed_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        seed_ce1 = grp_owcpa_keypair_fu_34_seed_ce1;
    end else begin
        seed_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        seed_we0 = grp_randombytes_fu_43_x_we0;
    end else begin
        seed_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sk_address0 = grp_randombytes_1_fu_59_x_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sk_address0 = grp_owcpa_keypair_fu_34_sk_address0;
    end else begin
        sk_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sk_ce0 = grp_randombytes_1_fu_59_x_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sk_ce0 = grp_owcpa_keypair_fu_34_sk_ce0;
    end else begin
        sk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sk_ce1 = grp_owcpa_keypair_fu_34_sk_ce1;
    end else begin
        sk_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sk_d0 = grp_randombytes_1_fu_59_x_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sk_d0 = grp_owcpa_keypair_fu_34_sk_d0;
    end else begin
        sk_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sk_we0 = grp_randombytes_1_fu_59_x_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sk_we0 = grp_owcpa_keypair_fu_34_sk_we0;
    end else begin
        sk_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sk_we1 = grp_owcpa_keypair_fu_34_sk_we1;
    end else begin
        sk_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_randombytes_fu_43_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_owcpa_keypair_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_randombytes_1_fu_59_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = 32'd0;

assign grp_owcpa_keypair_fu_34_ap_start = grp_owcpa_keypair_fu_34_ap_start_reg;

assign grp_randombytes_1_fu_59_ap_start = grp_randombytes_1_fu_59_ap_start_reg;

assign grp_randombytes_fu_43_ap_start = grp_randombytes_fu_43_ap_start_reg;

assign pk_address0 = grp_owcpa_keypair_fu_34_pk_address0;

assign pk_address1 = grp_owcpa_keypair_fu_34_pk_address1;

assign pk_ce0 = grp_owcpa_keypair_fu_34_pk_ce0;

assign pk_ce1 = grp_owcpa_keypair_fu_34_pk_ce1;

assign pk_d0 = grp_owcpa_keypair_fu_34_pk_d0;

assign pk_d1 = grp_owcpa_keypair_fu_34_pk_d1;

assign pk_we0 = grp_owcpa_keypair_fu_34_pk_we0;

assign pk_we1 = grp_owcpa_keypair_fu_34_pk_we1;

assign sk_address1 = grp_owcpa_keypair_fu_34_sk_address1;

assign sk_d1 = grp_owcpa_keypair_fu_34_sk_d1;

endmodule //crypto_kem_keypair
