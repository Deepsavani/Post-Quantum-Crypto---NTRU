-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity owcpa_keypair is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pk_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    pk_ce0 : OUT STD_LOGIC;
    pk_we0 : OUT STD_LOGIC;
    pk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pk_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    pk_ce1 : OUT STD_LOGIC;
    pk_we1 : OUT STD_LOGIC;
    pk_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sk_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sk_ce0 : OUT STD_LOGIC;
    sk_we0 : OUT STD_LOGIC;
    sk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sk_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sk_ce1 : OUT STD_LOGIC;
    sk_we1 : OUT STD_LOGIC;
    sk_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    seed_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    seed_ce0 : OUT STD_LOGIC;
    seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    seed_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    seed_ce1 : OUT STD_LOGIC;
    seed_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of owcpa_keypair is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (56 downto 0) := "000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (56 downto 0) := "000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (56 downto 0) := "000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (56 downto 0) := "000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (56 downto 0) := "000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (56 downto 0) := "000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (56 downto 0) := "000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (56 downto 0) := "000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (56 downto 0) := "000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (56 downto 0) := "001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (56 downto 0) := "010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (56 downto 0) := "100000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_66 : STD_LOGIC_VECTOR (8 downto 0) := "001100110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv64_1FC : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000111111100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv9_1FC : STD_LOGIC_VECTOR (8 downto 0) := "111111100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_1FD : STD_LOGIC_VECTOR (8 downto 0) := "111111101";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_33_fu_414_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_33_reg_850 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_i_i_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_reg_855 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_i_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_2_fu_537_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_2_reg_865 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_34_fu_610_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_34_reg_874 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal f_coeffs_addr_2_reg_879 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_i_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_35_fu_672_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_35_reg_887 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal h_coeffs_addr_reg_892 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_i6_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_36_fu_734_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_36_reg_900 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_s_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_905 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_37_fu_772_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_37_reg_918 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_i3_fu_778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_reg_923 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_i_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_38_fu_804_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_38_reg_936 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_310_i_fu_810_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_310_i_reg_941 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i7_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_coeffs_addr_reg_951 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_poly_Rq_mul_fu_394_ap_ready : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_394_ap_done : STD_LOGIC;
    signal i_39_fu_821_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_39_reg_964 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal h_coeffs_addr_4_reg_969 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_i2_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal b_coeffs_ce0 : STD_LOGIC;
    signal b_coeffs_we0 : STD_LOGIC;
    signal b_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_coeffs_ce0 : STD_LOGIC;
    signal c_coeffs_we0 : STD_LOGIC;
    signal c_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal s_coeffs_ce0 : STD_LOGIC;
    signal s_coeffs_we0 : STD_LOGIC;
    signal s_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ai2_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal ai2_coeffs_ce0 : STD_LOGIC;
    signal ai2_coeffs_we0 : STD_LOGIC_VECTOR (1 downto 0);
    signal ai2_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal x1_coeffs_ce0 : STD_LOGIC;
    signal x1_coeffs_we0 : STD_LOGIC;
    signal x1_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_ce1 : STD_LOGIC;
    signal x1_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal x2_coeffs_ce0 : STD_LOGIC;
    signal x2_coeffs_we0 : STD_LOGIC_VECTOR (1 downto 0);
    signal x2_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal x2_coeffs_ce1 : STD_LOGIC;
    signal x2_coeffs_we1 : STD_LOGIC_VECTOR (1 downto 0);
    signal x2_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal x3_coeffs_ce0 : STD_LOGIC;
    signal x3_coeffs_we0 : STD_LOGIC;
    signal x3_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal x3_coeffs_ce1 : STD_LOGIC;
    signal x3_coeffs_we1 : STD_LOGIC;
    signal x3_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x4_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal x4_coeffs_ce0 : STD_LOGIC;
    signal x4_coeffs_we0 : STD_LOGIC;
    signal x4_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x4_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x5_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal x5_coeffs_ce0 : STD_LOGIC;
    signal x5_coeffs_we0 : STD_LOGIC;
    signal x5_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_fixed_type_fu_351_ap_start : STD_LOGIC;
    signal grp_sample_fixed_type_fu_351_ap_done : STD_LOGIC;
    signal grp_sample_fixed_type_fu_351_ap_idle : STD_LOGIC;
    signal grp_sample_fixed_type_fu_351_ap_ready : STD_LOGIC;
    signal grp_sample_fixed_type_fu_351_r_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_sample_fixed_type_fu_351_r_coeffs_ce0 : STD_LOGIC;
    signal grp_sample_fixed_type_fu_351_r_coeffs_we0 : STD_LOGIC;
    signal grp_sample_fixed_type_fu_351_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_fixed_type_fu_351_u_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_sample_fixed_type_fu_351_u_ce0 : STD_LOGIC;
    signal grp_sample_fixed_type_fu_351_u_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_sample_fixed_type_fu_351_u_ce1 : STD_LOGIC;
    signal grp_poly_S3_inv_fu_358_ap_start : STD_LOGIC;
    signal grp_poly_S3_inv_fu_358_ap_done : STD_LOGIC;
    signal grp_poly_S3_inv_fu_358_ap_idle : STD_LOGIC;
    signal grp_poly_S3_inv_fu_358_ap_ready : STD_LOGIC;
    signal grp_poly_S3_inv_fu_358_r_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_S3_inv_fu_358_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_inv_fu_358_r_coeffs_we0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_poly_S3_inv_fu_358_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_inv_fu_358_r_coeffs_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_S3_inv_fu_358_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_S3_inv_fu_358_r_coeffs_we1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_poly_S3_inv_fu_358_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_inv_fu_358_a_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_S3_inv_fu_358_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_R2_inv_fu_364_ap_start : STD_LOGIC;
    signal grp_poly_R2_inv_fu_364_ap_done : STD_LOGIC;
    signal grp_poly_R2_inv_fu_364_ap_idle : STD_LOGIC;
    signal grp_poly_R2_inv_fu_364_ap_ready : STD_LOGIC;
    signal grp_poly_R2_inv_fu_364_r_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_R2_inv_fu_364_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_R2_inv_fu_364_r_coeffs_we0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_poly_R2_inv_fu_364_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_R2_inv_fu_364_a_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_R2_inv_fu_364_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_1_fu_370_ap_start : STD_LOGIC;
    signal grp_poly_Sq_tobytes_1_fu_370_ap_done : STD_LOGIC;
    signal grp_poly_Sq_tobytes_1_fu_370_ap_idle : STD_LOGIC;
    signal grp_poly_Sq_tobytes_1_fu_370_ap_ready : STD_LOGIC;
    signal grp_poly_Sq_tobytes_1_fu_370_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_tobytes_1_fu_370_r_ce0 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_1_fu_370_r_we0 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_1_fu_370_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_Sq_tobytes_1_fu_370_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_tobytes_1_fu_370_r_ce1 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_1_fu_370_r_we1 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_1_fu_370_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_Sq_tobytes_1_fu_370_a_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_Sq_tobytes_1_fu_370_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_377_ap_start : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_377_ap_done : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_377_ap_idle : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_377_ap_ready : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_377_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_tobytes_fu_377_r_ce0 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_377_r_we0 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_377_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_Sq_tobytes_fu_377_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_tobytes_fu_377_r_ce1 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_377_r_we1 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_377_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_Sq_tobytes_fu_377_a_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_Sq_tobytes_fu_377_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_384_ap_start : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_384_ap_done : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_384_ap_idle : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_384_ap_ready : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_384_msg_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_tobytes_fu_384_msg_ce0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_384_msg_we0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_384_msg_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_S3_tobytes_fu_384_msg_offset : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_S3_tobytes_fu_384_a_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_S3_tobytes_fu_384_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_384_a_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_tobytes_fu_384_a_coeffs_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_S3_tobytes_fu_384_a_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_384_a_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_mul_fu_394_ap_start : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_394_ap_idle : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_394_r_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_Rq_mul_fu_394_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_394_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_394_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_mul_fu_394_r_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_mul_fu_394_a_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_Rq_mul_fu_394_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_394_a_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_mul_fu_394_b_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_Rq_mul_fu_394_b_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_394_b_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_i_i_reg_274 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_i_reg_285 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_i5_reg_296 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_reg_307 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_i1_reg_318 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal i_1_i_reg_329 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_i2_reg_340 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_sample_fixed_type_fu_351_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_poly_S3_inv_fu_358_ap_start_reg : STD_LOGIC := '0';
    signal grp_poly_R2_inv_fu_364_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_poly_Sq_tobytes_1_fu_370_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_poly_Sq_tobytes_fu_377_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal grp_poly_S3_tobytes_fu_384_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_poly_Rq_mul_fu_394_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal tmp_i_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i7_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_368_i_i_i_fu_597_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_118_i_fu_657_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_118_i1_fu_719_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_354_cast_fu_761_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_401_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_87_fu_429_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_425_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_360_i_i_i_cast_fu_443_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_359_i_i_i_cast_fu_439_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_453_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_89_fu_459_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_50_fu_477_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_318_fu_473_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal fold1_i_i_i_cast_fu_487_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_362_i_i_i_cast_fu_493_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_361_i_i_i_cast_fu_469_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_1_fu_497_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_90_fu_503_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_88_fu_447_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_51_fu_517_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal fold2_i_i_i_cast_fu_527_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_364_i_i_i_cast_fu_533_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_363_i_i_i_cast_fu_513_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_fu_543_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_319_fu_548_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_cast_fu_556_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_365_i_i_i_fu_564_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal not_tmp_72_i_i_i_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_366_i_i_i_cast_c_fu_579_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_367_i_i_i_fu_587_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_365_i_i_i_cast_fu_569_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_367_i_i_i_cast_fu_593_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_55_fu_621_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_320_fu_637_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_116_i_cast_fu_631_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_58_fu_647_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_57_fu_641_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_59_fu_683_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_321_fu_699_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_116_i1_cast_fu_693_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_fu_709_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_61_fu_703_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_322_fu_745_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_218_fu_751_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_323_fu_757_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_324_fu_783_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i5_cast_fu_787_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i4_fu_832_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_325_fu_838_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (56 downto 0);
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal ap_block_state53_on_subcall_done : BOOLEAN;

    component sample_fixed_type IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        u_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        u_ce0 : OUT STD_LOGIC;
        u_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        u_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        u_ce1 : OUT STD_LOGIC;
        u_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component poly_S3_inv IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_R2_inv IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_Sq_tobytes_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_ce0 : OUT STD_LOGIC;
        r_we0 : OUT STD_LOGIC;
        r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_ce1 : OUT STD_LOGIC;
        r_we1 : OUT STD_LOGIC;
        r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_Sq_tobytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_ce0 : OUT STD_LOGIC;
        r_we0 : OUT STD_LOGIC;
        r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_ce1 : OUT STD_LOGIC;
        r_we1 : OUT STD_LOGIC;
        r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_S3_tobytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        msg_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        msg_ce0 : OUT STD_LOGIC;
        msg_we0 : OUT STD_LOGIC;
        msg_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        msg_offset : IN STD_LOGIC_VECTOR (8 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        a_coeffs_ce1 : OUT STD_LOGIC;
        a_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_Rq_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        b_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        b_coeffs_ce0 : OUT STD_LOGIC;
        b_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_S3_inv_b_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_keypair_ai2_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (1 downto 0);
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_keypair_x1_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_keypair_x2_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (1 downto 0);
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC_VECTOR (1 downto 0);
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_keypair_x3_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    b_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 509,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_coeffs_address0,
        ce0 => b_coeffs_ce0,
        we0 => b_coeffs_we0,
        d0 => b_coeffs_d0,
        q0 => b_coeffs_q0);

    c_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 509,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_coeffs_address0,
        ce0 => c_coeffs_ce0,
        we0 => c_coeffs_we0,
        d0 => c_coeffs_d0,
        q0 => c_coeffs_q0);

    s_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 509,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => s_coeffs_address0,
        ce0 => s_coeffs_ce0,
        we0 => s_coeffs_we0,
        d0 => grp_poly_Rq_mul_fu_394_r_coeffs_d0,
        q0 => s_coeffs_q0);

    ai2_coeffs_U : component owcpa_keypair_ai2_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 509,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ai2_coeffs_address0,
        ce0 => ai2_coeffs_ce0,
        we0 => ai2_coeffs_we0,
        d0 => grp_poly_R2_inv_fu_364_r_coeffs_d0,
        q0 => ai2_coeffs_q0);

    x1_coeffs_U : component owcpa_keypair_x1_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 509,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x1_coeffs_address0,
        ce0 => x1_coeffs_ce0,
        we0 => x1_coeffs_we0,
        d0 => x1_coeffs_d0,
        q0 => x1_coeffs_q0,
        address1 => grp_poly_S3_tobytes_fu_384_a_coeffs_address1,
        ce1 => x1_coeffs_ce1,
        q1 => x1_coeffs_q1);

    x2_coeffs_U : component owcpa_keypair_x2_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 509,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x2_coeffs_address0,
        ce0 => x2_coeffs_ce0,
        we0 => x2_coeffs_we0,
        d0 => x2_coeffs_d0,
        q0 => x2_coeffs_q0,
        address1 => x2_coeffs_address1,
        ce1 => x2_coeffs_ce1,
        we1 => x2_coeffs_we1,
        d1 => grp_poly_S3_inv_fu_358_r_coeffs_d1,
        q1 => x2_coeffs_q1);

    x3_coeffs_U : component owcpa_keypair_x3_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 509,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x3_coeffs_address0,
        ce0 => x3_coeffs_ce0,
        we0 => x3_coeffs_we0,
        d0 => x3_coeffs_d0,
        q0 => x3_coeffs_q0,
        address1 => x3_coeffs_address1,
        ce1 => x3_coeffs_ce1,
        we1 => x3_coeffs_we1,
        d1 => x3_coeffs_d1,
        q1 => x3_coeffs_q1);

    x4_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 509,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x4_coeffs_address0,
        ce0 => x4_coeffs_ce0,
        we0 => x4_coeffs_we0,
        d0 => x4_coeffs_d0,
        q0 => x4_coeffs_q0);

    x5_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 509,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x5_coeffs_address0,
        ce0 => x5_coeffs_ce0,
        we0 => x5_coeffs_we0,
        d0 => grp_poly_Rq_mul_fu_394_r_coeffs_d0,
        q0 => x5_coeffs_q0);

    grp_sample_fixed_type_fu_351 : component sample_fixed_type
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sample_fixed_type_fu_351_ap_start,
        ap_done => grp_sample_fixed_type_fu_351_ap_done,
        ap_idle => grp_sample_fixed_type_fu_351_ap_idle,
        ap_ready => grp_sample_fixed_type_fu_351_ap_ready,
        r_coeffs_address0 => grp_sample_fixed_type_fu_351_r_coeffs_address0,
        r_coeffs_ce0 => grp_sample_fixed_type_fu_351_r_coeffs_ce0,
        r_coeffs_we0 => grp_sample_fixed_type_fu_351_r_coeffs_we0,
        r_coeffs_d0 => grp_sample_fixed_type_fu_351_r_coeffs_d0,
        u_address0 => grp_sample_fixed_type_fu_351_u_address0,
        u_ce0 => grp_sample_fixed_type_fu_351_u_ce0,
        u_q0 => seed_q0,
        u_address1 => grp_sample_fixed_type_fu_351_u_address1,
        u_ce1 => grp_sample_fixed_type_fu_351_u_ce1,
        u_q1 => seed_q1);

    grp_poly_S3_inv_fu_358 : component poly_S3_inv
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_S3_inv_fu_358_ap_start,
        ap_done => grp_poly_S3_inv_fu_358_ap_done,
        ap_idle => grp_poly_S3_inv_fu_358_ap_idle,
        ap_ready => grp_poly_S3_inv_fu_358_ap_ready,
        r_coeffs_address0 => grp_poly_S3_inv_fu_358_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_S3_inv_fu_358_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_S3_inv_fu_358_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_S3_inv_fu_358_r_coeffs_d0,
        r_coeffs_q0 => x2_coeffs_q0,
        r_coeffs_address1 => grp_poly_S3_inv_fu_358_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_S3_inv_fu_358_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_S3_inv_fu_358_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_S3_inv_fu_358_r_coeffs_d1,
        r_coeffs_q1 => x2_coeffs_q1,
        a_coeffs_address0 => grp_poly_S3_inv_fu_358_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_S3_inv_fu_358_a_coeffs_ce0,
        a_coeffs_q0 => x1_coeffs_q0);

    grp_poly_R2_inv_fu_364 : component poly_R2_inv
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_R2_inv_fu_364_ap_start,
        ap_done => grp_poly_R2_inv_fu_364_ap_done,
        ap_idle => grp_poly_R2_inv_fu_364_ap_idle,
        ap_ready => grp_poly_R2_inv_fu_364_ap_ready,
        r_coeffs_address0 => grp_poly_R2_inv_fu_364_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_R2_inv_fu_364_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_R2_inv_fu_364_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_R2_inv_fu_364_r_coeffs_d0,
        r_coeffs_q0 => ai2_coeffs_q0,
        a_coeffs_address0 => grp_poly_R2_inv_fu_364_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_R2_inv_fu_364_a_coeffs_ce0,
        a_coeffs_q0 => x3_coeffs_q0);

    grp_poly_Sq_tobytes_1_fu_370 : component poly_Sq_tobytes_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Sq_tobytes_1_fu_370_ap_start,
        ap_done => grp_poly_Sq_tobytes_1_fu_370_ap_done,
        ap_idle => grp_poly_Sq_tobytes_1_fu_370_ap_idle,
        ap_ready => grp_poly_Sq_tobytes_1_fu_370_ap_ready,
        r_address0 => grp_poly_Sq_tobytes_1_fu_370_r_address0,
        r_ce0 => grp_poly_Sq_tobytes_1_fu_370_r_ce0,
        r_we0 => grp_poly_Sq_tobytes_1_fu_370_r_we0,
        r_d0 => grp_poly_Sq_tobytes_1_fu_370_r_d0,
        r_address1 => grp_poly_Sq_tobytes_1_fu_370_r_address1,
        r_ce1 => grp_poly_Sq_tobytes_1_fu_370_r_ce1,
        r_we1 => grp_poly_Sq_tobytes_1_fu_370_r_we1,
        r_d1 => grp_poly_Sq_tobytes_1_fu_370_r_d1,
        a_coeffs_address0 => grp_poly_Sq_tobytes_1_fu_370_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_Sq_tobytes_1_fu_370_a_coeffs_ce0,
        a_coeffs_q0 => x3_coeffs_q0);

    grp_poly_Sq_tobytes_fu_377 : component poly_Sq_tobytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Sq_tobytes_fu_377_ap_start,
        ap_done => grp_poly_Sq_tobytes_fu_377_ap_done,
        ap_idle => grp_poly_Sq_tobytes_fu_377_ap_idle,
        ap_ready => grp_poly_Sq_tobytes_fu_377_ap_ready,
        r_address0 => grp_poly_Sq_tobytes_fu_377_r_address0,
        r_ce0 => grp_poly_Sq_tobytes_fu_377_r_ce0,
        r_we0 => grp_poly_Sq_tobytes_fu_377_r_we0,
        r_d0 => grp_poly_Sq_tobytes_fu_377_r_d0,
        r_address1 => grp_poly_Sq_tobytes_fu_377_r_address1,
        r_ce1 => grp_poly_Sq_tobytes_fu_377_r_ce1,
        r_we1 => grp_poly_Sq_tobytes_fu_377_r_we1,
        r_d1 => grp_poly_Sq_tobytes_fu_377_r_d1,
        a_coeffs_address0 => grp_poly_Sq_tobytes_fu_377_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_Sq_tobytes_fu_377_a_coeffs_ce0,
        a_coeffs_q0 => x3_coeffs_q0);

    grp_poly_S3_tobytes_fu_384 : component poly_S3_tobytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_S3_tobytes_fu_384_ap_start,
        ap_done => grp_poly_S3_tobytes_fu_384_ap_done,
        ap_idle => grp_poly_S3_tobytes_fu_384_ap_idle,
        ap_ready => grp_poly_S3_tobytes_fu_384_ap_ready,
        msg_address0 => grp_poly_S3_tobytes_fu_384_msg_address0,
        msg_ce0 => grp_poly_S3_tobytes_fu_384_msg_ce0,
        msg_we0 => grp_poly_S3_tobytes_fu_384_msg_we0,
        msg_d0 => grp_poly_S3_tobytes_fu_384_msg_d0,
        msg_offset => grp_poly_S3_tobytes_fu_384_msg_offset,
        a_coeffs_address0 => grp_poly_S3_tobytes_fu_384_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_S3_tobytes_fu_384_a_coeffs_ce0,
        a_coeffs_q0 => grp_poly_S3_tobytes_fu_384_a_coeffs_q0,
        a_coeffs_address1 => grp_poly_S3_tobytes_fu_384_a_coeffs_address1,
        a_coeffs_ce1 => grp_poly_S3_tobytes_fu_384_a_coeffs_ce1,
        a_coeffs_q1 => grp_poly_S3_tobytes_fu_384_a_coeffs_q1);

    grp_poly_Rq_mul_fu_394 : component poly_Rq_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Rq_mul_fu_394_ap_start,
        ap_done => grp_poly_Rq_mul_fu_394_ap_done,
        ap_idle => grp_poly_Rq_mul_fu_394_ap_idle,
        ap_ready => grp_poly_Rq_mul_fu_394_ap_ready,
        r_coeffs_address0 => grp_poly_Rq_mul_fu_394_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_Rq_mul_fu_394_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_Rq_mul_fu_394_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_Rq_mul_fu_394_r_coeffs_d0,
        r_coeffs_q0 => grp_poly_Rq_mul_fu_394_r_coeffs_q0,
        a_coeffs_address0 => grp_poly_Rq_mul_fu_394_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_Rq_mul_fu_394_a_coeffs_ce0,
        a_coeffs_q0 => grp_poly_Rq_mul_fu_394_a_coeffs_q0,
        b_coeffs_address0 => grp_poly_Rq_mul_fu_394_b_coeffs_address0,
        b_coeffs_ce0 => grp_poly_Rq_mul_fu_394_b_coeffs_ce0,
        b_coeffs_q0 => grp_poly_Rq_mul_fu_394_b_coeffs_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_poly_R2_inv_fu_364_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_R2_inv_fu_364_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    grp_poly_R2_inv_fu_364_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_R2_inv_fu_364_ap_ready = ap_const_logic_1)) then 
                    grp_poly_R2_inv_fu_364_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_Rq_mul_fu_394_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Rq_mul_fu_394_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((exitcond_i2_fu_815_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond_i7_fu_798_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond_fu_728_p2 = ap_const_lv1_1)))) then 
                    grp_poly_Rq_mul_fu_394_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Rq_mul_fu_394_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Rq_mul_fu_394_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_S3_inv_fu_358_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_S3_inv_fu_358_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_poly_S3_inv_fu_358_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_S3_inv_fu_358_ap_ready = ap_const_logic_1)) then 
                    grp_poly_S3_inv_fu_358_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_S3_tobytes_fu_384_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_S3_tobytes_fu_384_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    grp_poly_S3_tobytes_fu_384_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_S3_tobytes_fu_384_ap_ready = ap_const_logic_1)) then 
                    grp_poly_S3_tobytes_fu_384_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_Sq_tobytes_1_fu_370_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Sq_tobytes_1_fu_370_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond_i2_fu_815_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                    grp_poly_Sq_tobytes_1_fu_370_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Sq_tobytes_1_fu_370_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Sq_tobytes_1_fu_370_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_Sq_tobytes_fu_377_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Sq_tobytes_fu_377_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                    grp_poly_Sq_tobytes_fu_377_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Sq_tobytes_fu_377_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Sq_tobytes_fu_377_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sample_fixed_type_fu_351_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sample_fixed_type_fu_351_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_sample_fixed_type_fu_351_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sample_fixed_type_fu_351_ap_ready = ap_const_logic_1)) then 
                    grp_sample_fixed_type_fu_351_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_i_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond1_i_fu_766_p2 = ap_const_lv1_1))) then 
                i_1_i_reg_329 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_1_i_reg_329 <= i_38_reg_936;
            end if; 
        end if;
    end process;

    i_i1_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_i1_reg_318 <= i_37_reg_918;
            elsif (((grp_poly_R2_inv_fu_364_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                i_i1_reg_318 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_i2_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                i_i2_reg_340 <= i_39_reg_964;
            elsif (((grp_poly_Rq_mul_fu_394_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                i_i2_reg_340 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_i5_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_i_fu_604_p2 = ap_const_lv1_1))) then 
                i_i5_reg_296 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_i5_reg_296 <= i_35_reg_887;
            end if; 
        end if;
    end process;

    i_i_i_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_i_i_reg_274 <= i_33_reg_850;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_i_reg_274 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_i_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_i_reg_285 <= i_34_reg_874;
            elsif (((grp_poly_S3_tobytes_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_i_reg_285 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_i6_fu_666_p2 = ap_const_lv1_1))) then 
                i_reg_307 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_reg_307 <= i_36_reg_900;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_i_fu_604_p2 = ap_const_lv1_0))) then
                f_coeffs_addr_2_reg_879 <= tmp_i_fu_616_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state51) and (exitcond_i2_fu_815_p2 = ap_const_lv1_0))) then
                h_coeffs_addr_4_reg_969 <= tmp_i2_fu_827_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_i6_fu_666_p2 = ap_const_lv1_0))) then
                h_coeffs_addr_reg_892 <= tmp_i7_fu_678_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_33_reg_850 <= i_33_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_34_reg_874 <= i_34_fu_610_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_35_reg_887 <= i_35_fu_672_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_36_reg_900 <= i_36_fu_734_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                i_37_reg_918 <= i_37_fu_772_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                i_38_reg_936 <= i_38_fu_804_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                i_39_reg_964 <= i_39_fu_821_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                r_2_reg_865 <= r_2_fu_537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond_i7_fu_798_p2 = ap_const_lv1_0))) then
                    tmp_310_i_reg_941(8 downto 0) <= tmp_310_i_fu_810_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond1_i_fu_766_p2 = ap_const_lv1_0))) then
                    tmp_i3_reg_923(8 downto 0) <= tmp_i3_fu_778_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_i_fu_408_p2 = ap_const_lv1_0))) then
                    tmp_i_i_reg_855(8 downto 0) <= tmp_i_i_fu_420_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond_fu_728_p2 = ap_const_lv1_0))) then
                    tmp_s_reg_905(8 downto 0) <= tmp_s_fu_740_p1(8 downto 0);
            end if;
        end if;
    end process;
    tmp_i_i_reg_855(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_s_reg_905(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_i3_reg_923(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_310_i_reg_941(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_i_i_fu_408_p2, ap_CS_fsm_state11, exitcond_i_fu_604_p2, ap_CS_fsm_state13, exitcond_i6_fu_666_p2, ap_CS_fsm_state15, exitcond_fu_728_p2, ap_CS_fsm_state20, exitcond1_i_fu_766_p2, ap_CS_fsm_state22, exitcond_i7_fu_798_p2, ap_CS_fsm_state50, grp_poly_Rq_mul_fu_394_ap_done, ap_CS_fsm_state51, exitcond_i2_fu_815_p2, grp_poly_R2_inv_fu_364_ap_done, grp_poly_Sq_tobytes_fu_377_ap_done, grp_poly_S3_tobytes_fu_384_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state19, ap_CS_fsm_state6, ap_CS_fsm_state53, ap_CS_fsm_state57, ap_CS_fsm_state8, ap_CS_fsm_state17, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state55, ap_block_state6_on_subcall_done, ap_block_state53_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_i_fu_408_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_poly_S3_tobytes_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_poly_S3_tobytes_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_i_fu_604_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_i6_fu_666_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond_fu_728_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state17 => 
                if (((grp_poly_Rq_mul_fu_394_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_poly_R2_inv_fu_364_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond1_i_fu_766_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond_i7_fu_798_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state24 => 
                if (((grp_poly_Rq_mul_fu_394_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((grp_poly_Rq_mul_fu_394_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((grp_poly_Rq_mul_fu_394_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((grp_poly_Rq_mul_fu_394_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((grp_poly_Rq_mul_fu_394_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((grp_poly_Rq_mul_fu_394_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((grp_poly_Rq_mul_fu_394_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((grp_poly_Rq_mul_fu_394_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((grp_poly_Rq_mul_fu_394_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((grp_poly_Rq_mul_fu_394_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((exitcond_i2_fu_815_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state53 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and (ap_const_boolean_0 = ap_block_state53_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                if (((grp_poly_Rq_mul_fu_394_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                if (((grp_poly_Sq_tobytes_fu_377_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ai2_coeffs_address0_assign_proc : process(ap_CS_fsm_state22, tmp_310_i_fu_810_p1, grp_poly_R2_inv_fu_364_r_coeffs_address0, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ai2_coeffs_address0 <= tmp_310_i_fu_810_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ai2_coeffs_address0 <= grp_poly_R2_inv_fu_364_r_coeffs_address0;
        else 
            ai2_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    ai2_coeffs_ce0_assign_proc : process(ap_CS_fsm_state22, grp_poly_R2_inv_fu_364_r_coeffs_ce0, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ai2_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ai2_coeffs_ce0 <= grp_poly_R2_inv_fu_364_r_coeffs_ce0;
        else 
            ai2_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ai2_coeffs_we0_assign_proc : process(grp_poly_R2_inv_fu_364_r_coeffs_we0, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ai2_coeffs_we0 <= grp_poly_R2_inv_fu_364_r_coeffs_we0;
        else 
            ai2_coeffs_we0 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state53_on_subcall_done_assign_proc : process(grp_poly_Rq_mul_fu_394_ap_done, grp_poly_Sq_tobytes_1_fu_370_ap_done)
    begin
                ap_block_state53_on_subcall_done <= ((grp_poly_Sq_tobytes_1_fu_370_ap_done = ap_const_logic_0) or (grp_poly_Rq_mul_fu_394_ap_done = ap_const_logic_0));
    end process;


    ap_block_state6_on_subcall_done_assign_proc : process(grp_sample_fixed_type_fu_351_ap_done, grp_poly_S3_inv_fu_358_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((grp_poly_S3_inv_fu_358_ap_done = ap_const_logic_0) or (grp_sample_fixed_type_fu_351_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_poly_Sq_tobytes_fu_377_ap_done, ap_CS_fsm_state57)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_poly_Sq_tobytes_fu_377_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_poly_Sq_tobytes_fu_377_ap_done, ap_CS_fsm_state57)
    begin
        if (((grp_poly_Sq_tobytes_fu_377_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_coeffs_address0_assign_proc : process(tmp_i3_reg_923, grp_poly_Rq_mul_fu_394_b_coeffs_address0, ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            b_coeffs_address0 <= tmp_i3_reg_923(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            b_coeffs_address0 <= grp_poly_Rq_mul_fu_394_b_coeffs_address0;
        else 
            b_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    b_coeffs_ce0_assign_proc : process(grp_poly_Rq_mul_fu_394_b_coeffs_ce0, ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            b_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            b_coeffs_ce0 <= grp_poly_Rq_mul_fu_394_b_coeffs_ce0;
        else 
            b_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_coeffs_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i5_cast_fu_787_p2),16));

    b_coeffs_we0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            b_coeffs_we0 <= ap_const_logic_1;
        else 
            b_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    c_cast_fu_556_p3 <= 
        ap_const_lv3_7 when (tmp_319_fu_548_p3(0) = '1') else 
        ap_const_lv3_0;
    c_coeffs_addr_reg_951 <= ap_const_lv64_0(9 - 1 downto 0);

    c_coeffs_address0_assign_proc : process(c_coeffs_addr_reg_951, ap_CS_fsm_state25, grp_poly_Rq_mul_fu_394_r_coeffs_address0, grp_poly_Rq_mul_fu_394_a_coeffs_address0, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state46, ap_CS_fsm_state26, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            c_coeffs_address0 <= c_coeffs_addr_reg_951;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_coeffs_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            c_coeffs_address0 <= grp_poly_Rq_mul_fu_394_a_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            c_coeffs_address0 <= grp_poly_Rq_mul_fu_394_r_coeffs_address0;
        else 
            c_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    c_coeffs_ce0_assign_proc : process(ap_CS_fsm_state25, grp_poly_Rq_mul_fu_394_r_coeffs_ce0, grp_poly_Rq_mul_fu_394_a_coeffs_ce0, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state46, ap_CS_fsm_state26, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            c_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            c_coeffs_ce0 <= grp_poly_Rq_mul_fu_394_a_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            c_coeffs_ce0 <= grp_poly_Rq_mul_fu_394_r_coeffs_ce0;
        else 
            c_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_coeffs_d0_assign_proc : process(grp_poly_Rq_mul_fu_394_r_coeffs_d0, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state42, ap_CS_fsm_state26, grp_fu_401_p2, ap_CS_fsm_state32, ap_CS_fsm_state38, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            c_coeffs_d0 <= grp_fu_401_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            c_coeffs_d0 <= grp_poly_Rq_mul_fu_394_r_coeffs_d0;
        else 
            c_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c_coeffs_we0_assign_proc : process(grp_poly_Rq_mul_fu_394_r_coeffs_we0, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state42, ap_CS_fsm_state26, ap_CS_fsm_state32, ap_CS_fsm_state38, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            c_coeffs_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            c_coeffs_we0 <= grp_poly_Rq_mul_fu_394_r_coeffs_we0;
        else 
            c_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i_fu_766_p2 <= "1" when (i_i1_reg_318 = ap_const_lv9_1FD) else "0";
    exitcond_fu_728_p2 <= "1" when (i_reg_307 = ap_const_lv9_1FD) else "0";
    exitcond_i2_fu_815_p2 <= "1" when (i_i2_reg_340 = ap_const_lv9_1FD) else "0";
    exitcond_i6_fu_666_p2 <= "1" when (i_i5_reg_296 = ap_const_lv9_1FD) else "0";
    exitcond_i7_fu_798_p2 <= "1" when (i_1_i_reg_329 = ap_const_lv9_1FD) else "0";
    exitcond_i_fu_604_p2 <= "1" when (i_i_reg_285 = ap_const_lv9_1FD) else "0";
    exitcond_i_i_fu_408_p2 <= "1" when (i_i_i_reg_274 = ap_const_lv9_1FC) else "0";
    fold1_i_i_i_cast_fu_487_p2 <= std_logic_vector(unsigned(tmp_50_fu_477_p4) + unsigned(tmp_318_fu_473_p1));
    fold2_i_i_i_cast_fu_527_p2 <= std_logic_vector(unsigned(fold1_i_i_i_cast_fu_487_p2) + unsigned(tmp_51_fu_517_p4));
    grp_fu_401_p2 <= std_logic_vector(unsigned(c_coeffs_q0) + unsigned(ap_const_lv16_2));
    grp_poly_R2_inv_fu_364_ap_start <= grp_poly_R2_inv_fu_364_ap_start_reg;

    grp_poly_Rq_mul_fu_394_a_coeffs_q0_assign_proc : process(ap_CS_fsm_state50, c_coeffs_q0, s_coeffs_q0, x2_coeffs_q0, x4_coeffs_q0, x5_coeffs_q0, ap_CS_fsm_state53, ap_CS_fsm_state17, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            grp_poly_Rq_mul_fu_394_a_coeffs_q0 <= x5_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_poly_Rq_mul_fu_394_a_coeffs_q0 <= s_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_poly_Rq_mul_fu_394_a_coeffs_q0 <= c_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            grp_poly_Rq_mul_fu_394_a_coeffs_q0 <= x4_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_poly_Rq_mul_fu_394_a_coeffs_q0 <= x2_coeffs_q0;
        else 
            grp_poly_Rq_mul_fu_394_a_coeffs_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_poly_Rq_mul_fu_394_ap_start <= grp_poly_Rq_mul_fu_394_ap_start_reg;

    grp_poly_Rq_mul_fu_394_b_coeffs_q0_assign_proc : process(ap_CS_fsm_state50, b_coeffs_q0, s_coeffs_q0, x1_coeffs_q0, x2_coeffs_q0, x4_coeffs_q0, ap_CS_fsm_state53, ap_CS_fsm_state17, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            grp_poly_Rq_mul_fu_394_b_coeffs_q0 <= x2_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_poly_Rq_mul_fu_394_b_coeffs_q0 <= s_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_poly_Rq_mul_fu_394_b_coeffs_q0 <= x4_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_poly_Rq_mul_fu_394_b_coeffs_q0 <= b_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            grp_poly_Rq_mul_fu_394_b_coeffs_q0 <= x1_coeffs_q0;
        else 
            grp_poly_Rq_mul_fu_394_b_coeffs_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_Rq_mul_fu_394_r_coeffs_q0_assign_proc : process(ap_CS_fsm_state50, c_coeffs_q0, s_coeffs_q0, x3_coeffs_q0, x4_coeffs_q0, x5_coeffs_q0, ap_CS_fsm_state53, ap_CS_fsm_state17, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            grp_poly_Rq_mul_fu_394_r_coeffs_q0 <= x5_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_poly_Rq_mul_fu_394_r_coeffs_q0 <= x4_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_poly_Rq_mul_fu_394_r_coeffs_q0 <= s_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_poly_Rq_mul_fu_394_r_coeffs_q0 <= c_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            grp_poly_Rq_mul_fu_394_r_coeffs_q0 <= x3_coeffs_q0;
        else 
            grp_poly_Rq_mul_fu_394_r_coeffs_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_poly_S3_inv_fu_358_ap_start <= grp_poly_S3_inv_fu_358_ap_start_reg;

    grp_poly_S3_tobytes_fu_384_a_coeffs_q0_assign_proc : process(x1_coeffs_q0, x2_coeffs_q0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_poly_S3_tobytes_fu_384_a_coeffs_q0 <= x2_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_poly_S3_tobytes_fu_384_a_coeffs_q0 <= x1_coeffs_q0;
        else 
            grp_poly_S3_tobytes_fu_384_a_coeffs_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_S3_tobytes_fu_384_a_coeffs_q1_assign_proc : process(x1_coeffs_q1, x2_coeffs_q1, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_poly_S3_tobytes_fu_384_a_coeffs_q1 <= x2_coeffs_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_poly_S3_tobytes_fu_384_a_coeffs_q1 <= x1_coeffs_q1;
        else 
            grp_poly_S3_tobytes_fu_384_a_coeffs_q1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_poly_S3_tobytes_fu_384_ap_start <= grp_poly_S3_tobytes_fu_384_ap_start_reg;

    grp_poly_S3_tobytes_fu_384_msg_offset_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_poly_S3_tobytes_fu_384_msg_offset <= ap_const_lv9_66;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_poly_S3_tobytes_fu_384_msg_offset <= ap_const_lv9_0;
        else 
            grp_poly_S3_tobytes_fu_384_msg_offset <= "XXXXXXXXX";
        end if; 
    end process;

    grp_poly_Sq_tobytes_1_fu_370_ap_start <= grp_poly_Sq_tobytes_1_fu_370_ap_start_reg;
    grp_poly_Sq_tobytes_fu_377_ap_start <= grp_poly_Sq_tobytes_fu_377_ap_start_reg;
    grp_sample_fixed_type_fu_351_ap_start <= grp_sample_fixed_type_fu_351_ap_start_reg;
    i_33_fu_414_p2 <= std_logic_vector(unsigned(i_i_i_reg_274) + unsigned(ap_const_lv9_1));
    i_34_fu_610_p2 <= std_logic_vector(unsigned(i_i_reg_285) + unsigned(ap_const_lv9_1));
    i_35_fu_672_p2 <= std_logic_vector(unsigned(i_i5_reg_296) + unsigned(ap_const_lv9_1));
    i_36_fu_734_p2 <= std_logic_vector(unsigned(i_reg_307) + unsigned(ap_const_lv9_1));
    i_37_fu_772_p2 <= std_logic_vector(unsigned(i_i1_reg_318) + unsigned(ap_const_lv9_1));
    i_38_fu_804_p2 <= std_logic_vector(unsigned(i_1_i_reg_329) + unsigned(ap_const_lv9_1));
    i_39_fu_821_p2 <= std_logic_vector(unsigned(i_i2_reg_340) + unsigned(ap_const_lv9_1));
    not_tmp_72_i_i_i_fu_573_p2 <= (tmp_319_fu_548_p3 xor ap_const_lv1_1);
    pk_address0 <= grp_poly_Sq_tobytes_fu_377_r_address0;
    pk_address1 <= grp_poly_Sq_tobytes_fu_377_r_address1;
    pk_ce0 <= grp_poly_Sq_tobytes_fu_377_r_ce0;
    pk_ce1 <= grp_poly_Sq_tobytes_fu_377_r_ce1;
    pk_d0 <= grp_poly_Sq_tobytes_fu_377_r_d0;
    pk_d1 <= grp_poly_Sq_tobytes_fu_377_r_d1;
    pk_we0 <= grp_poly_Sq_tobytes_fu_377_r_we0;
    pk_we1 <= grp_poly_Sq_tobytes_fu_377_r_we1;
    r_1_fu_497_p2 <= std_logic_vector(unsigned(tmp_362_i_i_i_cast_fu_493_p1) + unsigned(tmp_361_i_i_i_cast_fu_469_p1));
    r_2_fu_537_p2 <= std_logic_vector(unsigned(tmp_364_i_i_i_cast_fu_533_p1) + unsigned(tmp_363_i_i_i_cast_fu_513_p1));
    r_fu_453_p2 <= std_logic_vector(unsigned(tmp_360_i_i_i_cast_fu_443_p1) + unsigned(tmp_359_i_i_i_cast_fu_439_p1));

    s_coeffs_address0_assign_proc : process(grp_poly_Rq_mul_fu_394_r_coeffs_address0, grp_poly_Rq_mul_fu_394_a_coeffs_address0, grp_poly_Rq_mul_fu_394_b_coeffs_address0, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            s_coeffs_address0 <= grp_poly_Rq_mul_fu_394_b_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            s_coeffs_address0 <= grp_poly_Rq_mul_fu_394_a_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            s_coeffs_address0 <= grp_poly_Rq_mul_fu_394_r_coeffs_address0;
        else 
            s_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    s_coeffs_ce0_assign_proc : process(grp_poly_Rq_mul_fu_394_r_coeffs_ce0, grp_poly_Rq_mul_fu_394_a_coeffs_ce0, grp_poly_Rq_mul_fu_394_b_coeffs_ce0, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            s_coeffs_ce0 <= grp_poly_Rq_mul_fu_394_b_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            s_coeffs_ce0 <= grp_poly_Rq_mul_fu_394_a_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            s_coeffs_ce0 <= grp_poly_Rq_mul_fu_394_r_coeffs_ce0;
        else 
            s_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_coeffs_we0_assign_proc : process(grp_poly_Rq_mul_fu_394_r_coeffs_we0, ap_CS_fsm_state28, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            s_coeffs_we0 <= grp_poly_Rq_mul_fu_394_r_coeffs_we0;
        else 
            s_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_address0_assign_proc : process(ap_CS_fsm_state2, tmp_i_i_fu_420_p1, grp_sample_fixed_type_fu_351_u_address0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seed_address0 <= tmp_i_i_fu_420_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            seed_address0 <= grp_sample_fixed_type_fu_351_u_address0;
        else 
            seed_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    seed_address1 <= grp_sample_fixed_type_fu_351_u_address1;

    seed_ce0_assign_proc : process(ap_CS_fsm_state2, grp_sample_fixed_type_fu_351_u_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seed_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            seed_ce0 <= grp_sample_fixed_type_fu_351_u_ce0;
        else 
            seed_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_ce1_assign_proc : process(grp_sample_fixed_type_fu_351_u_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            seed_ce1 <= grp_sample_fixed_type_fu_351_u_ce1;
        else 
            seed_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sk_address0_assign_proc : process(grp_poly_Sq_tobytes_1_fu_370_r_address0, grp_poly_S3_tobytes_fu_384_msg_address0, ap_CS_fsm_state10, ap_CS_fsm_state53, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            sk_address0 <= grp_poly_S3_tobytes_fu_384_msg_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            sk_address0 <= grp_poly_Sq_tobytes_1_fu_370_r_address0;
        else 
            sk_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    sk_address1 <= grp_poly_Sq_tobytes_1_fu_370_r_address1;

    sk_ce0_assign_proc : process(grp_poly_Sq_tobytes_1_fu_370_r_ce0, grp_poly_S3_tobytes_fu_384_msg_ce0, ap_CS_fsm_state10, ap_CS_fsm_state53, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            sk_ce0 <= grp_poly_S3_tobytes_fu_384_msg_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            sk_ce0 <= grp_poly_Sq_tobytes_1_fu_370_r_ce0;
        else 
            sk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_ce1_assign_proc : process(grp_poly_Sq_tobytes_1_fu_370_r_ce1, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            sk_ce1 <= grp_poly_Sq_tobytes_1_fu_370_r_ce1;
        else 
            sk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sk_d0_assign_proc : process(grp_poly_Sq_tobytes_1_fu_370_r_d0, grp_poly_S3_tobytes_fu_384_msg_d0, ap_CS_fsm_state10, ap_CS_fsm_state53, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            sk_d0 <= grp_poly_S3_tobytes_fu_384_msg_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            sk_d0 <= grp_poly_Sq_tobytes_1_fu_370_r_d0;
        else 
            sk_d0 <= "XXXXXXXX";
        end if; 
    end process;

    sk_d1 <= grp_poly_Sq_tobytes_1_fu_370_r_d1;

    sk_we0_assign_proc : process(grp_poly_Sq_tobytes_1_fu_370_r_we0, grp_poly_S3_tobytes_fu_384_msg_we0, ap_CS_fsm_state10, ap_CS_fsm_state53, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            sk_we0 <= grp_poly_S3_tobytes_fu_384_msg_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            sk_we0 <= grp_poly_Sq_tobytes_1_fu_370_r_we0;
        else 
            sk_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_we1_assign_proc : process(grp_poly_Sq_tobytes_1_fu_370_r_we1, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            sk_we1 <= grp_poly_Sq_tobytes_1_fu_370_r_we1;
        else 
            sk_we1 <= ap_const_logic_0;
        end if; 
    end process;

    t_fu_543_p2 <= std_logic_vector(signed(ap_const_lv3_5) + signed(r_2_reg_865));
    tmp_116_i1_cast_fu_693_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(tmp_59_fu_683_p4));
    tmp_116_i_cast_fu_631_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(tmp_55_fu_621_p4));
    tmp_118_i1_fu_719_p3 <= (tmp_62_fu_709_p4 & tmp_61_fu_703_p2);
    tmp_118_i_fu_657_p3 <= (tmp_58_fu_647_p4 & tmp_57_fu_641_p2);
    tmp_218_fu_751_p2 <= std_logic_vector(unsigned(tmp_322_fu_745_p2) - unsigned(x3_coeffs_q0));
    tmp_310_i_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_i_reg_329),64));
    tmp_318_fu_473_p1 <= seed_q0(2 - 1 downto 0);
    tmp_319_fu_548_p3 <= t_fu_543_p2(2 downto 2);
    tmp_320_fu_637_p1 <= x1_coeffs_q0(11 - 1 downto 0);
    tmp_321_fu_699_p1 <= x3_coeffs_q0(11 - 1 downto 0);
    tmp_322_fu_745_p2 <= std_logic_vector(shift_left(unsigned(x3_coeffs_q0),to_integer(unsigned('0' & ap_const_lv16_2(16-1 downto 0)))));
    tmp_323_fu_757_p1 <= tmp_218_fu_751_p2(11 - 1 downto 0);
    tmp_324_fu_783_p1 <= x3_coeffs_q0(11 - 1 downto 0);
    tmp_325_fu_838_p1 <= tmp_i4_fu_832_p2(11 - 1 downto 0);
    tmp_354_cast_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_323_fu_757_p1),16));
    tmp_359_i_i_i_cast_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_87_fu_429_p4),5));
    tmp_360_i_i_i_cast_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_425_p1),5));
    tmp_361_i_i_i_cast_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_89_fu_459_p4),4));
    tmp_362_i_i_i_cast_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold1_i_i_i_cast_fu_487_p2),4));
    tmp_363_i_i_i_cast_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_90_fu_503_p4),3));
    tmp_364_i_i_i_cast_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold2_i_i_i_cast_fu_527_p2),3));
    tmp_365_i_i_i_cast_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_365_i_i_i_fu_564_p2),16));
    tmp_365_i_i_i_fu_564_p2 <= (r_2_reg_865 and c_cast_fu_556_p3);
    tmp_366_i_i_i_cast_c_fu_579_p3 <= 
        ap_const_lv3_7 when (not_tmp_72_i_i_i_fu_573_p2(0) = '1') else 
        ap_const_lv3_0;
        tmp_367_i_i_i_cast_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_367_i_i_i_fu_587_p2),16));

    tmp_367_i_i_i_fu_587_p2 <= (tmp_366_i_i_i_cast_c_fu_579_p3 and t_fu_543_p2);
    tmp_368_i_i_i_fu_597_p2 <= (tmp_367_i_i_i_cast_fu_593_p1 xor tmp_365_i_i_i_cast_fu_569_p1);
    tmp_50_fu_477_p4 <= seed_q0(5 downto 4);
    tmp_51_fu_517_p4 <= tmp_88_fu_447_p2(3 downto 2);
    tmp_55_fu_621_p4 <= x1_coeffs_q0(11 downto 1);
    tmp_57_fu_641_p2 <= (tmp_320_fu_637_p1 or tmp_116_i_cast_fu_631_p2);
    tmp_58_fu_647_p4 <= x1_coeffs_q0(15 downto 11);
    tmp_59_fu_683_p4 <= x3_coeffs_q0(11 downto 1);
    tmp_61_fu_703_p2 <= (tmp_321_fu_699_p1 or tmp_116_i1_cast_fu_693_p2);
    tmp_62_fu_709_p4 <= x3_coeffs_q0(15 downto 11);
    tmp_87_fu_429_p4 <= seed_q0(7 downto 4);
    tmp_88_fu_447_p2 <= std_logic_vector(unsigned(tmp_87_fu_429_p4) + unsigned(tmp_fu_425_p1));
    tmp_89_fu_459_p4 <= r_fu_453_p2(4 downto 2);
    tmp_90_fu_503_p4 <= r_1_fu_497_p2(3 downto 2);
    tmp_fu_425_p1 <= seed_q0(4 - 1 downto 0);
    tmp_i2_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i2_reg_340),64));
    tmp_i3_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_318),64));
    tmp_i4_fu_832_p2 <= std_logic_vector(unsigned(x3_coeffs_q0) - unsigned(x3_coeffs_q1));
    tmp_i5_cast_fu_787_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(tmp_324_fu_783_p1));
    tmp_i7_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i5_reg_296),64));
    tmp_i_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_285),64));
    tmp_i_i_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i_reg_274),64));
    tmp_s_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_307),64));

    x1_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, tmp_i_i_reg_855, ap_CS_fsm_state11, f_coeffs_addr_2_reg_879, ap_CS_fsm_state50, grp_poly_S3_inv_fu_358_a_coeffs_address0, grp_poly_S3_tobytes_fu_384_a_coeffs_address0, grp_poly_Rq_mul_fu_394_b_coeffs_address0, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state17, ap_CS_fsm_state48, tmp_i_fu_616_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x1_coeffs_address0 <= f_coeffs_addr_2_reg_879;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x1_coeffs_address0 <= tmp_i_fu_616_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x1_coeffs_address0 <= tmp_i_i_reg_855(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_address0 <= ap_const_lv64_1FC(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            x1_coeffs_address0 <= grp_poly_Rq_mul_fu_394_b_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x1_coeffs_address0 <= grp_poly_S3_tobytes_fu_384_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x1_coeffs_address0 <= grp_poly_S3_inv_fu_358_a_coeffs_address0;
        else 
            x1_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state50, grp_poly_S3_inv_fu_358_a_coeffs_ce0, grp_poly_S3_tobytes_fu_384_a_coeffs_ce0, grp_poly_Rq_mul_fu_394_b_coeffs_ce0, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state17, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x1_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            x1_coeffs_ce0 <= grp_poly_Rq_mul_fu_394_b_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x1_coeffs_ce0 <= grp_poly_S3_tobytes_fu_384_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x1_coeffs_ce0 <= grp_poly_S3_inv_fu_358_a_coeffs_ce0;
        else 
            x1_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_ce1_assign_proc : process(grp_poly_S3_tobytes_fu_384_a_coeffs_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x1_coeffs_ce1 <= grp_poly_S3_tobytes_fu_384_a_coeffs_ce1;
        else 
            x1_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state12, tmp_368_i_i_i_fu_597_p2, tmp_118_i_fu_657_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x1_coeffs_d0 <= tmp_118_i_fu_657_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x1_coeffs_d0 <= tmp_368_i_i_i_fu_597_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_d0 <= ap_const_lv16_0;
        else 
            x1_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_we0_assign_proc : process(ap_CS_fsm_state2, exitcond_i_i_fu_408_p2, ap_CS_fsm_state4, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_i_fu_408_p2 = ap_const_lv1_1)))) then 
            x1_coeffs_we0 <= ap_const_logic_1;
        else 
            x1_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_address0_assign_proc : process(tmp_s_reg_905, grp_poly_S3_inv_fu_358_r_coeffs_address0, grp_poly_S3_tobytes_fu_384_a_coeffs_address0, grp_poly_Rq_mul_fu_394_a_coeffs_address0, grp_poly_Rq_mul_fu_394_b_coeffs_address0, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state6, ap_CS_fsm_state53, ap_CS_fsm_state17, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            x2_coeffs_address0 <= tmp_s_reg_905(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            x2_coeffs_address0 <= grp_poly_Rq_mul_fu_394_b_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            x2_coeffs_address0 <= grp_poly_Rq_mul_fu_394_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x2_coeffs_address0 <= grp_poly_S3_tobytes_fu_384_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_address0 <= grp_poly_S3_inv_fu_358_r_coeffs_address0;
        else 
            x2_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_address1_assign_proc : process(grp_poly_S3_inv_fu_358_r_coeffs_address1, grp_poly_S3_tobytes_fu_384_a_coeffs_address1, ap_CS_fsm_state10, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x2_coeffs_address1 <= grp_poly_S3_tobytes_fu_384_a_coeffs_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_address1 <= grp_poly_S3_inv_fu_358_r_coeffs_address1;
        else 
            x2_coeffs_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_ce0_assign_proc : process(grp_poly_S3_inv_fu_358_r_coeffs_ce0, grp_poly_S3_tobytes_fu_384_a_coeffs_ce0, grp_poly_Rq_mul_fu_394_a_coeffs_ce0, grp_poly_Rq_mul_fu_394_b_coeffs_ce0, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state6, ap_CS_fsm_state53, ap_CS_fsm_state17, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            x2_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            x2_coeffs_ce0 <= grp_poly_Rq_mul_fu_394_b_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            x2_coeffs_ce0 <= grp_poly_Rq_mul_fu_394_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x2_coeffs_ce0 <= grp_poly_S3_tobytes_fu_384_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_ce0 <= grp_poly_S3_inv_fu_358_r_coeffs_ce0;
        else 
            x2_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_ce1_assign_proc : process(grp_poly_S3_inv_fu_358_r_coeffs_ce1, grp_poly_S3_tobytes_fu_384_a_coeffs_ce1, ap_CS_fsm_state10, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x2_coeffs_ce1 <= grp_poly_S3_tobytes_fu_384_a_coeffs_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_ce1 <= grp_poly_S3_inv_fu_358_r_coeffs_ce1;
        else 
            x2_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_d0_assign_proc : process(grp_poly_S3_inv_fu_358_r_coeffs_d0, ap_CS_fsm_state16, ap_CS_fsm_state6, tmp_354_cast_fu_761_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            x2_coeffs_d0 <= tmp_354_cast_fu_761_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_d0 <= grp_poly_S3_inv_fu_358_r_coeffs_d0;
        else 
            x2_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_we0_assign_proc : process(grp_poly_S3_inv_fu_358_r_coeffs_we0, ap_CS_fsm_state16, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            x2_coeffs_we0 <= ap_const_lv2_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_we0 <= grp_poly_S3_inv_fu_358_r_coeffs_we0;
        else 
            x2_coeffs_we0 <= ap_const_lv2_0;
        end if; 
    end process;


    x2_coeffs_we1_assign_proc : process(grp_poly_S3_inv_fu_358_r_coeffs_we1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_we1 <= grp_poly_S3_inv_fu_358_r_coeffs_we1;
        else 
            x2_coeffs_we1 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;


    x3_coeffs_address0_assign_proc : process(ap_CS_fsm_state13, h_coeffs_addr_reg_892, ap_CS_fsm_state15, tmp_s_fu_740_p1, exitcond_fu_728_p2, ap_CS_fsm_state20, tmp_i3_fu_778_p1, ap_CS_fsm_state50, ap_CS_fsm_state51, exitcond_i2_fu_815_p2, grp_sample_fixed_type_fu_351_r_coeffs_address0, grp_poly_R2_inv_fu_364_a_coeffs_address0, grp_poly_Sq_tobytes_1_fu_370_a_coeffs_address0, grp_poly_Sq_tobytes_fu_377_a_coeffs_address0, grp_poly_Rq_mul_fu_394_r_coeffs_address0, ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state6, ap_CS_fsm_state53, ap_CS_fsm_state57, ap_CS_fsm_state17, ap_CS_fsm_state55, tmp_i7_fu_678_p1, tmp_i2_fu_827_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) and (exitcond_i2_fu_815_p2 = ap_const_lv1_0))) then 
            x3_coeffs_address0 <= tmp_i2_fu_827_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            x3_coeffs_address0 <= tmp_i3_fu_778_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond_fu_728_p2 = ap_const_lv1_0))) then 
            x3_coeffs_address0 <= tmp_s_fu_740_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            x3_coeffs_address0 <= h_coeffs_addr_reg_892;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_address0 <= tmp_i7_fu_678_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            x3_coeffs_address0 <= grp_poly_Rq_mul_fu_394_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            x3_coeffs_address0 <= grp_poly_Sq_tobytes_fu_377_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            x3_coeffs_address0 <= grp_poly_Sq_tobytes_1_fu_370_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            x3_coeffs_address0 <= grp_poly_R2_inv_fu_364_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x3_coeffs_address0 <= grp_sample_fixed_type_fu_351_r_coeffs_address0;
        else 
            x3_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_address1_assign_proc : process(ap_CS_fsm_state51, h_coeffs_addr_4_reg_969, exitcond_i2_fu_815_p2, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            x3_coeffs_address1 <= h_coeffs_addr_4_reg_969;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state51) and (exitcond_i2_fu_815_p2 = ap_const_lv1_0))) then 
            x3_coeffs_address1 <= ap_const_lv64_1FC(9 - 1 downto 0);
        else 
            x3_coeffs_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state15, exitcond_fu_728_p2, ap_CS_fsm_state20, ap_CS_fsm_state50, ap_CS_fsm_state51, exitcond_i2_fu_815_p2, grp_sample_fixed_type_fu_351_r_coeffs_ce0, grp_poly_R2_inv_fu_364_a_coeffs_ce0, grp_poly_Sq_tobytes_1_fu_370_a_coeffs_ce0, grp_poly_Sq_tobytes_fu_377_a_coeffs_ce0, grp_poly_Rq_mul_fu_394_r_coeffs_ce0, ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state6, ap_CS_fsm_state53, ap_CS_fsm_state57, ap_CS_fsm_state17, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state51) and (exitcond_i2_fu_815_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond_fu_728_p2 = ap_const_lv1_0)))) then 
            x3_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            x3_coeffs_ce0 <= grp_poly_Rq_mul_fu_394_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            x3_coeffs_ce0 <= grp_poly_Sq_tobytes_fu_377_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            x3_coeffs_ce0 <= grp_poly_Sq_tobytes_1_fu_370_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            x3_coeffs_ce0 <= grp_poly_R2_inv_fu_364_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x3_coeffs_ce0 <= grp_sample_fixed_type_fu_351_r_coeffs_ce0;
        else 
            x3_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_ce1_assign_proc : process(ap_CS_fsm_state51, exitcond_i2_fu_815_p2, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or ((ap_const_logic_1 = ap_CS_fsm_state51) and (exitcond_i2_fu_815_p2 = ap_const_lv1_0)))) then 
            x3_coeffs_ce1 <= ap_const_logic_1;
        else 
            x3_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_d0_assign_proc : process(ap_CS_fsm_state50, grp_sample_fixed_type_fu_351_r_coeffs_d0, grp_poly_Rq_mul_fu_394_r_coeffs_d0, ap_CS_fsm_state14, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state55, tmp_118_i1_fu_719_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            x3_coeffs_d0 <= tmp_118_i1_fu_719_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            x3_coeffs_d0 <= grp_poly_Rq_mul_fu_394_r_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x3_coeffs_d0 <= grp_sample_fixed_type_fu_351_r_coeffs_d0;
        else 
            x3_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    x3_coeffs_d1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_325_fu_838_p1),16));

    x3_coeffs_we0_assign_proc : process(ap_CS_fsm_state50, grp_sample_fixed_type_fu_351_r_coeffs_we0, grp_poly_Rq_mul_fu_394_r_coeffs_we0, ap_CS_fsm_state14, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            x3_coeffs_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            x3_coeffs_we0 <= grp_poly_Rq_mul_fu_394_r_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x3_coeffs_we0 <= grp_sample_fixed_type_fu_351_r_coeffs_we0;
        else 
            x3_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_we1_assign_proc : process(ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            x3_coeffs_we1 <= ap_const_logic_1;
        else 
            x3_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x4_coeffs_address0_assign_proc : process(tmp_310_i_reg_941, grp_poly_Rq_mul_fu_394_r_coeffs_address0, grp_poly_Rq_mul_fu_394_a_coeffs_address0, grp_poly_Rq_mul_fu_394_b_coeffs_address0, ap_CS_fsm_state23, ap_CS_fsm_state53, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state46, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            x4_coeffs_address0 <= tmp_310_i_reg_941(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            x4_coeffs_address0 <= grp_poly_Rq_mul_fu_394_b_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            x4_coeffs_address0 <= grp_poly_Rq_mul_fu_394_a_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            x4_coeffs_address0 <= grp_poly_Rq_mul_fu_394_r_coeffs_address0;
        else 
            x4_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    x4_coeffs_ce0_assign_proc : process(grp_poly_Rq_mul_fu_394_r_coeffs_ce0, grp_poly_Rq_mul_fu_394_a_coeffs_ce0, grp_poly_Rq_mul_fu_394_b_coeffs_ce0, ap_CS_fsm_state23, ap_CS_fsm_state53, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state46, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            x4_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            x4_coeffs_ce0 <= grp_poly_Rq_mul_fu_394_b_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            x4_coeffs_ce0 <= grp_poly_Rq_mul_fu_394_a_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            x4_coeffs_ce0 <= grp_poly_Rq_mul_fu_394_r_coeffs_ce0;
        else 
            x4_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x4_coeffs_d0_assign_proc : process(ai2_coeffs_q0, grp_poly_Rq_mul_fu_394_r_coeffs_d0, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            x4_coeffs_d0 <= ai2_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            x4_coeffs_d0 <= grp_poly_Rq_mul_fu_394_r_coeffs_d0;
        else 
            x4_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x4_coeffs_we0_assign_proc : process(grp_poly_Rq_mul_fu_394_r_coeffs_we0, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            x4_coeffs_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            x4_coeffs_we0 <= grp_poly_Rq_mul_fu_394_r_coeffs_we0;
        else 
            x4_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x5_coeffs_address0_assign_proc : process(ap_CS_fsm_state50, grp_poly_Rq_mul_fu_394_r_coeffs_address0, grp_poly_Rq_mul_fu_394_a_coeffs_address0, ap_CS_fsm_state53, ap_CS_fsm_state48, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            x5_coeffs_address0 <= grp_poly_Rq_mul_fu_394_a_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            x5_coeffs_address0 <= grp_poly_Rq_mul_fu_394_r_coeffs_address0;
        else 
            x5_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    x5_coeffs_ce0_assign_proc : process(ap_CS_fsm_state50, grp_poly_Rq_mul_fu_394_r_coeffs_ce0, grp_poly_Rq_mul_fu_394_a_coeffs_ce0, ap_CS_fsm_state53, ap_CS_fsm_state48, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            x5_coeffs_ce0 <= grp_poly_Rq_mul_fu_394_a_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            x5_coeffs_ce0 <= grp_poly_Rq_mul_fu_394_r_coeffs_ce0;
        else 
            x5_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x5_coeffs_we0_assign_proc : process(grp_poly_Rq_mul_fu_394_r_coeffs_we0, ap_CS_fsm_state53, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            x5_coeffs_we0 <= grp_poly_Rq_mul_fu_394_r_coeffs_we0;
        else 
            x5_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
