// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module poly_S3_mul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_coeffs_address0,
        r_coeffs_ce0,
        r_coeffs_we0,
        r_coeffs_d0,
        r_coeffs_q0,
        r_coeffs_address1,
        r_coeffs_ce1,
        r_coeffs_we1,
        r_coeffs_d1,
        r_coeffs_q1,
        a_coeffs_address0,
        a_coeffs_ce0,
        a_coeffs_q0,
        b_coeffs_address0,
        b_coeffs_ce0,
        b_coeffs_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] r_coeffs_address0;
output   r_coeffs_ce0;
output   r_coeffs_we0;
output  [15:0] r_coeffs_d0;
input  [15:0] r_coeffs_q0;
output  [8:0] r_coeffs_address1;
output   r_coeffs_ce1;
output   r_coeffs_we1;
output  [15:0] r_coeffs_d1;
input  [15:0] r_coeffs_q1;
output  [8:0] a_coeffs_address0;
output   a_coeffs_ce0;
input  [15:0] a_coeffs_q0;
output  [8:0] b_coeffs_address0;
output   b_coeffs_ce0;
input  [15:0] b_coeffs_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] r_coeffs_address0;
reg r_coeffs_ce0;
reg r_coeffs_we0;
reg[15:0] r_coeffs_d0;
reg[8:0] r_coeffs_address1;
reg r_coeffs_ce1;
reg r_coeffs_we1;
reg[8:0] a_coeffs_address0;
reg a_coeffs_ce0;
reg[8:0] b_coeffs_address0;
reg b_coeffs_ce0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [15:0] reg_210;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state7;
reg  signed [15:0] reg_214;
reg   [15:0] reg_218;
wire   [9:0] k_cast5_fu_222_p1;
reg   [9:0] k_cast5_reg_656;
wire    ap_CS_fsm_state2;
wire   [8:0] k_3_fu_232_p2;
reg   [8:0] k_3_reg_665;
reg   [8:0] r_coeffs_addr_13_reg_670;
wire   [0:0] exitcond2_fu_226_p2;
wire   [8:0] tmp_s_fu_243_p2;
reg   [8:0] tmp_s_reg_675;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_130_fu_253_p2;
wire   [8:0] i_5_fu_279_p2;
reg   [8:0] i_5_reg_698;
wire   [8:0] i_6_fu_295_p2;
reg   [8:0] i_6_reg_706;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond1_fu_289_p2;
wire   [8:0] indvars_iv_next_fu_316_p2;
wire   [8:0] k_2_fu_328_p2;
reg   [8:0] k_2_reg_729;
wire    ap_CS_fsm_state9;
reg   [8:0] r_coeffs_addr_14_reg_734;
wire   [0:0] exitcond_fu_322_p2;
reg   [3:0] tmp_231_i_cast_reg_740;
wire    ap_CS_fsm_state10;
wire   [1:0] fold1_i_cast_fu_523_p2;
reg   [1:0] fold1_i_cast_reg_745;
reg   [1:0] tmp_143_reg_751;
reg   [8:0] indvars_iv_reg_154;
reg   [8:0] k_reg_166;
reg   [8:0] i_reg_177;
wire    ap_CS_fsm_state5;
reg   [8:0] i_1_reg_188;
wire    ap_CS_fsm_state8;
reg   [8:0] k_1_reg_199;
wire    ap_CS_fsm_state11;
wire   [63:0] tmp_fu_238_p1;
wire   [63:0] tmp_146_fu_263_p1;
wire   [63:0] tmp_148_fu_274_p1;
wire  signed [63:0] tmp_152_fu_306_p1;
wire   [63:0] tmp_153_fu_311_p1;
wire   [63:0] tmp_133_fu_334_p1;
wire  signed [15:0] grp_fu_638_p3;
wire  signed [15:0] grp_fu_647_p3;
wire   [9:0] i_cast_fu_249_p1;
wire   [9:0] tmp_145_fu_258_p2;
wire   [8:0] tmp_147_fu_268_p2;
wire   [9:0] i_1_cast_fu_285_p1;
wire   [9:0] tmp_151_fu_301_p2;
wire   [6:0] tmp_141_fu_345_p1;
wire   [2:0] tmp_156_fu_365_p1;
wire   [0:0] tmp_157_fu_377_p1;
wire   [15:0] tmp_140_fu_339_p2;
wire   [7:0] tmp_128_fu_349_p3;
wire   [7:0] tmp_142_fu_357_p1;
wire   [15:0] a_assign_fu_393_p2;
wire   [7:0] tmp_111_fu_405_p4;
wire   [7:0] a_assign_cast_fu_399_p2;
wire   [8:0] tmp_i_cast_fu_415_p1;
wire   [8:0] tmp_i_cast_31_fu_419_p1;
wire   [8:0] r_fu_429_p2;
wire   [4:0] tmp_113_fu_435_p4;
wire   [3:0] tmp_131_fu_369_p3;
wire   [3:0] tmp_144_fu_361_p1;
wire   [1:0] tmp_132_fu_381_p3;
wire   [1:0] tmp_158_fu_389_p1;
wire   [3:0] tmp_134_fu_449_p2;
wire   [3:0] tmp_135_fu_455_p4;
wire   [3:0] fold_i_cast_fu_481_p2;
wire   [5:0] tmp_229_i_cast_fu_445_p1;
wire   [5:0] tmp_230_i_cast_fu_487_p1;
wire   [5:0] r_1_fu_491_p2;
wire   [1:0] tmp_137_fu_475_p2;
wire   [1:0] tmp_136_fu_465_p4;
wire   [7:0] tmp_112_fu_423_p2;
wire   [1:0] tmp_138_fu_507_p2;
wire   [1:0] tmp_139_fu_513_p4;
wire   [3:0] tmp_232_i_cast_fu_539_p1;
wire   [3:0] r_2_fu_542_p2;
wire   [1:0] tmp_114_fu_547_p4;
wire   [1:0] fold2_i_cast_fu_561_p2;
wire   [2:0] tmp_233_i_cast_fu_557_p1;
wire   [2:0] tmp_234_i_cast_fu_565_p1;
wire   [2:0] r_3_fu_569_p2;
wire   [2:0] t_fu_575_p2;
wire   [0:0] tmp_159_fu_581_p3;
wire   [2:0] c_cast_fu_589_p3;
wire   [2:0] tmp_235_i_fu_597_p2;
wire   [0:0] not_tmp_53_i_fu_607_p2;
wire   [2:0] tmp_236_i_cast_cast_fu_613_p3;
wire   [2:0] tmp_237_i_fu_621_p2;
wire   [15:0] tmp_235_i_cast_fu_603_p1;
wire  signed [15:0] tmp_237_i_cast_fu_627_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1_U15(
    .din0(reg_210),
    .din1(reg_214),
    .din2(reg_218),
    .dout(grp_fu_638_p3)
);

crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1_U16(
    .din0(reg_210),
    .din1(reg_214),
    .din2(reg_218),
    .dout(grp_fu_647_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_130_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_1_reg_188 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_1_reg_188 <= i_6_reg_706;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_177 <= i_5_reg_698;
    end else if (((exitcond2_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_177 <= 9'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv_reg_154 <= 9'd1;
    end else if (((exitcond1_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        indvars_iv_reg_154 <= indvars_iv_next_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        k_1_reg_199 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        k_1_reg_199 <= k_2_reg_729;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_reg_166 <= 9'd0;
    end else if (((exitcond1_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        k_reg_166 <= k_3_reg_665;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        fold1_i_cast_reg_745 <= fold1_i_cast_fu_523_p2;
        tmp_143_reg_751 <= {{r_1_fu_491_p2[3:2]}};
        tmp_231_i_cast_reg_740 <= {{r_1_fu_491_p2[5:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_130_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_5_reg_698 <= i_5_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_6_reg_706 <= i_6_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        k_2_reg_729 <= k_2_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_3_reg_665 <= k_3_fu_232_p2;
        k_cast5_reg_656[8 : 0] <= k_cast5_fu_222_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_coeffs_addr_13_reg_670 <= tmp_fu_238_p1;
        tmp_s_reg_675 <= tmp_s_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_322_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        r_coeffs_addr_14_reg_734 <= tmp_133_fu_334_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_210 <= a_coeffs_q0;
        reg_214 <= b_coeffs_q0;
        reg_218 <= r_coeffs_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        a_coeffs_address0 = tmp_152_fu_306_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_coeffs_address0 = tmp_146_fu_263_p1;
    end else begin
        a_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        a_coeffs_ce0 = 1'b1;
    end else begin
        a_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond_fu_322_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_322_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        b_coeffs_address0 = tmp_153_fu_311_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        b_coeffs_address0 = tmp_148_fu_274_p1;
    end else begin
        b_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        b_coeffs_ce0 = 1'b1;
    end else begin
        b_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        r_coeffs_address0 = tmp_133_fu_334_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        r_coeffs_address0 = r_coeffs_addr_13_reg_670;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        r_coeffs_address0 = tmp_fu_238_p1;
    end else begin
        r_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        r_coeffs_address1 = r_coeffs_addr_14_reg_734;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        r_coeffs_address1 = 64'd508;
    end else begin
        r_coeffs_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6))) begin
        r_coeffs_ce0 = 1'b1;
    end else begin
        r_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        r_coeffs_ce1 = 1'b1;
    end else begin
        r_coeffs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        r_coeffs_d0 = grp_fu_647_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_coeffs_d0 = grp_fu_638_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        r_coeffs_d0 = 16'd0;
    end else begin
        r_coeffs_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | ((exitcond2_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        r_coeffs_we0 = 1'b1;
    end else begin
        r_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        r_coeffs_we1 = 1'b1;
    end else begin
        r_coeffs_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_130_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond1_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            if (((exitcond_fu_322_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_assign_cast_fu_399_p2 = (tmp_128_fu_349_p3 + tmp_142_fu_357_p1);

assign a_assign_fu_393_p2 = (r_coeffs_q0 + tmp_140_fu_339_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_cast_fu_589_p3 = ((tmp_159_fu_581_p3[0:0] === 1'b1) ? 3'd7 : 3'd0);

assign exitcond1_fu_289_p2 = ((i_1_reg_188 == indvars_iv_reg_154) ? 1'b1 : 1'b0);

assign exitcond2_fu_226_p2 = ((indvars_iv_reg_154 == 9'd510) ? 1'b1 : 1'b0);

assign exitcond_fu_322_p2 = ((k_1_reg_199 == 9'd509) ? 1'b1 : 1'b0);

assign fold1_i_cast_fu_523_p2 = (tmp_138_fu_507_p2 + tmp_139_fu_513_p4);

assign fold2_i_cast_fu_561_p2 = (tmp_143_reg_751 + fold1_i_cast_reg_745);

assign fold_i_cast_fu_481_p2 = (tmp_134_fu_449_p2 + tmp_135_fu_455_p4);

assign i_1_cast_fu_285_p1 = i_1_reg_188;

assign i_5_fu_279_p2 = (i_reg_177 + 9'd1);

assign i_6_fu_295_p2 = (i_1_reg_188 + 9'd1);

assign i_cast_fu_249_p1 = i_reg_177;

assign indvars_iv_next_fu_316_p2 = (indvars_iv_reg_154 + 9'd1);

assign k_2_fu_328_p2 = (k_1_reg_199 + 9'd1);

assign k_3_fu_232_p2 = (k_reg_166 + 9'd1);

assign k_cast5_fu_222_p1 = k_reg_166;

assign not_tmp_53_i_fu_607_p2 = (tmp_159_fu_581_p3 ^ 1'd1);

assign r_1_fu_491_p2 = (tmp_229_i_cast_fu_445_p1 + tmp_230_i_cast_fu_487_p1);

assign r_2_fu_542_p2 = (tmp_231_i_cast_reg_740 + tmp_232_i_cast_fu_539_p1);

assign r_3_fu_569_p2 = (tmp_233_i_cast_fu_557_p1 + tmp_234_i_cast_fu_565_p1);

assign r_coeffs_d1 = (tmp_237_i_cast_fu_627_p1 ^ tmp_235_i_cast_fu_603_p1);

assign r_fu_429_p2 = (tmp_i_cast_fu_415_p1 + tmp_i_cast_31_fu_419_p1);

assign t_fu_575_p2 = ($signed(3'd5) + $signed(r_3_fu_569_p2));

assign tmp_111_fu_405_p4 = {{a_assign_fu_393_p2[15:8]}};

assign tmp_112_fu_423_p2 = (a_assign_cast_fu_399_p2 + tmp_111_fu_405_p4);

assign tmp_113_fu_435_p4 = {{r_fu_429_p2[8:4]}};

assign tmp_114_fu_547_p4 = {{r_2_fu_542_p2[3:2]}};

assign tmp_128_fu_349_p3 = {{tmp_141_fu_345_p1}, {1'd0}};

assign tmp_130_fu_253_p2 = ((i_reg_177 < tmp_s_reg_675) ? 1'b1 : 1'b0);

assign tmp_131_fu_369_p3 = {{tmp_156_fu_365_p1}, {1'd0}};

assign tmp_132_fu_381_p3 = {{tmp_157_fu_377_p1}, {1'd0}};

assign tmp_133_fu_334_p1 = k_1_reg_199;

assign tmp_134_fu_449_p2 = (tmp_131_fu_369_p3 + tmp_144_fu_361_p1);

assign tmp_135_fu_455_p4 = {{a_assign_fu_393_p2[11:8]}};

assign tmp_136_fu_465_p4 = {{a_assign_fu_393_p2[9:8]}};

assign tmp_137_fu_475_p2 = (tmp_132_fu_381_p3 + tmp_158_fu_389_p1);

assign tmp_138_fu_507_p2 = (tmp_137_fu_475_p2 + tmp_136_fu_465_p4);

assign tmp_139_fu_513_p4 = {{tmp_112_fu_423_p2[5:4]}};

assign tmp_140_fu_339_p2 = r_coeffs_q1 << 16'd1;

assign tmp_141_fu_345_p1 = r_coeffs_q1[6:0];

assign tmp_142_fu_357_p1 = r_coeffs_q0[7:0];

assign tmp_144_fu_361_p1 = r_coeffs_q0[3:0];

assign tmp_145_fu_258_p2 = (k_cast5_reg_656 + i_cast_fu_249_p1);

assign tmp_146_fu_263_p1 = tmp_145_fu_258_p2;

assign tmp_147_fu_268_p2 = ($signed(9'd509) - $signed(i_reg_177));

assign tmp_148_fu_274_p1 = tmp_147_fu_268_p2;

assign tmp_151_fu_301_p2 = (k_cast5_reg_656 - i_1_cast_fu_285_p1);

assign tmp_152_fu_306_p1 = $signed(tmp_151_fu_301_p2);

assign tmp_153_fu_311_p1 = i_1_reg_188;

assign tmp_156_fu_365_p1 = r_coeffs_q1[2:0];

assign tmp_157_fu_377_p1 = r_coeffs_q1[0:0];

assign tmp_158_fu_389_p1 = r_coeffs_q0[1:0];

assign tmp_159_fu_581_p3 = t_fu_575_p2[32'd2];

assign tmp_229_i_cast_fu_445_p1 = tmp_113_fu_435_p4;

assign tmp_230_i_cast_fu_487_p1 = fold_i_cast_fu_481_p2;

assign tmp_232_i_cast_fu_539_p1 = fold1_i_cast_reg_745;

assign tmp_233_i_cast_fu_557_p1 = tmp_114_fu_547_p4;

assign tmp_234_i_cast_fu_565_p1 = fold2_i_cast_fu_561_p2;

assign tmp_235_i_cast_fu_603_p1 = tmp_235_i_fu_597_p2;

assign tmp_235_i_fu_597_p2 = (r_3_fu_569_p2 & c_cast_fu_589_p3);

assign tmp_236_i_cast_cast_fu_613_p3 = ((not_tmp_53_i_fu_607_p2[0:0] === 1'b1) ? 3'd7 : 3'd0);

assign tmp_237_i_cast_fu_627_p1 = $signed(tmp_237_i_fu_621_p2);

assign tmp_237_i_fu_621_p2 = (tmp_236_i_cast_cast_fu_613_p3 & t_fu_575_p2);

assign tmp_fu_238_p1 = k_reg_166;

assign tmp_i_cast_31_fu_419_p1 = a_assign_cast_fu_399_p2;

assign tmp_i_cast_fu_415_p1 = tmp_111_fu_405_p4;

assign tmp_s_fu_243_p2 = ($signed(9'd509) - $signed(k_reg_166));

always @ (posedge ap_clk) begin
    k_cast5_reg_656[9] <= 1'b0;
end

endmodule //poly_S3_mul
