// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module poly_S3_tobytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        msg_address0,
        msg_ce0,
        msg_we0,
        msg_d0,
        msg_offset,
        a_coeffs_address0,
        a_coeffs_ce0,
        a_coeffs_q0,
        a_coeffs_address1,
        a_coeffs_ce1,
        a_coeffs_q1
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] msg_address0;
output   msg_ce0;
output   msg_we0;
output  [7:0] msg_d0;
input  [7:0] msg_offset;
output  [8:0] a_coeffs_address0;
output   a_coeffs_ce0;
input  [15:0] a_coeffs_q0;
output  [8:0] a_coeffs_address1;
output   a_coeffs_ce1;
input  [15:0] a_coeffs_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] msg_address0;
reg msg_ce0;
reg msg_we0;
reg[7:0] msg_d0;
reg[8:0] a_coeffs_address0;
reg a_coeffs_ce0;
reg[8:0] a_coeffs_address1;
reg a_coeffs_ce1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_4_fu_182_p2;
reg   [6:0] i_4_reg_427;
wire    ap_CS_fsm_state2;
wire   [8:0] tmp_fu_196_p2;
reg   [8:0] tmp_reg_432;
wire   [0:0] exitcond_fu_176_p2;
wire   [7:0] c_1_fu_250_p2;
reg   [7:0] c_1_reg_449;
wire    ap_CS_fsm_state3;
wire   [7:0] sum_fu_270_p2;
reg   [7:0] sum_reg_460;
wire   [7:0] c_2_fu_289_p2;
reg   [7:0] c_2_reg_465;
wire    ap_CS_fsm_state4;
wire   [7:0] c_3_fu_323_p2;
reg   [7:0] c_3_reg_481;
wire    ap_CS_fsm_state5;
wire   [7:0] tmp_135_fu_329_p1;
reg   [7:0] tmp_135_reg_487;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_136_fu_357_p3;
wire   [2:0] j_1_fu_380_p2;
reg   [2:0] j_1_reg_500;
wire   [7:0] c_5_fu_412_p2;
wire    ap_CS_fsm_state8;
reg   [6:0] i_reg_136;
wire    ap_CS_fsm_state6;
reg   [7:0] c5_reg_148;
reg  signed [2:0] j_reg_161;
wire   [63:0] tmp_111_fu_208_p1;
wire   [63:0] tmp_114_fu_219_p1;
wire   [63:0] tmp_117_fu_261_p1;
wire   [63:0] tmp_122_fu_300_p1;
wire   [63:0] tmp_124_fu_305_p1;
wire   [63:0] sum_cast_fu_349_p1;
wire   [63:0] tmp_129_fu_375_p1;
wire   [63:0] sum2_cast_fu_391_p1;
wire   [7:0] c_4_fu_343_p2;
wire   [8:0] p_shl7_fu_188_p3;
wire   [8:0] i_cast1_fu_172_p1;
wire   [8:0] tmp_s_fu_202_p2;
wire   [8:0] tmp_113_fu_213_p2;
wire   [5:0] tmp_119_fu_228_p1;
wire   [7:0] p_shl6_fu_232_p3;
wire   [7:0] c_fu_224_p1;
wire   [7:0] tmp_112_fu_240_p2;
wire   [7:0] tmp_121_fu_246_p1;
wire   [8:0] tmp_116_fu_256_p2;
wire   [7:0] tmp_136_cast_fu_266_p1;
wire   [7:0] tmp_125_fu_275_p2;
wire   [7:0] tmp_128_fu_285_p1;
wire   [7:0] tmp_115_fu_280_p2;
wire   [8:0] tmp_120_fu_295_p2;
wire   [7:0] tmp_132_fu_309_p2;
wire   [7:0] tmp_133_fu_319_p1;
wire   [7:0] tmp_118_fu_314_p2;
wire   [7:0] tmp_134_fu_333_p2;
wire   [7:0] tmp_123_fu_338_p2;
wire  signed [3:0] j_cast_cast_fu_353_p1;
wire   [3:0] tmp_127_fu_365_p2;
wire  signed [8:0] tmp_138_cast4_fu_371_p1;
wire   [7:0] sum2_fu_386_p2;
wire   [7:0] tmp_137_fu_396_p2;
wire   [7:0] tmp_126_fu_402_p2;
wire   [7:0] tmp_138_fu_408_p1;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        c5_reg_148 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        c5_reg_148 <= c_5_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_136 <= i_4_reg_427;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_136 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_161 <= 3'd2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_161 <= j_1_reg_500;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_1_reg_449 <= c_1_fu_250_p2;
        sum_reg_460 <= sum_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_2_reg_465 <= c_2_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_3_reg_481 <= c_3_fu_323_p2;
        tmp_135_reg_487 <= tmp_135_fu_329_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_4_reg_427 <= i_4_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_136_fu_357_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        j_1_reg_500 <= j_1_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_432 <= tmp_fu_196_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_coeffs_address0 = tmp_124_fu_305_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_coeffs_address0 = tmp_117_fu_261_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_coeffs_address0 = tmp_111_fu_208_p1;
    end else begin
        a_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        a_coeffs_address1 = tmp_129_fu_375_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_coeffs_address1 = tmp_122_fu_300_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_coeffs_address1 = tmp_114_fu_219_p1;
    end else begin
        a_coeffs_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        a_coeffs_ce0 = 1'b1;
    end else begin
        a_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7))) begin
        a_coeffs_ce1 = 1'b1;
    end else begin
        a_coeffs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_136_fu_357_p3 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_136_fu_357_p3 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        msg_address0 = sum2_cast_fu_391_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        msg_address0 = sum_cast_fu_349_p1;
    end else begin
        msg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        msg_ce0 = 1'b1;
    end else begin
        msg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        msg_d0 = c5_reg_148;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        msg_d0 = c_4_fu_343_p2;
    end else begin
        msg_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state7) & (tmp_136_fu_357_p3 == 1'd1)))) begin
        msg_we0 = 1'b1;
    end else begin
        msg_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (tmp_136_fu_357_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign c_1_fu_250_p2 = (tmp_112_fu_240_p2 + tmp_121_fu_246_p1);

assign c_2_fu_289_p2 = (tmp_128_fu_285_p1 + tmp_115_fu_280_p2);

assign c_3_fu_323_p2 = (tmp_133_fu_319_p1 + tmp_118_fu_314_p2);

assign c_4_fu_343_p2 = (tmp_135_reg_487 + tmp_123_fu_338_p2);

assign c_5_fu_412_p2 = (tmp_126_fu_402_p2 + tmp_138_fu_408_p1);

assign c_fu_224_p1 = a_coeffs_q0[7:0];

assign exitcond_fu_176_p2 = ((i_reg_136 == 7'd101) ? 1'b1 : 1'b0);

assign i_4_fu_182_p2 = (i_reg_136 + 7'd1);

assign i_cast1_fu_172_p1 = i_reg_136;

assign j_1_fu_380_p2 = ($signed(3'd7) + $signed(j_reg_161));

assign j_cast_cast_fu_353_p1 = j_reg_161;

assign p_shl6_fu_232_p3 = {{tmp_119_fu_228_p1}, {2'd0}};

assign p_shl7_fu_188_p3 = {{i_reg_136}, {2'd0}};

assign sum2_cast_fu_391_p1 = sum2_fu_386_p2;

assign sum2_fu_386_p2 = (msg_offset + 8'd101);

assign sum_cast_fu_349_p1 = sum_reg_460;

assign sum_fu_270_p2 = (msg_offset + tmp_136_cast_fu_266_p1);

assign tmp_111_fu_208_p1 = tmp_s_fu_202_p2;

assign tmp_112_fu_240_p2 = (p_shl6_fu_232_p3 - c_fu_224_p1);

assign tmp_113_fu_213_p2 = (9'd3 + tmp_fu_196_p2);

assign tmp_114_fu_219_p1 = tmp_113_fu_213_p2;

assign tmp_115_fu_280_p2 = (tmp_125_fu_275_p2 - c_1_reg_449);

assign tmp_116_fu_256_p2 = (9'd2 + tmp_reg_432);

assign tmp_117_fu_261_p1 = tmp_116_fu_256_p2;

assign tmp_118_fu_314_p2 = (tmp_132_fu_309_p2 - c_2_reg_465);

assign tmp_119_fu_228_p1 = a_coeffs_q0[5:0];

assign tmp_120_fu_295_p2 = (9'd1 + tmp_reg_432);

assign tmp_121_fu_246_p1 = a_coeffs_q1[7:0];

assign tmp_122_fu_300_p1 = tmp_120_fu_295_p2;

assign tmp_123_fu_338_p2 = (tmp_134_fu_333_p2 - c_3_reg_481);

assign tmp_124_fu_305_p1 = tmp_reg_432;

assign tmp_125_fu_275_p2 = c_1_reg_449 << 8'd2;

assign tmp_126_fu_402_p2 = (tmp_137_fu_396_p2 - c5_reg_148);

assign tmp_127_fu_365_p2 = ($signed(4'd9) + $signed(j_cast_cast_fu_353_p1));

assign tmp_128_fu_285_p1 = a_coeffs_q0[7:0];

assign tmp_129_fu_375_p1 = $unsigned(tmp_138_cast4_fu_371_p1);

assign tmp_132_fu_309_p2 = c_2_reg_465 << 8'd2;

assign tmp_133_fu_319_p1 = a_coeffs_q1[7:0];

assign tmp_134_fu_333_p2 = c_3_reg_481 << 8'd2;

assign tmp_135_fu_329_p1 = a_coeffs_q0[7:0];

assign tmp_136_cast_fu_266_p1 = i_reg_136;

assign tmp_136_fu_357_p3 = j_reg_161[32'd2];

assign tmp_137_fu_396_p2 = c5_reg_148 << 8'd2;

assign tmp_138_cast4_fu_371_p1 = $signed(tmp_127_fu_365_p2);

assign tmp_138_fu_408_p1 = a_coeffs_q1[7:0];

assign tmp_fu_196_p2 = (p_shl7_fu_188_p3 + i_cast1_fu_172_p1);

assign tmp_s_fu_202_p2 = (9'd4 + tmp_fu_196_p2);

endmodule //poly_S3_tobytes
