-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_kem_dec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    k_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    k_ce0 : OUT STD_LOGIC;
    k_we0 : OUT STD_LOGIC;
    k_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    k_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    c_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    c_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    c_ce1 : OUT STD_LOGIC;
    c_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    sk_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sk_ce0 : OUT STD_LOGIC;
    sk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sk_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sk_ce1 : OUT STD_LOGIC;
    sk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of crypto_kem_dec is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "crypto_kem_dec,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tfbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.122000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=26,HLS_SYN_DSP=4,HLS_SYN_FF=14425,HLS_SYN_LUT=76979,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_87 : STD_LOGIC_VECTOR (7 downto 0) := "10000111";
    constant ap_const_lv10_2BB : STD_LOGIC_VECTOR (9 downto 0) := "1010111011";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_20 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_owcpa_dec_fu_184_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal fail_reg_301 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_owcpa_dec_fu_184_ap_ready : STD_LOGIC;
    signal grp_owcpa_dec_fu_184_ap_done : STD_LOGIC;
    signal i_31_fu_204_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_31_reg_309 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond1_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_32_fu_236_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_32_reg_322 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_assign_fu_258_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_assign_reg_332 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_sha3_256_fu_167_ap_ready : STD_LOGIC;
    signal grp_sha3_256_fu_167_ap_done : STD_LOGIC;
    signal i_33_fu_277_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_33_reg_340 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond_i_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_addr_reg_350 : STD_LOGIC_VECTOR (4 downto 0);
    signal rm_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rm_ce0 : STD_LOGIC;
    signal rm_we0 : STD_LOGIC;
    signal rm_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rm_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buf_ce0 : STD_LOGIC;
    signal buf_we0 : STD_LOGIC;
    signal buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha3_256_fu_167_ap_start : STD_LOGIC;
    signal grp_sha3_256_fu_167_ap_idle : STD_LOGIC;
    signal grp_sha3_256_fu_167_output_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha3_256_fu_167_output_r_ce0 : STD_LOGIC;
    signal grp_sha3_256_fu_167_output_r_we0 : STD_LOGIC;
    signal grp_sha3_256_fu_167_output_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha3_256_fu_167_input_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_sha3_256_fu_167_input_r_ce0 : STD_LOGIC;
    signal grp_sha3_256_1_fu_175_ap_start : STD_LOGIC;
    signal grp_sha3_256_1_fu_175_ap_done : STD_LOGIC;
    signal grp_sha3_256_1_fu_175_ap_idle : STD_LOGIC;
    signal grp_sha3_256_1_fu_175_ap_ready : STD_LOGIC;
    signal grp_sha3_256_1_fu_175_output_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sha3_256_1_fu_175_output_r_ce0 : STD_LOGIC;
    signal grp_sha3_256_1_fu_175_output_r_we0 : STD_LOGIC;
    signal grp_sha3_256_1_fu_175_output_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha3_256_1_fu_175_input_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha3_256_1_fu_175_input_r_ce0 : STD_LOGIC;
    signal grp_owcpa_dec_fu_184_ap_start : STD_LOGIC;
    signal grp_owcpa_dec_fu_184_ap_idle : STD_LOGIC;
    signal grp_owcpa_dec_fu_184_rm_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_owcpa_dec_fu_184_rm_ce0 : STD_LOGIC;
    signal grp_owcpa_dec_fu_184_rm_we0 : STD_LOGIC;
    signal grp_owcpa_dec_fu_184_rm_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_owcpa_dec_fu_184_ciphertext_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_owcpa_dec_fu_184_ciphertext_ce0 : STD_LOGIC;
    signal grp_owcpa_dec_fu_184_ciphertext_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_owcpa_dec_fu_184_ciphertext_ce1 : STD_LOGIC;
    signal grp_owcpa_dec_fu_184_secretkey_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_owcpa_dec_fu_184_secretkey_ce0 : STD_LOGIC;
    signal grp_owcpa_dec_fu_184_secretkey_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_owcpa_dec_fu_184_secretkey_ce1 : STD_LOGIC;
    signal i_reg_132 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_1_reg_144 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_i_reg_156 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_sha3_256_fu_167_ap_start_reg : STD_LOGIC := '0';
    signal grp_sha3_256_1_fu_175_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_owcpa_dec_fu_184_ap_start_reg : STD_LOGIC := '0';
    signal tmp_s_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_220_fu_225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_221_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cmp_0_sum_cast_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_i_cast1_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_259_i_fu_294_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_cast4_cast_fu_194_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_210_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast5_fu_216_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal cmp_0_sum_fu_247_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i_fu_283_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_65_fu_289_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component sha3_256 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha3_256_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component owcpa_dec IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rm_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rm_ce0 : OUT STD_LOGIC;
        rm_we0 : OUT STD_LOGIC;
        rm_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ciphertext_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ciphertext_ce0 : OUT STD_LOGIC;
        ciphertext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ciphertext_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        ciphertext_ce1 : OUT STD_LOGIC;
        ciphertext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        secretkey_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        secretkey_ce0 : OUT STD_LOGIC;
        secretkey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        secretkey_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        secretkey_ce1 : OUT STD_LOGIC;
        secretkey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component crypto_kem_dec_rm IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_dec_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    rm_U : component crypto_kem_dec_rm
    generic map (
        DataWidth => 8,
        AddressRange => 204,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rm_address0,
        ce0 => rm_ce0,
        we0 => rm_we0,
        d0 => rm_d0,
        q0 => rm_q0);

    buf_U : component crypto_kem_dec_buf
    generic map (
        DataWidth => 8,
        AddressRange => 731,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_address0,
        ce0 => buf_ce0,
        we0 => buf_we0,
        d0 => buf_d0,
        q0 => buf_q0);

    grp_sha3_256_fu_167 : component sha3_256
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha3_256_fu_167_ap_start,
        ap_done => grp_sha3_256_fu_167_ap_done,
        ap_idle => grp_sha3_256_fu_167_ap_idle,
        ap_ready => grp_sha3_256_fu_167_ap_ready,
        output_r_address0 => grp_sha3_256_fu_167_output_r_address0,
        output_r_ce0 => grp_sha3_256_fu_167_output_r_ce0,
        output_r_we0 => grp_sha3_256_fu_167_output_r_we0,
        output_r_d0 => grp_sha3_256_fu_167_output_r_d0,
        input_r_address0 => grp_sha3_256_fu_167_input_r_address0,
        input_r_ce0 => grp_sha3_256_fu_167_input_r_ce0,
        input_r_q0 => buf_q0);

    grp_sha3_256_1_fu_175 : component sha3_256_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha3_256_1_fu_175_ap_start,
        ap_done => grp_sha3_256_1_fu_175_ap_done,
        ap_idle => grp_sha3_256_1_fu_175_ap_idle,
        ap_ready => grp_sha3_256_1_fu_175_ap_ready,
        output_r_address0 => grp_sha3_256_1_fu_175_output_r_address0,
        output_r_ce0 => grp_sha3_256_1_fu_175_output_r_ce0,
        output_r_we0 => grp_sha3_256_1_fu_175_output_r_we0,
        output_r_d0 => grp_sha3_256_1_fu_175_output_r_d0,
        input_r_address0 => grp_sha3_256_1_fu_175_input_r_address0,
        input_r_ce0 => grp_sha3_256_1_fu_175_input_r_ce0,
        input_r_q0 => rm_q0);

    grp_owcpa_dec_fu_184 : component owcpa_dec
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_owcpa_dec_fu_184_ap_start,
        ap_done => grp_owcpa_dec_fu_184_ap_done,
        ap_idle => grp_owcpa_dec_fu_184_ap_idle,
        ap_ready => grp_owcpa_dec_fu_184_ap_ready,
        rm_address0 => grp_owcpa_dec_fu_184_rm_address0,
        rm_ce0 => grp_owcpa_dec_fu_184_rm_ce0,
        rm_we0 => grp_owcpa_dec_fu_184_rm_we0,
        rm_d0 => grp_owcpa_dec_fu_184_rm_d0,
        ciphertext_address0 => grp_owcpa_dec_fu_184_ciphertext_address0,
        ciphertext_ce0 => grp_owcpa_dec_fu_184_ciphertext_ce0,
        ciphertext_q0 => c_q0,
        ciphertext_address1 => grp_owcpa_dec_fu_184_ciphertext_address1,
        ciphertext_ce1 => grp_owcpa_dec_fu_184_ciphertext_ce1,
        ciphertext_q1 => c_q1,
        secretkey_address0 => grp_owcpa_dec_fu_184_secretkey_address0,
        secretkey_ce0 => grp_owcpa_dec_fu_184_secretkey_ce0,
        secretkey_q0 => sk_q0,
        secretkey_address1 => grp_owcpa_dec_fu_184_secretkey_address1,
        secretkey_ce1 => grp_owcpa_dec_fu_184_secretkey_ce1,
        secretkey_q1 => sk_q1,
        ap_return => grp_owcpa_dec_fu_184_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_owcpa_dec_fu_184_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_owcpa_dec_fu_184_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_owcpa_dec_fu_184_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_owcpa_dec_fu_184_ap_ready = ap_const_logic_1)) then 
                    grp_owcpa_dec_fu_184_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha3_256_1_fu_175_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha3_256_1_fu_175_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_sha3_256_1_fu_175_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha3_256_1_fu_175_ap_ready = ap_const_logic_1)) then 
                    grp_sha3_256_1_fu_175_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha3_256_fu_167_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha3_256_fu_167_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    grp_sha3_256_fu_167_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha3_256_fu_167_ap_ready = ap_const_logic_1)) then 
                    grp_sha3_256_fu_167_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_1_reg_144 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_1_reg_144 <= i_32_reg_322;
            end if; 
        end if;
    end process;

    i_i_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_i_reg_156 <= i_33_reg_340;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_sha3_256_fu_167_ap_done = ap_const_logic_1))) then 
                i_i_reg_156 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_132 <= i_31_reg_309;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_sha3_256_1_fu_175_ap_done = ap_const_logic_1))) then 
                i_reg_132 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_sha3_256_fu_167_ap_done = ap_const_logic_1))) then
                b_assign_reg_332 <= b_assign_fu_258_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_owcpa_dec_fu_184_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                fail_reg_301 <= grp_owcpa_dec_fu_184_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_31_reg_309 <= i_31_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_32_reg_322 <= i_32_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_33_reg_340 <= i_33_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                k_addr_reg_350 <= i_i_cast1_fu_265_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_owcpa_dec_fu_184_ap_done, ap_CS_fsm_state5, exitcond1_fu_198_p2, ap_CS_fsm_state7, exitcond_fu_230_p2, ap_CS_fsm_state9, grp_sha3_256_fu_167_ap_done, ap_CS_fsm_state10, exitcond_i_fu_271_p2, grp_sha3_256_1_fu_175_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_owcpa_dec_fu_184_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_sha3_256_1_fu_175_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond1_fu_198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((exitcond_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_sha3_256_fu_167_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond_i_fu_271_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state10, exitcond_i_fu_271_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond_i_fu_271_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, exitcond_i_fu_271_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond_i_fu_271_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;
    b_assign_fu_258_p3 <= 
        ap_const_lv8_FF when (fail_reg_301(0) = '1') else 
        ap_const_lv8_0;

    buf_address0_assign_proc : process(ap_CS_fsm_state9, grp_sha3_256_fu_167_input_r_address0, ap_CS_fsm_state6, ap_CS_fsm_state8, tmp_220_fu_225_p1, cmp_0_sum_cast_fu_253_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buf_address0 <= cmp_0_sum_cast_fu_253_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_address0 <= tmp_220_fu_225_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_address0 <= grp_sha3_256_fu_167_input_r_address0;
        else 
            buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    buf_ce0_assign_proc : process(ap_CS_fsm_state9, grp_sha3_256_fu_167_input_r_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            buf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_ce0 <= grp_sha3_256_fu_167_input_r_ce0;
        else 
            buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_d0_assign_proc : process(c_q0, sk_q0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buf_d0 <= c_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_d0 <= sk_q0;
        else 
            buf_d0 <= "XXXXXXXX";
        end if; 
    end process;


    buf_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            buf_we0 <= ap_const_logic_1;
        else 
            buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, grp_owcpa_dec_fu_184_ciphertext_address0, tmp_221_fu_242_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_address0 <= tmp_221_fu_242_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_address0 <= grp_owcpa_dec_fu_184_ciphertext_address0;
        else 
            c_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    c_address1 <= grp_owcpa_dec_fu_184_ciphertext_address1;

    c_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, grp_owcpa_dec_fu_184_ciphertext_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_ce0 <= grp_owcpa_dec_fu_184_ciphertext_ce0;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_ce1_assign_proc : process(ap_CS_fsm_state2, grp_owcpa_dec_fu_184_ciphertext_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_ce1 <= grp_owcpa_dec_fu_184_ciphertext_ce1;
        else 
            c_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    cmp_0_sum_cast_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cmp_0_sum_fu_247_p2),64));
    cmp_0_sum_fu_247_p2 <= std_logic_vector(unsigned(i_1_reg_144) + unsigned(ap_const_lv10_20));
    exitcond1_fu_198_p2 <= "1" when (i_reg_132 = ap_const_lv6_20) else "0";
    exitcond_fu_230_p2 <= "1" when (i_1_reg_144 = ap_const_lv10_2BB) else "0";
    exitcond_i_fu_271_p2 <= "1" when (i_i_reg_156 = ap_const_lv6_20) else "0";
    grp_owcpa_dec_fu_184_ap_start <= grp_owcpa_dec_fu_184_ap_start_reg;
    grp_sha3_256_1_fu_175_ap_start <= grp_sha3_256_1_fu_175_ap_start_reg;
    grp_sha3_256_fu_167_ap_start <= grp_sha3_256_fu_167_ap_start_reg;
    i_31_fu_204_p2 <= std_logic_vector(unsigned(i_reg_132) + unsigned(ap_const_lv6_1));
    i_32_fu_236_p2 <= std_logic_vector(unsigned(i_1_reg_144) + unsigned(ap_const_lv10_1));
    i_33_fu_277_p2 <= std_logic_vector(unsigned(i_i_reg_156) + unsigned(ap_const_lv6_1));
    i_cast4_cast_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_132),8));
    i_i_cast1_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_156),64));

    k_address0_assign_proc : process(ap_CS_fsm_state10, k_addr_reg_350, grp_sha3_256_1_fu_175_output_r_address0, ap_CS_fsm_state4, ap_CS_fsm_state11, i_i_cast1_fu_265_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            k_address0 <= k_addr_reg_350;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            k_address0 <= i_i_cast1_fu_265_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            k_address0 <= grp_sha3_256_1_fu_175_output_r_address0;
        else 
            k_address0 <= "XXXXX";
        end if; 
    end process;


    k_ce0_assign_proc : process(ap_CS_fsm_state10, grp_sha3_256_1_fu_175_output_r_ce0, ap_CS_fsm_state4, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            k_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            k_ce0 <= grp_sha3_256_1_fu_175_output_r_ce0;
        else 
            k_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_d0_assign_proc : process(grp_sha3_256_1_fu_175_output_r_d0, ap_CS_fsm_state4, ap_CS_fsm_state11, tmp_259_i_fu_294_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            k_d0 <= tmp_259_i_fu_294_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            k_d0 <= grp_sha3_256_1_fu_175_output_r_d0;
        else 
            k_d0 <= "XXXXXXXX";
        end if; 
    end process;


    k_we0_assign_proc : process(grp_sha3_256_1_fu_175_output_r_we0, ap_CS_fsm_state4, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            k_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            k_we0 <= grp_sha3_256_1_fu_175_output_r_we0;
        else 
            k_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rm_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, grp_sha3_256_fu_167_output_r_address0, grp_sha3_256_1_fu_175_input_r_address0, grp_owcpa_dec_fu_184_rm_address0, ap_CS_fsm_state4, i_i_cast1_fu_265_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rm_address0 <= i_i_cast1_fu_265_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rm_address0 <= grp_owcpa_dec_fu_184_rm_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rm_address0 <= grp_sha3_256_1_fu_175_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            rm_address0 <= grp_sha3_256_fu_167_output_r_address0;
        else 
            rm_address0 <= "XXXXXXXX";
        end if; 
    end process;


    rm_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10, grp_sha3_256_fu_167_output_r_ce0, grp_sha3_256_1_fu_175_input_r_ce0, grp_owcpa_dec_fu_184_rm_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rm_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rm_ce0 <= grp_owcpa_dec_fu_184_rm_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            rm_ce0 <= grp_sha3_256_1_fu_175_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            rm_ce0 <= grp_sha3_256_fu_167_output_r_ce0;
        else 
            rm_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rm_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, grp_sha3_256_fu_167_output_r_d0, grp_owcpa_dec_fu_184_rm_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rm_d0 <= grp_owcpa_dec_fu_184_rm_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            rm_d0 <= grp_sha3_256_fu_167_output_r_d0;
        else 
            rm_d0 <= "XXXXXXXX";
        end if; 
    end process;


    rm_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, grp_sha3_256_fu_167_output_r_we0, grp_owcpa_dec_fu_184_rm_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rm_we0 <= grp_owcpa_dec_fu_184_rm_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            rm_we0 <= grp_sha3_256_fu_167_output_r_we0;
        else 
            rm_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, grp_owcpa_dec_fu_184_secretkey_address0, tmp_s_fu_220_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sk_address0 <= tmp_s_fu_220_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sk_address0 <= grp_owcpa_dec_fu_184_secretkey_address0;
        else 
            sk_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    sk_address1 <= grp_owcpa_dec_fu_184_secretkey_address1;

    sk_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, grp_owcpa_dec_fu_184_secretkey_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sk_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sk_ce0 <= grp_owcpa_dec_fu_184_secretkey_ce0;
        else 
            sk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_ce1_assign_proc : process(ap_CS_fsm_state2, grp_owcpa_dec_fu_184_secretkey_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sk_ce1 <= grp_owcpa_dec_fu_184_secretkey_ce1;
        else 
            sk_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_220_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_132),64));
    tmp_221_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_144),64));
    tmp_259_i_fu_294_p2 <= (tmp_i_65_fu_289_p2 xor k_q0);
        tmp_cast5_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_210_p2),10));

    tmp_fu_210_p2 <= std_logic_vector(unsigned(i_cast4_cast_fu_194_p1) + unsigned(ap_const_lv8_87));
    tmp_i_65_fu_289_p2 <= (tmp_i_fu_283_p2 and b_assign_reg_332);
    tmp_i_fu_283_p2 <= (rm_q0 xor k_q0);
    tmp_s_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_cast5_fu_216_p1),64));
end behav;
