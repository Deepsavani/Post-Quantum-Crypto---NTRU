-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity poly_S3_mul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    r_coeffs_ce0 : OUT STD_LOGIC;
    r_coeffs_we0 : OUT STD_LOGIC;
    r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    r_coeffs_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    r_coeffs_ce1 : OUT STD_LOGIC;
    r_coeffs_we1 : OUT STD_LOGIC;
    r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    r_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    a_coeffs_ce0 : OUT STD_LOGIC;
    a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    b_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    b_coeffs_ce0 : OUT STD_LOGIC;
    b_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of poly_S3_mul is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_1FC : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000111111100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv9_1FE : STD_LOGIC_VECTOR (8 downto 0) := "111111110";
    constant ap_const_lv9_1FD : STD_LOGIC_VECTOR (8 downto 0) := "111111101";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_210 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal reg_214 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_218 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_cast5_fu_222_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_cast5_reg_656 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal k_3_fu_232_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_3_reg_665 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_coeffs_addr_13_reg_670 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond2_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_243_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_reg_675 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_130_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_279_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_5_reg_698 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_6_fu_295_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_6_reg_706 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond1_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next_fu_316_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_2_fu_328_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_2_reg_729 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal r_coeffs_addr_14_reg_734 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_231_i_cast_reg_740 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal fold1_i_cast_fu_523_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal fold1_i_cast_reg_745 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_143_reg_751 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvars_iv_reg_154 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_reg_166 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_177 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_1_reg_188 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal k_1_reg_199 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_146_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_148_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_152_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_153_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_638_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_647_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_cast_fu_249_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_145_fu_258_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_147_fu_268_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_cast_fu_285_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_151_fu_301_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_141_fu_345_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_156_fu_365_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_157_fu_377_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_140_fu_339_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_128_fu_349_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_142_fu_357_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_assign_fu_393_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_111_fu_405_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_assign_cast_fu_399_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_cast_fu_415_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_cast_31_fu_419_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_fu_429_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_113_fu_435_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_131_fu_369_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_144_fu_361_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_132_fu_381_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_158_fu_389_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_134_fu_449_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_135_fu_455_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal fold_i_cast_fu_481_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_229_i_cast_fu_445_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_230_i_cast_fu_487_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_1_fu_491_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_137_fu_475_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_136_fu_465_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_112_fu_423_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_138_fu_507_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_139_fu_513_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_232_i_cast_fu_539_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_2_fu_542_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_114_fu_547_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal fold2_i_cast_fu_561_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_233_i_cast_fu_557_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_234_i_cast_fu_565_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_3_fu_569_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_fu_575_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_159_fu_581_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_cast_fu_589_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_235_i_fu_597_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal not_tmp_53_i_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_236_i_cast_cast_fu_613_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_237_i_fu_621_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_235_i_cast_fu_603_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_237_i_cast_fu_627_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1_U15 : component crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_210,
        din1 => reg_214,
        din2 => reg_218,
        dout => grp_fu_638_p3);

    crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1_U16 : component crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_210,
        din1 => reg_214,
        din2 => reg_218,
        dout => grp_fu_647_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_130_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_1_reg_188 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_1_reg_188 <= i_6_reg_706;
            end if; 
        end if;
    end process;

    i_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_reg_177 <= i_5_reg_698;
            elsif (((exitcond2_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_177 <= ap_const_lv9_1;
            end if; 
        end if;
    end process;

    indvars_iv_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv_reg_154 <= ap_const_lv9_1;
            elsif (((exitcond1_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                indvars_iv_reg_154 <= indvars_iv_next_fu_316_p2;
            end if; 
        end if;
    end process;

    k_1_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_1_reg_199 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                k_1_reg_199 <= k_2_reg_729;
            end if; 
        end if;
    end process;

    k_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_reg_166 <= ap_const_lv9_0;
            elsif (((exitcond1_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                k_reg_166 <= k_3_reg_665;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                fold1_i_cast_reg_745 <= fold1_i_cast_fu_523_p2;
                tmp_143_reg_751 <= r_1_fu_491_p2(3 downto 2);
                tmp_231_i_cast_reg_740 <= r_1_fu_491_p2(5 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_130_fu_253_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i_5_reg_698 <= i_5_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_6_reg_706 <= i_6_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                k_2_reg_729 <= k_2_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_3_reg_665 <= k_3_fu_232_p2;
                    k_cast5_reg_656(8 downto 0) <= k_cast5_fu_222_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                r_coeffs_addr_13_reg_670 <= tmp_fu_238_p1(9 - 1 downto 0);
                tmp_s_reg_675 <= tmp_s_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                r_coeffs_addr_14_reg_734 <= tmp_133_fu_334_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_210 <= a_coeffs_q0;
                reg_214 <= b_coeffs_q0;
                reg_218 <= r_coeffs_q0;
            end if;
        end if;
    end process;
    k_cast5_reg_656(9) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_226_p2, ap_CS_fsm_state3, tmp_130_fu_253_p2, ap_CS_fsm_state6, exitcond1_fu_289_p2, ap_CS_fsm_state9, exitcond_fu_322_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_130_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((exitcond1_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                if (((exitcond_fu_322_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    a_assign_cast_fu_399_p2 <= std_logic_vector(unsigned(tmp_128_fu_349_p3) + unsigned(tmp_142_fu_357_p1));
    a_assign_fu_393_p2 <= std_logic_vector(unsigned(r_coeffs_q0) + unsigned(tmp_140_fu_339_p2));

    a_coeffs_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, tmp_146_fu_263_p1, tmp_152_fu_306_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_coeffs_address0 <= tmp_152_fu_306_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_coeffs_address0 <= tmp_146_fu_263_p1(9 - 1 downto 0);
        else 
            a_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    a_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            a_coeffs_ce0 <= ap_const_logic_1;
        else 
            a_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9, exitcond_fu_322_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond_fu_322_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, exitcond_fu_322_p2)
    begin
        if (((exitcond_fu_322_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_coeffs_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, tmp_148_fu_274_p1, tmp_153_fu_311_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            b_coeffs_address0 <= tmp_153_fu_311_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_coeffs_address0 <= tmp_148_fu_274_p1(9 - 1 downto 0);
        else 
            b_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    b_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            b_coeffs_ce0 <= ap_const_logic_1;
        else 
            b_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_cast_fu_589_p3 <= 
        ap_const_lv3_7 when (tmp_159_fu_581_p3(0) = '1') else 
        ap_const_lv3_0;
    exitcond1_fu_289_p2 <= "1" when (i_1_reg_188 = indvars_iv_reg_154) else "0";
    exitcond2_fu_226_p2 <= "1" when (indvars_iv_reg_154 = ap_const_lv9_1FE) else "0";
    exitcond_fu_322_p2 <= "1" when (k_1_reg_199 = ap_const_lv9_1FD) else "0";
    fold1_i_cast_fu_523_p2 <= std_logic_vector(unsigned(tmp_138_fu_507_p2) + unsigned(tmp_139_fu_513_p4));
    fold2_i_cast_fu_561_p2 <= std_logic_vector(unsigned(tmp_143_reg_751) + unsigned(fold1_i_cast_reg_745));
    fold_i_cast_fu_481_p2 <= std_logic_vector(unsigned(tmp_134_fu_449_p2) + unsigned(tmp_135_fu_455_p4));
    i_1_cast_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_188),10));
    i_5_fu_279_p2 <= std_logic_vector(unsigned(i_reg_177) + unsigned(ap_const_lv9_1));
    i_6_fu_295_p2 <= std_logic_vector(unsigned(i_1_reg_188) + unsigned(ap_const_lv9_1));
    i_cast_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_177),10));
    indvars_iv_next_fu_316_p2 <= std_logic_vector(unsigned(indvars_iv_reg_154) + unsigned(ap_const_lv9_1));
    k_2_fu_328_p2 <= std_logic_vector(unsigned(k_1_reg_199) + unsigned(ap_const_lv9_1));
    k_3_fu_232_p2 <= std_logic_vector(unsigned(k_reg_166) + unsigned(ap_const_lv9_1));
    k_cast5_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_166),10));
    not_tmp_53_i_fu_607_p2 <= (tmp_159_fu_581_p3 xor ap_const_lv1_1);
    r_1_fu_491_p2 <= std_logic_vector(unsigned(tmp_229_i_cast_fu_445_p1) + unsigned(tmp_230_i_cast_fu_487_p1));
    r_2_fu_542_p2 <= std_logic_vector(unsigned(tmp_231_i_cast_reg_740) + unsigned(tmp_232_i_cast_fu_539_p1));
    r_3_fu_569_p2 <= std_logic_vector(unsigned(tmp_233_i_cast_fu_557_p1) + unsigned(tmp_234_i_cast_fu_565_p1));

    r_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, r_coeffs_addr_13_reg_670, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8, tmp_fu_238_p1, tmp_133_fu_334_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_coeffs_address0 <= tmp_133_fu_334_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            r_coeffs_address0 <= r_coeffs_addr_13_reg_670;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r_coeffs_address0 <= tmp_fu_238_p1(9 - 1 downto 0);
        else 
            r_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    r_coeffs_address1_assign_proc : process(ap_CS_fsm_state9, r_coeffs_addr_14_reg_734, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_coeffs_address1 <= r_coeffs_addr_14_reg_734;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_coeffs_address1 <= ap_const_lv64_1FC(9 - 1 downto 0);
        else 
            r_coeffs_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    r_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            r_coeffs_ce0 <= ap_const_logic_1;
        else 
            r_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            r_coeffs_ce1 <= ap_const_logic_1;
        else 
            r_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, grp_fu_638_p3, grp_fu_647_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_coeffs_d0 <= grp_fu_647_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_d0 <= grp_fu_638_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r_coeffs_d0 <= ap_const_lv16_0;
        else 
            r_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    r_coeffs_d1 <= (tmp_237_i_cast_fu_627_p1 xor tmp_235_i_cast_fu_603_p1);

    r_coeffs_we0_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_226_p2, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((exitcond2_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            r_coeffs_we0 <= ap_const_logic_1;
        else 
            r_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_we1_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_coeffs_we1 <= ap_const_logic_1;
        else 
            r_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_429_p2 <= std_logic_vector(unsigned(tmp_i_cast_fu_415_p1) + unsigned(tmp_i_cast_31_fu_419_p1));
    t_fu_575_p2 <= std_logic_vector(signed(ap_const_lv3_5) + signed(r_3_fu_569_p2));
    tmp_111_fu_405_p4 <= a_assign_fu_393_p2(15 downto 8);
    tmp_112_fu_423_p2 <= std_logic_vector(unsigned(a_assign_cast_fu_399_p2) + unsigned(tmp_111_fu_405_p4));
    tmp_113_fu_435_p4 <= r_fu_429_p2(8 downto 4);
    tmp_114_fu_547_p4 <= r_2_fu_542_p2(3 downto 2);
    tmp_128_fu_349_p3 <= (tmp_141_fu_345_p1 & ap_const_lv1_0);
    tmp_130_fu_253_p2 <= "1" when (unsigned(i_reg_177) < unsigned(tmp_s_reg_675)) else "0";
    tmp_131_fu_369_p3 <= (tmp_156_fu_365_p1 & ap_const_lv1_0);
    tmp_132_fu_381_p3 <= (tmp_157_fu_377_p1 & ap_const_lv1_0);
    tmp_133_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_199),64));
    tmp_134_fu_449_p2 <= std_logic_vector(unsigned(tmp_131_fu_369_p3) + unsigned(tmp_144_fu_361_p1));
    tmp_135_fu_455_p4 <= a_assign_fu_393_p2(11 downto 8);
    tmp_136_fu_465_p4 <= a_assign_fu_393_p2(9 downto 8);
    tmp_137_fu_475_p2 <= std_logic_vector(unsigned(tmp_132_fu_381_p3) + unsigned(tmp_158_fu_389_p1));
    tmp_138_fu_507_p2 <= std_logic_vector(unsigned(tmp_137_fu_475_p2) + unsigned(tmp_136_fu_465_p4));
    tmp_139_fu_513_p4 <= tmp_112_fu_423_p2(5 downto 4);
    tmp_140_fu_339_p2 <= std_logic_vector(shift_left(unsigned(r_coeffs_q1),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_141_fu_345_p1 <= r_coeffs_q1(7 - 1 downto 0);
    tmp_142_fu_357_p1 <= r_coeffs_q0(8 - 1 downto 0);
    tmp_144_fu_361_p1 <= r_coeffs_q0(4 - 1 downto 0);
    tmp_145_fu_258_p2 <= std_logic_vector(unsigned(k_cast5_reg_656) + unsigned(i_cast_fu_249_p1));
    tmp_146_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_145_fu_258_p2),64));
    tmp_147_fu_268_p2 <= std_logic_vector(signed(ap_const_lv9_1FD) - signed(i_reg_177));
    tmp_148_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_147_fu_268_p2),64));
    tmp_151_fu_301_p2 <= std_logic_vector(unsigned(k_cast5_reg_656) - unsigned(i_1_cast_fu_285_p1));
        tmp_152_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_151_fu_301_p2),64));

    tmp_153_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_188),64));
    tmp_156_fu_365_p1 <= r_coeffs_q1(3 - 1 downto 0);
    tmp_157_fu_377_p1 <= r_coeffs_q1(1 - 1 downto 0);
    tmp_158_fu_389_p1 <= r_coeffs_q0(2 - 1 downto 0);
    tmp_159_fu_581_p3 <= t_fu_575_p2(2 downto 2);
    tmp_229_i_cast_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_113_fu_435_p4),6));
    tmp_230_i_cast_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold_i_cast_fu_481_p2),6));
    tmp_232_i_cast_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold1_i_cast_reg_745),4));
    tmp_233_i_cast_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_114_fu_547_p4),3));
    tmp_234_i_cast_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold2_i_cast_fu_561_p2),3));
    tmp_235_i_cast_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_235_i_fu_597_p2),16));
    tmp_235_i_fu_597_p2 <= (r_3_fu_569_p2 and c_cast_fu_589_p3);
    tmp_236_i_cast_cast_fu_613_p3 <= 
        ap_const_lv3_7 when (not_tmp_53_i_fu_607_p2(0) = '1') else 
        ap_const_lv3_0;
        tmp_237_i_cast_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_237_i_fu_621_p2),16));

    tmp_237_i_fu_621_p2 <= (tmp_236_i_cast_cast_fu_613_p3 and t_fu_575_p2);
    tmp_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_166),64));
    tmp_i_cast_31_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_assign_cast_fu_399_p2),9));
    tmp_i_cast_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_111_fu_405_p4),9));
    tmp_s_fu_243_p2 <= std_logic_vector(signed(ap_const_lv9_1FD) - signed(k_reg_166));
end behav;
