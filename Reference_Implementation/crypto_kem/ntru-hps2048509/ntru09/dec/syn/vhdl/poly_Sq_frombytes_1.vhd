-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity poly_Sq_frombytes_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    r_coeffs_ce0 : OUT STD_LOGIC;
    r_coeffs_we0 : OUT STD_LOGIC;
    r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    r_coeffs_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    r_coeffs_ce1 : OUT STD_LOGIC;
    r_coeffs_we1 : OUT STD_LOGIC;
    r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of poly_Sq_frombytes_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_385 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001110000101";
    constant ap_const_lv64_386 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001110000110";
    constant ap_const_lv64_1FB : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000111111011";
    constant ap_const_lv64_383 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001110000011";
    constant ap_const_lv64_384 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001110000100";
    constant ap_const_lv64_1FA : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000111111010";
    constant ap_const_lv64_382 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001110000010";
    constant ap_const_lv64_381 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001110000001";
    constant ap_const_lv64_1F9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000111111001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_1F8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000111111000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv10_CC : STD_LOGIC_VECTOR (9 downto 0) := "0011001100";
    constant ap_const_lv10_CD : STD_LOGIC_VECTOR (9 downto 0) := "0011001101";
    constant ap_const_lv10_CE : STD_LOGIC_VECTOR (9 downto 0) := "0011001110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_CF : STD_LOGIC_VECTOR (9 downto 0) := "0011001111";
    constant ap_const_lv10_D0 : STD_LOGIC_VECTOR (9 downto 0) := "0011010000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv10_D1 : STD_LOGIC_VECTOR (9 downto 0) := "0011010001";
    constant ap_const_lv10_D2 : STD_LOGIC_VECTOR (9 downto 0) := "0011010010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv10_D3 : STD_LOGIC_VECTOR (9 downto 0) := "0011010011";
    constant ap_const_lv10_D4 : STD_LOGIC_VECTOR (9 downto 0) := "0011010100";
    constant ap_const_lv10_B : STD_LOGIC_VECTOR (9 downto 0) := "0000001011";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv10_D5 : STD_LOGIC_VECTOR (9 downto 0) := "0011010101";
    constant ap_const_lv10_D6 : STD_LOGIC_VECTOR (9 downto 0) := "0011010110";
    constant ap_const_lv9_6 : STD_LOGIC_VECTOR (8 downto 0) := "000000110";
    constant ap_const_lv9_7 : STD_LOGIC_VECTOR (8 downto 0) := "000000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_4_fu_446_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_reg_995 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_load_6_reg_1015 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_19_fu_501_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_reg_1030 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_26_reg_1040 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_430_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_35_reg_1055 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_45_reg_1070 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal next_mul_fu_741_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul_reg_1085 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_54_reg_1090 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_10_fu_907_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_1115 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_12_fu_959_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_reg_1125 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_396 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal phi_mul_reg_408 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_cast_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_cast_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum6_cast_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum8_cast_fu_569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_cast_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum3_cast_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_fu_669_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum5_cast_fu_725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum7_cast_fu_736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_fu_794_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum9_cast_fu_815_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum10_cast_fu_826_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_fu_852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_fu_885_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_18_fu_496_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_37_cast_fu_526_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_51_cast_fu_611_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_60_cast_fu_659_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_69_cast_fu_696_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_83_cast_fu_784_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_92_cast_fu_842_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_100_cast_fu_875_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_cast_fu_902_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_cast_fu_954_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_cast_fu_970_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_987_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_452_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum2_fu_463_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum4_fu_474_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_fu_485_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_17_fu_489_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_fu_514_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_420_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_23_fu_518_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_24_fu_531_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum6_fu_552_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum8_fu_563_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_fu_574_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_589_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_28_fu_577_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_29_fu_585_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_597_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_32_fu_603_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_33_fu_616_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum1_fu_626_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum3_fu_637_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_36_fu_648_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_37_fu_652_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_38_fu_664_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_41_fu_684_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_40_fu_674_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_42_fu_688_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_43_fu_701_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum5_fu_719_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum7_fu_730_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_46_fu_747_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_fu_762_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_47_fu_750_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_48_fu_758_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_50_fu_770_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_51_fu_776_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_52_fu_789_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum9_fu_809_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum10_fu_820_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_55_fu_831_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_56_fu_835_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_57_fu_847_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_59_fu_857_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_60_fu_867_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_61_fu_880_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_890_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_894_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_fu_911_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_921_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_933_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_925_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_941_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_947_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_963_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_fu_975_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_fu_979_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_396 <= tmp_4_reg_995;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_396 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_mul_reg_408 <= next_mul_reg_1085;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_408 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                a_load_6_reg_1015 <= a_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                next_mul_reg_1085 <= next_mul_fu_741_p2;
                tmp_54_reg_1090 <= a_q0(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_10_reg_1115 <= tmp_10_fu_907_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_12_reg_1125 <= tmp_12_fu_959_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    tmp_19_reg_1030(8 downto 3) <= tmp_19_fu_501_p3(8 downto 3);
                tmp_26_reg_1040 <= a_q0(7 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_35_reg_1055 <= a_q0(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_45_reg_1070 <= a_q0(7 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_4_reg_995 <= tmp_4_fu_446_p2;
            end if;
        end if;
    end process;
    tmp_19_reg_1030(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_440_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_440_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, sum_cast_fu_458_p1, sum4_cast_fu_480_p1, sum8_cast_fu_569_p1, sum3_cast_fu_643_p1, sum7_cast_fu_736_p1, sum10_cast_fu_826_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            a_address0 <= ap_const_lv64_381(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            a_address0 <= ap_const_lv64_384(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_address0 <= sum10_cast_fu_826_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_address0 <= sum7_cast_fu_736_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address0 <= sum3_cast_fu_643_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_address0 <= sum8_cast_fu_569_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_address0 <= sum4_cast_fu_480_p1(10 - 1 downto 0);
        elsif (((exitcond_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_address0 <= ap_const_lv64_385(10 - 1 downto 0);
        elsif (((exitcond_fu_440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_address0 <= sum_cast_fu_458_p1(10 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    a_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, sum2_cast_fu_469_p1, sum6_cast_fu_558_p1, sum1_cast_fu_632_p1, sum5_cast_fu_725_p1, sum9_cast_fu_815_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            a_address1 <= ap_const_lv64_382(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            a_address1 <= ap_const_lv64_383(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_address1 <= sum9_cast_fu_815_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_address1 <= sum5_cast_fu_725_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address1 <= sum1_cast_fu_632_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_address1 <= sum6_cast_fu_558_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_address1 <= sum2_cast_fu_469_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_address1 <= ap_const_lv64_386(10 - 1 downto 0);
        else 
            a_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_440_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((exitcond_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((exitcond_fu_440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_440_p2 <= "1" when (i_reg_396 = ap_const_lv6_3F) else "0";
    grp_fu_420_p4 <= a_q1(7 downto 3);
    grp_fu_430_p4 <= a_q0(7 downto 1);
    next_mul_fu_741_p2 <= std_logic_vector(unsigned(ap_const_lv10_B) + unsigned(phi_mul_reg_408));

    r_coeffs_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state8, tmp_20_fu_509_p1, tmp_34_fu_621_p1, tmp_44_fu_706_p1, tmp_58_fu_852_p1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_coeffs_address0 <= ap_const_lv64_1F9(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_coeffs_address0 <= ap_const_lv64_1FB(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_coeffs_address0 <= tmp_58_fu_852_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_address0 <= tmp_44_fu_706_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_address0 <= tmp_34_fu_621_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_address0 <= tmp_20_fu_509_p1(9 - 1 downto 0);
        else 
            r_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    r_coeffs_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state8, tmp_25_fu_537_p1, tmp_39_fu_669_p1, tmp_53_fu_794_p1, tmp_62_fu_885_p1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_coeffs_address1 <= ap_const_lv64_1F8(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_coeffs_address1 <= ap_const_lv64_1FA(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_coeffs_address1 <= tmp_62_fu_885_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_coeffs_address1 <= tmp_53_fu_794_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_address1 <= tmp_39_fu_669_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_address1 <= tmp_25_fu_537_p1(9 - 1 downto 0);
        else 
            r_coeffs_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    r_coeffs_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            r_coeffs_ce0 <= ap_const_logic_1;
        else 
            r_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            r_coeffs_ce1 <= ap_const_logic_1;
        else 
            r_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state11, tmp_18_fu_496_p1, tmp_51_cast_fu_611_p1, tmp_69_cast_fu_696_p1, tmp_92_cast_fu_842_p1, tmp_8_cast_fu_902_p1, tmp_17_cast_fu_970_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_coeffs_d0 <= tmp_17_cast_fu_970_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_coeffs_d0 <= tmp_8_cast_fu_902_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_coeffs_d0 <= tmp_92_cast_fu_842_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_d0 <= tmp_69_cast_fu_696_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_d0 <= tmp_51_cast_fu_611_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_d0 <= tmp_18_fu_496_p1;
        else 
            r_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_d1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state11, tmp_37_cast_fu_526_p1, tmp_60_cast_fu_659_p1, tmp_83_cast_fu_784_p1, tmp_100_cast_fu_875_p1, tmp_12_cast_fu_954_p1, tmp_14_fu_987_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_coeffs_d1 <= tmp_14_fu_987_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_coeffs_d1 <= tmp_12_cast_fu_954_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_coeffs_d1 <= tmp_100_cast_fu_875_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_coeffs_d1 <= tmp_83_cast_fu_784_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_d1 <= tmp_60_cast_fu_659_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_d1 <= tmp_37_cast_fu_526_p1;
        else 
            r_coeffs_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            r_coeffs_we0 <= ap_const_logic_1;
        else 
            r_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            r_coeffs_we1 <= ap_const_logic_1;
        else 
            r_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sum10_cast_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum10_fu_820_p2),64));
    sum10_fu_820_p2 <= std_logic_vector(unsigned(ap_const_lv10_D6) + unsigned(phi_mul_reg_408));
    sum1_cast_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_626_p2),64));
    sum1_fu_626_p2 <= std_logic_vector(unsigned(ap_const_lv10_D1) + unsigned(phi_mul_reg_408));
    sum2_cast_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_463_p2),64));
    sum2_fu_463_p2 <= std_logic_vector(unsigned(ap_const_lv10_CD) + unsigned(phi_mul_reg_408));
    sum3_cast_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_fu_637_p2),64));
    sum3_fu_637_p2 <= std_logic_vector(unsigned(ap_const_lv10_D2) + unsigned(phi_mul_reg_408));
    sum4_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_fu_474_p2),64));
    sum4_fu_474_p2 <= std_logic_vector(unsigned(ap_const_lv10_CE) + unsigned(phi_mul_reg_408));
    sum5_cast_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_fu_719_p2),64));
    sum5_fu_719_p2 <= std_logic_vector(unsigned(ap_const_lv10_D3) + unsigned(phi_mul_reg_408));
    sum6_cast_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum6_fu_552_p2),64));
    sum6_fu_552_p2 <= std_logic_vector(unsigned(ap_const_lv10_CF) + unsigned(phi_mul_reg_408));
    sum7_cast_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum7_fu_730_p2),64));
    sum7_fu_730_p2 <= std_logic_vector(unsigned(ap_const_lv10_D4) + unsigned(phi_mul_reg_408));
    sum8_cast_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum8_fu_563_p2),64));
    sum8_fu_563_p2 <= std_logic_vector(unsigned(ap_const_lv10_D0) + unsigned(phi_mul_reg_408));
    sum9_cast_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum9_fu_809_p2),64));
    sum9_fu_809_p2 <= std_logic_vector(unsigned(ap_const_lv10_D5) + unsigned(phi_mul_reg_408));
    sum_cast_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_452_p2),64));
    sum_fu_452_p2 <= std_logic_vector(unsigned(ap_const_lv10_CC) + unsigned(phi_mul_reg_408));
    tmp_100_cast_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_867_p3),16));
    tmp_10_fu_907_p1 <= a_q0(1 - 1 downto 0);
    tmp_11_fu_963_p3 <= (tmp_12_reg_1125 & grp_fu_420_p4);
    tmp_12_cast_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_947_p3),16));
    tmp_12_fu_959_p1 <= a_q1(6 - 1 downto 0);
    tmp_13_fu_979_p3 <= (tmp_15_fu_975_p1 & a_q0);
    tmp_14_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_979_p3),16));
    tmp_15_fu_975_p1 <= a_q1(3 - 1 downto 0);
    tmp_16_fu_485_p1 <= a_q1(3 - 1 downto 0);
    tmp_17_cast_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_963_p3),16));
    tmp_17_fu_489_p3 <= (tmp_16_fu_485_p1 & a_load_6_reg_1015);
    tmp_18_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_489_p3),16));
    tmp_19_fu_501_p3 <= (i_reg_396 & ap_const_lv3_0);
    tmp_1_fu_911_p4 <= a_q1(7 downto 6);
    tmp_20_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_501_p3),64));
    tmp_22_fu_514_p1 <= a_q0(6 - 1 downto 0);
    tmp_23_fu_518_p3 <= (tmp_22_fu_514_p1 & grp_fu_420_p4);
    tmp_24_fu_531_p2 <= (tmp_19_fu_501_p3 or ap_const_lv9_1);
    tmp_25_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_531_p2),64));
    tmp_27_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_reg_1040),8));
    tmp_28_fu_577_p3 <= (a_q1 & ap_const_lv2_0);
    tmp_29_fu_585_p1 <= a_q0(1 - 1 downto 0);
    tmp_30_fu_589_p3 <= (ap_const_lv2_0 & tmp_27_fu_574_p1);
    tmp_31_fu_597_p2 <= (tmp_30_fu_589_p3 or tmp_28_fu_577_p3);
    tmp_32_fu_603_p3 <= (tmp_29_fu_585_p1 & tmp_31_fu_597_p2);
    tmp_33_fu_616_p2 <= (tmp_19_reg_1030 or ap_const_lv9_2);
    tmp_34_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_616_p2),64));
    tmp_36_fu_648_p1 <= a_q1(4 - 1 downto 0);
    tmp_37_cast_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_518_p3),16));
    tmp_37_fu_652_p3 <= (tmp_36_fu_648_p1 & tmp_35_reg_1055);
    tmp_38_fu_664_p2 <= (tmp_19_reg_1030 or ap_const_lv9_3);
    tmp_39_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_664_p2),64));
    tmp_3_fu_925_p3 <= (a_q0 & ap_const_lv2_0);
    tmp_40_fu_674_p4 <= a_q1(7 downto 4);
    tmp_41_fu_684_p1 <= a_q0(7 - 1 downto 0);
    tmp_42_fu_688_p3 <= (tmp_41_fu_684_p1 & tmp_40_fu_674_p4);
    tmp_43_fu_701_p2 <= (tmp_19_reg_1030 or ap_const_lv9_4);
    tmp_44_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_701_p2),64));
    tmp_46_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_reg_1070),8));
    tmp_47_fu_750_p3 <= (a_q1 & ap_const_lv1_0);
    tmp_48_fu_758_p1 <= a_q0(2 - 1 downto 0);
    tmp_49_fu_762_p3 <= (ap_const_lv1_0 & tmp_46_fu_747_p1);
    tmp_4_fu_446_p2 <= std_logic_vector(unsigned(i_reg_396) + unsigned(ap_const_lv6_1));
    tmp_50_fu_770_p2 <= (tmp_49_fu_762_p3 or tmp_47_fu_750_p3);
    tmp_51_cast_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_603_p3),16));
    tmp_51_fu_776_p3 <= (tmp_48_fu_758_p1 & tmp_50_fu_770_p2);
    tmp_52_fu_789_p2 <= (tmp_19_reg_1030 or ap_const_lv9_5);
    tmp_53_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_789_p2),64));
    tmp_55_fu_831_p1 <= a_q1(5 - 1 downto 0);
    tmp_56_fu_835_p3 <= (tmp_55_fu_831_p1 & tmp_54_reg_1090);
    tmp_57_fu_847_p2 <= (tmp_19_reg_1030 or ap_const_lv9_6);
    tmp_58_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_847_p2),64));
    tmp_59_fu_857_p4 <= a_q1(7 downto 5);
    tmp_5_fu_933_p3 <= (ap_const_lv2_0 & tmp_6_fu_921_p1);
    tmp_60_cast_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_652_p3),16));
    tmp_60_fu_867_p3 <= (a_q0 & tmp_59_fu_857_p4);
    tmp_61_fu_880_p2 <= (tmp_19_reg_1030 or ap_const_lv9_7);
    tmp_62_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_61_fu_880_p2),64));
    tmp_69_cast_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_688_p3),16));
    tmp_6_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_911_p4),8));
    tmp_7_fu_941_p2 <= (tmp_5_fu_933_p3 or tmp_3_fu_925_p3);
    tmp_83_cast_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_776_p3),16));
    tmp_8_cast_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_894_p3),16));
    tmp_8_fu_894_p3 <= (tmp_fu_890_p1 & grp_fu_430_p4);
    tmp_92_cast_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_835_p3),16));
    tmp_9_fu_947_p3 <= (tmp_10_reg_1115 & tmp_7_fu_941_p2);
    tmp_fu_890_p1 <= a_q1(4 - 1 downto 0);
end behav;
