// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module poly_Sq_frombytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_coeffs_address0,
        r_coeffs_ce0,
        r_coeffs_we0,
        r_coeffs_d0,
        r_coeffs_address1,
        r_coeffs_ce1,
        r_coeffs_we1,
        r_coeffs_d1,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] r_coeffs_address0;
output   r_coeffs_ce0;
output   r_coeffs_we0;
output  [15:0] r_coeffs_d0;
output  [8:0] r_coeffs_address1;
output   r_coeffs_ce1;
output   r_coeffs_we1;
output  [15:0] r_coeffs_d1;
output  [9:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [9:0] a_address1;
output   a_ce1;
input  [7:0] a_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] r_coeffs_address0;
reg r_coeffs_ce0;
reg r_coeffs_we0;
reg[15:0] r_coeffs_d0;
reg[8:0] r_coeffs_address1;
reg r_coeffs_ce1;
reg r_coeffs_we1;
reg[15:0] r_coeffs_d1;
reg[9:0] a_address0;
reg a_ce0;
reg[9:0] a_address1;
reg a_ce1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] tmp_108_fu_444_p2;
reg   [5:0] tmp_108_reg_987;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_438_p2;
reg   [7:0] a_load_6_reg_1007;
wire    ap_CS_fsm_state3;
wire   [8:0] tmp_113_fu_493_p3;
reg   [8:0] tmp_113_reg_1022;
wire    ap_CS_fsm_state4;
reg   [1:0] tmp_121_reg_1032;
wire   [6:0] grp_fu_428_p4;
reg   [6:0] tmp_130_reg_1047;
wire    ap_CS_fsm_state5;
reg   [0:0] tmp_171_reg_1062;
wire    ap_CS_fsm_state6;
wire   [9:0] next_mul_fu_733_p2;
reg   [9:0] next_mul_reg_1077;
wire    ap_CS_fsm_state7;
reg   [5:0] tmp_154_reg_1082;
wire    ap_CS_fsm_state9;
wire   [0:0] tmp_133_fu_899_p1;
reg   [0:0] tmp_133_reg_1107;
wire    ap_CS_fsm_state10;
wire   [5:0] tmp_140_fu_951_p1;
reg   [5:0] tmp_140_reg_1117;
reg   [5:0] i_reg_394;
wire    ap_CS_fsm_state8;
reg   [9:0] phi_mul_reg_406;
wire   [63:0] tmp_109_fu_450_p1;
wire   [63:0] tmp_111_fu_461_p1;
wire   [63:0] tmp_117_fu_472_p1;
wire   [63:0] tmp_114_fu_501_p1;
wire   [63:0] tmp_120_fu_529_p1;
wire   [63:0] tmp_123_fu_550_p1;
wire   [63:0] tmp_126_fu_561_p1;
wire   [63:0] tmp_129_fu_613_p1;
wire   [63:0] tmp_132_fu_624_p1;
wire   [63:0] tmp_139_fu_635_p1;
wire   [63:0] tmp_136_fu_661_p1;
wire   [63:0] tmp_143_fu_698_p1;
wire   [63:0] tmp_147_fu_717_p1;
wire   [63:0] tmp_150_fu_728_p1;
wire   [63:0] tmp_153_fu_786_p1;
wire   [63:0] tmp_156_fu_807_p1;
wire   [63:0] tmp_163_fu_818_p1;
wire   [63:0] tmp_160_fu_844_p1;
wire   [63:0] tmp_166_fu_877_p1;
wire    ap_CS_fsm_state11;
wire   [15:0] tmp_112_fu_488_p1;
wire   [15:0] tmp_209_cast_fu_518_p1;
wire   [15:0] tmp_223_cast_fu_603_p1;
wire   [15:0] tmp_232_cast_fu_651_p1;
wire   [15:0] tmp_241_cast_fu_688_p1;
wire   [15:0] tmp_255_cast_fu_776_p1;
wire   [15:0] tmp_264_cast_fu_834_p1;
wire   [15:0] tmp_272_cast_fu_867_p1;
wire   [15:0] tmp_180_cast_fu_894_p1;
wire   [15:0] tmp_188_cast_fu_946_p1;
wire   [15:0] tmp_193_cast_fu_962_p1;
wire   [15:0] tmp_107_fu_979_p1;
wire   [9:0] tmp_110_fu_455_p2;
wire   [9:0] tmp_116_fu_466_p2;
wire   [2:0] tmp_157_fu_477_p1;
wire   [10:0] tmp_31_fu_481_p3;
wire   [5:0] tmp_167_fu_506_p1;
wire   [4:0] grp_fu_418_p4;
wire   [10:0] tmp_118_fu_510_p3;
wire   [8:0] tmp_119_fu_523_p2;
wire   [9:0] tmp_122_fu_544_p2;
wire   [9:0] tmp_125_fu_555_p2;
wire   [7:0] tmp_100_fu_566_p1;
wire   [9:0] tmp_44_fu_581_p3;
wire   [9:0] tmp_124_fu_569_p3;
wire   [0:0] tmp_168_fu_577_p1;
wire   [9:0] tmp_45_fu_589_p2;
wire   [10:0] tmp_127_fu_595_p3;
wire   [8:0] tmp_128_fu_608_p2;
wire   [9:0] tmp_131_fu_618_p2;
wire   [9:0] tmp_138_fu_629_p2;
wire   [3:0] tmp_169_fu_640_p1;
wire   [10:0] tmp_134_fu_644_p3;
wire   [8:0] tmp_135_fu_656_p2;
wire   [6:0] tmp_170_fu_676_p1;
wire   [3:0] tmp_137_fu_666_p4;
wire   [10:0] tmp_141_fu_680_p3;
wire   [8:0] tmp_142_fu_693_p2;
wire   [9:0] tmp_146_fu_711_p2;
wire   [9:0] tmp_149_fu_722_p2;
wire   [7:0] tmp_145_fu_739_p1;
wire   [8:0] tmp_51_fu_754_p3;
wire   [8:0] tmp_148_fu_742_p3;
wire   [1:0] tmp_172_fu_750_p1;
wire   [8:0] tmp_52_fu_762_p2;
wire   [10:0] tmp_151_fu_768_p3;
wire   [8:0] tmp_152_fu_781_p2;
wire   [9:0] tmp_155_fu_801_p2;
wire   [9:0] tmp_162_fu_812_p2;
wire   [4:0] tmp_173_fu_823_p1;
wire   [10:0] tmp_158_fu_827_p3;
wire   [8:0] tmp_159_fu_839_p2;
wire   [2:0] tmp_161_fu_849_p4;
wire   [10:0] tmp_164_fu_859_p3;
wire   [8:0] tmp_165_fu_872_p2;
wire   [3:0] tmp_fu_882_p1;
wire   [10:0] tmp_101_fu_886_p3;
wire   [1:0] tmp_102_fu_903_p4;
wire   [7:0] tmp_97_fu_913_p1;
wire   [9:0] tmp_37_fu_925_p3;
wire   [9:0] tmp_103_fu_917_p3;
wire   [9:0] tmp_38_fu_933_p2;
wire   [10:0] tmp_104_fu_939_p3;
wire   [10:0] tmp_106_fu_955_p3;
wire   [2:0] tmp_144_fu_967_p1;
wire   [10:0] tmp_29_fu_971_p3;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_394 <= tmp_108_reg_987;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_394 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_mul_reg_406 <= next_mul_reg_1077;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_406 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_load_6_reg_1007 <= a_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        next_mul_reg_1077 <= next_mul_fu_733_p2;
        tmp_154_reg_1082 <= {{a_q0[7:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_108_reg_987 <= tmp_108_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_113_reg_1022[8 : 3] <= tmp_113_fu_493_p3[8 : 3];
        tmp_121_reg_1032 <= {{a_q0[7:6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_130_reg_1047 <= {{a_q0[7:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_133_reg_1107 <= tmp_133_fu_899_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_140_reg_1117 <= tmp_140_fu_951_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_171_reg_1062 <= a_q0[32'd7];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        a_address0 = 64'd693;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        a_address0 = 64'd696;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        a_address0 = tmp_163_fu_818_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        a_address0 = tmp_150_fu_728_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        a_address0 = tmp_139_fu_635_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address0 = tmp_126_fu_561_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address0 = tmp_117_fu_472_p1;
    end else if (((exitcond_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        a_address0 = 64'd697;
    end else if (((exitcond_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_address0 = tmp_109_fu_450_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        a_address1 = 64'd694;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        a_address1 = 64'd695;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        a_address1 = tmp_156_fu_807_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        a_address1 = tmp_147_fu_717_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        a_address1 = tmp_132_fu_624_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address1 = tmp_123_fu_550_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address1 = tmp_111_fu_461_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_address1 = 64'd698;
    end else begin
        a_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((exitcond_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((exitcond_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        r_coeffs_address0 = 64'd505;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        r_coeffs_address0 = 64'd507;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_coeffs_address0 = tmp_160_fu_844_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_address0 = tmp_143_fu_698_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_coeffs_address0 = tmp_129_fu_613_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_coeffs_address0 = tmp_114_fu_501_p1;
    end else begin
        r_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        r_coeffs_address1 = 64'd504;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        r_coeffs_address1 = 64'd506;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_coeffs_address1 = tmp_166_fu_877_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_coeffs_address1 = tmp_153_fu_786_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_address1 = tmp_136_fu_661_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_coeffs_address1 = tmp_120_fu_529_p1;
    end else begin
        r_coeffs_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6))) begin
        r_coeffs_ce0 = 1'b1;
    end else begin
        r_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        r_coeffs_ce1 = 1'b1;
    end else begin
        r_coeffs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        r_coeffs_d0 = tmp_193_cast_fu_962_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        r_coeffs_d0 = tmp_180_cast_fu_894_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_coeffs_d0 = tmp_264_cast_fu_834_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_d0 = tmp_241_cast_fu_688_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_coeffs_d0 = tmp_223_cast_fu_603_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_coeffs_d0 = tmp_112_fu_488_p1;
    end else begin
        r_coeffs_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        r_coeffs_d1 = tmp_107_fu_979_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        r_coeffs_d1 = tmp_188_cast_fu_946_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_coeffs_d1 = tmp_272_cast_fu_867_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_coeffs_d1 = tmp_255_cast_fu_776_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_d1 = tmp_232_cast_fu_651_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_coeffs_d1 = tmp_209_cast_fu_518_p1;
    end else begin
        r_coeffs_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6))) begin
        r_coeffs_we0 = 1'b1;
    end else begin
        r_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        r_coeffs_we1 = 1'b1;
    end else begin
        r_coeffs_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond_fu_438_p2 = ((i_reg_394 == 6'd63) ? 1'b1 : 1'b0);

assign grp_fu_418_p4 = {{a_q1[7:3]}};

assign grp_fu_428_p4 = {{a_q0[7:1]}};

assign next_mul_fu_733_p2 = (10'd11 + phi_mul_reg_406);

assign tmp_100_fu_566_p1 = tmp_121_reg_1032;

assign tmp_101_fu_886_p3 = {{tmp_fu_882_p1}, {grp_fu_428_p4}};

assign tmp_102_fu_903_p4 = {{a_q1[7:6]}};

assign tmp_103_fu_917_p3 = {{a_q0}, {2'd0}};

assign tmp_104_fu_939_p3 = {{tmp_133_reg_1107}, {tmp_38_fu_933_p2}};

assign tmp_106_fu_955_p3 = {{tmp_140_reg_1117}, {grp_fu_418_p4}};

assign tmp_107_fu_979_p1 = tmp_29_fu_971_p3;

assign tmp_108_fu_444_p2 = (i_reg_394 + 6'd1);

assign tmp_109_fu_450_p1 = phi_mul_reg_406;

assign tmp_110_fu_455_p2 = (10'd1 + phi_mul_reg_406);

assign tmp_111_fu_461_p1 = tmp_110_fu_455_p2;

assign tmp_112_fu_488_p1 = tmp_31_fu_481_p3;

assign tmp_113_fu_493_p3 = {{i_reg_394}, {3'd0}};

assign tmp_114_fu_501_p1 = tmp_113_fu_493_p3;

assign tmp_116_fu_466_p2 = (10'd2 + phi_mul_reg_406);

assign tmp_117_fu_472_p1 = tmp_116_fu_466_p2;

assign tmp_118_fu_510_p3 = {{tmp_167_fu_506_p1}, {grp_fu_418_p4}};

assign tmp_119_fu_523_p2 = (tmp_113_fu_493_p3 | 9'd1);

assign tmp_120_fu_529_p1 = tmp_119_fu_523_p2;

assign tmp_122_fu_544_p2 = (10'd3 + phi_mul_reg_406);

assign tmp_123_fu_550_p1 = tmp_122_fu_544_p2;

assign tmp_124_fu_569_p3 = {{a_q1}, {2'd0}};

assign tmp_125_fu_555_p2 = (10'd4 + phi_mul_reg_406);

assign tmp_126_fu_561_p1 = tmp_125_fu_555_p2;

assign tmp_127_fu_595_p3 = {{tmp_168_fu_577_p1}, {tmp_45_fu_589_p2}};

assign tmp_128_fu_608_p2 = (tmp_113_reg_1022 | 9'd2);

assign tmp_129_fu_613_p1 = tmp_128_fu_608_p2;

assign tmp_131_fu_618_p2 = (10'd5 + phi_mul_reg_406);

assign tmp_132_fu_624_p1 = tmp_131_fu_618_p2;

assign tmp_133_fu_899_p1 = a_q0[0:0];

assign tmp_134_fu_644_p3 = {{tmp_169_fu_640_p1}, {tmp_130_reg_1047}};

assign tmp_135_fu_656_p2 = (tmp_113_reg_1022 | 9'd3);

assign tmp_136_fu_661_p1 = tmp_135_fu_656_p2;

assign tmp_137_fu_666_p4 = {{a_q1[7:4]}};

assign tmp_138_fu_629_p2 = (10'd6 + phi_mul_reg_406);

assign tmp_139_fu_635_p1 = tmp_138_fu_629_p2;

assign tmp_140_fu_951_p1 = a_q1[5:0];

assign tmp_141_fu_680_p3 = {{tmp_170_fu_676_p1}, {tmp_137_fu_666_p4}};

assign tmp_142_fu_693_p2 = (tmp_113_reg_1022 | 9'd4);

assign tmp_143_fu_698_p1 = tmp_142_fu_693_p2;

assign tmp_144_fu_967_p1 = a_q1[2:0];

assign tmp_145_fu_739_p1 = tmp_171_reg_1062;

assign tmp_146_fu_711_p2 = (10'd7 + phi_mul_reg_406);

assign tmp_147_fu_717_p1 = tmp_146_fu_711_p2;

assign tmp_148_fu_742_p3 = {{a_q1}, {1'd0}};

assign tmp_149_fu_722_p2 = (10'd8 + phi_mul_reg_406);

assign tmp_150_fu_728_p1 = tmp_149_fu_722_p2;

assign tmp_151_fu_768_p3 = {{tmp_172_fu_750_p1}, {tmp_52_fu_762_p2}};

assign tmp_152_fu_781_p2 = (tmp_113_reg_1022 | 9'd5);

assign tmp_153_fu_786_p1 = tmp_152_fu_781_p2;

assign tmp_155_fu_801_p2 = (10'd9 + phi_mul_reg_406);

assign tmp_156_fu_807_p1 = tmp_155_fu_801_p2;

assign tmp_157_fu_477_p1 = a_q1[2:0];

assign tmp_158_fu_827_p3 = {{tmp_173_fu_823_p1}, {tmp_154_reg_1082}};

assign tmp_159_fu_839_p2 = (tmp_113_reg_1022 | 9'd6);

assign tmp_160_fu_844_p1 = tmp_159_fu_839_p2;

assign tmp_161_fu_849_p4 = {{a_q1[7:5]}};

assign tmp_162_fu_812_p2 = (10'd10 + phi_mul_reg_406);

assign tmp_163_fu_818_p1 = tmp_162_fu_812_p2;

assign tmp_164_fu_859_p3 = {{a_q0}, {tmp_161_fu_849_p4}};

assign tmp_165_fu_872_p2 = (tmp_113_reg_1022 | 9'd7);

assign tmp_166_fu_877_p1 = tmp_165_fu_872_p2;

assign tmp_167_fu_506_p1 = a_q0[5:0];

assign tmp_168_fu_577_p1 = a_q0[0:0];

assign tmp_169_fu_640_p1 = a_q1[3:0];

assign tmp_170_fu_676_p1 = a_q0[6:0];

assign tmp_172_fu_750_p1 = a_q0[1:0];

assign tmp_173_fu_823_p1 = a_q1[4:0];

assign tmp_180_cast_fu_894_p1 = tmp_101_fu_886_p3;

assign tmp_188_cast_fu_946_p1 = tmp_104_fu_939_p3;

assign tmp_193_cast_fu_962_p1 = tmp_106_fu_955_p3;

assign tmp_209_cast_fu_518_p1 = tmp_118_fu_510_p3;

assign tmp_223_cast_fu_603_p1 = tmp_127_fu_595_p3;

assign tmp_232_cast_fu_651_p1 = tmp_134_fu_644_p3;

assign tmp_241_cast_fu_688_p1 = tmp_141_fu_680_p3;

assign tmp_255_cast_fu_776_p1 = tmp_151_fu_768_p3;

assign tmp_264_cast_fu_834_p1 = tmp_158_fu_827_p3;

assign tmp_272_cast_fu_867_p1 = tmp_164_fu_859_p3;

assign tmp_29_fu_971_p3 = {{tmp_144_fu_967_p1}, {a_q0}};

assign tmp_31_fu_481_p3 = {{tmp_157_fu_477_p1}, {a_load_6_reg_1007}};

assign tmp_37_fu_925_p3 = {{2'd0}, {tmp_97_fu_913_p1}};

assign tmp_38_fu_933_p2 = (tmp_37_fu_925_p3 | tmp_103_fu_917_p3);

assign tmp_44_fu_581_p3 = {{2'd0}, {tmp_100_fu_566_p1}};

assign tmp_45_fu_589_p2 = (tmp_44_fu_581_p3 | tmp_124_fu_569_p3);

assign tmp_51_fu_754_p3 = {{1'd0}, {tmp_145_fu_739_p1}};

assign tmp_52_fu_762_p2 = (tmp_51_fu_754_p3 | tmp_148_fu_742_p3);

assign tmp_97_fu_913_p1 = tmp_102_fu_903_p4;

assign tmp_fu_882_p1 = a_q1[3:0];

always @ (posedge ap_clk) begin
    tmp_113_reg_1022[2:0] <= 3'b000;
end

endmodule //poly_Sq_frombytes
