// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module poly_S3_frombytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_coeffs_address0,
        r_coeffs_ce0,
        r_coeffs_we0,
        r_coeffs_d0,
        r_coeffs_address1,
        r_coeffs_ce1,
        r_coeffs_we1,
        r_coeffs_d1,
        msg_address0,
        msg_ce0,
        msg_q0,
        msg_offset
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] r_coeffs_address0;
output   r_coeffs_ce0;
output   r_coeffs_we0;
output  [15:0] r_coeffs_d0;
output  [8:0] r_coeffs_address1;
output   r_coeffs_ce1;
output   r_coeffs_we1;
output  [15:0] r_coeffs_d1;
output  [7:0] msg_address0;
output   msg_ce0;
input  [7:0] msg_q0;
input  [8:0] msg_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] r_coeffs_address0;
reg r_coeffs_ce0;
reg r_coeffs_we0;
reg[8:0] r_coeffs_address1;
reg r_coeffs_ce1;
reg r_coeffs_we1;
reg[15:0] r_coeffs_d1;
reg[7:0] msg_address0;
reg msg_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] reg_210;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state8;
wire   [15:0] grp_mod3_fu_199_ap_return;
reg   [15:0] reg_216;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond_fu_424_p2;
wire   [15:0] grp_mod3_fu_204_ap_return;
reg   [15:0] reg_221;
wire   [7:0] tmp_212_fu_226_p1;
reg   [7:0] tmp_212_reg_474;
wire   [6:0] i_10_fu_240_p2;
reg   [6:0] i_10_reg_483;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_234_p2;
wire   [8:0] tmp_184_fu_268_p2;
reg   [8:0] tmp_184_reg_493;
reg   [6:0] tmp_reg_507;
reg   [1:0] tmp_165_reg_512;
reg   [4:0] tmp_163_reg_517;
reg   [3:0] tmp_164_reg_522;
wire   [3:0] j_cast1_cast_fu_420_p1;
reg   [3:0] j_cast1_cast_reg_527;
wire   [1:0] j_6_fu_430_p2;
reg   [1:0] j_6_reg_535;
wire   [7:0] c_7_fu_456_p1;
reg   [7:0] c_7_reg_540;
wire    grp_mod3_fu_199_ap_ready;
reg   [7:0] grp_mod3_fu_199_a;
wire    grp_mod3_fu_204_ap_ready;
reg   [7:0] grp_mod3_fu_204_a;
reg   [6:0] i_reg_168;
wire    ap_CS_fsm_state7;
reg   [7:0] c8_reg_179;
wire    ap_CS_fsm_state10;
reg   [1:0] j_reg_188;
wire   [7:0] tmp_307_cast_cast_fu_378_p1;
wire   [7:0] tmp_317_cast_fu_406_p1;
wire   [7:0] tmp_302_cast_fu_328_p1;
wire   [7:0] tmp_312_cast_cast_fu_382_p1;
wire   [63:0] sum_cast_fu_255_p1;
wire   [63:0] sum2_cast_fu_279_p1;
wire   [63:0] tmp_185_fu_364_p1;
wire   [63:0] tmp_189_fu_373_p1;
wire   [63:0] tmp_193_fu_391_p1;
wire   [63:0] tmp_197_fu_401_p1;
wire   [63:0] tmp_201_fu_415_p1;
wire   [63:0] tmp_204_fu_469_p1;
wire   [7:0] tmp_cast_fu_246_p1;
wire   [7:0] sum_fu_250_p2;
wire   [8:0] p_shl_fu_260_p3;
wire   [8:0] i_cast4_fu_230_p1;
wire   [7:0] sum2_fu_274_p2;
wire   [7:0] tmp_186_fu_288_p0;
wire   [15:0] tmp_s_fu_284_p1;
wire   [15:0] tmp_186_fu_288_p2;
wire   [7:0] tmp_198_fu_304_p0;
wire   [15:0] tmp_198_fu_304_p2;
wire   [7:0] tmp_190_fu_332_p0;
wire   [13:0] tmp_190_fu_332_p2;
wire   [7:0] tmp_194_fu_348_p0;
wire   [12:0] tmp_194_fu_348_p2;
wire   [8:0] tmp_188_fu_368_p2;
wire   [8:0] tmp_192_fu_386_p2;
wire   [8:0] tmp_196_fu_396_p2;
wire   [8:0] tmp_200_fu_410_p2;
wire   [7:0] tmp_205_fu_440_p0;
wire   [15:0] tmp_205_fu_440_p2;
wire   [6:0] tmp_166_fu_446_p4;
wire   [3:0] tmp_203_fu_460_p2;
wire  signed [8:0] tmp_323_cast6_fu_465_p1;
reg   [9:0] ap_NS_fsm;
wire   [13:0] tmp_190_fu_332_p00;
wire   [12:0] tmp_194_fu_348_p00;
wire   [15:0] tmp_205_fu_440_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

mod3 grp_mod3_fu_199(
    .ap_ready(grp_mod3_fu_199_ap_ready),
    .a(grp_mod3_fu_199_a),
    .ap_return(grp_mod3_fu_199_ap_return)
);

mod3 grp_mod3_fu_204(
    .ap_ready(grp_mod3_fu_204_ap_ready),
    .a(grp_mod3_fu_204_a),
    .ap_return(grp_mod3_fu_204_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        c8_reg_179 <= c_7_reg_540;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        c8_reg_179 <= msg_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_168 <= i_10_reg_483;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_168 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_reg_188 <= j_6_reg_535;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_188 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_424_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        c_7_reg_540[6 : 0] <= c_7_fu_456_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_10_reg_483 <= i_10_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_6_reg_535 <= j_6_fu_430_p2;
        j_cast1_cast_reg_527[1 : 0] <= j_cast1_cast_fu_420_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_210 <= msg_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((exitcond_fu_424_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        reg_216 <= grp_mod3_fu_199_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_221 <= grp_mod3_fu_204_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_163_reg_517 <= {{tmp_190_fu_332_p2[13:9]}};
        tmp_164_reg_522 <= {{tmp_194_fu_348_p2[12:9]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_165_reg_512 <= {{tmp_198_fu_304_p2[15:14]}};
        tmp_reg_507 <= {{tmp_186_fu_288_p2[15:9]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_184_reg_493 <= tmp_184_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_212_reg_474 <= tmp_212_fu_226_p1;
    end
end

always @ (*) begin
    if ((((exitcond_fu_424_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_424_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_424_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        grp_mod3_fu_199_a = c8_reg_179;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_mod3_fu_199_a = tmp_317_cast_fu_406_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_mod3_fu_199_a = tmp_307_cast_cast_fu_378_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_mod3_fu_199_a = reg_210;
    end else begin
        grp_mod3_fu_199_a = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_mod3_fu_204_a = tmp_312_cast_cast_fu_382_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_mod3_fu_204_a = tmp_302_cast_fu_328_p1;
    end else begin
        grp_mod3_fu_204_a = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((exitcond1_fu_234_p2 == 1'd1)) begin
            msg_address0 = sum2_cast_fu_279_p1;
        end else if ((exitcond1_fu_234_p2 == 1'd0)) begin
            msg_address0 = sum_cast_fu_255_p1;
        end else begin
            msg_address0 = 'bx;
        end
    end else begin
        msg_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_234_p2 == 1'd1)) | ((exitcond1_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        msg_ce0 = 1'b1;
    end else begin
        msg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_coeffs_address0 = tmp_204_fu_469_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_coeffs_address0 = tmp_201_fu_415_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_address0 = tmp_193_fu_391_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_coeffs_address0 = tmp_185_fu_364_p1;
    end else begin
        r_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        r_coeffs_address1 = 64'd508;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_address1 = tmp_197_fu_401_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_coeffs_address1 = tmp_189_fu_373_p1;
    end else begin
        r_coeffs_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        r_coeffs_ce0 = 1'b1;
    end else begin
        r_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        r_coeffs_ce1 = 1'b1;
    end else begin
        r_coeffs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        r_coeffs_d1 = 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        r_coeffs_d1 = reg_221;
    end else begin
        r_coeffs_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        r_coeffs_we0 = 1'b1;
    end else begin
        r_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((exitcond_fu_424_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)))) begin
        r_coeffs_we1 = 1'b1;
    end else begin
        r_coeffs_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_234_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((exitcond_fu_424_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_7_fu_456_p1 = tmp_166_fu_446_p4;

assign exitcond1_fu_234_p2 = ((i_reg_168 == 7'd101) ? 1'b1 : 1'b0);

assign exitcond_fu_424_p2 = ((j_reg_188 == 2'd3) ? 1'b1 : 1'b0);

assign i_10_fu_240_p2 = (i_reg_168 + 7'd1);

assign i_cast4_fu_230_p1 = i_reg_168;

assign j_6_fu_430_p2 = (j_reg_188 + 2'd1);

assign j_cast1_cast_fu_420_p1 = j_reg_188;

assign p_shl_fu_260_p3 = {{i_reg_168}, {2'd0}};

assign r_coeffs_d0 = reg_216;

assign sum2_cast_fu_279_p1 = sum2_fu_274_p2;

assign sum2_fu_274_p2 = (tmp_212_reg_474 + 8'd101);

assign sum_cast_fu_255_p1 = sum_fu_250_p2;

assign sum_fu_250_p2 = (tmp_cast_fu_246_p1 + tmp_212_reg_474);

assign tmp_166_fu_446_p4 = {{tmp_205_fu_440_p2[15:9]}};

assign tmp_184_fu_268_p2 = (p_shl_fu_260_p3 + i_cast4_fu_230_p1);

assign tmp_185_fu_364_p1 = tmp_184_reg_493;

assign tmp_186_fu_288_p0 = tmp_s_fu_284_p1;

assign tmp_186_fu_288_p2 = (tmp_186_fu_288_p0 * $signed('hAB));

assign tmp_188_fu_368_p2 = (tmp_184_reg_493 + 9'd1);

assign tmp_189_fu_373_p1 = tmp_188_fu_368_p2;

assign tmp_190_fu_332_p0 = tmp_190_fu_332_p00;

assign tmp_190_fu_332_p00 = reg_210;

assign tmp_190_fu_332_p2 = (tmp_190_fu_332_p0 * $signed('h39));

assign tmp_192_fu_386_p2 = (tmp_184_reg_493 + 9'd2);

assign tmp_193_fu_391_p1 = tmp_192_fu_386_p2;

assign tmp_194_fu_348_p0 = tmp_194_fu_348_p00;

assign tmp_194_fu_348_p00 = reg_210;

assign tmp_194_fu_348_p2 = (tmp_194_fu_348_p0 * $signed('h13));

assign tmp_196_fu_396_p2 = (tmp_184_reg_493 + 9'd3);

assign tmp_197_fu_401_p1 = tmp_196_fu_396_p2;

assign tmp_198_fu_304_p0 = tmp_s_fu_284_p1;

assign tmp_198_fu_304_p2 = (tmp_198_fu_304_p0 * $signed('hCB));

assign tmp_200_fu_410_p2 = (tmp_184_reg_493 + 9'd4);

assign tmp_201_fu_415_p1 = tmp_200_fu_410_p2;

assign tmp_203_fu_460_p2 = ($signed(j_cast1_cast_reg_527) + $signed(4'd9));

assign tmp_204_fu_469_p1 = $unsigned(tmp_323_cast6_fu_465_p1);

assign tmp_205_fu_440_p0 = tmp_205_fu_440_p00;

assign tmp_205_fu_440_p00 = c8_reg_179;

assign tmp_205_fu_440_p2 = (tmp_205_fu_440_p0 * $signed('hAB));

assign tmp_212_fu_226_p1 = msg_offset[7:0];

assign tmp_302_cast_fu_328_p1 = tmp_reg_507;

assign tmp_307_cast_cast_fu_378_p1 = tmp_163_reg_517;

assign tmp_312_cast_cast_fu_382_p1 = tmp_164_reg_522;

assign tmp_317_cast_fu_406_p1 = tmp_165_reg_512;

assign tmp_323_cast6_fu_465_p1 = $signed(tmp_203_fu_460_p2);

assign tmp_cast_fu_246_p1 = i_reg_168;

assign tmp_s_fu_284_p1 = msg_q0;

always @ (posedge ap_clk) begin
    j_cast1_cast_reg_527[3:2] <= 2'b00;
    c_7_reg_540[7] <= 1'b0;
end

endmodule //poly_S3_frombytes
