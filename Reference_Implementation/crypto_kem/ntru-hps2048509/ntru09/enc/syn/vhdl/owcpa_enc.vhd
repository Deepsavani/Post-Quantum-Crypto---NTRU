-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity owcpa_enc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    c_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_we0 : OUT STD_LOGIC;
    c_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    c_ce1 : OUT STD_LOGIC;
    c_we1 : OUT STD_LOGIC;
    c_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rm_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rm_ce0 : OUT STD_LOGIC;
    rm_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pk_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    pk_ce0 : OUT STD_LOGIC;
    pk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pk_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    pk_ce1 : OUT STD_LOGIC;
    pk_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of owcpa_enc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv9_66 : STD_LOGIC_VECTOR (8 downto 0) := "001100110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_1FC : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000111111100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv9_1FC : STD_LOGIC_VECTOR (8 downto 0) := "111111100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1FD : STD_LOGIC_VECTOR (8 downto 0) := "111111101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal liftm_coeffs_addr_reg_465 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_13_fu_244_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_13_reg_474 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_i_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_fu_281_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_14_fu_293_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_14_reg_492 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal m_coeffs_addr_reg_497 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_i5_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_15_fu_355_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_15_reg_505 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_i1_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_reg_510 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i1_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_16_fu_372_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_16_reg_523 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal liftm_coeffs_addr_3_reg_528 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_i_i_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_17_fu_434_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_17_reg_537 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ct_coeffs_addr_reg_542 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x1_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal x1_coeffs_ce0 : STD_LOGIC;
    signal x1_coeffs_we0 : STD_LOGIC;
    signal x1_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal x1_coeffs_ce1 : STD_LOGIC;
    signal x1_coeffs_we1 : STD_LOGIC;
    signal x1_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal x2_coeffs_ce0 : STD_LOGIC;
    signal x2_coeffs_we0 : STD_LOGIC;
    signal x2_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_ce1 : STD_LOGIC;
    signal x2_coeffs_we1 : STD_LOGIC;
    signal x3_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal x3_coeffs_ce0 : STD_LOGIC;
    signal x3_coeffs_we0 : STD_LOGIC;
    signal x3_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Sq_tobytes_fu_206_ap_start : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_206_ap_done : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_206_ap_idle : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_206_ap_ready : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_206_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_tobytes_fu_206_r_ce0 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_206_r_we0 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_206_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_Sq_tobytes_fu_206_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_tobytes_fu_206_r_ce1 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_206_r_we1 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_206_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_Sq_tobytes_fu_206_a_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_Sq_tobytes_fu_206_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_213_ap_start : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_213_ap_done : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_213_ap_idle : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_213_ap_ready : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_213_r_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_Sq_frombytes_fu_213_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_213_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_213_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Sq_frombytes_fu_213_r_coeffs_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_Sq_frombytes_fu_213_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_213_r_coeffs_we1 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_213_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Sq_frombytes_fu_213_a_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_frombytes_fu_213_a_ce0 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_213_a_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_frombytes_fu_213_a_ce1 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_221_ap_start : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_221_ap_done : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_221_ap_idle : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_221_ap_ready : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_221_r_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_S3_frombytes_fu_221_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_221_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_221_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_frombytes_fu_221_r_coeffs_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_S3_frombytes_fu_221_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_221_r_coeffs_we1 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_221_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_frombytes_fu_221_msg_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_S3_frombytes_fu_221_msg_ce0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_221_msg_offset : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_Rq_mul_fu_231_ap_start : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_231_ap_done : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_231_ap_idle : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_231_ap_ready : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_231_r_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_Rq_mul_fu_231_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_231_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_231_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_mul_fu_231_a_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_Rq_mul_fu_231_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_231_b_coeffs_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_Rq_mul_fu_231_b_coeffs_ce0 : STD_LOGIC;
    signal tmp_i_reg_140 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_i_reg_151 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_i4_reg_162 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_i1_reg_173 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_i_i_reg_184 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_reg_195 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_poly_Sq_tobytes_fu_206_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_poly_Sq_frombytes_fu_213_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_poly_S3_frombytes_fu_221_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_poly_Rq_mul_fu_231_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_332_i_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i6_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_331_i_cast_fu_261_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_333_i_fu_274_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_107_i_i_fu_419_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_107_i_fu_340_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_341_cast_fu_460_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_cast_fu_255_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_215_fu_270_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_214_fu_266_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_59_fu_304_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_216_fu_320_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_105_i_cast_fu_314_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_fu_330_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_61_fu_324_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_63_fu_383_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_217_fu_399_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_105_i_i_cast_fu_393_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_66_fu_409_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_65_fu_403_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_219_fu_450_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_218_fu_446_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_fu_454_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component poly_Sq_tobytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_ce0 : OUT STD_LOGIC;
        r_we0 : OUT STD_LOGIC;
        r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_ce1 : OUT STD_LOGIC;
        r_we1 : OUT STD_LOGIC;
        r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_Sq_frombytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component poly_S3_frombytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        msg_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        msg_ce0 : OUT STD_LOGIC;
        msg_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        msg_offset : IN STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component poly_Rq_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        b_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        b_coeffs_ce0 : OUT STD_LOGIC;
        b_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_enc_x1_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_enc_x2_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_enc_x3_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    x1_coeffs_U : component owcpa_enc_x1_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 509,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x1_coeffs_address0,
        ce0 => x1_coeffs_ce0,
        we0 => x1_coeffs_we0,
        d0 => x1_coeffs_d0,
        q0 => x1_coeffs_q0,
        address1 => x1_coeffs_address1,
        ce1 => x1_coeffs_ce1,
        we1 => x1_coeffs_we1,
        d1 => x1_coeffs_d1,
        q1 => x1_coeffs_q1);

    x2_coeffs_U : component owcpa_enc_x2_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 509,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x2_coeffs_address0,
        ce0 => x2_coeffs_ce0,
        we0 => x2_coeffs_we0,
        d0 => x2_coeffs_d0,
        q0 => x2_coeffs_q0,
        address1 => grp_poly_S3_frombytes_fu_221_r_coeffs_address1,
        ce1 => x2_coeffs_ce1,
        we1 => x2_coeffs_we1,
        d1 => grp_poly_S3_frombytes_fu_221_r_coeffs_d1);

    x3_coeffs_U : component owcpa_enc_x3_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 509,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x3_coeffs_address0,
        ce0 => x3_coeffs_ce0,
        we0 => x3_coeffs_we0,
        d0 => x3_coeffs_d0,
        q0 => x3_coeffs_q0);

    grp_poly_Sq_tobytes_fu_206 : component poly_Sq_tobytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Sq_tobytes_fu_206_ap_start,
        ap_done => grp_poly_Sq_tobytes_fu_206_ap_done,
        ap_idle => grp_poly_Sq_tobytes_fu_206_ap_idle,
        ap_ready => grp_poly_Sq_tobytes_fu_206_ap_ready,
        r_address0 => grp_poly_Sq_tobytes_fu_206_r_address0,
        r_ce0 => grp_poly_Sq_tobytes_fu_206_r_ce0,
        r_we0 => grp_poly_Sq_tobytes_fu_206_r_we0,
        r_d0 => grp_poly_Sq_tobytes_fu_206_r_d0,
        r_address1 => grp_poly_Sq_tobytes_fu_206_r_address1,
        r_ce1 => grp_poly_Sq_tobytes_fu_206_r_ce1,
        r_we1 => grp_poly_Sq_tobytes_fu_206_r_we1,
        r_d1 => grp_poly_Sq_tobytes_fu_206_r_d1,
        a_coeffs_address0 => grp_poly_Sq_tobytes_fu_206_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_Sq_tobytes_fu_206_a_coeffs_ce0,
        a_coeffs_q0 => x3_coeffs_q0);

    grp_poly_Sq_frombytes_fu_213 : component poly_Sq_frombytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Sq_frombytes_fu_213_ap_start,
        ap_done => grp_poly_Sq_frombytes_fu_213_ap_done,
        ap_idle => grp_poly_Sq_frombytes_fu_213_ap_idle,
        ap_ready => grp_poly_Sq_frombytes_fu_213_ap_ready,
        r_coeffs_address0 => grp_poly_Sq_frombytes_fu_213_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_Sq_frombytes_fu_213_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_Sq_frombytes_fu_213_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_Sq_frombytes_fu_213_r_coeffs_d0,
        r_coeffs_address1 => grp_poly_Sq_frombytes_fu_213_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_Sq_frombytes_fu_213_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_Sq_frombytes_fu_213_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_Sq_frombytes_fu_213_r_coeffs_d1,
        a_address0 => grp_poly_Sq_frombytes_fu_213_a_address0,
        a_ce0 => grp_poly_Sq_frombytes_fu_213_a_ce0,
        a_q0 => pk_q0,
        a_address1 => grp_poly_Sq_frombytes_fu_213_a_address1,
        a_ce1 => grp_poly_Sq_frombytes_fu_213_a_ce1,
        a_q1 => pk_q1);

    grp_poly_S3_frombytes_fu_221 : component poly_S3_frombytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_S3_frombytes_fu_221_ap_start,
        ap_done => grp_poly_S3_frombytes_fu_221_ap_done,
        ap_idle => grp_poly_S3_frombytes_fu_221_ap_idle,
        ap_ready => grp_poly_S3_frombytes_fu_221_ap_ready,
        r_coeffs_address0 => grp_poly_S3_frombytes_fu_221_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_S3_frombytes_fu_221_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_S3_frombytes_fu_221_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_S3_frombytes_fu_221_r_coeffs_d0,
        r_coeffs_address1 => grp_poly_S3_frombytes_fu_221_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_S3_frombytes_fu_221_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_S3_frombytes_fu_221_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_S3_frombytes_fu_221_r_coeffs_d1,
        msg_address0 => grp_poly_S3_frombytes_fu_221_msg_address0,
        msg_ce0 => grp_poly_S3_frombytes_fu_221_msg_ce0,
        msg_q0 => rm_q0,
        msg_offset => grp_poly_S3_frombytes_fu_221_msg_offset);

    grp_poly_Rq_mul_fu_231 : component poly_Rq_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Rq_mul_fu_231_ap_start,
        ap_done => grp_poly_Rq_mul_fu_231_ap_done,
        ap_idle => grp_poly_Rq_mul_fu_231_ap_idle,
        ap_ready => grp_poly_Rq_mul_fu_231_ap_ready,
        r_coeffs_address0 => grp_poly_Rq_mul_fu_231_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_Rq_mul_fu_231_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_Rq_mul_fu_231_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_Rq_mul_fu_231_r_coeffs_d0,
        r_coeffs_q0 => x3_coeffs_q0,
        a_coeffs_address0 => grp_poly_Rq_mul_fu_231_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_Rq_mul_fu_231_a_coeffs_ce0,
        a_coeffs_q0 => x2_coeffs_q0,
        b_coeffs_address0 => grp_poly_Rq_mul_fu_231_b_coeffs_address0,
        b_coeffs_ce0 => grp_poly_Rq_mul_fu_231_b_coeffs_ce0,
        b_coeffs_q0 => x1_coeffs_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_poly_Rq_mul_fu_231_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Rq_mul_fu_231_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_i5_fu_287_p2 = ap_const_lv1_1))) then 
                    grp_poly_Rq_mul_fu_231_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Rq_mul_fu_231_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Rq_mul_fu_231_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_S3_frombytes_fu_221_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_S3_frombytes_fu_221_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((exitcond_i_fu_238_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    grp_poly_S3_frombytes_fu_221_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_S3_frombytes_fu_221_ap_ready = ap_const_logic_1)) then 
                    grp_poly_S3_frombytes_fu_221_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_Sq_frombytes_fu_213_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Sq_frombytes_fu_213_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_poly_Sq_frombytes_fu_213_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Sq_frombytes_fu_213_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Sq_frombytes_fu_213_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_Sq_tobytes_fu_206_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Sq_tobytes_fu_206_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_428_p2 = ap_const_lv1_1))) then 
                    grp_poly_Sq_tobytes_fu_206_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Sq_tobytes_fu_206_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Sq_tobytes_fu_206_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i1_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_i1_reg_173 <= i_15_reg_505;
            elsif (((grp_poly_S3_frombytes_fu_221_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_i1_reg_173 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_i4_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_i4_reg_162 <= i_14_reg_492;
            elsif (((grp_poly_S3_frombytes_fu_221_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_i4_reg_162 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_i_i_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_i1_fu_349_p2 = ap_const_lv1_1))) then 
                i_i_i_reg_184 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_i_i_reg_184 <= i_16_reg_523;
            end if; 
        end if;
    end process;

    i_i_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_i_reg_151 <= i_13_reg_474;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_i_reg_151 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_i_i_fu_366_p2 = ap_const_lv1_1))) then 
                i_reg_195 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_reg_195 <= i_17_reg_537;
            end if; 
        end if;
    end process;

    tmp_i_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                tmp_i_reg_140 <= phitmp_fu_281_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                tmp_i_reg_140 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                ct_coeffs_addr_reg_542 <= tmp_fu_440_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_13_reg_474 <= i_13_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_14_reg_492 <= i_14_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_15_reg_505 <= i_15_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_16_reg_523 <= i_16_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_17_reg_537 <= i_17_fu_434_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_fu_366_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                liftm_coeffs_addr_3_reg_528 <= tmp_i_i_fu_378_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i5_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                m_coeffs_addr_reg_497 <= tmp_i6_fu_299_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i1_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    tmp_i1_reg_510(8 downto 0) <= tmp_i1_fu_361_p1(8 downto 0);
            end if;
        end if;
    end process;
    tmp_i1_reg_510(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, exitcond_i_fu_238_p2, ap_CS_fsm_state7, exitcond_i5_fu_287_p2, ap_CS_fsm_state12, exitcond_i1_fu_349_p2, ap_CS_fsm_state14, exitcond_i_i_fu_366_p2, ap_CS_fsm_state16, exitcond_fu_428_p2, grp_poly_Sq_tobytes_fu_206_ap_done, grp_poly_Sq_frombytes_fu_213_ap_done, grp_poly_S3_frombytes_fu_221_ap_done, grp_poly_Rq_mul_fu_231_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state2, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_poly_Sq_frombytes_fu_213_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((exitcond_i_fu_238_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((grp_poly_S3_frombytes_fu_221_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_i5_fu_287_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((grp_poly_Rq_mul_fu_231_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_poly_S3_frombytes_fu_221_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_i1_fu_349_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_i_i_fu_366_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_428_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_poly_Sq_tobytes_fu_206_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_poly_Sq_tobytes_fu_206_ap_done, ap_CS_fsm_state18)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_poly_Sq_tobytes_fu_206_ap_done = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_poly_Sq_tobytes_fu_206_ap_done, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_poly_Sq_tobytes_fu_206_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_address0 <= grp_poly_Sq_tobytes_fu_206_r_address0;
    c_address1 <= grp_poly_Sq_tobytes_fu_206_r_address1;
    c_ce0 <= grp_poly_Sq_tobytes_fu_206_r_ce0;
    c_ce1 <= grp_poly_Sq_tobytes_fu_206_r_ce1;
    c_d0 <= grp_poly_Sq_tobytes_fu_206_r_d0;
    c_d1 <= grp_poly_Sq_tobytes_fu_206_r_d1;
    c_we0 <= grp_poly_Sq_tobytes_fu_206_r_we0;
    c_we1 <= grp_poly_Sq_tobytes_fu_206_r_we1;
    exitcond_fu_428_p2 <= "1" when (i_reg_195 = ap_const_lv9_1FD) else "0";
    exitcond_i1_fu_349_p2 <= "1" when (i_i1_reg_173 = ap_const_lv9_1FD) else "0";
    exitcond_i5_fu_287_p2 <= "1" when (i_i4_reg_162 = ap_const_lv9_1FD) else "0";
    exitcond_i_fu_238_p2 <= "1" when (i_i_reg_151 = ap_const_lv9_1FC) else "0";
    exitcond_i_i_fu_366_p2 <= "1" when (i_i_i_reg_184 = ap_const_lv9_1FD) else "0";
    grp_poly_Rq_mul_fu_231_ap_start <= grp_poly_Rq_mul_fu_231_ap_start_reg;
    grp_poly_S3_frombytes_fu_221_ap_start <= grp_poly_S3_frombytes_fu_221_ap_start_reg;

    grp_poly_S3_frombytes_fu_221_msg_offset_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_poly_S3_frombytes_fu_221_msg_offset <= ap_const_lv9_66;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_poly_S3_frombytes_fu_221_msg_offset <= ap_const_lv9_0;
        else 
            grp_poly_S3_frombytes_fu_221_msg_offset <= "XXXXXXXXX";
        end if; 
    end process;

    grp_poly_Sq_frombytes_fu_213_ap_start <= grp_poly_Sq_frombytes_fu_213_ap_start_reg;
    grp_poly_Sq_tobytes_fu_206_ap_start <= grp_poly_Sq_tobytes_fu_206_ap_start_reg;
    i_13_fu_244_p2 <= std_logic_vector(unsigned(i_i_reg_151) + unsigned(ap_const_lv9_1));
    i_14_fu_293_p2 <= std_logic_vector(unsigned(i_i4_reg_162) + unsigned(ap_const_lv9_1));
    i_15_fu_355_p2 <= std_logic_vector(unsigned(i_i1_reg_173) + unsigned(ap_const_lv9_1));
    i_16_fu_372_p2 <= std_logic_vector(unsigned(i_i_i_reg_184) + unsigned(ap_const_lv9_1));
    i_17_fu_434_p2 <= std_logic_vector(unsigned(i_reg_195) + unsigned(ap_const_lv9_1));
    liftm_coeffs_addr_reg_465 <= ap_const_lv64_1FC(9 - 1 downto 0);
    phitmp_fu_281_p2 <= std_logic_vector(unsigned(tmp_215_fu_270_p1) + unsigned(tmp_214_fu_266_p1));
    pk_address0 <= grp_poly_Sq_frombytes_fu_213_a_address0;
    pk_address1 <= grp_poly_Sq_frombytes_fu_213_a_address1;
    pk_ce0 <= grp_poly_Sq_frombytes_fu_213_a_ce0;
    pk_ce1 <= grp_poly_Sq_frombytes_fu_213_a_ce1;
    rm_address0 <= grp_poly_S3_frombytes_fu_221_msg_address0;

    rm_ce0_assign_proc : process(grp_poly_S3_frombytes_fu_221_msg_ce0, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            rm_ce0 <= grp_poly_S3_frombytes_fu_221_msg_ce0;
        else 
            rm_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_105_i_cast_fu_314_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(tmp_59_fu_304_p4));
    tmp_105_i_i_cast_fu_393_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(tmp_63_fu_383_p4));
    tmp_107_i_fu_340_p3 <= (tmp_62_fu_330_p4 & tmp_61_fu_324_p2);
    tmp_107_i_i_fu_419_p3 <= (tmp_66_fu_409_p4 & tmp_65_fu_403_p2);
    tmp_214_fu_266_p1 <= x1_coeffs_q1(11 - 1 downto 0);
    tmp_215_fu_270_p1 <= x1_coeffs_q0(11 - 1 downto 0);
    tmp_216_fu_320_p1 <= x2_coeffs_q0(11 - 1 downto 0);
    tmp_217_fu_399_p1 <= x1_coeffs_q0(11 - 1 downto 0);
    tmp_218_fu_446_p1 <= x1_coeffs_q0(11 - 1 downto 0);
    tmp_219_fu_450_p1 <= x3_coeffs_q0(11 - 1 downto 0);
    tmp_331_i_cast_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_cast_fu_255_p2),16));
    tmp_332_i_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_151),64));
    tmp_333_i_fu_274_p2 <= std_logic_vector(unsigned(x1_coeffs_q1) + unsigned(x1_coeffs_q0));
    tmp_341_cast_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_cast_fu_454_p2),16));
    tmp_59_fu_304_p4 <= x2_coeffs_q0(11 downto 1);
    tmp_61_fu_324_p2 <= (tmp_216_fu_320_p1 or tmp_105_i_cast_fu_314_p2);
    tmp_62_fu_330_p4 <= x2_coeffs_q0(15 downto 11);
    tmp_63_fu_383_p4 <= x1_coeffs_q0(11 downto 1);
    tmp_65_fu_403_p2 <= (tmp_217_fu_399_p1 or tmp_105_i_i_cast_fu_393_p2);
    tmp_66_fu_409_p4 <= x1_coeffs_q0(15 downto 11);
    tmp_cast_fu_454_p2 <= std_logic_vector(unsigned(tmp_219_fu_450_p1) + unsigned(tmp_218_fu_446_p1));
    tmp_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_195),64));
    tmp_i1_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_173),64));
    tmp_i6_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i4_reg_162),64));
    tmp_i_cast_fu_255_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(tmp_i_reg_140));
    tmp_i_i_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i_reg_184),64));

    x1_coeffs_address0_assign_proc : process(liftm_coeffs_addr_reg_465, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_i_fu_238_p2, ap_CS_fsm_state14, ap_CS_fsm_state16, grp_poly_Sq_frombytes_fu_213_r_coeffs_address0, grp_poly_Rq_mul_fu_231_b_coeffs_address0, ap_CS_fsm_state2, ap_CS_fsm_state9, tmp_332_i_fu_250_p1, tmp_i_i_fu_378_p1, tmp_fu_440_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            x1_coeffs_address0 <= tmp_fu_440_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            x1_coeffs_address0 <= tmp_i_i_fu_378_p1(9 - 1 downto 0);
        elsif (((exitcond_i_fu_238_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x1_coeffs_address0 <= liftm_coeffs_addr_reg_465;
        elsif (((exitcond_i_fu_238_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x1_coeffs_address0 <= tmp_332_i_fu_250_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x1_coeffs_address0 <= ap_const_lv64_1FC(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x1_coeffs_address0 <= grp_poly_Rq_mul_fu_231_b_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_address0 <= grp_poly_Sq_frombytes_fu_213_r_coeffs_address0;
        else 
            x1_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_i1_reg_510, liftm_coeffs_addr_3_reg_528, grp_poly_Sq_frombytes_fu_213_r_coeffs_address1, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x1_coeffs_address1 <= liftm_coeffs_addr_3_reg_528;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x1_coeffs_address1 <= tmp_i1_reg_510(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x1_coeffs_address1 <= ap_const_lv64_1FC(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_address1 <= grp_poly_Sq_frombytes_fu_213_r_coeffs_address1;
        else 
            x1_coeffs_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_i_fu_238_p2, ap_CS_fsm_state14, ap_CS_fsm_state16, grp_poly_Sq_frombytes_fu_213_r_coeffs_ce0, grp_poly_Rq_mul_fu_231_b_coeffs_ce0, ap_CS_fsm_state2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((exitcond_i_fu_238_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((exitcond_i_fu_238_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            x1_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x1_coeffs_ce0 <= grp_poly_Rq_mul_fu_231_b_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_ce0 <= grp_poly_Sq_frombytes_fu_213_r_coeffs_ce0;
        else 
            x1_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, grp_poly_Sq_frombytes_fu_213_r_coeffs_ce1, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            x1_coeffs_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_ce1 <= grp_poly_Sq_frombytes_fu_213_r_coeffs_ce1;
        else 
            x1_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_i_fu_238_p2, grp_poly_Sq_frombytes_fu_213_r_coeffs_d0, ap_CS_fsm_state2, tmp_331_i_cast_fu_261_p1)
    begin
        if (((exitcond_i_fu_238_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x1_coeffs_d0 <= tmp_331_i_cast_fu_261_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x1_coeffs_d0 <= ap_const_lv16_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_d0 <= grp_poly_Sq_frombytes_fu_213_r_coeffs_d0;
        else 
            x1_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_d1_assign_proc : process(ap_CS_fsm_state5, x2_coeffs_q0, grp_poly_Sq_frombytes_fu_213_r_coeffs_d1, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state2, tmp_333_i_fu_274_p2, tmp_107_i_i_fu_419_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x1_coeffs_d1 <= tmp_107_i_i_fu_419_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x1_coeffs_d1 <= x2_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x1_coeffs_d1 <= tmp_333_i_fu_274_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_d1 <= grp_poly_Sq_frombytes_fu_213_r_coeffs_d1;
        else 
            x1_coeffs_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_i_fu_238_p2, grp_poly_Sq_frombytes_fu_213_r_coeffs_we0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((exitcond_i_fu_238_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            x1_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_we0 <= grp_poly_Sq_frombytes_fu_213_r_coeffs_we0;
        else 
            x1_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_we1_assign_proc : process(ap_CS_fsm_state5, grp_poly_Sq_frombytes_fu_213_r_coeffs_we1, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            x1_coeffs_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_we1 <= grp_poly_Sq_frombytes_fu_213_r_coeffs_we1;
        else 
            x1_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_address0_assign_proc : process(ap_CS_fsm_state7, m_coeffs_addr_reg_497, exitcond_i5_fu_287_p2, ap_CS_fsm_state12, tmp_i1_fu_361_p1, grp_poly_S3_frombytes_fu_221_r_coeffs_address0, grp_poly_Rq_mul_fu_231_a_coeffs_address0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state9, tmp_i6_fu_299_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x2_coeffs_address0 <= tmp_i1_fu_361_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x2_coeffs_address0 <= m_coeffs_addr_reg_497;
        elsif (((exitcond_i5_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            x2_coeffs_address0 <= tmp_i6_fu_299_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x2_coeffs_address0 <= grp_poly_Rq_mul_fu_231_a_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            x2_coeffs_address0 <= grp_poly_S3_frombytes_fu_221_r_coeffs_address0;
        else 
            x2_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_ce0_assign_proc : process(ap_CS_fsm_state7, exitcond_i5_fu_287_p2, ap_CS_fsm_state12, grp_poly_S3_frombytes_fu_221_r_coeffs_ce0, grp_poly_Rq_mul_fu_231_a_coeffs_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((exitcond_i5_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            x2_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x2_coeffs_ce0 <= grp_poly_Rq_mul_fu_231_a_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            x2_coeffs_ce0 <= grp_poly_S3_frombytes_fu_221_r_coeffs_ce0;
        else 
            x2_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_ce1_assign_proc : process(grp_poly_S3_frombytes_fu_221_r_coeffs_ce1, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            x2_coeffs_ce1 <= grp_poly_S3_frombytes_fu_221_r_coeffs_ce1;
        else 
            x2_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_d0_assign_proc : process(grp_poly_S3_frombytes_fu_221_r_coeffs_d0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state11, tmp_107_i_fu_340_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x2_coeffs_d0 <= tmp_107_i_fu_340_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            x2_coeffs_d0 <= grp_poly_S3_frombytes_fu_221_r_coeffs_d0;
        else 
            x2_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_we0_assign_proc : process(grp_poly_S3_frombytes_fu_221_r_coeffs_we0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x2_coeffs_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            x2_coeffs_we0 <= grp_poly_S3_frombytes_fu_221_r_coeffs_we0;
        else 
            x2_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_we1_assign_proc : process(grp_poly_S3_frombytes_fu_221_r_coeffs_we1, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            x2_coeffs_we1 <= grp_poly_S3_frombytes_fu_221_r_coeffs_we1;
        else 
            x2_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_address0_assign_proc : process(ap_CS_fsm_state16, ct_coeffs_addr_reg_542, exitcond_fu_428_p2, grp_poly_Sq_tobytes_fu_206_a_coeffs_address0, grp_poly_Rq_mul_fu_231_r_coeffs_address0, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state9, tmp_fu_440_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            x3_coeffs_address0 <= ct_coeffs_addr_reg_542;
        elsif (((exitcond_fu_428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            x3_coeffs_address0 <= tmp_fu_440_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_address0 <= grp_poly_Rq_mul_fu_231_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            x3_coeffs_address0 <= grp_poly_Sq_tobytes_fu_206_a_coeffs_address0;
        else 
            x3_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_ce0_assign_proc : process(ap_CS_fsm_state16, exitcond_fu_428_p2, grp_poly_Sq_tobytes_fu_206_a_coeffs_ce0, grp_poly_Rq_mul_fu_231_r_coeffs_ce0, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((exitcond_fu_428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            x3_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_ce0 <= grp_poly_Rq_mul_fu_231_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            x3_coeffs_ce0 <= grp_poly_Sq_tobytes_fu_206_a_coeffs_ce0;
        else 
            x3_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_d0_assign_proc : process(grp_poly_Rq_mul_fu_231_r_coeffs_d0, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_341_cast_fu_460_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            x3_coeffs_d0 <= tmp_341_cast_fu_460_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_d0 <= grp_poly_Rq_mul_fu_231_r_coeffs_d0;
        else 
            x3_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_we0_assign_proc : process(grp_poly_Rq_mul_fu_231_r_coeffs_we0, ap_CS_fsm_state17, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            x3_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_we0 <= grp_poly_Rq_mul_fu_231_r_coeffs_we0;
        else 
            x3_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
