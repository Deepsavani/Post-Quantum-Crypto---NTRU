-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity poly_Sq_tobytes is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_ce0 : OUT STD_LOGIC;
    r_we0 : OUT STD_LOGIC;
    r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_ce1 : OUT STD_LOGIC;
    r_we1 : OUT STD_LOGIC;
    r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_coeffs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    a_coeffs_ce0 : OUT STD_LOGIC;
    a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of poly_Sq_tobytes is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_2BA : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010111010";
    constant ap_const_lv64_2B9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010111001";
    constant ap_const_lv64_2B8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010111000";
    constant ap_const_lv64_2B7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010110111";
    constant ap_const_lv64_2B6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010110110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_2B5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010110101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_B : STD_LOGIC_VECTOR (9 downto 0) := "0000001011";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_9 : STD_LOGIC_VECTOR (9 downto 0) := "0000001001";
    constant ap_const_lv10_A : STD_LOGIC_VECTOR (9 downto 0) := "0000001010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_524_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul_reg_1123 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_49_fu_536_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_49_reg_1131 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_542_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_reg_1136 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond3_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_560_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_reg_1144 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond2_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1154 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_494_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_30_reg_1159 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_22_reg_1164 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_37_reg_1169 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_83_reg_1174 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_51_fu_931_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_51_reg_1182 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal exitcond1_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_970_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exitcond_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_106_fu_995_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_106_reg_1200 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_504_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_48_reg_1205 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_107_fu_1020_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_107_reg_1210 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_108_fu_1048_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_108_reg_1215 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce1 : STD_LOGIC;
    signal t_we1 : STD_LOGIC;
    signal t_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_425 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal phi_mul_reg_436 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_448 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_1_reg_460 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal j_2_reg_472 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_88_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_89_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_fu_665_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_fu_743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_72_fu_782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_75_fu_804_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_78_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_82_fu_899_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_85_fu_920_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_949_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_fu_954_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_100_fu_965_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_52_fu_581_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_fu_613_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_58_fu_653_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_64_fu_698_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_67_fu_730_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_70_fu_770_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_76_fu_844_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_80_fu_886_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_91_fu_988_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_92_fu_1012_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_95_fu_1041_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_98_fu_1069_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_109_fu_1076_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast6_fu_550_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_87_fu_566_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_54_fu_601_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_605_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_591_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_56_fu_620_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_86_fu_641_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_fu_645_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_59_fu_659_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_62_fu_670_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_96_fu_681_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_32_fu_685_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_33_fu_693_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_65_fu_707_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_99_fu_718_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_20_fu_722_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_514_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_68_fu_737_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_101_fu_758_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_762_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_71_fu_776_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_74_fu_798_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_102_fu_819_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_39_fu_823_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_103_fu_836_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_831_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_77_fu_853_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_104_fu_864_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_79_fu_868_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_876_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_81_fu_893_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_84_fu_914_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_28_fu_937_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast9_fu_945_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_105_fu_976_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_90_fu_980_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_46_fu_999_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_47_fu_1006_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_1031_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_94_fu_1024_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_1059_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_97_fu_1052_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component poly_Sq_tobytes_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    t_U : component poly_Sq_tobytes_t
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0,
        address1 => t_address1,
        ce1 => t_ce1,
        we1 => t_we1,
        d1 => a_coeffs_q0,
        q1 => t_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_reg_425 <= tmp_49_reg_1131;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_425 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_1_reg_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_530_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_1_reg_460 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j_1_reg_460 <= tmp_51_reg_1182;
            end if; 
        end if;
    end process;

    j_2_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond1_fu_925_p2 = ap_const_lv1_1))) then 
                j_2_reg_472 <= ap_const_lv4_4;
            elsif (((exitcond_fu_959_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                j_2_reg_472 <= j_4_fu_970_p2;
            end if; 
        end if;
    end process;

    j_reg_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_530_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_448 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_448 <= j_3_reg_1144;
            end if; 
        end if;
    end process;

    phi_mul_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                phi_mul_reg_436 <= next_mul_reg_1123;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_436 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_3_reg_1144 <= j_3_fu_560_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul_reg_1123 <= next_mul_fu_524_p2;
                tmp_49_reg_1131 <= tmp_49_fu_536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_106_reg_1200 <= tmp_106_fu_995_p1;
                tmp_48_reg_1205 <= t_q0(6 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_107_reg_1210 <= tmp_107_fu_1020_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_108_reg_1215 <= tmp_108_fu_1048_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_13_reg_1154 <= t_q1(12 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_22_reg_1164 <= t_q1(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_30_reg_1159 <= t_q1(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_37_reg_1169 <= t_q0(15 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_51_reg_1182 <= tmp_51_fu_931_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_83_reg_1174 <= t_q0(10 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_530_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_reg_1136(8 downto 3) <= tmp_fu_542_p3(8 downto 3);
            end if;
        end if;
    end process;
    tmp_reg_1136(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_530_p2, ap_CS_fsm_state3, exitcond2_fu_554_p2, ap_CS_fsm_state11, exitcond1_fu_925_p2, ap_CS_fsm_state13, exitcond_fu_959_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_530_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond2_fu_554_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond1_fu_925_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (((exitcond_fu_959_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;

    a_coeffs_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11, tmp_88_fu_571_p1, tmp_s_fu_949_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            a_coeffs_address0 <= tmp_s_fu_949_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_coeffs_address0 <= tmp_88_fu_571_p1(9 - 1 downto 0);
        else 
            a_coeffs_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    a_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            a_coeffs_ce0 <= ap_const_logic_1;
        else 
            a_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_925_p2 <= "1" when (j_1_reg_460 = ap_const_lv3_4) else "0";
    exitcond2_fu_554_p2 <= "1" when (j_reg_448 = ap_const_lv4_8) else "0";
    exitcond3_fu_530_p2 <= "1" when (i_reg_425 = ap_const_lv6_3F) else "0";
    exitcond_fu_959_p2 <= "1" when (j_2_reg_472 = ap_const_lv4_8) else "0";
    grp_fu_494_p4 <= t_q1(15 downto 10);
    grp_fu_504_p4 <= t_q0(6 downto 5);
    grp_fu_514_p4 <= t_q0(14 downto 7);
    j_3_fu_560_p2 <= std_logic_vector(unsigned(j_reg_448) + unsigned(ap_const_lv4_1));
    j_4_fu_970_p2 <= std_logic_vector(unsigned(j_2_reg_472) + unsigned(ap_const_lv4_1));
    j_cast6_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_448),9));
    next_mul_fu_524_p2 <= std_logic_vector(unsigned(phi_mul_reg_436) + unsigned(ap_const_lv10_B));

    r_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state10, tmp_53_fu_586_p1, tmp_60_fu_665_p1, tmp_66_fu_713_p1, tmp_72_fu_782_p1, tmp_78_fu_859_p1, tmp_85_fu_920_p1, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_address0 <= ap_const_lv64_2B5(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            r_address0 <= ap_const_lv64_2B7(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            r_address0 <= ap_const_lv64_2B9(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_address0 <= tmp_85_fu_920_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_address0 <= tmp_78_fu_859_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_address0 <= tmp_72_fu_782_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_address0 <= tmp_66_fu_713_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_address0 <= tmp_60_fu_665_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_address0 <= tmp_53_fu_586_p1(10 - 1 downto 0);
        else 
            r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state15, tmp_57_fu_626_p1, tmp_63_fu_676_p1, tmp_69_fu_743_p1, tmp_75_fu_804_p1, tmp_82_fu_899_p1, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_address1 <= ap_const_lv64_2B6(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            r_address1 <= ap_const_lv64_2B8(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            r_address1 <= ap_const_lv64_2BA(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_address1 <= tmp_82_fu_899_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_address1 <= tmp_75_fu_804_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_address1 <= tmp_69_fu_743_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_address1 <= tmp_63_fu_676_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_address1 <= tmp_57_fu_626_p1(10 - 1 downto 0);
        else 
            r_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state10, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_ce0 <= ap_const_logic_1;
        else 
            r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_ce1 <= ap_const_logic_1;
        else 
            r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, tmp_83_reg_1174, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state10, ap_CS_fsm_state17, tmp_52_fu_581_p1, tmp_58_fu_653_p2, tmp_64_fu_698_p3, tmp_70_fu_770_p2, tmp_76_fu_844_p3, tmp_92_fu_1012_p3, tmp_95_fu_1041_p2, tmp_109_fu_1076_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_d0 <= tmp_109_fu_1076_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            r_d0 <= tmp_95_fu_1041_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            r_d0 <= tmp_92_fu_1012_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_d0 <= tmp_83_reg_1174;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_d0 <= tmp_76_fu_844_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_d0 <= tmp_70_fu_770_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_d0 <= tmp_64_fu_698_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_d0 <= tmp_58_fu_653_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_d0 <= tmp_52_fu_581_p1;
        else 
            r_d0 <= "XXXXXXXX";
        end if; 
    end process;


    r_d1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state15, t_q0, t_q1, ap_CS_fsm_state17, tmp_55_fu_613_p2, tmp_67_fu_730_p2, tmp_80_fu_886_p2, tmp_91_fu_988_p2, tmp_98_fu_1069_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_d1 <= tmp_98_fu_1069_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            r_d1 <= tmp_91_fu_988_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_d1 <= tmp_80_fu_886_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_d1 <= t_q0(8 downto 1);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_d1 <= tmp_67_fu_730_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            r_d1 <= t_q1(9 downto 2);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_d1 <= tmp_55_fu_613_p2;
        else 
            r_d1 <= "XXXXXXXX";
        end if; 
    end process;


    r_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state10, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_we0 <= ap_const_logic_1;
        else 
            r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_we1 <= ap_const_logic_1;
        else 
            r_we1 <= ap_const_logic_0;
        end if; 
    end process;


    t_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state13, exitcond_fu_959_p2, ap_CS_fsm_state15, ap_CS_fsm_state4, tmp_89_fu_576_p1, tmp_100_fu_965_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            t_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((exitcond_fu_959_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            t_address0 <= tmp_100_fu_965_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            t_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            t_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_959_p2 = ap_const_lv1_1)))) then 
            t_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_address0 <= tmp_89_fu_576_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            t_address0 <= "XXX";
        end if; 
    end process;


    t_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state12, tmp_50_fu_954_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_address1 <= tmp_50_fu_954_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            t_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            t_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            t_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            t_address1 <= "XXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state13, exitcond_fu_959_p2, ap_CS_fsm_state15, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_959_p2 = ap_const_lv1_1)) or ((exitcond_fu_959_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            t_ce1 <= ap_const_logic_1;
        else 
            t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(a_coeffs_q0, ap_CS_fsm_state13, exitcond_fu_959_p2, ap_CS_fsm_state4)
    begin
        if (((exitcond_fu_959_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            t_d0 <= ap_const_lv16_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_d0 <= a_coeffs_q0;
        else 
            t_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    t_we0_assign_proc : process(ap_CS_fsm_state13, exitcond_fu_959_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((exitcond_fu_959_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_we1_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_we1 <= ap_const_logic_1;
        else 
            t_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_100_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_472),64));
    tmp_101_fu_758_p1 <= t_q0(1 - 1 downto 0);
    tmp_102_fu_819_p1 <= t_q1(5 - 1 downto 0);
    tmp_103_fu_836_p3 <= t_q1(5 downto 5);
    tmp_104_fu_864_p1 <= t_q0(3 - 1 downto 0);
    tmp_105_fu_976_p1 <= t_q1(4 - 1 downto 0);
    tmp_106_fu_995_p1 <= t_q0(5 - 1 downto 0);
    tmp_107_fu_1020_p1 <= t_q1(2 - 1 downto 0);
    tmp_108_fu_1048_p1 <= t_q0(5 - 1 downto 0);
    tmp_109_fu_1076_p1 <= t_q1(8 - 1 downto 0);
    tmp_10_fu_591_p4 <= t_q0(15 downto 8);
    tmp_11_fu_605_p3 <= (tmp_54_fu_601_p1 & ap_const_lv3_0);
    tmp_14_fu_645_p3 <= (tmp_86_fu_641_p1 & ap_const_lv6_0);
    tmp_20_fu_722_p3 <= (tmp_99_fu_718_p1 & ap_const_lv4_0);
    tmp_23_fu_762_p3 <= (tmp_101_fu_758_p1 & ap_const_lv7_0);
    tmp_27_fu_876_p4 <= t_q1(13 downto 6);
    tmp_28_fu_937_p3 <= (ap_const_lv1_1 & j_1_reg_460);
    tmp_32_fu_685_p3 <= (tmp_96_fu_681_p1 & ap_const_lv1_0);
    tmp_33_fu_693_p2 <= (tmp_32_fu_685_p3 or tmp_30_reg_1159);
    tmp_39_fu_823_p3 <= (tmp_102_fu_819_p1 & ap_const_lv2_0);
    tmp_40_fu_831_p2 <= (tmp_39_fu_823_p3 or tmp_37_reg_1169);
    tmp_46_fu_999_p3 <= (tmp_106_reg_1200 & ap_const_lv1_0);
    tmp_47_fu_1006_p2 <= (tmp_46_fu_999_p3 or grp_fu_494_p4);
    tmp_49_fu_536_p2 <= std_logic_vector(unsigned(i_reg_425) + unsigned(ap_const_lv6_1));
    tmp_50_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_460),64));
    tmp_51_fu_931_p2 <= std_logic_vector(unsigned(j_1_reg_460) + unsigned(ap_const_lv3_1));
    tmp_52_fu_581_p1 <= t_q0(8 - 1 downto 0);
    tmp_53_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_436),64));
    tmp_54_fu_601_p1 <= t_q1(5 - 1 downto 0);
    tmp_55_fu_613_p2 <= (tmp_11_fu_605_p3 or tmp_10_fu_591_p4);
    tmp_56_fu_620_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(phi_mul_reg_436));
    tmp_57_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_620_p2),64));
    tmp_58_fu_653_p2 <= (tmp_14_fu_645_p3 or tmp_13_reg_1154);
    tmp_59_fu_659_p2 <= std_logic_vector(unsigned(ap_const_lv10_2) + unsigned(phi_mul_reg_436));
    tmp_60_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_659_p2),64));
    tmp_62_fu_670_p2 <= std_logic_vector(unsigned(ap_const_lv10_3) + unsigned(phi_mul_reg_436));
    tmp_63_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_fu_670_p2),64));
    tmp_64_fu_698_p3 <= (grp_fu_504_p4 & tmp_33_fu_693_p2);
    tmp_65_fu_707_p2 <= std_logic_vector(unsigned(ap_const_lv10_4) + unsigned(phi_mul_reg_436));
    tmp_66_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_65_fu_707_p2),64));
    tmp_67_fu_730_p2 <= (tmp_20_fu_722_p3 or grp_fu_514_p4);
    tmp_68_fu_737_p2 <= std_logic_vector(unsigned(ap_const_lv10_5) + unsigned(phi_mul_reg_436));
    tmp_69_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_fu_737_p2),64));
    tmp_70_fu_770_p2 <= (tmp_23_fu_762_p3 or tmp_22_reg_1164);
    tmp_71_fu_776_p2 <= std_logic_vector(unsigned(ap_const_lv10_6) + unsigned(phi_mul_reg_436));
    tmp_72_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_71_fu_776_p2),64));
    tmp_74_fu_798_p2 <= std_logic_vector(unsigned(ap_const_lv10_7) + unsigned(phi_mul_reg_436));
    tmp_75_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_74_fu_798_p2),64));
    tmp_76_fu_844_p3 <= (tmp_103_fu_836_p3 & tmp_40_fu_831_p2);
    tmp_77_fu_853_p2 <= std_logic_vector(unsigned(ap_const_lv10_8) + unsigned(phi_mul_reg_436));
    tmp_78_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_fu_853_p2),64));
    tmp_79_fu_868_p3 <= (tmp_104_fu_864_p1 & ap_const_lv5_0);
    tmp_7_fu_1031_p4 <= t_q0(12 downto 5);
    tmp_80_fu_886_p2 <= (tmp_79_fu_868_p3 or tmp_27_fu_876_p4);
    tmp_81_fu_893_p2 <= std_logic_vector(unsigned(ap_const_lv10_9) + unsigned(phi_mul_reg_436));
    tmp_82_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_81_fu_893_p2),64));
    tmp_84_fu_914_p2 <= std_logic_vector(unsigned(ap_const_lv10_A) + unsigned(phi_mul_reg_436));
    tmp_85_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_84_fu_914_p2),64));
    tmp_86_fu_641_p1 <= t_q1(2 - 1 downto 0);
    tmp_87_fu_566_p2 <= std_logic_vector(unsigned(tmp_reg_1136) + unsigned(j_cast6_fu_550_p1));
    tmp_88_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_87_fu_566_p2),64));
    tmp_89_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_448),64));
    tmp_8_fu_1059_p4 <= t_q1(15 downto 8);
    tmp_90_fu_980_p3 <= (tmp_105_fu_976_p1 & ap_const_lv4_0);
    tmp_91_fu_988_p2 <= (tmp_90_fu_980_p3 or grp_fu_514_p4);
    tmp_92_fu_1012_p3 <= (tmp_48_reg_1205 & tmp_47_fu_1006_p2);
    tmp_94_fu_1024_p3 <= (tmp_107_reg_1210 & ap_const_lv6_0);
    tmp_95_fu_1041_p2 <= (tmp_94_fu_1024_p3 or tmp_7_fu_1031_p4);
    tmp_96_fu_681_p1 <= t_q0(5 - 1 downto 0);
    tmp_97_fu_1052_p3 <= (tmp_108_reg_1215 & ap_const_lv3_0);
    tmp_98_fu_1069_p2 <= (tmp_97_fu_1052_p3 or tmp_8_fu_1059_p4);
    tmp_99_fu_718_p1 <= t_q1(4 - 1 downto 0);
        tmp_cast9_fu_945_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_fu_937_p3),9));

    tmp_fu_542_p3 <= (i_reg_425 & ap_const_lv3_0);
    tmp_s_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_cast9_fu_945_p1),64));
end behav;
