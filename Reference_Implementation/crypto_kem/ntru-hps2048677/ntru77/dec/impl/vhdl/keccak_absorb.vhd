-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keccak_absorb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_we0 : OUT STD_LOGIC;
    s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce1 : OUT STD_LOGIC;
    s_we1 : OUT STD_LOGIC;
    s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    m_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    m_ce0 : OUT STD_LOGIC;
    m_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of keccak_absorb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_110 : STD_LOGIC_VECTOR (8 downto 0) := "100010000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_87 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010000111";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_88 : STD_LOGIC_VECTOR (8 downto 0) := "010001000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_178 : STD_LOGIC_VECTOR (8 downto 0) := "101111000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_88 : STD_LOGIC_VECTOR (7 downto 0) := "10001000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_26_fu_287_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_cast_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast_reg_534 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_7_fu_309_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_7_reg_542 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_213_cast_fu_323_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_213_cast_reg_547 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond4_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mlen_assign_fu_327_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mlen_assign_reg_552 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_8_fu_343_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_8_reg_560 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_i_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_3_reg_570 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_391_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_rec_fu_404_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_268_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_268_ap_done : STD_LOGIC;
    signal i_28_fu_421_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond3_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_cast5_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast5_reg_599 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_29_fu_444_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_29_reg_607 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_211_fu_450_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_211_reg_612 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_9_fu_468_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_9_reg_620 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_i3_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_4_reg_630 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_12_fu_510_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal t_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_ce1 : STD_LOGIC;
    signal t_we1 : STD_LOGIC;
    signal t_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakF1600_StatePer_fu_268_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_268_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_268_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_268_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_268_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_268_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_268_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_268_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_268_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_268_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_152 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_27_reg_163 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_01_rec_reg_175 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_187 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_s_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_i_reg_198 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_i_reg_210 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_222 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_4_reg_233 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal r_i1_reg_244 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_i2_reg_256 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_KeccakF1600_StatePer_fu_268_ap_start_reg : STD_LOGIC := '0';
    signal i_cast_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i_cast_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast8_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i4_cast_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_210_fu_397_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_212_fu_516_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_207_fu_315_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_i_cast_fu_333_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_349_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_i_fu_355_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_232_fu_369_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_227_i_fu_373_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_56_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_227_i_cast_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_228_i_fu_385_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_i2_cast3_fu_458_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_i4_fu_474_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_233_fu_488_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_231_i_fu_492_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i7_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_231_i_cast_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_232_i_fu_504_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component KeccakF1600_StatePer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keccak_absorb_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    t_U : component keccak_absorb_t
    generic map (
        DataWidth => 8,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0,
        address1 => t_address1,
        ce1 => t_ce1,
        we1 => t_we1,
        d1 => t_d1,
        q1 => t_q1);

    grp_KeccakF1600_StatePer_fu_268 : component KeccakF1600_StatePer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_fu_268_ap_start,
        ap_done => grp_KeccakF1600_StatePer_fu_268_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_fu_268_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_fu_268_ap_ready,
        state_address0 => grp_KeccakF1600_StatePer_fu_268_state_address0,
        state_ce0 => grp_KeccakF1600_StatePer_fu_268_state_ce0,
        state_we0 => grp_KeccakF1600_StatePer_fu_268_state_we0,
        state_d0 => grp_KeccakF1600_StatePer_fu_268_state_d0,
        state_q0 => s_q0,
        state_address1 => grp_KeccakF1600_StatePer_fu_268_state_address1,
        state_ce1 => grp_KeccakF1600_StatePer_fu_268_state_ce1,
        state_we1 => grp_KeccakF1600_StatePer_fu_268_state_we1,
        state_d1 => grp_KeccakF1600_StatePer_fu_268_state_d1,
        state_q1 => s_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_fu_268_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_fu_268_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond4_fu_303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_KeccakF1600_StatePer_fu_268_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_fu_268_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_fu_268_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_293_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_1_reg_187 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_1_reg_187 <= i_7_reg_542;
            end if; 
        end if;
    end process;

    i_27_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_281_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_27_reg_163 <= ap_const_lv9_110;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_fu_268_ap_done = ap_const_logic_1))) then 
                i_27_reg_163 <= mlen_assign_reg_552;
            end if; 
        end if;
    end process;

    i_2_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_293_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_2_reg_222 <= ap_const_lv8_0;
            elsif (((exitcond3_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_2_reg_222 <= i_28_fu_421_p2;
            end if; 
        end if;
    end process;

    i_4_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_4_reg_233 <= i_29_reg_607;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_4_reg_233 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_i2_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_i2_reg_256 <= i_9_reg_620;
            elsif (((exitcond_fu_438_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_i2_reg_256 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_i_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_i_reg_210 <= i_8_reg_560;
            elsif (((exitcond4_fu_303_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_i_reg_210 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_152 <= i_26_fu_287_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_152 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_01_rec_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_281_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_01_rec_reg_175 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_fu_268_ap_done = ap_const_logic_1))) then 
                p_01_rec_reg_175 <= p_rec_fu_404_p2;
            end if; 
        end if;
    end process;

    r_i1_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                r_i1_reg_244 <= r_12_fu_510_p2;
            elsif (((exitcond_fu_438_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                r_i1_reg_244 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    r_i_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                r_i_reg_198 <= r_fu_391_p2;
            elsif (((exitcond4_fu_303_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                r_i_reg_198 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    i_1_cast_reg_534(4 downto 0) <= i_1_cast_fu_299_p1(4 downto 0);
                i_7_reg_542 <= i_7_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_29_reg_607 <= i_29_fu_444_p2;
                    i_4_cast5_reg_599(4 downto 0) <= i_4_cast5_fu_434_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_8_reg_560 <= i_8_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_9_reg_620 <= i_9_fu_468_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                mlen_assign_reg_552 <= mlen_assign_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_337_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                s_addr_3_reg_570 <= i_1_cast_reg_534(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i3_fu_462_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                s_addr_4_reg_630 <= i_4_cast5_reg_599(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_438_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    tmp_211_reg_612(7 downto 3) <= tmp_211_fu_450_p3(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_303_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_213_cast_reg_547(7 downto 3) <= tmp_213_cast_fu_323_p1(7 downto 3);
            end if;
        end if;
    end process;
    i_1_cast_reg_534(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_213_cast_reg_547(2 downto 0) <= "000";
    tmp_213_cast_reg_547(8) <= '0';
    i_4_cast5_reg_599(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_211_reg_612(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, exitcond4_fu_303_p2, ap_CS_fsm_state5, tmp_i_fu_337_p2, ap_CS_fsm_state8, grp_KeccakF1600_StatePer_fu_268_ap_done, ap_CS_fsm_state9, exitcond3_fu_415_p2, ap_CS_fsm_state11, exitcond_fu_438_p2, ap_CS_fsm_state12, tmp_i3_fu_462_p2, tmp_fu_281_p2, ap_CS_fsm_state3, tmp_s_fu_293_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_281_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_s_fu_293_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond4_fu_303_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state5 => 
                if (((tmp_i_fu_337_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_fu_268_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((exitcond3_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((exitcond_fu_438_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((tmp_i3_fu_462_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11, exitcond_fu_438_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond_fu_438_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, exitcond_fu_438_p2)
    begin
        if (((exitcond_fu_438_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond3_fu_415_p2 <= "1" when (i_2_reg_222 = ap_const_lv8_88) else "0";
    exitcond4_fu_303_p2 <= "1" when (i_1_reg_187 = ap_const_lv5_11) else "0";
    exitcond_fu_438_p2 <= "1" when (i_4_reg_233 = ap_const_lv5_11) else "0";
    grp_KeccakF1600_StatePer_fu_268_ap_start <= grp_KeccakF1600_StatePer_fu_268_ap_start_reg;
    i_1_cast_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_187),64));
    i_26_fu_287_p2 <= std_logic_vector(unsigned(i_reg_152) + unsigned(ap_const_lv5_1));
    i_28_fu_421_p2 <= std_logic_vector(unsigned(i_2_reg_222) + unsigned(ap_const_lv8_1));
    i_29_fu_444_p2 <= std_logic_vector(unsigned(i_4_reg_233) + unsigned(ap_const_lv5_1));
    i_2_cast8_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_222),64));
    i_4_cast5_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_233),64));
    i_7_fu_309_p2 <= std_logic_vector(unsigned(i_1_reg_187) + unsigned(ap_const_lv5_1));
    i_8_fu_343_p2 <= std_logic_vector(unsigned(i_i_reg_210) + unsigned(ap_const_lv4_1));
    i_9_fu_468_p2 <= std_logic_vector(unsigned(i_i2_reg_256) + unsigned(ap_const_lv4_1));
    i_cast_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_152),64));
    i_i2_cast3_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i2_reg_256),8));
    i_i_cast_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_210),9));
    m_address0 <= sum_i_cast_fu_360_p1(9 - 1 downto 0);

    m_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            m_ce0 <= ap_const_logic_1;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mlen_assign_fu_327_p2 <= std_logic_vector(unsigned(i_27_reg_163) + unsigned(ap_const_lv9_178));
    p_rec_fu_404_p2 <= std_logic_vector(unsigned(p_01_rec_reg_175) + unsigned(ap_const_lv9_88));
    r_12_fu_510_p2 <= (tmp_232_i_fu_504_p2 or r_i1_reg_244);
    r_fu_391_p2 <= (tmp_228_i_fu_385_p2 or r_i_reg_198);

    s_address0_assign_proc : process(ap_CS_fsm_state2, i_1_cast_reg_534, ap_CS_fsm_state5, s_addr_3_reg_570, ap_CS_fsm_state8, i_4_cast5_reg_599, ap_CS_fsm_state12, s_addr_4_reg_630, grp_KeccakF1600_StatePer_fu_268_state_address0, ap_CS_fsm_state7, ap_CS_fsm_state14, i_cast_fu_276_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            s_address0 <= s_addr_4_reg_630;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            s_address0 <= i_4_cast5_reg_599(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_address0 <= s_addr_3_reg_570;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_address0 <= i_1_cast_reg_534(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_address0 <= i_cast_fu_276_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_address0 <= grp_KeccakF1600_StatePer_fu_268_state_address0;
        else 
            s_address0 <= "XXXXX";
        end if; 
    end process;

    s_address1 <= grp_KeccakF1600_StatePer_fu_268_state_address1;

    s_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state12, grp_KeccakF1600_StatePer_fu_268_state_ce0, ap_CS_fsm_state7, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            s_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_ce0 <= grp_KeccakF1600_StatePer_fu_268_state_ce0;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(ap_CS_fsm_state8, grp_KeccakF1600_StatePer_fu_268_state_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_ce1 <= grp_KeccakF1600_StatePer_fu_268_state_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_KeccakF1600_StatePer_fu_268_state_d0, ap_CS_fsm_state7, ap_CS_fsm_state14, tmp_210_fu_397_p2, tmp_212_fu_516_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            s_d0 <= tmp_212_fu_516_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_d0 <= tmp_210_fu_397_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_d0 <= grp_KeccakF1600_StatePer_fu_268_state_d0;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_d1 <= grp_KeccakF1600_StatePer_fu_268_state_d1;

    s_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_KeccakF1600_StatePer_fu_268_state_we0, tmp_fu_281_p2, ap_CS_fsm_state7, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            s_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_we0 <= grp_KeccakF1600_StatePer_fu_268_state_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(ap_CS_fsm_state8, grp_KeccakF1600_StatePer_fu_268_state_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_we1 <= grp_KeccakF1600_StatePer_fu_268_state_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sum_i4_cast_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i4_fu_474_p2),64));
    sum_i4_fu_474_p2 <= std_logic_vector(unsigned(tmp_211_reg_612) + unsigned(i_i2_cast3_fu_458_p1));
    sum_i_cast_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_fu_355_p2),64));
    sum_i_fu_355_p2 <= std_logic_vector(unsigned(tmp_213_cast_reg_547) + unsigned(tmp1_fu_349_p2));

    t_address0_assign_proc : process(ap_CS_fsm_state9, exitcond3_fu_415_p2, ap_CS_fsm_state10, i_2_cast8_fu_410_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            t_address0 <= ap_const_lv64_0(8 - 1 downto 0);
        elsif (((exitcond3_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            t_address0 <= ap_const_lv64_87(8 - 1 downto 0);
        elsif (((exitcond3_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            t_address0 <= i_2_cast8_fu_410_p1(8 - 1 downto 0);
        else 
            t_address0 <= "XXXXXXXX";
        end if; 
    end process;


    t_address1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state10, sum_i4_cast_fu_479_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_address1 <= sum_i4_cast_fu_479_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            t_address1 <= ap_const_lv64_87(8 - 1 downto 0);
        else 
            t_address1 <= "XXXXXXXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state9, exitcond3_fu_415_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((exitcond3_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((exitcond3_fu_415_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            t_ce1 <= ap_const_logic_1;
        else 
            t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(ap_CS_fsm_state9, exitcond3_fu_415_p2, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            t_d0 <= ap_const_lv8_6;
        elsif (((exitcond3_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            t_d0 <= ap_const_lv8_0;
        else 
            t_d0 <= "XXXXXXXX";
        end if; 
    end process;

    t_d1 <= (t_q0 or ap_const_lv8_80);

    t_we0_assign_proc : process(ap_CS_fsm_state9, exitcond3_fu_415_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((exitcond3_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_we1_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            t_we1 <= ap_const_logic_1;
        else 
            t_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_349_p2 <= std_logic_vector(unsigned(i_i_cast_fu_333_p1) + unsigned(p_01_rec_reg_175));
    tmp_207_fu_315_p3 <= (i_1_reg_187 & ap_const_lv3_0);
    tmp_210_fu_397_p2 <= (s_q0 xor r_i_reg_198);
    tmp_211_fu_450_p3 <= (i_4_reg_233 & ap_const_lv3_0);
    tmp_212_fu_516_p2 <= (s_q0 xor r_i1_reg_244);
    tmp_213_cast_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_207_fu_315_p3),9));
    tmp_227_i_cast_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_227_i_fu_373_p3),64));
    tmp_227_i_fu_373_p3 <= (tmp_232_fu_369_p1 & ap_const_lv3_0);
    tmp_228_i_fu_385_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_56_fu_365_p1),to_integer(unsigned('0' & tmp_227_i_cast_fu_381_p1(31-1 downto 0)))));
    tmp_231_i_cast_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_231_i_fu_492_p3),64));
    tmp_231_i_fu_492_p3 <= (tmp_233_fu_488_p1 & ap_const_lv3_0);
    tmp_232_fu_369_p1 <= i_i_reg_210(3 - 1 downto 0);
    tmp_232_i_fu_504_p2 <= std_logic_vector(shift_left(unsigned(tmp_i7_fu_484_p1),to_integer(unsigned('0' & tmp_231_i_cast_fu_500_p1(31-1 downto 0)))));
    tmp_233_fu_488_p1 <= i_i2_reg_256(3 - 1 downto 0);
    tmp_fu_281_p2 <= "1" when (i_reg_152 = ap_const_lv5_19) else "0";
    tmp_i3_fu_462_p2 <= "1" when (i_i2_reg_256 = ap_const_lv4_8) else "0";
    tmp_i7_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_q1),64));
    tmp_i_56_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_q0),64));
    tmp_i_fu_337_p2 <= "1" when (i_i_reg_210 = ap_const_lv4_8) else "0";
    tmp_s_fu_293_p2 <= "1" when (unsigned(i_27_reg_163) < unsigned(ap_const_lv9_88)) else "0";
end behav;
