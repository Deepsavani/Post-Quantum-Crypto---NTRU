// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keccak_absorb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_address0,
        s_ce0,
        s_we0,
        s_d0,
        s_q0,
        s_address1,
        s_ce1,
        s_we1,
        s_d1,
        s_q1,
        m_address0,
        m_ce0,
        m_q0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] s_address0;
output   s_ce0;
output   s_we0;
output  [63:0] s_d0;
input  [63:0] s_q0;
output  [4:0] s_address1;
output   s_ce1;
output   s_we1;
output  [63:0] s_d1;
input  [63:0] s_q1;
output  [8:0] m_address0;
output   m_ce0;
input  [7:0] m_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] s_address0;
reg s_ce0;
reg s_we0;
reg[63:0] s_d0;
reg s_ce1;
reg s_we1;
reg m_ce0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_fu_287_p2;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln385_fu_299_p1;
reg   [63:0] zext_ln385_reg_534;
wire    ap_CS_fsm_state4;
wire   [4:0] i_22_fu_309_p2;
reg   [4:0] i_22_reg_542;
wire   [8:0] zext_ln386_fu_323_p1;
reg   [8:0] zext_ln386_reg_547;
wire   [0:0] icmp_ln385_fu_303_p2;
wire   [8:0] add_ln391_fu_327_p2;
reg   [8:0] add_ln391_reg_552;
wire   [3:0] i_23_fu_343_p2;
reg   [3:0] i_23_reg_560;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln28_fu_337_p2;
reg   [4:0] s_addr_3_reg_570;
wire   [63:0] r_fu_391_p2;
wire    ap_CS_fsm_state6;
wire   [8:0] add_ln390_fu_404_p2;
wire    ap_CS_fsm_state8;
wire    grp_KeccakF1600_StatePer_fu_268_ap_ready;
wire    grp_KeccakF1600_StatePer_fu_268_ap_done;
wire   [7:0] i_21_fu_421_p2;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln393_fu_415_p2;
wire   [63:0] zext_ln399_fu_434_p1;
reg   [63:0] zext_ln399_reg_599;
wire    ap_CS_fsm_state11;
wire   [4:0] i_24_fu_444_p2;
reg   [4:0] i_24_reg_607;
wire   [7:0] shl_ln3_fu_450_p3;
reg   [7:0] shl_ln3_reg_612;
wire   [0:0] icmp_ln399_fu_438_p2;
wire   [3:0] i_25_fu_468_p2;
reg   [3:0] i_25_reg_620;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln28_2_fu_462_p2;
reg   [4:0] s_addr_4_reg_630;
wire   [63:0] r_14_fu_510_p2;
wire    ap_CS_fsm_state13;
reg   [7:0] t_address0;
reg    t_ce0;
reg    t_we0;
reg   [7:0] t_d0;
wire   [7:0] t_q0;
reg   [7:0] t_address1;
reg    t_ce1;
reg    t_we1;
wire   [7:0] t_d1;
wire   [7:0] t_q1;
wire    grp_KeccakF1600_StatePer_fu_268_ap_start;
wire    grp_KeccakF1600_StatePer_fu_268_ap_idle;
wire   [4:0] grp_KeccakF1600_StatePer_fu_268_state_address0;
wire    grp_KeccakF1600_StatePer_fu_268_state_ce0;
wire    grp_KeccakF1600_StatePer_fu_268_state_we0;
wire   [63:0] grp_KeccakF1600_StatePer_fu_268_state_d0;
wire   [4:0] grp_KeccakF1600_StatePer_fu_268_state_address1;
wire    grp_KeccakF1600_StatePer_fu_268_state_ce1;
wire    grp_KeccakF1600_StatePer_fu_268_state_we1;
wire   [63:0] grp_KeccakF1600_StatePer_fu_268_state_d1;
reg   [4:0] i_0_reg_152;
wire   [0:0] icmp_ln380_fu_281_p2;
reg   [8:0] i_20_reg_163;
reg   [8:0] p_01_rec_reg_175;
reg   [4:0] i_1_reg_187;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln383_fu_293_p2;
reg   [63:0] r_0_i_reg_198;
reg   [3:0] i_0_i_reg_210;
reg   [7:0] i_2_reg_222;
reg   [4:0] i_4_reg_233;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state14;
reg   [63:0] r_0_i1_reg_244;
reg   [3:0] i_0_i2_reg_256;
reg    grp_KeccakF1600_StatePer_fu_268_ap_start_reg;
wire   [63:0] zext_ln380_fu_276_p1;
wire   [63:0] zext_ln29_7_fu_360_p1;
wire   [63:0] zext_ln393_fu_410_p1;
wire   [63:0] zext_ln29_9_fu_479_p1;
wire   [63:0] xor_ln386_fu_397_p2;
wire   [63:0] xor_ln400_fu_516_p2;
wire   [7:0] shl_ln_fu_315_p3;
wire   [8:0] zext_ln28_fu_333_p1;
wire   [8:0] add_ln29_3_fu_349_p2;
wire   [8:0] add_ln29_fu_355_p2;
wire   [2:0] trunc_ln29_fu_369_p1;
wire   [5:0] shl_ln4_fu_373_p3;
wire   [63:0] zext_ln29_fu_365_p1;
wire   [63:0] zext_ln29_8_fu_381_p1;
wire   [63:0] shl_ln29_fu_385_p2;
wire   [7:0] zext_ln28_1_fu_458_p1;
wire   [7:0] add_ln29_2_fu_474_p2;
wire   [2:0] trunc_ln29_2_fu_488_p1;
wire   [5:0] shl_ln29_5_fu_492_p3;
wire   [63:0] zext_ln29_2_fu_484_p1;
wire   [63:0] zext_ln29_10_fu_500_p1;
wire   [63:0] shl_ln29_2_fu_504_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 grp_KeccakF1600_StatePer_fu_268_ap_start_reg = 1'b0;
end

keccak_absorb_t #(
    .DataWidth( 8 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
t_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(t_address0),
    .ce0(t_ce0),
    .we0(t_we0),
    .d0(t_d0),
    .q0(t_q0),
    .address1(t_address1),
    .ce1(t_ce1),
    .we1(t_we1),
    .d1(t_d1),
    .q1(t_q1)
);

KeccakF1600_StatePer grp_KeccakF1600_StatePer_fu_268(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeccakF1600_StatePer_fu_268_ap_start),
    .ap_done(grp_KeccakF1600_StatePer_fu_268_ap_done),
    .ap_idle(grp_KeccakF1600_StatePer_fu_268_ap_idle),
    .ap_ready(grp_KeccakF1600_StatePer_fu_268_ap_ready),
    .state_address0(grp_KeccakF1600_StatePer_fu_268_state_address0),
    .state_ce0(grp_KeccakF1600_StatePer_fu_268_state_ce0),
    .state_we0(grp_KeccakF1600_StatePer_fu_268_state_we0),
    .state_d0(grp_KeccakF1600_StatePer_fu_268_state_d0),
    .state_q0(s_q0),
    .state_address1(grp_KeccakF1600_StatePer_fu_268_state_address1),
    .state_ce1(grp_KeccakF1600_StatePer_fu_268_state_ce1),
    .state_we1(grp_KeccakF1600_StatePer_fu_268_state_we1),
    .state_d1(grp_KeccakF1600_StatePer_fu_268_state_d1),
    .state_q1(s_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeccakF1600_StatePer_fu_268_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln385_fu_303_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            grp_KeccakF1600_StatePer_fu_268_ap_start_reg <= 1'b1;
        end else if ((grp_KeccakF1600_StatePer_fu_268_ap_ready == 1'b1)) begin
            grp_KeccakF1600_StatePer_fu_268_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_0_i2_reg_256 <= i_25_reg_620;
    end else if (((icmp_ln399_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        i_0_i2_reg_256 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_i_reg_210 <= i_23_reg_560;
    end else if (((icmp_ln385_fu_303_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_i_reg_210 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln380_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_152 <= i_fu_287_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_152 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln383_fu_293_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_1_reg_187 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_1_reg_187 <= i_22_reg_542;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln380_fu_281_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_20_reg_163 <= 9'd272;
    end else if (((1'b1 == ap_CS_fsm_state8) & (grp_KeccakF1600_StatePer_fu_268_ap_done == 1'b1))) begin
        i_20_reg_163 <= add_ln391_reg_552;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln383_fu_293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_2_reg_222 <= 8'd0;
    end else if (((icmp_ln393_fu_415_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        i_2_reg_222 <= i_21_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_4_reg_233 <= i_24_reg_607;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_4_reg_233 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln380_fu_281_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_01_rec_reg_175 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (grp_KeccakF1600_StatePer_fu_268_ap_done == 1'b1))) begin
        p_01_rec_reg_175 <= add_ln390_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        r_0_i1_reg_244 <= r_14_fu_510_p2;
    end else if (((icmp_ln399_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        r_0_i1_reg_244 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_0_i_reg_198 <= r_fu_391_p2;
    end else if (((icmp_ln385_fu_303_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        r_0_i_reg_198 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln385_fu_303_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln391_reg_552 <= add_ln391_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_22_reg_542 <= i_22_fu_309_p2;
        zext_ln385_reg_534[4 : 0] <= zext_ln385_fu_299_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_23_reg_560 <= i_23_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_24_reg_607 <= i_24_fu_444_p2;
        zext_ln399_reg_599[4 : 0] <= zext_ln399_fu_434_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_25_reg_620 <= i_25_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        s_addr_3_reg_570 <= zext_ln385_reg_534;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_2_fu_462_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        s_addr_4_reg_630 <= zext_ln399_reg_599;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln399_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        shl_ln3_reg_612[7 : 3] <= shl_ln3_fu_450_p3[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln385_fu_303_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln386_reg_547[7 : 3] <= zext_ln386_fu_323_p1[7 : 3];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln399_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln399_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_ce0 = 1'b1;
    end else begin
        m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        s_address0 = s_addr_4_reg_630;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        s_address0 = zext_ln399_reg_599;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        s_address0 = s_addr_3_reg_570;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        s_address0 = zext_ln385_reg_534;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_address0 = zext_ln380_fu_276_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        s_address0 = grp_KeccakF1600_StatePer_fu_268_state_address0;
    end else begin
        s_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state12))) begin
        s_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        s_ce0 = grp_KeccakF1600_StatePer_fu_268_state_ce0;
    end else begin
        s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        s_ce1 = grp_KeccakF1600_StatePer_fu_268_state_ce1;
    end else begin
        s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        s_d0 = xor_ln400_fu_516_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        s_d0 = xor_ln386_fu_397_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_d0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        s_d0 = grp_KeccakF1600_StatePer_fu_268_state_d0;
    end else begin
        s_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state7) | ((icmp_ln380_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        s_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        s_we0 = grp_KeccakF1600_StatePer_fu_268_state_we0;
    end else begin
        s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        s_we1 = grp_KeccakF1600_StatePer_fu_268_state_we1;
    end else begin
        s_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        t_address0 = 64'd0;
    end else if (((icmp_ln393_fu_415_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        t_address0 = 64'd135;
    end else if (((icmp_ln393_fu_415_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        t_address0 = zext_ln393_fu_410_p1;
    end else begin
        t_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        t_address1 = zext_ln29_9_fu_479_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        t_address1 = 64'd135;
    end else begin
        t_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((icmp_ln393_fu_415_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln393_fu_415_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)))) begin
        t_ce0 = 1'b1;
    end else begin
        t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state12))) begin
        t_ce1 = 1'b1;
    end else begin
        t_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        t_d0 = 8'd6;
    end else if (((icmp_ln393_fu_415_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        t_d0 = 8'd0;
    end else begin
        t_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((icmp_ln393_fu_415_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        t_we0 = 1'b1;
    end else begin
        t_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        t_we1 = 1'b1;
    end else begin
        t_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln380_fu_281_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln383_fu_293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln385_fu_303_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln28_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_KeccakF1600_StatePer_fu_268_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln393_fu_415_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln399_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln28_2_fu_462_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln29_2_fu_474_p2 = (shl_ln3_reg_612 + zext_ln28_1_fu_458_p1);

assign add_ln29_3_fu_349_p2 = (zext_ln28_fu_333_p1 + p_01_rec_reg_175);

assign add_ln29_fu_355_p2 = (zext_ln386_reg_547 + add_ln29_3_fu_349_p2);

assign add_ln390_fu_404_p2 = (p_01_rec_reg_175 + 9'd136);

assign add_ln391_fu_327_p2 = ($signed(i_20_reg_163) + $signed(9'd376));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_KeccakF1600_StatePer_fu_268_ap_start = grp_KeccakF1600_StatePer_fu_268_ap_start_reg;

assign i_21_fu_421_p2 = (i_2_reg_222 + 8'd1);

assign i_22_fu_309_p2 = (i_1_reg_187 + 5'd1);

assign i_23_fu_343_p2 = (i_0_i_reg_210 + 4'd1);

assign i_24_fu_444_p2 = (i_4_reg_233 + 5'd1);

assign i_25_fu_468_p2 = (i_0_i2_reg_256 + 4'd1);

assign i_fu_287_p2 = (i_0_reg_152 + 5'd1);

assign icmp_ln28_2_fu_462_p2 = ((i_0_i2_reg_256 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_337_p2 = ((i_0_i_reg_210 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln380_fu_281_p2 = ((i_0_reg_152 == 5'd25) ? 1'b1 : 1'b0);

assign icmp_ln383_fu_293_p2 = ((i_20_reg_163 < 9'd136) ? 1'b1 : 1'b0);

assign icmp_ln385_fu_303_p2 = ((i_1_reg_187 == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln393_fu_415_p2 = ((i_2_reg_222 == 8'd136) ? 1'b1 : 1'b0);

assign icmp_ln399_fu_438_p2 = ((i_4_reg_233 == 5'd17) ? 1'b1 : 1'b0);

assign m_address0 = zext_ln29_7_fu_360_p1;

assign r_14_fu_510_p2 = (shl_ln29_2_fu_504_p2 | r_0_i1_reg_244);

assign r_fu_391_p2 = (shl_ln29_fu_385_p2 | r_0_i_reg_198);

assign s_address1 = grp_KeccakF1600_StatePer_fu_268_state_address1;

assign s_d1 = grp_KeccakF1600_StatePer_fu_268_state_d1;

assign shl_ln29_2_fu_504_p2 = zext_ln29_2_fu_484_p1 << zext_ln29_10_fu_500_p1;

assign shl_ln29_5_fu_492_p3 = {{trunc_ln29_2_fu_488_p1}, {3'd0}};

assign shl_ln29_fu_385_p2 = zext_ln29_fu_365_p1 << zext_ln29_8_fu_381_p1;

assign shl_ln3_fu_450_p3 = {{i_4_reg_233}, {3'd0}};

assign shl_ln4_fu_373_p3 = {{trunc_ln29_fu_369_p1}, {3'd0}};

assign shl_ln_fu_315_p3 = {{i_1_reg_187}, {3'd0}};

assign t_d1 = (t_q0 | 8'd128);

assign trunc_ln29_2_fu_488_p1 = i_0_i2_reg_256[2:0];

assign trunc_ln29_fu_369_p1 = i_0_i_reg_210[2:0];

assign xor_ln386_fu_397_p2 = (s_q0 ^ r_0_i_reg_198);

assign xor_ln400_fu_516_p2 = (s_q0 ^ r_0_i1_reg_244);

assign zext_ln28_1_fu_458_p1 = i_0_i2_reg_256;

assign zext_ln28_fu_333_p1 = i_0_i_reg_210;

assign zext_ln29_10_fu_500_p1 = shl_ln29_5_fu_492_p3;

assign zext_ln29_2_fu_484_p1 = t_q1;

assign zext_ln29_7_fu_360_p1 = add_ln29_fu_355_p2;

assign zext_ln29_8_fu_381_p1 = shl_ln4_fu_373_p3;

assign zext_ln29_9_fu_479_p1 = add_ln29_2_fu_474_p2;

assign zext_ln29_fu_365_p1 = m_q0;

assign zext_ln380_fu_276_p1 = i_0_reg_152;

assign zext_ln385_fu_299_p1 = i_1_reg_187;

assign zext_ln386_fu_323_p1 = shl_ln_fu_315_p3;

assign zext_ln393_fu_410_p1 = i_2_reg_222;

assign zext_ln399_fu_434_p1 = i_4_reg_233;

always @ (posedge ap_clk) begin
    zext_ln385_reg_534[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln386_reg_547[2:0] <= 3'b000;
    zext_ln386_reg_547[8] <= 1'b0;
    zext_ln399_reg_599[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    shl_ln3_reg_612[2:0] <= 3'b000;
end

endmodule //keccak_absorb
