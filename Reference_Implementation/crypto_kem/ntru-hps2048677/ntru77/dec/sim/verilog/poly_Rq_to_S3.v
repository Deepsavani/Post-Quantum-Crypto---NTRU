// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module poly_Rq_to_S3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_coeffs_address0,
        r_coeffs_ce0,
        r_coeffs_we0,
        r_coeffs_d0,
        r_coeffs_q0,
        r_coeffs_address1,
        r_coeffs_ce1,
        r_coeffs_we1,
        r_coeffs_d1,
        r_coeffs_q1,
        a_coeffs_address0,
        a_coeffs_ce0,
        a_coeffs_q0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] r_coeffs_address0;
output   r_coeffs_ce0;
output   r_coeffs_we0;
output  [15:0] r_coeffs_d0;
input  [15:0] r_coeffs_q0;
output  [9:0] r_coeffs_address1;
output   r_coeffs_ce1;
output   r_coeffs_we1;
output  [15:0] r_coeffs_d1;
input  [15:0] r_coeffs_q1;
output  [9:0] a_coeffs_address0;
output   a_coeffs_ce0;
input  [15:0] a_coeffs_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] r_coeffs_address0;
reg r_coeffs_ce0;
reg r_coeffs_we0;
reg[15:0] r_coeffs_d0;
reg[9:0] r_coeffs_address1;
reg r_coeffs_ce1;
reg r_coeffs_we1;
reg a_coeffs_ce0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] i_fu_157_p2;
reg   [9:0] i_reg_753;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln159_fu_163_p1;
reg   [63:0] zext_ln159_reg_758;
wire   [0:0] icmp_ln157_fu_151_p2;
wire   [9:0] r_coeffs_addr_reg_768;
reg   [1:0] tmp_11_reg_774;
wire    ap_CS_fsm_state4;
wire   [1:0] add_ln13_fu_353_p2;
reg   [1:0] add_ln13_reg_779;
wire   [9:0] i_4_fu_440_p2;
reg   [9:0] i_4_reg_787;
wire    ap_CS_fsm_state6;
reg   [9:0] r_coeffs_addr_22_reg_792;
wire   [0:0] icmp_ln164_fu_434_p2;
reg   [3:0] trunc_ln12_3_reg_798;
wire    ap_CS_fsm_state7;
wire   [1:0] add_ln12_6_fu_635_p2;
reg   [1:0] add_ln12_6_reg_803;
reg   [1:0] trunc_ln13_4_reg_809;
reg   [9:0] i_0_reg_129;
wire    ap_CS_fsm_state3;
reg   [9:0] i_1_reg_140;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln165_fu_446_p1;
wire   [15:0] add_ln160_fu_192_p2;
wire   [15:0] xor_ln18_fu_427_p2;
wire   [4:0] tmp_12_fu_168_p4;
wire   [15:0] and_ln_fu_178_p3;
wire   [15:0] xor_ln159_fu_186_p2;
wire   [7:0] tmp_fu_203_p4;
wire   [7:0] trunc_ln5_fu_199_p1;
wire   [8:0] zext_ln10_fu_217_p1;
wire   [8:0] zext_ln10_2_fu_213_p1;
wire   [8:0] r_fu_227_p2;
wire   [4:0] tmp_s_fu_233_p4;
wire   [3:0] trunc_ln11_fu_257_p1;
wire   [3:0] trunc_ln11_3_fu_247_p4;
wire   [3:0] add_ln11_fu_275_p2;
wire   [5:0] zext_ln11_fu_281_p1;
wire   [5:0] zext_ln11_2_fu_243_p1;
wire   [5:0] r_4_fu_285_p2;
wire   [1:0] trunc_ln11_1_fu_261_p1;
wire   [1:0] trunc_ln11_6_fu_265_p4;
wire   [7:0] add_ln10_fu_221_p2;
wire   [1:0] trunc_ln12_2_fu_307_p4;
wire   [1:0] add_ln12_fu_301_p2;
wire   [1:0] add_ln12_3_fu_317_p2;
wire   [3:0] zext_ln12_fu_323_p1;
wire   [3:0] trunc_ln_fu_291_p4;
wire   [3:0] r_5_fu_327_p2;
wire   [1:0] trunc_ln13_2_fu_343_p4;
wire   [2:0] zext_ln13_fu_362_p1;
wire   [2:0] zext_ln13_2_fu_359_p1;
wire   [2:0] r_6_fu_365_p2;
wire   [2:0] t_fu_371_p2;
wire   [0:0] tmp_1_fu_377_p3;
wire   [2:0] select_ln16_fu_385_p3;
wire   [2:0] and_ln18_fu_393_p2;
wire   [0:0] xor_ln18_2_fu_403_p2;
wire   [2:0] select_ln18_fu_409_p3;
wire   [2:0] and_ln18_2_fu_417_p2;
wire   [15:0] zext_ln18_fu_399_p1;
wire  signed [15:0] sext_ln18_fu_423_p1;
wire   [6:0] trunc_ln165_fu_457_p1;
wire   [2:0] trunc_ln165_5_fu_477_p1;
wire   [0:0] trunc_ln165_6_fu_489_p1;
wire   [15:0] shl_ln165_fu_451_p2;
wire   [7:0] trunc_ln8_fu_461_p3;
wire   [7:0] trunc_ln165_1_fu_469_p1;
wire   [15:0] add_ln165_fu_505_p2;
wire   [7:0] tmp_13_fu_517_p4;
wire   [7:0] add_ln5_fu_511_p2;
wire   [8:0] zext_ln10_3_fu_527_p1;
wire   [8:0] zext_ln10_1_fu_531_p1;
wire   [8:0] r_7_fu_541_p2;
wire   [4:0] tmp_14_fu_547_p4;
wire   [3:0] trunc_ln165_3_fu_481_p3;
wire   [3:0] trunc_ln165_2_fu_473_p1;
wire   [1:0] trunc_ln165_4_fu_493_p3;
wire   [1:0] trunc_ln165_7_fu_501_p1;
wire   [3:0] add_ln11_5_fu_561_p2;
wire   [3:0] trunc_ln11_8_fu_567_p4;
wire   [3:0] add_ln11_7_fu_593_p2;
wire   [5:0] zext_ln11_3_fu_557_p1;
wire   [5:0] zext_ln11_1_fu_599_p1;
wire   [5:0] r_8_fu_603_p2;
wire   [1:0] add_ln11_6_fu_587_p2;
wire   [1:0] trunc_ln11_9_fu_577_p4;
wire   [7:0] add_ln10_3_fu_535_p2;
wire   [1:0] add_ln12_5_fu_619_p2;
wire   [1:0] trunc_ln12_4_fu_625_p4;
wire   [3:0] zext_ln12_1_fu_651_p1;
wire   [3:0] r_9_fu_654_p2;
wire   [1:0] tmp_15_fu_659_p4;
wire   [1:0] add_ln13_4_fu_673_p2;
wire   [2:0] zext_ln13_3_fu_669_p1;
wire   [2:0] zext_ln13_1_fu_677_p1;
wire   [2:0] r_10_fu_681_p2;
wire   [2:0] t_1_fu_687_p2;
wire   [0:0] tmp_2_fu_693_p3;
wire   [2:0] select_ln16_1_fu_701_p3;
wire   [2:0] and_ln18_3_fu_709_p2;
wire   [0:0] xor_ln18_3_fu_719_p2;
wire   [2:0] select_ln18_1_fu_725_p3;
wire   [2:0] and_ln18_4_fu_733_p2;
wire   [15:0] zext_ln18_2_fu_715_p1;
wire  signed [15:0] sext_ln18_1_fu_739_p1;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_129 <= i_reg_753;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_129 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_1_reg_140 <= i_4_reg_787;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_reg_140 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln12_6_reg_803 <= add_ln12_6_fu_635_p2;
        trunc_ln12_3_reg_798 <= {{r_8_fu_603_p2[5:2]}};
        trunc_ln13_4_reg_809 <= {{r_8_fu_603_p2[3:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln13_reg_779 <= add_ln13_fu_353_p2;
        tmp_11_reg_774 <= {{r_5_fu_327_p2[3:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_4_reg_787 <= i_4_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_753 <= i_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_fu_434_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        r_coeffs_addr_22_reg_792 <= zext_ln165_fu_446_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln157_fu_151_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln159_reg_758[9 : 0] <= zext_ln159_fu_163_p1[9 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_coeffs_ce0 = 1'b1;
    end else begin
        a_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln164_fu_434_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln164_fu_434_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_address0 = zext_ln165_fu_446_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_coeffs_address0 = r_coeffs_addr_reg_768;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        r_coeffs_address0 = zext_ln159_reg_758;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        r_coeffs_address0 = 64'd676;
    end else begin
        r_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        r_coeffs_address1 = r_coeffs_addr_22_reg_792;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_address1 = 64'd676;
    end else begin
        r_coeffs_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        r_coeffs_ce0 = 1'b1;
    end else begin
        r_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8))) begin
        r_coeffs_ce1 = 1'b1;
    end else begin
        r_coeffs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        r_coeffs_d0 = xor_ln18_fu_427_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        r_coeffs_d0 = add_ln160_fu_192_p2;
    end else begin
        r_coeffs_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        r_coeffs_we0 = 1'b1;
    end else begin
        r_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        r_coeffs_we1 = 1'b1;
    end else begin
        r_coeffs_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln157_fu_151_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln164_fu_434_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_coeffs_address0 = zext_ln159_fu_163_p1;

assign add_ln10_3_fu_535_p2 = (add_ln5_fu_511_p2 + tmp_13_fu_517_p4);

assign add_ln10_fu_221_p2 = (tmp_fu_203_p4 + trunc_ln5_fu_199_p1);

assign add_ln11_5_fu_561_p2 = (trunc_ln165_3_fu_481_p3 + trunc_ln165_2_fu_473_p1);

assign add_ln11_6_fu_587_p2 = (trunc_ln165_4_fu_493_p3 + trunc_ln165_7_fu_501_p1);

assign add_ln11_7_fu_593_p2 = (add_ln11_5_fu_561_p2 + trunc_ln11_8_fu_567_p4);

assign add_ln11_fu_275_p2 = (trunc_ln11_fu_257_p1 + trunc_ln11_3_fu_247_p4);

assign add_ln12_3_fu_317_p2 = (trunc_ln12_2_fu_307_p4 + add_ln12_fu_301_p2);

assign add_ln12_5_fu_619_p2 = (add_ln11_6_fu_587_p2 + trunc_ln11_9_fu_577_p4);

assign add_ln12_6_fu_635_p2 = (add_ln12_5_fu_619_p2 + trunc_ln12_4_fu_625_p4);

assign add_ln12_fu_301_p2 = (trunc_ln11_1_fu_261_p1 + trunc_ln11_6_fu_265_p4);

assign add_ln13_4_fu_673_p2 = (trunc_ln13_4_reg_809 + add_ln12_6_reg_803);

assign add_ln13_fu_353_p2 = (add_ln12_3_fu_317_p2 + trunc_ln13_2_fu_343_p4);

assign add_ln160_fu_192_p2 = (xor_ln159_fu_186_p2 + a_coeffs_q0);

assign add_ln165_fu_505_p2 = (r_coeffs_q0 + shl_ln165_fu_451_p2);

assign add_ln5_fu_511_p2 = (trunc_ln8_fu_461_p3 + trunc_ln165_1_fu_469_p1);

assign and_ln18_2_fu_417_p2 = (t_fu_371_p2 & select_ln18_fu_409_p3);

assign and_ln18_3_fu_709_p2 = (select_ln16_1_fu_701_p3 & r_10_fu_681_p2);

assign and_ln18_4_fu_733_p2 = (t_1_fu_687_p2 & select_ln18_1_fu_725_p3);

assign and_ln18_fu_393_p2 = (select_ln16_fu_385_p3 & r_6_fu_365_p2);

assign and_ln_fu_178_p3 = {{tmp_12_fu_168_p4}, {11'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign i_4_fu_440_p2 = (i_1_reg_140 + 10'd1);

assign i_fu_157_p2 = (i_0_reg_129 + 10'd1);

assign icmp_ln157_fu_151_p2 = ((i_0_reg_129 == 10'd677) ? 1'b1 : 1'b0);

assign icmp_ln164_fu_434_p2 = ((i_1_reg_140 == 10'd677) ? 1'b1 : 1'b0);

assign r_10_fu_681_p2 = (zext_ln13_3_fu_669_p1 + zext_ln13_1_fu_677_p1);

assign r_4_fu_285_p2 = (zext_ln11_fu_281_p1 + zext_ln11_2_fu_243_p1);

assign r_5_fu_327_p2 = (zext_ln12_fu_323_p1 + trunc_ln_fu_291_p4);

assign r_6_fu_365_p2 = (zext_ln13_fu_362_p1 + zext_ln13_2_fu_359_p1);

assign r_7_fu_541_p2 = (zext_ln10_3_fu_527_p1 + zext_ln10_1_fu_531_p1);

assign r_8_fu_603_p2 = (zext_ln11_3_fu_557_p1 + zext_ln11_1_fu_599_p1);

assign r_9_fu_654_p2 = (trunc_ln12_3_reg_798 + zext_ln12_1_fu_651_p1);

assign r_coeffs_addr_reg_768 = 64'd676;

assign r_coeffs_d1 = (zext_ln18_2_fu_715_p1 ^ sext_ln18_1_fu_739_p1);

assign r_fu_227_p2 = (zext_ln10_fu_217_p1 + zext_ln10_2_fu_213_p1);

assign select_ln16_1_fu_701_p3 = ((tmp_2_fu_693_p3[0:0] === 1'b1) ? 3'd7 : 3'd0);

assign select_ln16_fu_385_p3 = ((tmp_1_fu_377_p3[0:0] === 1'b1) ? 3'd7 : 3'd0);

assign select_ln18_1_fu_725_p3 = ((xor_ln18_3_fu_719_p2[0:0] === 1'b1) ? 3'd7 : 3'd0);

assign select_ln18_fu_409_p3 = ((xor_ln18_2_fu_403_p2[0:0] === 1'b1) ? 3'd7 : 3'd0);

assign sext_ln18_1_fu_739_p1 = $signed(and_ln18_4_fu_733_p2);

assign sext_ln18_fu_423_p1 = $signed(and_ln18_2_fu_417_p2);

assign shl_ln165_fu_451_p2 = r_coeffs_q1 << 16'd1;

assign t_1_fu_687_p2 = ($signed(3'd5) + $signed(r_10_fu_681_p2));

assign t_fu_371_p2 = ($signed(3'd5) + $signed(r_6_fu_365_p2));

assign tmp_12_fu_168_p4 = {{a_coeffs_q0[14:10]}};

assign tmp_13_fu_517_p4 = {{add_ln165_fu_505_p2[15:8]}};

assign tmp_14_fu_547_p4 = {{r_7_fu_541_p2[8:4]}};

assign tmp_15_fu_659_p4 = {{r_9_fu_654_p2[3:2]}};

assign tmp_1_fu_377_p3 = t_fu_371_p2[32'd2];

assign tmp_2_fu_693_p3 = t_1_fu_687_p2[32'd2];

assign tmp_fu_203_p4 = {{r_coeffs_q0[15:8]}};

assign tmp_s_fu_233_p4 = {{r_fu_227_p2[8:4]}};

assign trunc_ln11_1_fu_261_p1 = r_coeffs_q0[1:0];

assign trunc_ln11_3_fu_247_p4 = {{r_coeffs_q0[11:8]}};

assign trunc_ln11_6_fu_265_p4 = {{r_coeffs_q0[9:8]}};

assign trunc_ln11_8_fu_567_p4 = {{add_ln165_fu_505_p2[11:8]}};

assign trunc_ln11_9_fu_577_p4 = {{add_ln165_fu_505_p2[9:8]}};

assign trunc_ln11_fu_257_p1 = r_coeffs_q0[3:0];

assign trunc_ln12_2_fu_307_p4 = {{add_ln10_fu_221_p2[5:4]}};

assign trunc_ln12_4_fu_625_p4 = {{add_ln10_3_fu_535_p2[5:4]}};

assign trunc_ln13_2_fu_343_p4 = {{r_4_fu_285_p2[3:2]}};

assign trunc_ln165_1_fu_469_p1 = r_coeffs_q0[7:0];

assign trunc_ln165_2_fu_473_p1 = r_coeffs_q0[3:0];

assign trunc_ln165_3_fu_481_p3 = {{trunc_ln165_5_fu_477_p1}, {1'd0}};

assign trunc_ln165_4_fu_493_p3 = {{trunc_ln165_6_fu_489_p1}, {1'd0}};

assign trunc_ln165_5_fu_477_p1 = r_coeffs_q1[2:0];

assign trunc_ln165_6_fu_489_p1 = r_coeffs_q1[0:0];

assign trunc_ln165_7_fu_501_p1 = r_coeffs_q0[1:0];

assign trunc_ln165_fu_457_p1 = r_coeffs_q1[6:0];

assign trunc_ln5_fu_199_p1 = r_coeffs_q0[7:0];

assign trunc_ln8_fu_461_p3 = {{trunc_ln165_fu_457_p1}, {1'd0}};

assign trunc_ln_fu_291_p4 = {{r_4_fu_285_p2[5:2]}};

assign xor_ln159_fu_186_p2 = (16'd6144 ^ and_ln_fu_178_p3);

assign xor_ln18_2_fu_403_p2 = (tmp_1_fu_377_p3 ^ 1'd1);

assign xor_ln18_3_fu_719_p2 = (tmp_2_fu_693_p3 ^ 1'd1);

assign xor_ln18_fu_427_p2 = (zext_ln18_fu_399_p1 ^ sext_ln18_fu_423_p1);

assign zext_ln10_1_fu_531_p1 = add_ln5_fu_511_p2;

assign zext_ln10_2_fu_213_p1 = tmp_fu_203_p4;

assign zext_ln10_3_fu_527_p1 = tmp_13_fu_517_p4;

assign zext_ln10_fu_217_p1 = trunc_ln5_fu_199_p1;

assign zext_ln11_1_fu_599_p1 = add_ln11_7_fu_593_p2;

assign zext_ln11_2_fu_243_p1 = tmp_s_fu_233_p4;

assign zext_ln11_3_fu_557_p1 = tmp_14_fu_547_p4;

assign zext_ln11_fu_281_p1 = add_ln11_fu_275_p2;

assign zext_ln12_1_fu_651_p1 = add_ln12_6_reg_803;

assign zext_ln12_fu_323_p1 = add_ln12_3_fu_317_p2;

assign zext_ln13_1_fu_677_p1 = add_ln13_4_fu_673_p2;

assign zext_ln13_2_fu_359_p1 = tmp_11_reg_774;

assign zext_ln13_3_fu_669_p1 = tmp_15_fu_659_p4;

assign zext_ln13_fu_362_p1 = add_ln13_reg_779;

assign zext_ln159_fu_163_p1 = i_0_reg_129;

assign zext_ln165_fu_446_p1 = i_1_reg_140;

assign zext_ln18_2_fu_715_p1 = and_ln18_3_fu_709_p2;

assign zext_ln18_fu_399_p1 = and_ln18_fu_393_p2;

always @ (posedge ap_clk) begin
    zext_ln159_reg_758[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //poly_Rq_to_S3
