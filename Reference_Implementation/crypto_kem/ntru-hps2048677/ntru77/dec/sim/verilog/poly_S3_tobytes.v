// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module poly_S3_tobytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        msg_address0,
        msg_ce0,
        msg_we0,
        msg_d0,
        msg_offset,
        a_coeffs_address0,
        a_coeffs_ce0,
        a_coeffs_q0,
        a_coeffs_address1,
        a_coeffs_ce1,
        a_coeffs_q1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] msg_address0;
output   msg_ce0;
output   msg_we0;
output  [7:0] msg_d0;
input  [8:0] msg_offset;
output  [9:0] a_coeffs_address0;
output   a_coeffs_ce0;
input  [15:0] a_coeffs_q0;
output  [9:0] a_coeffs_address1;
output   a_coeffs_ce1;
input  [15:0] a_coeffs_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] msg_address0;
reg msg_ce0;
reg msg_we0;
reg[7:0] msg_d0;
reg[9:0] a_coeffs_address0;
reg a_coeffs_ce0;
reg[9:0] a_coeffs_address1;
reg a_coeffs_ce1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] i_fu_147_p2;
reg   [7:0] i_reg_342;
wire    ap_CS_fsm_state2;
wire   [9:0] add_ln13_1_fu_161_p2;
reg   [9:0] add_ln13_1_reg_347;
wire   [0:0] icmp_ln11_fu_141_p2;
wire   [7:0] c_1_fu_215_p2;
reg   [7:0] c_1_reg_369;
wire    ap_CS_fsm_state3;
wire   [8:0] add_ln18_fu_235_p2;
reg   [8:0] add_ln18_reg_380;
wire   [7:0] c_2_fu_254_p2;
reg   [7:0] c_2_reg_385;
wire    ap_CS_fsm_state4;
wire   [7:0] c_3_fu_288_p2;
reg   [7:0] c_3_reg_401;
wire    ap_CS_fsm_state5;
wire   [7:0] trunc_ln17_fu_294_p1;
reg   [7:0] trunc_ln17_reg_407;
reg   [7:0] i_0_reg_125;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln13_fu_173_p1;
wire   [63:0] zext_ln14_fu_184_p1;
wire   [63:0] zext_ln15_fu_226_p1;
wire   [63:0] zext_ln16_fu_265_p1;
wire   [63:0] zext_ln17_fu_270_p1;
wire   [63:0] zext_ln18_1_fu_314_p1;
wire   [63:0] zext_ln25_fu_328_p1;
wire    ap_CS_fsm_state7;
wire   [7:0] c_4_fu_308_p2;
wire   [7:0] trunc_ln24_fu_318_p1;
wire   [9:0] shl_ln_fu_153_p3;
wire   [9:0] zext_ln11_fu_137_p1;
wire   [9:0] add_ln13_fu_167_p2;
wire   [9:0] add_ln14_fu_178_p2;
wire   [5:0] trunc_ln14_fu_193_p1;
wire   [7:0] shl_ln7_fu_197_p3;
wire   [7:0] c_fu_189_p1;
wire   [7:0] sub_ln14_fu_205_p2;
wire   [7:0] trunc_ln14_1_fu_211_p1;
wire   [9:0] add_ln15_fu_221_p2;
wire   [8:0] zext_ln18_fu_231_p1;
wire   [7:0] shl_ln15_fu_240_p2;
wire   [7:0] trunc_ln15_fu_250_p1;
wire   [7:0] sub_ln15_fu_245_p2;
wire   [9:0] add_ln16_fu_260_p2;
wire   [7:0] shl_ln16_fu_274_p2;
wire   [7:0] trunc_ln16_fu_284_p1;
wire   [7:0] sub_ln16_fu_279_p2;
wire   [7:0] shl_ln17_fu_298_p2;
wire   [7:0] sub_ln17_fu_303_p2;
wire   [8:0] add_ln25_fu_323_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_reg_125 <= i_reg_342;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_125 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln13_1_reg_347 <= add_ln13_1_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln18_reg_380 <= add_ln18_fu_235_p2;
        c_1_reg_369 <= c_1_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_2_reg_385 <= c_2_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_3_reg_401 <= c_3_fu_288_p2;
        trunc_ln17_reg_407 <= trunc_ln17_fu_294_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_342 <= i_fu_147_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_coeffs_address0 = zext_ln16_fu_265_p1;
    end else if (((icmp_ln11_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        a_coeffs_address0 = 64'd675;
    end else if (((icmp_ln11_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_coeffs_address0 = zext_ln13_fu_173_p1;
    end else begin
        a_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_coeffs_address1 = zext_ln17_fu_270_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_coeffs_address1 = zext_ln15_fu_226_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_coeffs_address1 = zext_ln14_fu_184_p1;
    end else begin
        a_coeffs_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln11_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln11_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        a_coeffs_ce0 = 1'b1;
    end else begin
        a_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        a_coeffs_ce1 = 1'b1;
    end else begin
        a_coeffs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        msg_address0 = zext_ln25_fu_328_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        msg_address0 = zext_ln18_1_fu_314_p1;
    end else begin
        msg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        msg_ce0 = 1'b1;
    end else begin
        msg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        msg_d0 = trunc_ln24_fu_318_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        msg_d0 = c_4_fu_308_p2;
    end else begin
        msg_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        msg_we0 = 1'b1;
    end else begin
        msg_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln11_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_1_fu_161_p2 = (shl_ln_fu_153_p3 + zext_ln11_fu_137_p1);

assign add_ln13_fu_167_p2 = (10'd4 + add_ln13_1_fu_161_p2);

assign add_ln14_fu_178_p2 = (10'd3 + add_ln13_1_fu_161_p2);

assign add_ln15_fu_221_p2 = (10'd2 + add_ln13_1_reg_347);

assign add_ln16_fu_260_p2 = (10'd1 + add_ln13_1_reg_347);

assign add_ln18_fu_235_p2 = (msg_offset + zext_ln18_fu_231_p1);

assign add_ln25_fu_323_p2 = (9'd135 + msg_offset);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign c_1_fu_215_p2 = (sub_ln14_fu_205_p2 + trunc_ln14_1_fu_211_p1);

assign c_2_fu_254_p2 = (trunc_ln15_fu_250_p1 + sub_ln15_fu_245_p2);

assign c_3_fu_288_p2 = (trunc_ln16_fu_284_p1 + sub_ln16_fu_279_p2);

assign c_4_fu_308_p2 = (trunc_ln17_reg_407 + sub_ln17_fu_303_p2);

assign c_fu_189_p1 = a_coeffs_q0[7:0];

assign i_fu_147_p2 = (i_0_reg_125 + 8'd1);

assign icmp_ln11_fu_141_p2 = ((i_0_reg_125 == 8'd135) ? 1'b1 : 1'b0);

assign shl_ln15_fu_240_p2 = c_1_reg_369 << 8'd2;

assign shl_ln16_fu_274_p2 = c_2_reg_385 << 8'd2;

assign shl_ln17_fu_298_p2 = c_3_reg_401 << 8'd2;

assign shl_ln7_fu_197_p3 = {{trunc_ln14_fu_193_p1}, {2'd0}};

assign shl_ln_fu_153_p3 = {{i_0_reg_125}, {2'd0}};

assign sub_ln14_fu_205_p2 = (shl_ln7_fu_197_p3 - c_fu_189_p1);

assign sub_ln15_fu_245_p2 = (shl_ln15_fu_240_p2 - c_1_reg_369);

assign sub_ln16_fu_279_p2 = (shl_ln16_fu_274_p2 - c_2_reg_385);

assign sub_ln17_fu_303_p2 = (shl_ln17_fu_298_p2 - c_3_reg_401);

assign trunc_ln14_1_fu_211_p1 = a_coeffs_q1[7:0];

assign trunc_ln14_fu_193_p1 = a_coeffs_q0[5:0];

assign trunc_ln15_fu_250_p1 = a_coeffs_q1[7:0];

assign trunc_ln16_fu_284_p1 = a_coeffs_q0[7:0];

assign trunc_ln17_fu_294_p1 = a_coeffs_q1[7:0];

assign trunc_ln24_fu_318_p1 = a_coeffs_q0[7:0];

assign zext_ln11_fu_137_p1 = i_0_reg_125;

assign zext_ln13_fu_173_p1 = add_ln13_fu_167_p2;

assign zext_ln14_fu_184_p1 = add_ln14_fu_178_p2;

assign zext_ln15_fu_226_p1 = add_ln15_fu_221_p2;

assign zext_ln16_fu_265_p1 = add_ln16_fu_260_p2;

assign zext_ln17_fu_270_p1 = add_ln13_1_reg_347;

assign zext_ln18_1_fu_314_p1 = add_ln18_reg_380;

assign zext_ln18_fu_231_p1 = i_0_reg_125;

assign zext_ln25_fu_328_p1 = add_ln25_fu_323_p2;

endmodule //poly_S3_tobytes
