// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "crypto_kem_dec.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic crypto_kem_dec::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic crypto_kem_dec::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> crypto_kem_dec::ap_ST_fsm_state1 = "1";
const sc_lv<11> crypto_kem_dec::ap_ST_fsm_state2 = "10";
const sc_lv<11> crypto_kem_dec::ap_ST_fsm_state3 = "100";
const sc_lv<11> crypto_kem_dec::ap_ST_fsm_state4 = "1000";
const sc_lv<11> crypto_kem_dec::ap_ST_fsm_state5 = "10000";
const sc_lv<11> crypto_kem_dec::ap_ST_fsm_state6 = "100000";
const sc_lv<11> crypto_kem_dec::ap_ST_fsm_state7 = "1000000";
const sc_lv<11> crypto_kem_dec::ap_ST_fsm_state8 = "10000000";
const sc_lv<11> crypto_kem_dec::ap_ST_fsm_state9 = "100000000";
const sc_lv<11> crypto_kem_dec::ap_ST_fsm_state10 = "1000000000";
const sc_lv<11> crypto_kem_dec::ap_ST_fsm_state11 = "10000000000";
const sc_lv<32> crypto_kem_dec::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> crypto_kem_dec::ap_const_lv32_1 = "1";
const sc_lv<32> crypto_kem_dec::ap_const_lv32_4 = "100";
const sc_lv<1> crypto_kem_dec::ap_const_lv1_0 = "0";
const sc_lv<32> crypto_kem_dec::ap_const_lv32_6 = "110";
const sc_lv<32> crypto_kem_dec::ap_const_lv32_8 = "1000";
const sc_lv<32> crypto_kem_dec::ap_const_lv32_9 = "1001";
const sc_lv<6> crypto_kem_dec::ap_const_lv6_0 = "000000";
const sc_lv<32> crypto_kem_dec::ap_const_lv32_3 = "11";
const sc_lv<32> crypto_kem_dec::ap_const_lv32_5 = "101";
const sc_lv<32> crypto_kem_dec::ap_const_lv32_7 = "111";
const sc_lv<10> crypto_kem_dec::ap_const_lv10_0 = "0000000000";
const sc_lv<1> crypto_kem_dec::ap_const_lv1_1 = "1";
const sc_lv<32> crypto_kem_dec::ap_const_lv32_A = "1010";
const sc_lv<32> crypto_kem_dec::ap_const_lv32_2 = "10";
const sc_lv<6> crypto_kem_dec::ap_const_lv6_20 = "100000";
const sc_lv<6> crypto_kem_dec::ap_const_lv6_1 = "1";
const sc_lv<11> crypto_kem_dec::ap_const_lv11_4B2 = "10010110010";
const sc_lv<10> crypto_kem_dec::ap_const_lv10_3A2 = "1110100010";
const sc_lv<10> crypto_kem_dec::ap_const_lv10_1 = "1";
const sc_lv<10> crypto_kem_dec::ap_const_lv10_20 = "100000";
const sc_lv<8> crypto_kem_dec::ap_const_lv8_FF = "11111111";
const sc_lv<8> crypto_kem_dec::ap_const_lv8_0 = "00000000";
const bool crypto_kem_dec::ap_const_boolean_1 = true;

crypto_kem_dec::crypto_kem_dec(sc_module_name name) : sc_module(name), mVcdFile(0) {
    rm_U = new crypto_kem_dec_rm("rm_U");
    rm_U->clk(ap_clk);
    rm_U->reset(ap_rst);
    rm_U->address0(rm_address0);
    rm_U->ce0(rm_ce0);
    rm_U->we0(rm_we0);
    rm_U->d0(rm_d0);
    rm_U->q0(rm_q0);
    buf_U = new crypto_kem_dec_buf("buf_U");
    buf_U->clk(ap_clk);
    buf_U->reset(ap_rst);
    buf_U->address0(buf_address0);
    buf_U->ce0(buf_ce0);
    buf_U->we0(buf_we0);
    buf_U->d0(buf_d0);
    buf_U->q0(buf_q0);
    grp_sha3_256_fu_167 = new sha3_256("grp_sha3_256_fu_167");
    grp_sha3_256_fu_167->ap_clk(ap_clk);
    grp_sha3_256_fu_167->ap_rst(ap_rst);
    grp_sha3_256_fu_167->ap_start(grp_sha3_256_fu_167_ap_start);
    grp_sha3_256_fu_167->ap_done(grp_sha3_256_fu_167_ap_done);
    grp_sha3_256_fu_167->ap_idle(grp_sha3_256_fu_167_ap_idle);
    grp_sha3_256_fu_167->ap_ready(grp_sha3_256_fu_167_ap_ready);
    grp_sha3_256_fu_167->output_r_address0(grp_sha3_256_fu_167_output_r_address0);
    grp_sha3_256_fu_167->output_r_ce0(grp_sha3_256_fu_167_output_r_ce0);
    grp_sha3_256_fu_167->output_r_we0(grp_sha3_256_fu_167_output_r_we0);
    grp_sha3_256_fu_167->output_r_d0(grp_sha3_256_fu_167_output_r_d0);
    grp_sha3_256_fu_167->input_r_address0(grp_sha3_256_fu_167_input_r_address0);
    grp_sha3_256_fu_167->input_r_ce0(grp_sha3_256_fu_167_input_r_ce0);
    grp_sha3_256_fu_167->input_r_q0(buf_q0);
    grp_sha3_256_1_fu_175 = new sha3_256_1("grp_sha3_256_1_fu_175");
    grp_sha3_256_1_fu_175->ap_clk(ap_clk);
    grp_sha3_256_1_fu_175->ap_rst(ap_rst);
    grp_sha3_256_1_fu_175->ap_start(grp_sha3_256_1_fu_175_ap_start);
    grp_sha3_256_1_fu_175->ap_done(grp_sha3_256_1_fu_175_ap_done);
    grp_sha3_256_1_fu_175->ap_idle(grp_sha3_256_1_fu_175_ap_idle);
    grp_sha3_256_1_fu_175->ap_ready(grp_sha3_256_1_fu_175_ap_ready);
    grp_sha3_256_1_fu_175->output_r_address0(grp_sha3_256_1_fu_175_output_r_address0);
    grp_sha3_256_1_fu_175->output_r_ce0(grp_sha3_256_1_fu_175_output_r_ce0);
    grp_sha3_256_1_fu_175->output_r_we0(grp_sha3_256_1_fu_175_output_r_we0);
    grp_sha3_256_1_fu_175->output_r_d0(grp_sha3_256_1_fu_175_output_r_d0);
    grp_sha3_256_1_fu_175->input_r_address0(grp_sha3_256_1_fu_175_input_r_address0);
    grp_sha3_256_1_fu_175->input_r_ce0(grp_sha3_256_1_fu_175_input_r_ce0);
    grp_sha3_256_1_fu_175->input_r_q0(rm_q0);
    grp_owcpa_dec_fu_184 = new owcpa_dec("grp_owcpa_dec_fu_184");
    grp_owcpa_dec_fu_184->ap_clk(ap_clk);
    grp_owcpa_dec_fu_184->ap_rst(ap_rst);
    grp_owcpa_dec_fu_184->ap_start(grp_owcpa_dec_fu_184_ap_start);
    grp_owcpa_dec_fu_184->ap_done(grp_owcpa_dec_fu_184_ap_done);
    grp_owcpa_dec_fu_184->ap_idle(grp_owcpa_dec_fu_184_ap_idle);
    grp_owcpa_dec_fu_184->ap_ready(grp_owcpa_dec_fu_184_ap_ready);
    grp_owcpa_dec_fu_184->rm_address0(grp_owcpa_dec_fu_184_rm_address0);
    grp_owcpa_dec_fu_184->rm_ce0(grp_owcpa_dec_fu_184_rm_ce0);
    grp_owcpa_dec_fu_184->rm_we0(grp_owcpa_dec_fu_184_rm_we0);
    grp_owcpa_dec_fu_184->rm_d0(grp_owcpa_dec_fu_184_rm_d0);
    grp_owcpa_dec_fu_184->ciphertext_address0(grp_owcpa_dec_fu_184_ciphertext_address0);
    grp_owcpa_dec_fu_184->ciphertext_ce0(grp_owcpa_dec_fu_184_ciphertext_ce0);
    grp_owcpa_dec_fu_184->ciphertext_q0(c_q0);
    grp_owcpa_dec_fu_184->ciphertext_address1(grp_owcpa_dec_fu_184_ciphertext_address1);
    grp_owcpa_dec_fu_184->ciphertext_ce1(grp_owcpa_dec_fu_184_ciphertext_ce1);
    grp_owcpa_dec_fu_184->ciphertext_q1(c_q1);
    grp_owcpa_dec_fu_184->secretkey_address0(grp_owcpa_dec_fu_184_secretkey_address0);
    grp_owcpa_dec_fu_184->secretkey_ce0(grp_owcpa_dec_fu_184_secretkey_ce0);
    grp_owcpa_dec_fu_184->secretkey_q0(sk_q0);
    grp_owcpa_dec_fu_184->secretkey_address1(grp_owcpa_dec_fu_184_secretkey_address1);
    grp_owcpa_dec_fu_184->secretkey_ce1(grp_owcpa_dec_fu_184_secretkey_ce1);
    grp_owcpa_dec_fu_184->secretkey_q1(sk_q1);
    grp_owcpa_dec_fu_184->ap_return(grp_owcpa_dec_fu_184_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond_i_fu_267_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond_i_fu_267_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond_i_fu_267_p2 );

    SC_METHOD(thread_b_assign_fu_254_p3);
    sensitive << ( fail_reg_297 );

    SC_METHOD(thread_buf_address0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha3_256_fu_167_input_r_address0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_213_fu_221_p1 );
    sensitive << ( cmp_0_sum_cast_fu_249_p1 );

    SC_METHOD(thread_buf_ce0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha3_256_fu_167_input_r_ce0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_buf_d0);
    sensitive << ( c_q0 );
    sensitive << ( sk_q0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_buf_we0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_c_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_owcpa_dec_fu_184_ciphertext_address0 );
    sensitive << ( tmp_214_fu_238_p1 );

    SC_METHOD(thread_c_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_owcpa_dec_fu_184_ciphertext_address1 );

    SC_METHOD(thread_c_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_owcpa_dec_fu_184_ciphertext_ce0 );

    SC_METHOD(thread_c_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_owcpa_dec_fu_184_ciphertext_ce1 );

    SC_METHOD(thread_cmp_0_sum_cast_fu_249_p1);
    sensitive << ( cmp_0_sum_fu_243_p2 );

    SC_METHOD(thread_cmp_0_sum_fu_243_p2);
    sensitive << ( i_1_reg_144 );

    SC_METHOD(thread_exitcond1_fu_198_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i_reg_132 );

    SC_METHOD(thread_exitcond_fu_226_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( i_1_reg_144 );

    SC_METHOD(thread_exitcond_i_fu_267_p2);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( i_i_reg_156 );

    SC_METHOD(thread_grp_owcpa_dec_fu_184_ap_start);
    sensitive << ( grp_owcpa_dec_fu_184_ap_start_reg );

    SC_METHOD(thread_grp_sha3_256_1_fu_175_ap_start);
    sensitive << ( grp_sha3_256_1_fu_175_ap_start_reg );

    SC_METHOD(thread_grp_sha3_256_fu_167_ap_start);
    sensitive << ( grp_sha3_256_fu_167_ap_start_reg );

    SC_METHOD(thread_i_30_fu_204_p2);
    sensitive << ( i_reg_132 );

    SC_METHOD(thread_i_31_fu_232_p2);
    sensitive << ( i_1_reg_144 );

    SC_METHOD(thread_i_32_fu_273_p2);
    sensitive << ( i_i_reg_156 );

    SC_METHOD(thread_i_cast4_fu_194_p1);
    sensitive << ( i_reg_132 );

    SC_METHOD(thread_i_i_cast1_fu_261_p1);
    sensitive << ( i_i_reg_156 );

    SC_METHOD(thread_k_address0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( k_addr_reg_346 );
    sensitive << ( grp_sha3_256_1_fu_175_output_r_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( i_i_cast1_fu_261_p1 );

    SC_METHOD(thread_k_ce0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( grp_sha3_256_1_fu_175_output_r_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_k_d0);
    sensitive << ( grp_sha3_256_1_fu_175_output_r_d0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_248_i_fu_290_p2 );

    SC_METHOD(thread_k_we0);
    sensitive << ( grp_sha3_256_1_fu_175_output_r_we0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_rm_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( grp_sha3_256_fu_167_output_r_address0 );
    sensitive << ( grp_sha3_256_1_fu_175_input_r_address0 );
    sensitive << ( grp_owcpa_dec_fu_184_rm_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_i_cast1_fu_261_p1 );

    SC_METHOD(thread_rm_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( grp_sha3_256_fu_167_output_r_ce0 );
    sensitive << ( grp_sha3_256_1_fu_175_input_r_ce0 );
    sensitive << ( grp_owcpa_dec_fu_184_rm_ce0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_rm_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha3_256_fu_167_output_r_d0 );
    sensitive << ( grp_owcpa_dec_fu_184_rm_d0 );

    SC_METHOD(thread_rm_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha3_256_fu_167_output_r_we0 );
    sensitive << ( grp_owcpa_dec_fu_184_rm_we0 );

    SC_METHOD(thread_sk_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_owcpa_dec_fu_184_secretkey_address0 );
    sensitive << ( tmp_s_fu_216_p1 );

    SC_METHOD(thread_sk_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_owcpa_dec_fu_184_secretkey_address1 );

    SC_METHOD(thread_sk_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_owcpa_dec_fu_184_secretkey_ce0 );

    SC_METHOD(thread_sk_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_owcpa_dec_fu_184_secretkey_ce1 );

    SC_METHOD(thread_tmp_213_fu_221_p1);
    sensitive << ( i_reg_132 );

    SC_METHOD(thread_tmp_214_fu_238_p1);
    sensitive << ( i_1_reg_144 );

    SC_METHOD(thread_tmp_248_i_fu_290_p2);
    sensitive << ( k_q0 );
    sensitive << ( tmp_i_63_fu_285_p2 );

    SC_METHOD(thread_tmp_fu_210_p2);
    sensitive << ( i_cast4_fu_194_p1 );

    SC_METHOD(thread_tmp_i_63_fu_285_p2);
    sensitive << ( b_assign_reg_328 );
    sensitive << ( tmp_i_fu_279_p2 );

    SC_METHOD(thread_tmp_i_fu_279_p2);
    sensitive << ( k_q0 );
    sensitive << ( rm_q0 );

    SC_METHOD(thread_tmp_s_fu_216_p1);
    sensitive << ( tmp_fu_210_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_owcpa_dec_fu_184_ap_done );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond1_fu_198_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( exitcond_fu_226_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_sha3_256_fu_167_ap_done );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond_i_fu_267_p2 );
    sensitive << ( grp_sha3_256_1_fu_175_ap_done );
    sensitive << ( ap_CS_fsm_state4 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000000001";
    grp_sha3_256_fu_167_ap_start_reg = SC_LOGIC_0;
    grp_sha3_256_1_fu_175_ap_start_reg = SC_LOGIC_0;
    grp_owcpa_dec_fu_184_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "crypto_kem_dec_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, k_address0, "(port)k_address0");
    sc_trace(mVcdFile, k_ce0, "(port)k_ce0");
    sc_trace(mVcdFile, k_we0, "(port)k_we0");
    sc_trace(mVcdFile, k_d0, "(port)k_d0");
    sc_trace(mVcdFile, k_q0, "(port)k_q0");
    sc_trace(mVcdFile, c_address0, "(port)c_address0");
    sc_trace(mVcdFile, c_ce0, "(port)c_ce0");
    sc_trace(mVcdFile, c_q0, "(port)c_q0");
    sc_trace(mVcdFile, c_address1, "(port)c_address1");
    sc_trace(mVcdFile, c_ce1, "(port)c_ce1");
    sc_trace(mVcdFile, c_q1, "(port)c_q1");
    sc_trace(mVcdFile, sk_address0, "(port)sk_address0");
    sc_trace(mVcdFile, sk_ce0, "(port)sk_ce0");
    sc_trace(mVcdFile, sk_q0, "(port)sk_q0");
    sc_trace(mVcdFile, sk_address1, "(port)sk_address1");
    sc_trace(mVcdFile, sk_ce1, "(port)sk_ce1");
    sc_trace(mVcdFile, sk_q1, "(port)sk_q1");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_owcpa_dec_fu_184_ap_return, "grp_owcpa_dec_fu_184_ap_return");
    sc_trace(mVcdFile, fail_reg_297, "fail_reg_297");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_owcpa_dec_fu_184_ap_ready, "grp_owcpa_dec_fu_184_ap_ready");
    sc_trace(mVcdFile, grp_owcpa_dec_fu_184_ap_done, "grp_owcpa_dec_fu_184_ap_done");
    sc_trace(mVcdFile, i_30_fu_204_p2, "i_30_fu_204_p2");
    sc_trace(mVcdFile, i_30_reg_305, "i_30_reg_305");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, exitcond1_fu_198_p2, "exitcond1_fu_198_p2");
    sc_trace(mVcdFile, i_31_fu_232_p2, "i_31_fu_232_p2");
    sc_trace(mVcdFile, i_31_reg_318, "i_31_reg_318");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, exitcond_fu_226_p2, "exitcond_fu_226_p2");
    sc_trace(mVcdFile, b_assign_fu_254_p3, "b_assign_fu_254_p3");
    sc_trace(mVcdFile, b_assign_reg_328, "b_assign_reg_328");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_sha3_256_fu_167_ap_ready, "grp_sha3_256_fu_167_ap_ready");
    sc_trace(mVcdFile, grp_sha3_256_fu_167_ap_done, "grp_sha3_256_fu_167_ap_done");
    sc_trace(mVcdFile, i_32_fu_273_p2, "i_32_fu_273_p2");
    sc_trace(mVcdFile, i_32_reg_336, "i_32_reg_336");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, exitcond_i_fu_267_p2, "exitcond_i_fu_267_p2");
    sc_trace(mVcdFile, k_addr_reg_346, "k_addr_reg_346");
    sc_trace(mVcdFile, rm_address0, "rm_address0");
    sc_trace(mVcdFile, rm_ce0, "rm_ce0");
    sc_trace(mVcdFile, rm_we0, "rm_we0");
    sc_trace(mVcdFile, rm_d0, "rm_d0");
    sc_trace(mVcdFile, rm_q0, "rm_q0");
    sc_trace(mVcdFile, buf_address0, "buf_address0");
    sc_trace(mVcdFile, buf_ce0, "buf_ce0");
    sc_trace(mVcdFile, buf_we0, "buf_we0");
    sc_trace(mVcdFile, buf_d0, "buf_d0");
    sc_trace(mVcdFile, buf_q0, "buf_q0");
    sc_trace(mVcdFile, grp_sha3_256_fu_167_ap_start, "grp_sha3_256_fu_167_ap_start");
    sc_trace(mVcdFile, grp_sha3_256_fu_167_ap_idle, "grp_sha3_256_fu_167_ap_idle");
    sc_trace(mVcdFile, grp_sha3_256_fu_167_output_r_address0, "grp_sha3_256_fu_167_output_r_address0");
    sc_trace(mVcdFile, grp_sha3_256_fu_167_output_r_ce0, "grp_sha3_256_fu_167_output_r_ce0");
    sc_trace(mVcdFile, grp_sha3_256_fu_167_output_r_we0, "grp_sha3_256_fu_167_output_r_we0");
    sc_trace(mVcdFile, grp_sha3_256_fu_167_output_r_d0, "grp_sha3_256_fu_167_output_r_d0");
    sc_trace(mVcdFile, grp_sha3_256_fu_167_input_r_address0, "grp_sha3_256_fu_167_input_r_address0");
    sc_trace(mVcdFile, grp_sha3_256_fu_167_input_r_ce0, "grp_sha3_256_fu_167_input_r_ce0");
    sc_trace(mVcdFile, grp_sha3_256_1_fu_175_ap_start, "grp_sha3_256_1_fu_175_ap_start");
    sc_trace(mVcdFile, grp_sha3_256_1_fu_175_ap_done, "grp_sha3_256_1_fu_175_ap_done");
    sc_trace(mVcdFile, grp_sha3_256_1_fu_175_ap_idle, "grp_sha3_256_1_fu_175_ap_idle");
    sc_trace(mVcdFile, grp_sha3_256_1_fu_175_ap_ready, "grp_sha3_256_1_fu_175_ap_ready");
    sc_trace(mVcdFile, grp_sha3_256_1_fu_175_output_r_address0, "grp_sha3_256_1_fu_175_output_r_address0");
    sc_trace(mVcdFile, grp_sha3_256_1_fu_175_output_r_ce0, "grp_sha3_256_1_fu_175_output_r_ce0");
    sc_trace(mVcdFile, grp_sha3_256_1_fu_175_output_r_we0, "grp_sha3_256_1_fu_175_output_r_we0");
    sc_trace(mVcdFile, grp_sha3_256_1_fu_175_output_r_d0, "grp_sha3_256_1_fu_175_output_r_d0");
    sc_trace(mVcdFile, grp_sha3_256_1_fu_175_input_r_address0, "grp_sha3_256_1_fu_175_input_r_address0");
    sc_trace(mVcdFile, grp_sha3_256_1_fu_175_input_r_ce0, "grp_sha3_256_1_fu_175_input_r_ce0");
    sc_trace(mVcdFile, grp_owcpa_dec_fu_184_ap_start, "grp_owcpa_dec_fu_184_ap_start");
    sc_trace(mVcdFile, grp_owcpa_dec_fu_184_ap_idle, "grp_owcpa_dec_fu_184_ap_idle");
    sc_trace(mVcdFile, grp_owcpa_dec_fu_184_rm_address0, "grp_owcpa_dec_fu_184_rm_address0");
    sc_trace(mVcdFile, grp_owcpa_dec_fu_184_rm_ce0, "grp_owcpa_dec_fu_184_rm_ce0");
    sc_trace(mVcdFile, grp_owcpa_dec_fu_184_rm_we0, "grp_owcpa_dec_fu_184_rm_we0");
    sc_trace(mVcdFile, grp_owcpa_dec_fu_184_rm_d0, "grp_owcpa_dec_fu_184_rm_d0");
    sc_trace(mVcdFile, grp_owcpa_dec_fu_184_ciphertext_address0, "grp_owcpa_dec_fu_184_ciphertext_address0");
    sc_trace(mVcdFile, grp_owcpa_dec_fu_184_ciphertext_ce0, "grp_owcpa_dec_fu_184_ciphertext_ce0");
    sc_trace(mVcdFile, grp_owcpa_dec_fu_184_ciphertext_address1, "grp_owcpa_dec_fu_184_ciphertext_address1");
    sc_trace(mVcdFile, grp_owcpa_dec_fu_184_ciphertext_ce1, "grp_owcpa_dec_fu_184_ciphertext_ce1");
    sc_trace(mVcdFile, grp_owcpa_dec_fu_184_secretkey_address0, "grp_owcpa_dec_fu_184_secretkey_address0");
    sc_trace(mVcdFile, grp_owcpa_dec_fu_184_secretkey_ce0, "grp_owcpa_dec_fu_184_secretkey_ce0");
    sc_trace(mVcdFile, grp_owcpa_dec_fu_184_secretkey_address1, "grp_owcpa_dec_fu_184_secretkey_address1");
    sc_trace(mVcdFile, grp_owcpa_dec_fu_184_secretkey_ce1, "grp_owcpa_dec_fu_184_secretkey_ce1");
    sc_trace(mVcdFile, i_reg_132, "i_reg_132");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i_1_reg_144, "i_1_reg_144");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, i_i_reg_156, "i_i_reg_156");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, grp_sha3_256_fu_167_ap_start_reg, "grp_sha3_256_fu_167_ap_start_reg");
    sc_trace(mVcdFile, grp_sha3_256_1_fu_175_ap_start_reg, "grp_sha3_256_1_fu_175_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_owcpa_dec_fu_184_ap_start_reg, "grp_owcpa_dec_fu_184_ap_start_reg");
    sc_trace(mVcdFile, tmp_s_fu_216_p1, "tmp_s_fu_216_p1");
    sc_trace(mVcdFile, tmp_213_fu_221_p1, "tmp_213_fu_221_p1");
    sc_trace(mVcdFile, tmp_214_fu_238_p1, "tmp_214_fu_238_p1");
    sc_trace(mVcdFile, cmp_0_sum_cast_fu_249_p1, "cmp_0_sum_cast_fu_249_p1");
    sc_trace(mVcdFile, i_i_cast1_fu_261_p1, "i_i_cast1_fu_261_p1");
    sc_trace(mVcdFile, tmp_248_i_fu_290_p2, "tmp_248_i_fu_290_p2");
    sc_trace(mVcdFile, i_cast4_fu_194_p1, "i_cast4_fu_194_p1");
    sc_trace(mVcdFile, tmp_fu_210_p2, "tmp_fu_210_p2");
    sc_trace(mVcdFile, cmp_0_sum_fu_243_p2, "cmp_0_sum_fu_243_p2");
    sc_trace(mVcdFile, tmp_i_fu_279_p2, "tmp_i_fu_279_p2");
    sc_trace(mVcdFile, tmp_i_63_fu_285_p2, "tmp_i_63_fu_285_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("crypto_kem_dec.hdltvin.dat");
    mHdltvoutHandle.open("crypto_kem_dec.hdltvout.dat");
}

crypto_kem_dec::~crypto_kem_dec() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete rm_U;
    delete buf_U;
    delete grp_sha3_256_fu_167;
    delete grp_sha3_256_1_fu_175;
    delete grp_owcpa_dec_fu_184;
}

void crypto_kem_dec::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_owcpa_dec_fu_184_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            grp_owcpa_dec_fu_184_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_owcpa_dec_fu_184_ap_ready.read())) {
            grp_owcpa_dec_fu_184_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_sha3_256_1_fu_175_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            grp_sha3_256_1_fu_175_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha3_256_1_fu_175_ap_ready.read())) {
            grp_sha3_256_1_fu_175_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_sha3_256_fu_167_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
             esl_seteq<1,1,1>(exitcond_fu_226_p2.read(), ap_const_lv1_1))) {
            grp_sha3_256_fu_167_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha3_256_fu_167_ap_ready.read())) {
            grp_sha3_256_fu_167_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_198_p2.read(), ap_const_lv1_1))) {
        i_1_reg_144 = ap_const_lv10_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        i_1_reg_144 = i_31_reg_318.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        i_i_reg_156 = i_32_reg_336.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
                esl_seteq<1,1,1>(grp_sha3_256_fu_167_ap_done.read(), ap_const_logic_1))) {
        i_i_reg_156 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_reg_132 = i_30_reg_305.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(grp_sha3_256_1_fu_175_ap_done.read(), ap_const_logic_1))) {
        i_reg_132 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(grp_sha3_256_fu_167_ap_done.read(), ap_const_logic_1))) {
        b_assign_reg_328 = b_assign_fu_254_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_owcpa_dec_fu_184_ap_done.read(), ap_const_logic_1))) {
        fail_reg_297 = grp_owcpa_dec_fu_184_ap_return.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_30_reg_305 = i_30_fu_204_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_31_reg_318 = i_31_fu_232_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        i_32_reg_336 = i_32_fu_273_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_267_p2.read()))) {
        k_addr_reg_346 =  (sc_lv<5>) (i_i_cast1_fu_261_p1.read());
    }
}

void crypto_kem_dec::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void crypto_kem_dec::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void crypto_kem_dec::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void crypto_kem_dec::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void crypto_kem_dec::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void crypto_kem_dec::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void crypto_kem_dec::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void crypto_kem_dec::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void crypto_kem_dec::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void crypto_kem_dec::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void crypto_kem_dec::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void crypto_kem_dec::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(exitcond_i_fu_267_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void crypto_kem_dec::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void crypto_kem_dec::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(exitcond_i_fu_267_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void crypto_kem_dec::thread_ap_return() {
    ap_return = ap_const_lv32_0;
}

void crypto_kem_dec::thread_b_assign_fu_254_p3() {
    b_assign_fu_254_p3 = (!fail_reg_297.read()[0].is_01())? sc_lv<8>(): ((fail_reg_297.read()[0].to_bool())? ap_const_lv8_FF: ap_const_lv8_0);
}

void crypto_kem_dec::thread_buf_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        buf_address0 =  (sc_lv<10>) (cmp_0_sum_cast_fu_249_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        buf_address0 =  (sc_lv<10>) (tmp_213_fu_221_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        buf_address0 = grp_sha3_256_fu_167_input_r_address0.read();
    } else {
        buf_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void crypto_kem_dec::thread_buf_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        buf_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        buf_ce0 = grp_sha3_256_fu_167_input_r_ce0.read();
    } else {
        buf_ce0 = ap_const_logic_0;
    }
}

void crypto_kem_dec::thread_buf_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        buf_d0 = c_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        buf_d0 = sk_q0.read();
    } else {
        buf_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void crypto_kem_dec::thread_buf_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        buf_we0 = ap_const_logic_1;
    } else {
        buf_we0 = ap_const_logic_0;
    }
}

void crypto_kem_dec::thread_c_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        c_address0 =  (sc_lv<10>) (tmp_214_fu_238_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        c_address0 = grp_owcpa_dec_fu_184_ciphertext_address0.read();
    } else {
        c_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void crypto_kem_dec::thread_c_address1() {
    c_address1 = grp_owcpa_dec_fu_184_ciphertext_address1.read();
}

void crypto_kem_dec::thread_c_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        c_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        c_ce0 = grp_owcpa_dec_fu_184_ciphertext_ce0.read();
    } else {
        c_ce0 = ap_const_logic_0;
    }
}

void crypto_kem_dec::thread_c_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        c_ce1 = grp_owcpa_dec_fu_184_ciphertext_ce1.read();
    } else {
        c_ce1 = ap_const_logic_0;
    }
}

void crypto_kem_dec::thread_cmp_0_sum_cast_fu_249_p1() {
    cmp_0_sum_cast_fu_249_p1 = esl_zext<64,10>(cmp_0_sum_fu_243_p2.read());
}

void crypto_kem_dec::thread_cmp_0_sum_fu_243_p2() {
    cmp_0_sum_fu_243_p2 = (!i_1_reg_144.read().is_01() || !ap_const_lv10_20.is_01())? sc_lv<10>(): (sc_biguint<10>(i_1_reg_144.read()) + sc_biguint<10>(ap_const_lv10_20));
}

void crypto_kem_dec::thread_exitcond1_fu_198_p2() {
    exitcond1_fu_198_p2 = (!i_reg_132.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_132.read() == ap_const_lv6_20);
}

void crypto_kem_dec::thread_exitcond_fu_226_p2() {
    exitcond_fu_226_p2 = (!i_1_reg_144.read().is_01() || !ap_const_lv10_3A2.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_144.read() == ap_const_lv10_3A2);
}

void crypto_kem_dec::thread_exitcond_i_fu_267_p2() {
    exitcond_i_fu_267_p2 = (!i_i_reg_156.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_156.read() == ap_const_lv6_20);
}

void crypto_kem_dec::thread_grp_owcpa_dec_fu_184_ap_start() {
    grp_owcpa_dec_fu_184_ap_start = grp_owcpa_dec_fu_184_ap_start_reg.read();
}

void crypto_kem_dec::thread_grp_sha3_256_1_fu_175_ap_start() {
    grp_sha3_256_1_fu_175_ap_start = grp_sha3_256_1_fu_175_ap_start_reg.read();
}

void crypto_kem_dec::thread_grp_sha3_256_fu_167_ap_start() {
    grp_sha3_256_fu_167_ap_start = grp_sha3_256_fu_167_ap_start_reg.read();
}

void crypto_kem_dec::thread_i_30_fu_204_p2() {
    i_30_fu_204_p2 = (!i_reg_132.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_reg_132.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void crypto_kem_dec::thread_i_31_fu_232_p2() {
    i_31_fu_232_p2 = (!i_1_reg_144.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_1_reg_144.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void crypto_kem_dec::thread_i_32_fu_273_p2() {
    i_32_fu_273_p2 = (!i_i_reg_156.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_i_reg_156.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void crypto_kem_dec::thread_i_cast4_fu_194_p1() {
    i_cast4_fu_194_p1 = esl_zext<11,6>(i_reg_132.read());
}

void crypto_kem_dec::thread_i_i_cast1_fu_261_p1() {
    i_i_cast1_fu_261_p1 = esl_zext<64,6>(i_i_reg_156.read());
}

void crypto_kem_dec::thread_k_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        k_address0 = k_addr_reg_346.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        k_address0 =  (sc_lv<5>) (i_i_cast1_fu_261_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_address0 = grp_sha3_256_1_fu_175_output_r_address0.read();
    } else {
        k_address0 = "XXXXX";
    }
}

void crypto_kem_dec::thread_k_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        k_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_ce0 = grp_sha3_256_1_fu_175_output_r_ce0.read();
    } else {
        k_ce0 = ap_const_logic_0;
    }
}

void crypto_kem_dec::thread_k_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        k_d0 = tmp_248_i_fu_290_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_d0 = grp_sha3_256_1_fu_175_output_r_d0.read();
    } else {
        k_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void crypto_kem_dec::thread_k_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        k_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_we0 = grp_sha3_256_1_fu_175_output_r_we0.read();
    } else {
        k_we0 = ap_const_logic_0;
    }
}

void crypto_kem_dec::thread_rm_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        rm_address0 =  (sc_lv<9>) (i_i_cast1_fu_261_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        rm_address0 = grp_owcpa_dec_fu_184_rm_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        rm_address0 = grp_sha3_256_1_fu_175_input_r_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        rm_address0 = grp_sha3_256_fu_167_output_r_address0.read();
    } else {
        rm_address0 =  (sc_lv<9>) ("XXXXXXXXX");
    }
}

void crypto_kem_dec::thread_rm_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        rm_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        rm_ce0 = grp_owcpa_dec_fu_184_rm_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        rm_ce0 = grp_sha3_256_1_fu_175_input_r_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        rm_ce0 = grp_sha3_256_fu_167_output_r_ce0.read();
    } else {
        rm_ce0 = ap_const_logic_0;
    }
}

void crypto_kem_dec::thread_rm_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        rm_d0 = grp_owcpa_dec_fu_184_rm_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        rm_d0 = grp_sha3_256_fu_167_output_r_d0.read();
    } else {
        rm_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void crypto_kem_dec::thread_rm_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        rm_we0 = grp_owcpa_dec_fu_184_rm_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        rm_we0 = grp_sha3_256_fu_167_output_r_we0.read();
    } else {
        rm_we0 = ap_const_logic_0;
    }
}

void crypto_kem_dec::thread_sk_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sk_address0 =  (sc_lv<11>) (tmp_s_fu_216_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sk_address0 = grp_owcpa_dec_fu_184_secretkey_address0.read();
    } else {
        sk_address0 =  (sc_lv<11>) ("XXXXXXXXXXX");
    }
}

void crypto_kem_dec::thread_sk_address1() {
    sk_address1 = grp_owcpa_dec_fu_184_secretkey_address1.read();
}

void crypto_kem_dec::thread_sk_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sk_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sk_ce0 = grp_owcpa_dec_fu_184_secretkey_ce0.read();
    } else {
        sk_ce0 = ap_const_logic_0;
    }
}

void crypto_kem_dec::thread_sk_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sk_ce1 = grp_owcpa_dec_fu_184_secretkey_ce1.read();
    } else {
        sk_ce1 = ap_const_logic_0;
    }
}

void crypto_kem_dec::thread_tmp_213_fu_221_p1() {
    tmp_213_fu_221_p1 = esl_zext<64,6>(i_reg_132.read());
}

void crypto_kem_dec::thread_tmp_214_fu_238_p1() {
    tmp_214_fu_238_p1 = esl_zext<64,10>(i_1_reg_144.read());
}

void crypto_kem_dec::thread_tmp_248_i_fu_290_p2() {
    tmp_248_i_fu_290_p2 = (k_q0.read() ^ tmp_i_63_fu_285_p2.read());
}

void crypto_kem_dec::thread_tmp_fu_210_p2() {
    tmp_fu_210_p2 = (!i_cast4_fu_194_p1.read().is_01() || !ap_const_lv11_4B2.is_01())? sc_lv<11>(): (sc_biguint<11>(i_cast4_fu_194_p1.read()) + sc_bigint<11>(ap_const_lv11_4B2));
}

void crypto_kem_dec::thread_tmp_i_63_fu_285_p2() {
    tmp_i_63_fu_285_p2 = (tmp_i_fu_279_p2.read() & b_assign_reg_328.read());
}

void crypto_kem_dec::thread_tmp_i_fu_279_p2() {
    tmp_i_fu_279_p2 = (k_q0.read() ^ rm_q0.read());
}

void crypto_kem_dec::thread_tmp_s_fu_216_p1() {
    tmp_s_fu_216_p1 = esl_zext<64,11>(tmp_fu_210_p2.read());
}

void crypto_kem_dec::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_owcpa_dec_fu_184_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_sha3_256_1_fu_175_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(exitcond1_fu_198_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(exitcond_fu_226_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(grp_sha3_256_fu_167_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(exitcond_i_fu_267_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<11>) ("XXXXXXXXXXX");
            break;
    }
}

void crypto_kem_dec::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"k_address0\" :  \"" << k_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"k_ce0\" :  \"" << k_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"k_we0\" :  \"" << k_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"k_d0\" :  \"" << k_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"k_q0\" :  \"" << k_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_address0\" :  \"" << c_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_ce0\" :  \"" << c_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c_q0\" :  \"" << c_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_address1\" :  \"" << c_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_ce1\" :  \"" << c_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c_q1\" :  \"" << c_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_address0\" :  \"" << sk_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_ce0\" :  \"" << sk_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sk_q0\" :  \"" << sk_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_address1\" :  \"" << sk_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_ce1\" :  \"" << sk_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sk_q1\" :  \"" << sk_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

