// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "poly_Rq_mul.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic poly_Rq_mul::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic poly_Rq_mul::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> poly_Rq_mul::ap_ST_fsm_state1 = "1";
const sc_lv<9> poly_Rq_mul::ap_ST_fsm_state2 = "10";
const sc_lv<9> poly_Rq_mul::ap_ST_fsm_state3 = "100";
const sc_lv<9> poly_Rq_mul::ap_ST_fsm_state4 = "1000";
const sc_lv<9> poly_Rq_mul::ap_ST_fsm_state5 = "10000";
const sc_lv<9> poly_Rq_mul::ap_ST_fsm_state6 = "100000";
const sc_lv<9> poly_Rq_mul::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> poly_Rq_mul::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> poly_Rq_mul::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> poly_Rq_mul::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> poly_Rq_mul::ap_const_lv32_3 = "11";
const sc_lv<32> poly_Rq_mul::ap_const_lv32_6 = "110";
const sc_lv<32> poly_Rq_mul::ap_const_lv32_1 = "1";
const sc_lv<1> poly_Rq_mul::ap_const_lv1_0 = "0";
const sc_lv<32> poly_Rq_mul::ap_const_lv32_2 = "10";
const sc_lv<1> poly_Rq_mul::ap_const_lv1_1 = "1";
const sc_lv<32> poly_Rq_mul::ap_const_lv32_5 = "101";
const sc_lv<32> poly_Rq_mul::ap_const_lv32_8 = "1000";
const sc_lv<10> poly_Rq_mul::ap_const_lv10_1 = "1";
const sc_lv<10> poly_Rq_mul::ap_const_lv10_0 = "0000000000";
const sc_lv<32> poly_Rq_mul::ap_const_lv32_4 = "100";
const sc_lv<32> poly_Rq_mul::ap_const_lv32_7 = "111";
const sc_lv<16> poly_Rq_mul::ap_const_lv16_0 = "0000000000000000";
const sc_lv<10> poly_Rq_mul::ap_const_lv10_2A6 = "1010100110";
const sc_lv<10> poly_Rq_mul::ap_const_lv10_2A5 = "1010100101";
const bool poly_Rq_mul::ap_const_boolean_1 = true;

poly_Rq_mul::poly_Rq_mul(sc_module_name name) : sc_module(name), mVcdFile(0) {
    crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1_U7 = new crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1<1,1,16,16,16,16>("crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1_U7");
    crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1_U7->din0(reg_127);
    crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1_U7->din1(reg_131);
    crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1_U7->din2(reg_135);
    crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1_U7->dout(grp_fu_248_p3);
    crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1_U8 = new crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1<1,1,16,16,16,16>("crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1_U8");
    crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1_U8->din0(reg_127);
    crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1_U8->din1(reg_131);
    crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1_U8->din2(reg_135);
    crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1_U8->dout(grp_fu_257_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_coeffs_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_183_fu_180_p1 );
    sensitive << ( tmp_189_fu_223_p1 );

    SC_METHOD(thread_a_coeffs_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_143_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_143_p2 );

    SC_METHOD(thread_b_coeffs_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_185_fu_191_p1 );
    sensitive << ( tmp_190_fu_228_p1 );

    SC_METHOD(thread_b_coeffs_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_exitcond1_fu_143_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( indvars_iv_reg_82 );

    SC_METHOD(thread_exitcond_fu_206_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( indvars_iv_reg_82 );
    sensitive << ( i_1_reg_116 );

    SC_METHOD(thread_i_10_fu_196_p2);
    sensitive << ( i_reg_105 );

    SC_METHOD(thread_i_11_fu_212_p2);
    sensitive << ( i_1_reg_116 );

    SC_METHOD(thread_i_1_cast_fu_202_p1);
    sensitive << ( i_1_reg_116 );

    SC_METHOD(thread_i_cast_fu_166_p1);
    sensitive << ( i_reg_105 );

    SC_METHOD(thread_indvars_iv_next_fu_233_p2);
    sensitive << ( indvars_iv_reg_82 );

    SC_METHOD(thread_k_4_fu_149_p2);
    sensitive << ( k_reg_94 );

    SC_METHOD(thread_k_cast2_fu_139_p1);
    sensitive << ( k_reg_94 );

    SC_METHOD(thread_r_coeffs_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( r_coeffs_addr_reg_280 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond_fu_206_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_fu_155_p1 );

    SC_METHOD(thread_r_coeffs_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond_fu_206_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_r_coeffs_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_fu_248_p3 );
    sensitive << ( grp_fu_257_p3 );
    sensitive << ( tmp_189_cast_fu_243_p1 );

    SC_METHOD(thread_r_coeffs_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_143_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_tmp_181_fu_170_p2);
    sensitive << ( tmp_s_reg_285 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_reg_105 );

    SC_METHOD(thread_tmp_182_fu_175_p2);
    sensitive << ( k_cast2_reg_266 );
    sensitive << ( i_cast_fu_166_p1 );

    SC_METHOD(thread_tmp_183_fu_180_p1);
    sensitive << ( tmp_182_fu_175_p2 );

    SC_METHOD(thread_tmp_184_fu_185_p2);
    sensitive << ( i_reg_105 );

    SC_METHOD(thread_tmp_185_fu_191_p1);
    sensitive << ( tmp_184_fu_185_p2 );

    SC_METHOD(thread_tmp_188_fu_218_p2);
    sensitive << ( k_cast2_reg_266 );
    sensitive << ( i_1_cast_fu_202_p1 );

    SC_METHOD(thread_tmp_189_cast_fu_243_p1);
    sensitive << ( tmp_198_fu_239_p1 );

    SC_METHOD(thread_tmp_189_fu_223_p1);
    sensitive << ( tmp_188_fu_218_p2 );

    SC_METHOD(thread_tmp_190_fu_228_p1);
    sensitive << ( i_1_reg_116 );

    SC_METHOD(thread_tmp_198_fu_239_p1);
    sensitive << ( r_coeffs_q0 );

    SC_METHOD(thread_tmp_fu_155_p1);
    sensitive << ( k_reg_94 );

    SC_METHOD(thread_tmp_s_fu_160_p2);
    sensitive << ( k_reg_94 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_143_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_181_fu_170_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond_fu_206_p2 );

    ap_CS_fsm = "000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "poly_Rq_mul_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, r_coeffs_address0, "(port)r_coeffs_address0");
    sc_trace(mVcdFile, r_coeffs_ce0, "(port)r_coeffs_ce0");
    sc_trace(mVcdFile, r_coeffs_we0, "(port)r_coeffs_we0");
    sc_trace(mVcdFile, r_coeffs_d0, "(port)r_coeffs_d0");
    sc_trace(mVcdFile, r_coeffs_q0, "(port)r_coeffs_q0");
    sc_trace(mVcdFile, a_coeffs_address0, "(port)a_coeffs_address0");
    sc_trace(mVcdFile, a_coeffs_ce0, "(port)a_coeffs_ce0");
    sc_trace(mVcdFile, a_coeffs_q0, "(port)a_coeffs_q0");
    sc_trace(mVcdFile, b_coeffs_address0, "(port)b_coeffs_address0");
    sc_trace(mVcdFile, b_coeffs_ce0, "(port)b_coeffs_ce0");
    sc_trace(mVcdFile, b_coeffs_q0, "(port)b_coeffs_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_127, "reg_127");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, reg_131, "reg_131");
    sc_trace(mVcdFile, reg_135, "reg_135");
    sc_trace(mVcdFile, k_cast2_fu_139_p1, "k_cast2_fu_139_p1");
    sc_trace(mVcdFile, k_cast2_reg_266, "k_cast2_reg_266");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, k_4_fu_149_p2, "k_4_fu_149_p2");
    sc_trace(mVcdFile, k_4_reg_275, "k_4_reg_275");
    sc_trace(mVcdFile, r_coeffs_addr_reg_280, "r_coeffs_addr_reg_280");
    sc_trace(mVcdFile, exitcond1_fu_143_p2, "exitcond1_fu_143_p2");
    sc_trace(mVcdFile, tmp_s_fu_160_p2, "tmp_s_fu_160_p2");
    sc_trace(mVcdFile, tmp_s_reg_285, "tmp_s_reg_285");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_181_fu_170_p2, "tmp_181_fu_170_p2");
    sc_trace(mVcdFile, i_10_fu_196_p2, "i_10_fu_196_p2");
    sc_trace(mVcdFile, i_10_reg_303, "i_10_reg_303");
    sc_trace(mVcdFile, i_11_fu_212_p2, "i_11_fu_212_p2");
    sc_trace(mVcdFile, i_11_reg_311, "i_11_reg_311");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, exitcond_fu_206_p2, "exitcond_fu_206_p2");
    sc_trace(mVcdFile, indvars_iv_next_fu_233_p2, "indvars_iv_next_fu_233_p2");
    sc_trace(mVcdFile, indvars_iv_next_reg_326, "indvars_iv_next_reg_326");
    sc_trace(mVcdFile, indvars_iv_reg_82, "indvars_iv_reg_82");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, k_reg_94, "k_reg_94");
    sc_trace(mVcdFile, i_reg_105, "i_reg_105");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, i_1_reg_116, "i_1_reg_116");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, tmp_fu_155_p1, "tmp_fu_155_p1");
    sc_trace(mVcdFile, tmp_183_fu_180_p1, "tmp_183_fu_180_p1");
    sc_trace(mVcdFile, tmp_185_fu_191_p1, "tmp_185_fu_191_p1");
    sc_trace(mVcdFile, tmp_189_fu_223_p1, "tmp_189_fu_223_p1");
    sc_trace(mVcdFile, tmp_190_fu_228_p1, "tmp_190_fu_228_p1");
    sc_trace(mVcdFile, grp_fu_248_p3, "grp_fu_248_p3");
    sc_trace(mVcdFile, grp_fu_257_p3, "grp_fu_257_p3");
    sc_trace(mVcdFile, tmp_189_cast_fu_243_p1, "tmp_189_cast_fu_243_p1");
    sc_trace(mVcdFile, i_cast_fu_166_p1, "i_cast_fu_166_p1");
    sc_trace(mVcdFile, tmp_182_fu_175_p2, "tmp_182_fu_175_p2");
    sc_trace(mVcdFile, tmp_184_fu_185_p2, "tmp_184_fu_185_p2");
    sc_trace(mVcdFile, i_1_cast_fu_202_p1, "i_1_cast_fu_202_p1");
    sc_trace(mVcdFile, tmp_188_fu_218_p2, "tmp_188_fu_218_p2");
    sc_trace(mVcdFile, tmp_198_fu_239_p1, "tmp_198_fu_239_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

poly_Rq_mul::~poly_Rq_mul() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1_U7;
    delete crypto_kem_dec_mac_muladd_16s_16s_16ns_16_1_1_U8;
}

void poly_Rq_mul::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_181_fu_170_p2.read()))) {
        i_1_reg_116 = ap_const_lv10_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        i_1_reg_116 = i_11_reg_311.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_reg_105 = i_10_reg_303.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_143_p2.read(), ap_const_lv1_0))) {
        i_reg_105 = ap_const_lv10_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        indvars_iv_reg_82 = ap_const_lv10_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        indvars_iv_reg_82 = indvars_iv_next_reg_326.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        k_reg_94 = ap_const_lv10_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        k_reg_94 = k_4_reg_275.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_181_fu_170_p2.read(), ap_const_lv1_1))) {
        i_10_reg_303 = i_10_fu_196_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_11_reg_311 = i_11_fu_212_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_206_p2.read()))) {
        indvars_iv_next_reg_326 = indvars_iv_next_fu_233_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        k_4_reg_275 = k_4_fu_149_p2.read();
        k_cast2_reg_266 = k_cast2_fu_139_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_143_p2.read(), ap_const_lv1_0))) {
        r_coeffs_addr_reg_280 =  (sc_lv<10>) (tmp_fu_155_p1.read());
        tmp_s_reg_285 = tmp_s_fu_160_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        reg_127 = a_coeffs_q0.read();
        reg_131 = b_coeffs_q0.read();
        reg_135 = r_coeffs_q0.read();
    }
}

void poly_Rq_mul::thread_a_coeffs_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        a_coeffs_address0 =  (sc_lv<10>) (tmp_189_fu_223_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        a_coeffs_address0 =  (sc_lv<10>) (tmp_183_fu_180_p1.read());
    } else {
        a_coeffs_address0 = "XXXXXXXXXX";
    }
}

void poly_Rq_mul::thread_a_coeffs_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        a_coeffs_ce0 = ap_const_logic_1;
    } else {
        a_coeffs_ce0 = ap_const_logic_0;
    }
}

void poly_Rq_mul::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void poly_Rq_mul::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void poly_Rq_mul::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void poly_Rq_mul::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void poly_Rq_mul::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void poly_Rq_mul::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void poly_Rq_mul::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void poly_Rq_mul::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void poly_Rq_mul::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void poly_Rq_mul::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(exitcond1_fu_143_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void poly_Rq_mul::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void poly_Rq_mul::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_143_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void poly_Rq_mul::thread_b_coeffs_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        b_coeffs_address0 =  (sc_lv<10>) (tmp_190_fu_228_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        b_coeffs_address0 =  (sc_lv<10>) (tmp_185_fu_191_p1.read());
    } else {
        b_coeffs_address0 = "XXXXXXXXXX";
    }
}

void poly_Rq_mul::thread_b_coeffs_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        b_coeffs_ce0 = ap_const_logic_1;
    } else {
        b_coeffs_ce0 = ap_const_logic_0;
    }
}

void poly_Rq_mul::thread_exitcond1_fu_143_p2() {
    exitcond1_fu_143_p2 = (!indvars_iv_reg_82.read().is_01() || !ap_const_lv10_2A6.is_01())? sc_lv<1>(): sc_lv<1>(indvars_iv_reg_82.read() == ap_const_lv10_2A6);
}

void poly_Rq_mul::thread_exitcond_fu_206_p2() {
    exitcond_fu_206_p2 = (!i_1_reg_116.read().is_01() || !indvars_iv_reg_82.read().is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_116.read() == indvars_iv_reg_82.read());
}

void poly_Rq_mul::thread_i_10_fu_196_p2() {
    i_10_fu_196_p2 = (!i_reg_105.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_reg_105.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void poly_Rq_mul::thread_i_11_fu_212_p2() {
    i_11_fu_212_p2 = (!i_1_reg_116.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_1_reg_116.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void poly_Rq_mul::thread_i_1_cast_fu_202_p1() {
    i_1_cast_fu_202_p1 = esl_zext<11,10>(i_1_reg_116.read());
}

void poly_Rq_mul::thread_i_cast_fu_166_p1() {
    i_cast_fu_166_p1 = esl_zext<11,10>(i_reg_105.read());
}

void poly_Rq_mul::thread_indvars_iv_next_fu_233_p2() {
    indvars_iv_next_fu_233_p2 = (!ap_const_lv10_1.is_01() || !indvars_iv_reg_82.read().is_01())? sc_lv<10>(): (sc_biguint<10>(ap_const_lv10_1) + sc_biguint<10>(indvars_iv_reg_82.read()));
}

void poly_Rq_mul::thread_k_4_fu_149_p2() {
    k_4_fu_149_p2 = (!k_reg_94.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(k_reg_94.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void poly_Rq_mul::thread_k_cast2_fu_139_p1() {
    k_cast2_fu_139_p1 = esl_zext<11,10>(k_reg_94.read());
}

void poly_Rq_mul::thread_r_coeffs_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_206_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_206_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        r_coeffs_address0 = r_coeffs_addr_reg_280.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        r_coeffs_address0 =  (sc_lv<10>) (tmp_fu_155_p1.read());
    } else {
        r_coeffs_address0 = "XXXXXXXXXX";
    }
}

void poly_Rq_mul::thread_r_coeffs_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_206_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_206_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        r_coeffs_ce0 = ap_const_logic_1;
    } else {
        r_coeffs_ce0 = ap_const_logic_0;
    }
}

void poly_Rq_mul::thread_r_coeffs_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        r_coeffs_d0 = tmp_189_cast_fu_243_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        r_coeffs_d0 = grp_fu_257_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        r_coeffs_d0 = grp_fu_248_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        r_coeffs_d0 = ap_const_lv16_0;
    } else {
        r_coeffs_d0 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void poly_Rq_mul::thread_r_coeffs_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(exitcond1_fu_143_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        r_coeffs_we0 = ap_const_logic_1;
    } else {
        r_coeffs_we0 = ap_const_logic_0;
    }
}

void poly_Rq_mul::thread_tmp_181_fu_170_p2() {
    tmp_181_fu_170_p2 = (!i_reg_105.read().is_01() || !tmp_s_reg_285.read().is_01())? sc_lv<1>(): (sc_biguint<10>(i_reg_105.read()) < sc_biguint<10>(tmp_s_reg_285.read()));
}

void poly_Rq_mul::thread_tmp_182_fu_175_p2() {
    tmp_182_fu_175_p2 = (!k_cast2_reg_266.read().is_01() || !i_cast_fu_166_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(k_cast2_reg_266.read()) + sc_biguint<11>(i_cast_fu_166_p1.read()));
}

void poly_Rq_mul::thread_tmp_183_fu_180_p1() {
    tmp_183_fu_180_p1 = esl_zext<64,11>(tmp_182_fu_175_p2.read());
}

void poly_Rq_mul::thread_tmp_184_fu_185_p2() {
    tmp_184_fu_185_p2 = (!ap_const_lv10_2A5.is_01() || !i_reg_105.read().is_01())? sc_lv<10>(): (sc_bigint<10>(ap_const_lv10_2A5) - sc_biguint<10>(i_reg_105.read()));
}

void poly_Rq_mul::thread_tmp_185_fu_191_p1() {
    tmp_185_fu_191_p1 = esl_zext<64,10>(tmp_184_fu_185_p2.read());
}

void poly_Rq_mul::thread_tmp_188_fu_218_p2() {
    tmp_188_fu_218_p2 = (!k_cast2_reg_266.read().is_01() || !i_1_cast_fu_202_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(k_cast2_reg_266.read()) - sc_biguint<11>(i_1_cast_fu_202_p1.read()));
}

void poly_Rq_mul::thread_tmp_189_cast_fu_243_p1() {
    tmp_189_cast_fu_243_p1 = esl_zext<16,11>(tmp_198_fu_239_p1.read());
}

void poly_Rq_mul::thread_tmp_189_fu_223_p1() {
    tmp_189_fu_223_p1 = esl_sext<64,11>(tmp_188_fu_218_p2.read());
}

void poly_Rq_mul::thread_tmp_190_fu_228_p1() {
    tmp_190_fu_228_p1 = esl_zext<64,10>(i_1_reg_116.read());
}

void poly_Rq_mul::thread_tmp_198_fu_239_p1() {
    tmp_198_fu_239_p1 = r_coeffs_q0.read().range(11-1, 0);
}

void poly_Rq_mul::thread_tmp_fu_155_p1() {
    tmp_fu_155_p1 = esl_zext<64,10>(k_reg_94.read());
}

void poly_Rq_mul::thread_tmp_s_fu_160_p2() {
    tmp_s_fu_160_p2 = (!ap_const_lv10_2A5.is_01() || !k_reg_94.read().is_01())? sc_lv<10>(): (sc_bigint<10>(ap_const_lv10_2A5) - sc_biguint<10>(k_reg_94.read()));
}

void poly_Rq_mul::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_143_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_181_fu_170_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_206_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<9>) ("XXXXXXXXX");
            break;
    }
}

}

