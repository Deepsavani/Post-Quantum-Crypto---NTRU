// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module poly_S3_frombytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_coeffs_address0,
        r_coeffs_ce0,
        r_coeffs_we0,
        r_coeffs_d0,
        r_coeffs_address1,
        r_coeffs_ce1,
        r_coeffs_we1,
        r_coeffs_d1,
        msg_address0,
        msg_ce0,
        msg_q0,
        msg_offset
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] r_coeffs_address0;
output   r_coeffs_ce0;
output   r_coeffs_we0;
output  [15:0] r_coeffs_d0;
output  [9:0] r_coeffs_address1;
output   r_coeffs_ce1;
output   r_coeffs_we1;
output  [15:0] r_coeffs_d1;
output  [10:0] msg_address0;
output   msg_ce0;
input  [7:0] msg_q0;
input  [9:0] msg_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] r_coeffs_address0;
reg r_coeffs_ce0;
reg r_coeffs_we0;
reg[15:0] r_coeffs_d0;
reg[9:0] r_coeffs_address1;
reg r_coeffs_ce1;
reg r_coeffs_we1;
reg[15:0] r_coeffs_d1;
reg[10:0] msg_address0;
reg msg_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] reg_184;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state8;
wire   [15:0] grp_mod3_fu_174_ap_return;
reg   [15:0] reg_189;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state9;
wire   [15:0] grp_mod3_fu_179_ap_return;
reg   [15:0] reg_195;
wire   [8:0] tmp_172_fu_200_p1;
reg   [8:0] tmp_172_reg_394;
wire   [7:0] i_7_fu_214_p2;
reg   [7:0] i_7_reg_403;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_208_p2;
wire   [9:0] tmp_153_fu_242_p2;
reg   [9:0] tmp_153_reg_413;
reg   [6:0] tmp_reg_427;
reg   [1:0] tmp_120_reg_432;
reg   [4:0] tmp_118_reg_437;
reg   [3:0] tmp_119_reg_442;
wire    grp_mod3_fu_174_ap_ready;
reg   [7:0] grp_mod3_fu_174_a;
wire    grp_mod3_fu_179_ap_ready;
reg   [7:0] grp_mod3_fu_179_a;
reg   [7:0] i_reg_163;
wire    ap_CS_fsm_state7;
wire   [7:0] tmp_161_cast_cast_fu_352_p1;
wire   [7:0] tmp_171_cast_fu_380_p1;
wire   [7:0] tmp_156_cast_fu_302_p1;
wire   [7:0] tmp_166_cast_cast_fu_356_p1;
wire   [63:0] sum_cast_fu_229_p1;
wire   [63:0] sum2_cast_fu_253_p1;
wire   [63:0] tmp_154_fu_338_p1;
wire   [63:0] tmp_158_fu_347_p1;
wire   [63:0] tmp_162_fu_365_p1;
wire   [63:0] tmp_166_fu_375_p1;
wire   [63:0] tmp_170_fu_389_p1;
wire    ap_CS_fsm_state10;
wire   [8:0] tmp_cast_fu_220_p1;
wire   [8:0] sum_fu_224_p2;
wire   [9:0] p_shl_fu_234_p3;
wire   [9:0] i_cast3_fu_204_p1;
wire   [8:0] sum2_fu_248_p2;
wire   [7:0] tmp_155_fu_262_p0;
wire   [15:0] tmp_s_fu_258_p1;
wire   [15:0] tmp_155_fu_262_p2;
wire   [7:0] tmp_167_fu_278_p0;
wire   [15:0] tmp_167_fu_278_p2;
wire   [7:0] tmp_159_fu_306_p0;
wire   [13:0] tmp_159_fu_306_p2;
wire   [7:0] tmp_163_fu_322_p0;
wire   [12:0] tmp_163_fu_322_p2;
wire   [9:0] tmp_157_fu_342_p2;
wire   [9:0] tmp_161_fu_360_p2;
wire   [9:0] tmp_165_fu_370_p2;
wire   [9:0] tmp_169_fu_384_p2;
reg   [9:0] ap_NS_fsm;
wire   [13:0] tmp_159_fu_306_p00;
wire   [12:0] tmp_163_fu_322_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

mod3 grp_mod3_fu_174(
    .ap_ready(grp_mod3_fu_174_ap_ready),
    .a(grp_mod3_fu_174_a),
    .ap_return(grp_mod3_fu_174_ap_return)
);

mod3 grp_mod3_fu_179(
    .ap_ready(grp_mod3_fu_179_ap_ready),
    .a(grp_mod3_fu_179_a),
    .ap_return(grp_mod3_fu_179_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_163 <= i_7_reg_403;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_163 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_7_reg_403 <= i_7_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_184 <= msg_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_189 <= grp_mod3_fu_174_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_195 <= grp_mod3_fu_179_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_118_reg_437 <= {{tmp_159_fu_306_p2[13:9]}};
        tmp_119_reg_442 <= {{tmp_163_fu_322_p2[12:9]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_120_reg_432 <= {{tmp_167_fu_278_p2[15:14]}};
        tmp_reg_427 <= {{tmp_155_fu_262_p2[15:9]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_208_p2 == 1'd0))) begin
        tmp_153_reg_413 <= tmp_153_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_172_reg_394 <= tmp_172_fu_200_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_mod3_fu_174_a = tmp_171_cast_fu_380_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_mod3_fu_174_a = tmp_161_cast_cast_fu_352_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_mod3_fu_174_a = reg_184;
    end else begin
        grp_mod3_fu_174_a = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_mod3_fu_179_a = tmp_166_cast_cast_fu_356_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_mod3_fu_179_a = tmp_156_cast_fu_302_p1;
    end else begin
        grp_mod3_fu_179_a = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((exitcond1_fu_208_p2 == 1'd1)) begin
            msg_address0 = sum2_cast_fu_253_p1;
        end else if ((exitcond1_fu_208_p2 == 1'd0)) begin
            msg_address0 = sum_cast_fu_229_p1;
        end else begin
            msg_address0 = 'bx;
        end
    end else begin
        msg_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_208_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_208_p2 == 1'd0)))) begin
        msg_ce0 = 1'b1;
    end else begin
        msg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_coeffs_address0 = 64'd676;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_coeffs_address0 = tmp_170_fu_389_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_address0 = tmp_162_fu_365_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_coeffs_address0 = tmp_154_fu_338_p1;
    end else begin
        r_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_coeffs_address1 = 64'd675;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_address1 = tmp_166_fu_375_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_coeffs_address1 = tmp_158_fu_347_p1;
    end else begin
        r_coeffs_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        r_coeffs_ce0 = 1'b1;
    end else begin
        r_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10))) begin
        r_coeffs_ce1 = 1'b1;
    end else begin
        r_coeffs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_coeffs_d0 = 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7))) begin
        r_coeffs_d0 = reg_189;
    end else begin
        r_coeffs_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_coeffs_d1 = reg_189;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        r_coeffs_d1 = reg_195;
    end else begin
        r_coeffs_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        r_coeffs_we0 = 1'b1;
    end else begin
        r_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state10))) begin
        r_coeffs_we1 = 1'b1;
    end else begin
        r_coeffs_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_208_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_208_p2 = ((i_reg_163 == 8'd135) ? 1'b1 : 1'b0);

assign i_7_fu_214_p2 = (i_reg_163 + 8'd1);

assign i_cast3_fu_204_p1 = i_reg_163;

assign p_shl_fu_234_p3 = {{i_reg_163}, {2'd0}};

assign sum2_cast_fu_253_p1 = sum2_fu_248_p2;

assign sum2_fu_248_p2 = (tmp_172_reg_394 + 9'd135);

assign sum_cast_fu_229_p1 = sum_fu_224_p2;

assign sum_fu_224_p2 = (tmp_cast_fu_220_p1 + tmp_172_reg_394);

assign tmp_153_fu_242_p2 = (p_shl_fu_234_p3 + i_cast3_fu_204_p1);

assign tmp_154_fu_338_p1 = tmp_153_reg_413;

assign tmp_155_fu_262_p0 = tmp_s_fu_258_p1;

assign tmp_155_fu_262_p2 = (tmp_155_fu_262_p0 * $signed('hAB));

assign tmp_156_cast_fu_302_p1 = tmp_reg_427;

assign tmp_157_fu_342_p2 = (tmp_153_reg_413 + 10'd1);

assign tmp_158_fu_347_p1 = tmp_157_fu_342_p2;

assign tmp_159_fu_306_p0 = tmp_159_fu_306_p00;

assign tmp_159_fu_306_p00 = reg_184;

assign tmp_159_fu_306_p2 = (tmp_159_fu_306_p0 * $signed('h39));

assign tmp_161_cast_cast_fu_352_p1 = tmp_118_reg_437;

assign tmp_161_fu_360_p2 = (tmp_153_reg_413 + 10'd2);

assign tmp_162_fu_365_p1 = tmp_161_fu_360_p2;

assign tmp_163_fu_322_p0 = tmp_163_fu_322_p00;

assign tmp_163_fu_322_p00 = reg_184;

assign tmp_163_fu_322_p2 = (tmp_163_fu_322_p0 * $signed('h13));

assign tmp_165_fu_370_p2 = (tmp_153_reg_413 + 10'd3);

assign tmp_166_cast_cast_fu_356_p1 = tmp_119_reg_442;

assign tmp_166_fu_375_p1 = tmp_165_fu_370_p2;

assign tmp_167_fu_278_p0 = tmp_s_fu_258_p1;

assign tmp_167_fu_278_p2 = (tmp_167_fu_278_p0 * $signed('hCB));

assign tmp_169_fu_384_p2 = (tmp_153_reg_413 + 10'd4);

assign tmp_170_fu_389_p1 = tmp_169_fu_384_p2;

assign tmp_171_cast_fu_380_p1 = tmp_120_reg_432;

assign tmp_172_fu_200_p1 = msg_offset[8:0];

assign tmp_cast_fu_220_p1 = i_reg_163;

assign tmp_s_fu_258_p1 = msg_q0;

endmodule //poly_S3_frombytes
