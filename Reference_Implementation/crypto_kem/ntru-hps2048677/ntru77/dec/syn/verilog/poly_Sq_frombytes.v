// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module poly_Sq_frombytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_coeffs_address0,
        r_coeffs_ce0,
        r_coeffs_we0,
        r_coeffs_d0,
        r_coeffs_address1,
        r_coeffs_ce1,
        r_coeffs_we1,
        r_coeffs_d1,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] r_coeffs_address0;
output   r_coeffs_ce0;
output   r_coeffs_we0;
output  [15:0] r_coeffs_d0;
output  [9:0] r_coeffs_address1;
output   r_coeffs_ce1;
output   r_coeffs_we1;
output  [15:0] r_coeffs_d1;
output  [9:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [9:0] a_address1;
output   a_ce1;
input  [7:0] a_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] r_coeffs_address0;
reg r_coeffs_ce0;
reg r_coeffs_we0;
reg[15:0] r_coeffs_d0;
reg[9:0] r_coeffs_address1;
reg r_coeffs_ce1;
reg r_coeffs_we1;
reg[15:0] r_coeffs_d1;
reg[9:0] a_address0;
reg a_ce0;
reg[9:0] a_address1;
reg a_ce1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] tmp_75_fu_430_p2;
reg   [6:0] tmp_75_reg_973;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_424_p2;
reg   [7:0] a_load_9_reg_993;
wire    ap_CS_fsm_state3;
wire   [9:0] tmp_38_fu_479_p3;
reg   [9:0] tmp_38_reg_1008;
wire    ap_CS_fsm_state4;
reg   [1:0] tmp_51_reg_1018;
wire   [6:0] grp_fu_414_p4;
reg   [6:0] tmp_66_reg_1033;
wire    ap_CS_fsm_state5;
reg   [0:0] tmp_115_reg_1048;
wire    ap_CS_fsm_state6;
wire   [9:0] next_mul_fu_719_p2;
reg   [9:0] next_mul_reg_1063;
wire    ap_CS_fsm_state7;
reg   [5:0] tmp_101_reg_1068;
wire    ap_CS_fsm_state9;
wire   [0:0] tmp_69_fu_885_p1;
reg   [0:0] tmp_69_reg_1093;
wire    ap_CS_fsm_state10;
wire   [5:0] tmp_70_fu_937_p1;
reg   [5:0] tmp_70_reg_1103;
reg   [6:0] i_reg_380;
wire    ap_CS_fsm_state8;
reg   [9:0] phi_mul_reg_392;
wire   [63:0] tmp_30_fu_436_p1;
wire   [63:0] tmp_33_fu_447_p1;
wire   [63:0] tmp_43_fu_458_p1;
wire   [63:0] tmp_39_fu_487_p1;
wire   [63:0] tmp_49_fu_515_p1;
wire   [63:0] tmp_53_fu_536_p1;
wire   [63:0] tmp_57_fu_547_p1;
wire   [63:0] tmp_64_fu_599_p1;
wire   [63:0] tmp_68_fu_610_p1;
wire   [63:0] tmp_78_fu_621_p1;
wire   [63:0] tmp_74_fu_647_p1;
wire   [63:0] tmp_84_fu_684_p1;
wire   [63:0] tmp_88_fu_703_p1;
wire   [63:0] tmp_92_fu_714_p1;
wire   [63:0] tmp_99_fu_772_p1;
wire   [63:0] tmp_103_fu_793_p1;
wire   [63:0] tmp_111_fu_804_p1;
wire   [63:0] tmp_108_fu_830_p1;
wire   [63:0] tmp_114_fu_863_p1;
wire    ap_CS_fsm_state11;
wire   [15:0] tmp_37_fu_474_p1;
wire   [15:0] tmp_47_cast_fu_504_p1;
wire   [15:0] tmp_62_cast_fu_589_p1;
wire   [15:0] tmp_72_cast_fu_637_p1;
wire   [15:0] tmp_82_cast_fu_674_p1;
wire   [15:0] tmp_97_cast_fu_762_p1;
wire   [15:0] tmp_107_cast_fu_820_p1;
wire   [15:0] tmp_115_cast_fu_853_p1;
wire   [15:0] tmp_8_cast_fu_880_p1;
wire   [15:0] tmp_17_cast_fu_932_p1;
wire   [15:0] tmp_23_cast_fu_948_p1;
wire   [15:0] tmp_28_fu_965_p1;
wire   [9:0] tmp_32_fu_441_p2;
wire   [9:0] tmp_42_fu_452_p2;
wire   [2:0] tmp_86_fu_463_p1;
wire   [10:0] tmp_40_fu_467_p3;
wire   [5:0] tmp_93_fu_492_p1;
wire   [4:0] grp_fu_404_p4;
wire   [10:0] tmp_47_fu_496_p3;
wire   [9:0] tmp_48_fu_509_p2;
wire   [9:0] tmp_52_fu_530_p2;
wire   [9:0] tmp_56_fu_541_p2;
wire   [7:0] tmp_71_fu_552_p1;
wire   [9:0] tmp_85_fu_567_p3;
wire   [9:0] tmp_55_fu_555_p3;
wire   [0:0] tmp_94_fu_563_p1;
wire   [9:0] tmp_89_fu_575_p2;
wire   [10:0] tmp_62_fu_581_p3;
wire   [9:0] tmp_63_fu_594_p2;
wire   [9:0] tmp_67_fu_604_p2;
wire   [9:0] tmp_77_fu_615_p2;
wire   [3:0] tmp_96_fu_626_p1;
wire   [10:0] tmp_72_fu_630_p3;
wire   [9:0] tmp_73_fu_642_p2;
wire   [6:0] tmp_105_fu_662_p1;
wire   [3:0] tmp_76_fu_652_p4;
wire   [10:0] tmp_82_fu_666_p3;
wire   [9:0] tmp_83_fu_679_p2;
wire   [9:0] tmp_87_fu_697_p2;
wire   [9:0] tmp_91_fu_708_p2;
wire   [7:0] tmp_95_fu_725_p1;
wire   [8:0] tmp_100_fu_740_p3;
wire   [8:0] tmp_90_fu_728_p3;
wire   [1:0] tmp_116_fu_736_p1;
wire   [8:0] tmp_104_fu_748_p2;
wire   [10:0] tmp_97_fu_754_p3;
wire   [9:0] tmp_98_fu_767_p2;
wire   [9:0] tmp_102_fu_787_p2;
wire   [9:0] tmp_110_fu_798_p2;
wire   [4:0] tmp_117_fu_809_p1;
wire   [10:0] tmp_106_fu_813_p3;
wire   [9:0] tmp_107_fu_825_p2;
wire   [2:0] tmp_109_fu_835_p4;
wire   [10:0] tmp_112_fu_845_p3;
wire   [9:0] tmp_113_fu_858_p2;
wire   [3:0] tmp_fu_868_p1;
wire   [10:0] tmp_8_fu_872_p3;
wire   [1:0] tmp_10_fu_889_p4;
wire   [7:0] tmp_65_fu_899_p1;
wire   [9:0] tmp_79_fu_911_p3;
wire   [9:0] tmp_12_fu_903_p3;
wire   [9:0] tmp_80_fu_919_p2;
wire   [10:0] tmp_17_fu_925_p3;
wire   [10:0] tmp_23_fu_941_p3;
wire   [2:0] tmp_81_fu_953_p1;
wire   [10:0] tmp_35_fu_957_p3;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_380 <= tmp_75_reg_973;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_380 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_mul_reg_392 <= next_mul_reg_1063;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_392 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_load_9_reg_993 <= a_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        next_mul_reg_1063 <= next_mul_fu_719_p2;
        tmp_101_reg_1068 <= {{a_q0[7:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_115_reg_1048 <= a_q0[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_38_reg_1008[9 : 3] <= tmp_38_fu_479_p3[9 : 3];
        tmp_51_reg_1018 <= {{a_q0[7:6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_66_reg_1033 <= {{a_q0[7:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_69_reg_1093 <= tmp_69_fu_885_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_70_reg_1103 <= tmp_70_fu_937_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_75_reg_973 <= tmp_75_fu_430_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        a_address0 = 64'd924;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        a_address0 = 64'd927;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        a_address0 = tmp_111_fu_804_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        a_address0 = tmp_92_fu_714_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        a_address0 = tmp_78_fu_621_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address0 = tmp_57_fu_547_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address0 = tmp_43_fu_458_p1;
    end else if (((exitcond_fu_424_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        a_address0 = 64'd928;
    end else if (((exitcond_fu_424_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_address0 = tmp_30_fu_436_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        a_address1 = 64'd925;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        a_address1 = 64'd926;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        a_address1 = tmp_103_fu_793_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        a_address1 = tmp_88_fu_703_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        a_address1 = tmp_68_fu_610_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address1 = tmp_53_fu_536_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address1 = tmp_33_fu_447_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_address1 = 64'd929;
    end else begin
        a_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((exitcond_fu_424_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((exitcond_fu_424_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        r_coeffs_address0 = 64'd673;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        r_coeffs_address0 = 64'd675;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_coeffs_address0 = tmp_108_fu_830_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_address0 = tmp_84_fu_684_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_coeffs_address0 = tmp_64_fu_599_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_coeffs_address0 = tmp_39_fu_487_p1;
    end else begin
        r_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        r_coeffs_address1 = 64'd672;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        r_coeffs_address1 = 64'd674;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_coeffs_address1 = tmp_114_fu_863_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_coeffs_address1 = tmp_99_fu_772_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_address1 = tmp_74_fu_647_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_coeffs_address1 = tmp_49_fu_515_p1;
    end else begin
        r_coeffs_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6))) begin
        r_coeffs_ce0 = 1'b1;
    end else begin
        r_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        r_coeffs_ce1 = 1'b1;
    end else begin
        r_coeffs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        r_coeffs_d0 = tmp_23_cast_fu_948_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        r_coeffs_d0 = tmp_8_cast_fu_880_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_coeffs_d0 = tmp_107_cast_fu_820_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_d0 = tmp_82_cast_fu_674_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_coeffs_d0 = tmp_62_cast_fu_589_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_coeffs_d0 = tmp_37_fu_474_p1;
    end else begin
        r_coeffs_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        r_coeffs_d1 = tmp_28_fu_965_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        r_coeffs_d1 = tmp_17_cast_fu_932_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_coeffs_d1 = tmp_115_cast_fu_853_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_coeffs_d1 = tmp_97_cast_fu_762_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_d1 = tmp_72_cast_fu_637_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_coeffs_d1 = tmp_47_cast_fu_504_p1;
    end else begin
        r_coeffs_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6))) begin
        r_coeffs_we0 = 1'b1;
    end else begin
        r_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        r_coeffs_we1 = 1'b1;
    end else begin
        r_coeffs_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_424_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond_fu_424_p2 = ((i_reg_380 == 7'd84) ? 1'b1 : 1'b0);

assign grp_fu_404_p4 = {{a_q1[7:3]}};

assign grp_fu_414_p4 = {{a_q0[7:1]}};

assign next_mul_fu_719_p2 = (10'd11 + phi_mul_reg_392);

assign tmp_100_fu_740_p3 = {{1'd0}, {tmp_95_fu_725_p1}};

assign tmp_102_fu_787_p2 = (10'd9 + phi_mul_reg_392);

assign tmp_103_fu_793_p1 = tmp_102_fu_787_p2;

assign tmp_104_fu_748_p2 = (tmp_90_fu_728_p3 | tmp_100_fu_740_p3);

assign tmp_105_fu_662_p1 = a_q0[6:0];

assign tmp_106_fu_813_p3 = {{tmp_117_fu_809_p1}, {tmp_101_reg_1068}};

assign tmp_107_cast_fu_820_p1 = tmp_106_fu_813_p3;

assign tmp_107_fu_825_p2 = (tmp_38_reg_1008 | 10'd6);

assign tmp_108_fu_830_p1 = tmp_107_fu_825_p2;

assign tmp_109_fu_835_p4 = {{a_q1[7:5]}};

assign tmp_10_fu_889_p4 = {{a_q1[7:6]}};

assign tmp_110_fu_798_p2 = (10'd10 + phi_mul_reg_392);

assign tmp_111_fu_804_p1 = tmp_110_fu_798_p2;

assign tmp_112_fu_845_p3 = {{a_q0}, {tmp_109_fu_835_p4}};

assign tmp_113_fu_858_p2 = (tmp_38_reg_1008 | 10'd7);

assign tmp_114_fu_863_p1 = tmp_113_fu_858_p2;

assign tmp_115_cast_fu_853_p1 = tmp_112_fu_845_p3;

assign tmp_116_fu_736_p1 = a_q0[1:0];

assign tmp_117_fu_809_p1 = a_q1[4:0];

assign tmp_12_fu_903_p3 = {{a_q0}, {2'd0}};

assign tmp_17_cast_fu_932_p1 = tmp_17_fu_925_p3;

assign tmp_17_fu_925_p3 = {{tmp_69_reg_1093}, {tmp_80_fu_919_p2}};

assign tmp_23_cast_fu_948_p1 = tmp_23_fu_941_p3;

assign tmp_23_fu_941_p3 = {{tmp_70_reg_1103}, {grp_fu_404_p4}};

assign tmp_28_fu_965_p1 = tmp_35_fu_957_p3;

assign tmp_30_fu_436_p1 = phi_mul_reg_392;

assign tmp_32_fu_441_p2 = (10'd1 + phi_mul_reg_392);

assign tmp_33_fu_447_p1 = tmp_32_fu_441_p2;

assign tmp_35_fu_957_p3 = {{tmp_81_fu_953_p1}, {a_q0}};

assign tmp_37_fu_474_p1 = tmp_40_fu_467_p3;

assign tmp_38_fu_479_p3 = {{i_reg_380}, {3'd0}};

assign tmp_39_fu_487_p1 = tmp_38_fu_479_p3;

assign tmp_40_fu_467_p3 = {{tmp_86_fu_463_p1}, {a_load_9_reg_993}};

assign tmp_42_fu_452_p2 = (10'd2 + phi_mul_reg_392);

assign tmp_43_fu_458_p1 = tmp_42_fu_452_p2;

assign tmp_47_cast_fu_504_p1 = tmp_47_fu_496_p3;

assign tmp_47_fu_496_p3 = {{tmp_93_fu_492_p1}, {grp_fu_404_p4}};

assign tmp_48_fu_509_p2 = (tmp_38_fu_479_p3 | 10'd1);

assign tmp_49_fu_515_p1 = tmp_48_fu_509_p2;

assign tmp_52_fu_530_p2 = (10'd3 + phi_mul_reg_392);

assign tmp_53_fu_536_p1 = tmp_52_fu_530_p2;

assign tmp_55_fu_555_p3 = {{a_q1}, {2'd0}};

assign tmp_56_fu_541_p2 = (10'd4 + phi_mul_reg_392);

assign tmp_57_fu_547_p1 = tmp_56_fu_541_p2;

assign tmp_62_cast_fu_589_p1 = tmp_62_fu_581_p3;

assign tmp_62_fu_581_p3 = {{tmp_94_fu_563_p1}, {tmp_89_fu_575_p2}};

assign tmp_63_fu_594_p2 = (tmp_38_reg_1008 | 10'd2);

assign tmp_64_fu_599_p1 = tmp_63_fu_594_p2;

assign tmp_65_fu_899_p1 = tmp_10_fu_889_p4;

assign tmp_67_fu_604_p2 = (10'd5 + phi_mul_reg_392);

assign tmp_68_fu_610_p1 = tmp_67_fu_604_p2;

assign tmp_69_fu_885_p1 = a_q0[0:0];

assign tmp_70_fu_937_p1 = a_q1[5:0];

assign tmp_71_fu_552_p1 = tmp_51_reg_1018;

assign tmp_72_cast_fu_637_p1 = tmp_72_fu_630_p3;

assign tmp_72_fu_630_p3 = {{tmp_96_fu_626_p1}, {tmp_66_reg_1033}};

assign tmp_73_fu_642_p2 = (tmp_38_reg_1008 | 10'd3);

assign tmp_74_fu_647_p1 = tmp_73_fu_642_p2;

assign tmp_75_fu_430_p2 = (i_reg_380 + 7'd1);

assign tmp_76_fu_652_p4 = {{a_q1[7:4]}};

assign tmp_77_fu_615_p2 = (10'd6 + phi_mul_reg_392);

assign tmp_78_fu_621_p1 = tmp_77_fu_615_p2;

assign tmp_79_fu_911_p3 = {{2'd0}, {tmp_65_fu_899_p1}};

assign tmp_80_fu_919_p2 = (tmp_79_fu_911_p3 | tmp_12_fu_903_p3);

assign tmp_81_fu_953_p1 = a_q1[2:0];

assign tmp_82_cast_fu_674_p1 = tmp_82_fu_666_p3;

assign tmp_82_fu_666_p3 = {{tmp_105_fu_662_p1}, {tmp_76_fu_652_p4}};

assign tmp_83_fu_679_p2 = (tmp_38_reg_1008 | 10'd4);

assign tmp_84_fu_684_p1 = tmp_83_fu_679_p2;

assign tmp_85_fu_567_p3 = {{2'd0}, {tmp_71_fu_552_p1}};

assign tmp_86_fu_463_p1 = a_q1[2:0];

assign tmp_87_fu_697_p2 = (10'd7 + phi_mul_reg_392);

assign tmp_88_fu_703_p1 = tmp_87_fu_697_p2;

assign tmp_89_fu_575_p2 = (tmp_85_fu_567_p3 | tmp_55_fu_555_p3);

assign tmp_8_cast_fu_880_p1 = tmp_8_fu_872_p3;

assign tmp_8_fu_872_p3 = {{tmp_fu_868_p1}, {grp_fu_414_p4}};

assign tmp_90_fu_728_p3 = {{a_q1}, {1'd0}};

assign tmp_91_fu_708_p2 = (10'd8 + phi_mul_reg_392);

assign tmp_92_fu_714_p1 = tmp_91_fu_708_p2;

assign tmp_93_fu_492_p1 = a_q0[5:0];

assign tmp_94_fu_563_p1 = a_q0[0:0];

assign tmp_95_fu_725_p1 = tmp_115_reg_1048;

assign tmp_96_fu_626_p1 = a_q1[3:0];

assign tmp_97_cast_fu_762_p1 = tmp_97_fu_754_p3;

assign tmp_97_fu_754_p3 = {{tmp_116_fu_736_p1}, {tmp_104_fu_748_p2}};

assign tmp_98_fu_767_p2 = (tmp_38_reg_1008 | 10'd5);

assign tmp_99_fu_772_p1 = tmp_98_fu_767_p2;

assign tmp_fu_868_p1 = a_q1[3:0];

always @ (posedge ap_clk) begin
    tmp_38_reg_1008[2:0] <= 3'b000;
end

endmodule //poly_Sq_frombytes
