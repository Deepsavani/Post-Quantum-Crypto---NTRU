-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity owcpa_dec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rm_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    rm_ce0 : OUT STD_LOGIC;
    rm_we0 : OUT STD_LOGIC;
    rm_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ciphertext_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ciphertext_ce0 : OUT STD_LOGIC;
    ciphertext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ciphertext_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ciphertext_ce1 : OUT STD_LOGIC;
    ciphertext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    secretkey_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    secretkey_ce0 : OUT STD_LOGIC;
    secretkey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    secretkey_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    secretkey_ce1 : OUT STD_LOGIC;
    secretkey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of owcpa_dec is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv10_88 : STD_LOGIC_VECTOR (9 downto 0) := "0010001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv9_88 : STD_LOGIC_VECTOR (8 downto 0) := "010001000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_2A4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010100100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_2A4 : STD_LOGIC_VECTOR (9 downto 0) := "1010100100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2A5 : STD_LOGIC_VECTOR (9 downto 0) := "1010100101";
    constant ap_const_lv11_FE : STD_LOGIC_VECTOR (10 downto 0) := "00011111110";
    constant ap_const_lv10_FE : STD_LOGIC_VECTOR (9 downto 0) := "0011111110";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal b_coeffs_addr_reg_1010 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_12_fu_480_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_12_reg_1019 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_i_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_fu_517_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_13_fu_529_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_13_reg_1037 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal liftm_coeffs_addr_reg_1042 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i7_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_14_fu_565_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_14_reg_1050 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal exitcond_i1_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_209_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal p1_fu_674_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal m1_fu_692_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_15_fu_704_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_15_reg_1078 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_i2_fu_710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_reg_1083 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i2_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_16_fu_721_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_16_reg_1096 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal liftm_coeffs_addr_2_reg_1101 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i_i_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_17_fu_757_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_17_reg_1109 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal b_coeffs_addr_4_reg_1114 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_poly_Rq_mul_fu_431_ap_ready : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_431_ap_done : STD_LOGIC;
    signal i_18_fu_790_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_18_reg_1133 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal r_coeffs_addr_25_reg_1138 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i3_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_19_fu_822_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_19_reg_1147 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal exitcond_i4_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_2_fu_913_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal fail_fu_963_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fail_reg_1162 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal i_20_fu_974_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_20_reg_1169 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal r_coeffs_addr_27_reg_1174 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i5_fu_968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x1_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x1_coeffs_ce0 : STD_LOGIC;
    signal x1_coeffs_we0 : STD_LOGIC;
    signal x1_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal x1_coeffs_ce1 : STD_LOGIC;
    signal x1_coeffs_we1 : STD_LOGIC;
    signal x1_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x2_coeffs_ce0 : STD_LOGIC;
    signal x2_coeffs_we0 : STD_LOGIC;
    signal x2_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal x2_coeffs_ce1 : STD_LOGIC;
    signal x2_coeffs_we1 : STD_LOGIC;
    signal x2_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x3_coeffs_ce0 : STD_LOGIC;
    signal x3_coeffs_we0 : STD_LOGIC;
    signal x3_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal x3_coeffs_ce1 : STD_LOGIC;
    signal x3_coeffs_we1 : STD_LOGIC;
    signal x3_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x4_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x4_coeffs_ce0 : STD_LOGIC;
    signal x4_coeffs_we0 : STD_LOGIC;
    signal x4_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x4_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x4_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal x4_coeffs_ce1 : STD_LOGIC;
    signal x4_coeffs_we1 : STD_LOGIC;
    signal x4_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x4_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Sq_frombytes_1_fu_393_ap_start : STD_LOGIC;
    signal grp_poly_Sq_frombytes_1_fu_393_ap_done : STD_LOGIC;
    signal grp_poly_Sq_frombytes_1_fu_393_ap_idle : STD_LOGIC;
    signal grp_poly_Sq_frombytes_1_fu_393_ap_ready : STD_LOGIC;
    signal grp_poly_Sq_frombytes_1_fu_393_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_frombytes_1_fu_393_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_1_fu_393_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_1_fu_393_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Sq_frombytes_1_fu_393_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_frombytes_1_fu_393_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_1_fu_393_r_coeffs_we1 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_1_fu_393_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Sq_frombytes_1_fu_393_a_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_Sq_frombytes_1_fu_393_a_ce0 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_1_fu_393_a_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_Sq_frombytes_1_fu_393_a_ce1 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_400_ap_start : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_400_ap_done : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_400_ap_idle : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_400_ap_ready : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_400_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_frombytes_fu_400_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_400_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_400_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Sq_frombytes_fu_400_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_frombytes_fu_400_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_400_r_coeffs_we1 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_400_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Sq_frombytes_fu_400_a_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_frombytes_fu_400_a_ce0 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_400_a_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_frombytes_fu_400_a_ce1 : STD_LOGIC;
    signal grp_poly_S3_mul_fu_408_ap_start : STD_LOGIC;
    signal grp_poly_S3_mul_fu_408_ap_done : STD_LOGIC;
    signal grp_poly_S3_mul_fu_408_ap_idle : STD_LOGIC;
    signal grp_poly_S3_mul_fu_408_ap_ready : STD_LOGIC;
    signal grp_poly_S3_mul_fu_408_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_mul_fu_408_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_mul_fu_408_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_S3_mul_fu_408_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_mul_fu_408_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_mul_fu_408_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_S3_mul_fu_408_r_coeffs_we1 : STD_LOGIC;
    signal grp_poly_S3_mul_fu_408_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_mul_fu_408_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_mul_fu_408_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_mul_fu_408_b_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_mul_fu_408_b_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_415_ap_start : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_415_ap_done : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_415_ap_idle : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_415_ap_ready : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_415_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_frombytes_fu_415_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_415_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_415_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_frombytes_fu_415_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_frombytes_fu_415_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_415_r_coeffs_we1 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_415_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_frombytes_fu_415_msg_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_S3_frombytes_fu_415_msg_ce0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_415_msg_offset : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_to_S3_fu_425_ap_start : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_425_ap_done : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_425_ap_idle : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_425_ap_ready : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_425_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_to_S3_fu_425_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_425_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_425_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_to_S3_fu_425_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_to_S3_fu_425_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_425_r_coeffs_we1 : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_425_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_to_S3_fu_425_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_to_S3_fu_425_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_431_ap_start : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_431_ap_idle : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_431_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_431_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_431_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_431_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_mul_fu_431_r_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_mul_fu_431_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_431_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_431_b_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_431_b_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_431_b_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_tobytes_fu_438_ap_start : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_438_ap_done : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_438_ap_idle : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_438_ap_ready : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_438_msg_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_S3_tobytes_fu_438_msg_ce0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_438_msg_we0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_438_msg_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_S3_tobytes_fu_438_msg_offset : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_S3_tobytes_fu_438_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_tobytes_fu_438_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_438_a_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_tobytes_fu_438_a_coeffs_ce1 : STD_LOGIC;
    signal tmp_i_reg_247 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_i_reg_258 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_i6_reg_269 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p1_i_reg_280 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_i1_reg_292 : STD_LOGIC_VECTOR (9 downto 0);
    signal m1_i_reg_303 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_i2_reg_315 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal i_i_i_reg_326 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_reg_337 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal i_i3_reg_348 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal i_i4_reg_359 : STD_LOGIC_VECTOR (9 downto 0);
    signal t_i_reg_370 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_i5_reg_382 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_poly_Sq_frombytes_1_fu_393_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_poly_Sq_frombytes_fu_400_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_poly_S3_mul_fu_408_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_poly_S3_frombytes_fu_415_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_poly_Rq_to_S3_fu_425_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_poly_Rq_mul_fu_431_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_poly_S3_tobytes_fu_438_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal tmp_184_i_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i8_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_213_i_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_202_i_fu_828_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i5_fu_980_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_183_i_cast_fu_497_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_185_i_fu_510_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_196_cast_fu_779_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_i_fu_550_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_i_i_fu_742_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_i_cast_fu_811_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_i_cast_fu_1005_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_448_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_cast_fu_491_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_203_fu_506_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_202_fu_502_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_205_fu_540_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_458_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_464_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_194_fu_544_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m1_i_cast9_fu_580_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p1_i_cast_fu_576_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_47_i_fu_590_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_197_fu_596_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_198_fu_608_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i1_fu_584_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_48_i_fu_602_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_208_fu_620_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_199_fu_614_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_49_i_fu_628_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_49_i_cast_fu_636_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_51_i_fu_640_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_cast_fu_648_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_211_i_fu_652_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_213_fu_666_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_214_i_cast_fu_670_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_217_fu_680_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_216_i_cast_fu_688_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_218_fu_732_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_201_fu_736_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_195_fu_769_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_219_fu_775_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i3_42_fu_801_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_220_fu_807_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_223_fu_833_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_224_fu_837_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_206_fu_847_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_206_i_fu_853_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_207_fu_859_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_204_i_cast_fu_841_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_210_fu_873_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_225_fu_865_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_226_fu_893_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_883_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_212_fu_903_p4 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_211_fu_897_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_221_fu_921_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_42_i_fu_931_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_41_i_fu_925_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_fu_941_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i4_fu_949_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_222_fu_955_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_227_fu_995_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_214_fu_985_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_i_cast_fu_999_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);

    component poly_Sq_frombytes_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component poly_Sq_frombytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component poly_S3_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        b_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        b_coeffs_ce0 : OUT STD_LOGIC;
        b_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_S3_frombytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        msg_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msg_ce0 : OUT STD_LOGIC;
        msg_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        msg_offset : IN STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component poly_Rq_to_S3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_Rq_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        b_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        b_coeffs_ce0 : OUT STD_LOGIC;
        b_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_S3_tobytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        msg_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        msg_ce0 : OUT STD_LOGIC;
        msg_we0 : OUT STD_LOGIC;
        msg_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        msg_offset : IN STD_LOGIC_VECTOR (8 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce1 : OUT STD_LOGIC;
        a_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_dec_x1_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_dec_x3_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    x1_coeffs_U : component owcpa_dec_x1_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 677,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x1_coeffs_address0,
        ce0 => x1_coeffs_ce0,
        we0 => x1_coeffs_we0,
        d0 => x1_coeffs_d0,
        q0 => x1_coeffs_q0,
        address1 => x1_coeffs_address1,
        ce1 => x1_coeffs_ce1,
        we1 => x1_coeffs_we1,
        d1 => x1_coeffs_d1,
        q1 => x1_coeffs_q1);

    x2_coeffs_U : component owcpa_dec_x1_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 677,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x2_coeffs_address0,
        ce0 => x2_coeffs_ce0,
        we0 => x2_coeffs_we0,
        d0 => x2_coeffs_d0,
        q0 => x2_coeffs_q0,
        address1 => x2_coeffs_address1,
        ce1 => x2_coeffs_ce1,
        we1 => x2_coeffs_we1,
        d1 => x2_coeffs_d1,
        q1 => x2_coeffs_q1);

    x3_coeffs_U : component owcpa_dec_x3_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 677,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x3_coeffs_address0,
        ce0 => x3_coeffs_ce0,
        we0 => x3_coeffs_we0,
        d0 => x3_coeffs_d0,
        q0 => x3_coeffs_q0,
        address1 => x3_coeffs_address1,
        ce1 => x3_coeffs_ce1,
        we1 => x3_coeffs_we1,
        d1 => x3_coeffs_d1);

    x4_coeffs_U : component owcpa_dec_x1_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 677,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x4_coeffs_address0,
        ce0 => x4_coeffs_ce0,
        we0 => x4_coeffs_we0,
        d0 => x4_coeffs_d0,
        q0 => x4_coeffs_q0,
        address1 => x4_coeffs_address1,
        ce1 => x4_coeffs_ce1,
        we1 => x4_coeffs_we1,
        d1 => x4_coeffs_d1,
        q1 => x4_coeffs_q1);

    grp_poly_Sq_frombytes_1_fu_393 : component poly_Sq_frombytes_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Sq_frombytes_1_fu_393_ap_start,
        ap_done => grp_poly_Sq_frombytes_1_fu_393_ap_done,
        ap_idle => grp_poly_Sq_frombytes_1_fu_393_ap_idle,
        ap_ready => grp_poly_Sq_frombytes_1_fu_393_ap_ready,
        r_coeffs_address0 => grp_poly_Sq_frombytes_1_fu_393_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_Sq_frombytes_1_fu_393_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_Sq_frombytes_1_fu_393_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_Sq_frombytes_1_fu_393_r_coeffs_d0,
        r_coeffs_address1 => grp_poly_Sq_frombytes_1_fu_393_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_Sq_frombytes_1_fu_393_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_Sq_frombytes_1_fu_393_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_Sq_frombytes_1_fu_393_r_coeffs_d1,
        a_address0 => grp_poly_Sq_frombytes_1_fu_393_a_address0,
        a_ce0 => grp_poly_Sq_frombytes_1_fu_393_a_ce0,
        a_q0 => secretkey_q0,
        a_address1 => grp_poly_Sq_frombytes_1_fu_393_a_address1,
        a_ce1 => grp_poly_Sq_frombytes_1_fu_393_a_ce1,
        a_q1 => secretkey_q1);

    grp_poly_Sq_frombytes_fu_400 : component poly_Sq_frombytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Sq_frombytes_fu_400_ap_start,
        ap_done => grp_poly_Sq_frombytes_fu_400_ap_done,
        ap_idle => grp_poly_Sq_frombytes_fu_400_ap_idle,
        ap_ready => grp_poly_Sq_frombytes_fu_400_ap_ready,
        r_coeffs_address0 => grp_poly_Sq_frombytes_fu_400_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_Sq_frombytes_fu_400_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_Sq_frombytes_fu_400_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_Sq_frombytes_fu_400_r_coeffs_d0,
        r_coeffs_address1 => grp_poly_Sq_frombytes_fu_400_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_Sq_frombytes_fu_400_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_Sq_frombytes_fu_400_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_Sq_frombytes_fu_400_r_coeffs_d1,
        a_address0 => grp_poly_Sq_frombytes_fu_400_a_address0,
        a_ce0 => grp_poly_Sq_frombytes_fu_400_a_ce0,
        a_q0 => ciphertext_q0,
        a_address1 => grp_poly_Sq_frombytes_fu_400_a_address1,
        a_ce1 => grp_poly_Sq_frombytes_fu_400_a_ce1,
        a_q1 => ciphertext_q1);

    grp_poly_S3_mul_fu_408 : component poly_S3_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_S3_mul_fu_408_ap_start,
        ap_done => grp_poly_S3_mul_fu_408_ap_done,
        ap_idle => grp_poly_S3_mul_fu_408_ap_idle,
        ap_ready => grp_poly_S3_mul_fu_408_ap_ready,
        r_coeffs_address0 => grp_poly_S3_mul_fu_408_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_S3_mul_fu_408_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_S3_mul_fu_408_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_S3_mul_fu_408_r_coeffs_d0,
        r_coeffs_q0 => x4_coeffs_q0,
        r_coeffs_address1 => grp_poly_S3_mul_fu_408_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_S3_mul_fu_408_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_S3_mul_fu_408_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_S3_mul_fu_408_r_coeffs_d1,
        r_coeffs_q1 => x4_coeffs_q1,
        a_coeffs_address0 => grp_poly_S3_mul_fu_408_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_S3_mul_fu_408_a_coeffs_ce0,
        a_coeffs_q0 => x2_coeffs_q0,
        b_coeffs_address0 => grp_poly_S3_mul_fu_408_b_coeffs_address0,
        b_coeffs_ce0 => grp_poly_S3_mul_fu_408_b_coeffs_ce0,
        b_coeffs_q0 => x3_coeffs_q0);

    grp_poly_S3_frombytes_fu_415 : component poly_S3_frombytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_S3_frombytes_fu_415_ap_start,
        ap_done => grp_poly_S3_frombytes_fu_415_ap_done,
        ap_idle => grp_poly_S3_frombytes_fu_415_ap_idle,
        ap_ready => grp_poly_S3_frombytes_fu_415_ap_ready,
        r_coeffs_address0 => grp_poly_S3_frombytes_fu_415_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_S3_frombytes_fu_415_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_S3_frombytes_fu_415_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_S3_frombytes_fu_415_r_coeffs_d0,
        r_coeffs_address1 => grp_poly_S3_frombytes_fu_415_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_S3_frombytes_fu_415_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_S3_frombytes_fu_415_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_S3_frombytes_fu_415_r_coeffs_d1,
        msg_address0 => grp_poly_S3_frombytes_fu_415_msg_address0,
        msg_ce0 => grp_poly_S3_frombytes_fu_415_msg_ce0,
        msg_q0 => secretkey_q0,
        msg_offset => grp_poly_S3_frombytes_fu_415_msg_offset);

    grp_poly_Rq_to_S3_fu_425 : component poly_Rq_to_S3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Rq_to_S3_fu_425_ap_start,
        ap_done => grp_poly_Rq_to_S3_fu_425_ap_done,
        ap_idle => grp_poly_Rq_to_S3_fu_425_ap_idle,
        ap_ready => grp_poly_Rq_to_S3_fu_425_ap_ready,
        r_coeffs_address0 => grp_poly_Rq_to_S3_fu_425_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_Rq_to_S3_fu_425_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_Rq_to_S3_fu_425_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_Rq_to_S3_fu_425_r_coeffs_d0,
        r_coeffs_q0 => x2_coeffs_q0,
        r_coeffs_address1 => grp_poly_Rq_to_S3_fu_425_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_Rq_to_S3_fu_425_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_Rq_to_S3_fu_425_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_Rq_to_S3_fu_425_r_coeffs_d1,
        r_coeffs_q1 => x2_coeffs_q1,
        a_coeffs_address0 => grp_poly_Rq_to_S3_fu_425_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_Rq_to_S3_fu_425_a_coeffs_ce0,
        a_coeffs_q0 => x3_coeffs_q0);

    grp_poly_Rq_mul_fu_431 : component poly_Rq_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Rq_mul_fu_431_ap_start,
        ap_done => grp_poly_Rq_mul_fu_431_ap_done,
        ap_idle => grp_poly_Rq_mul_fu_431_ap_idle,
        ap_ready => grp_poly_Rq_mul_fu_431_ap_ready,
        r_coeffs_address0 => grp_poly_Rq_mul_fu_431_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_Rq_mul_fu_431_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_Rq_mul_fu_431_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_Rq_mul_fu_431_r_coeffs_d0,
        r_coeffs_q0 => grp_poly_Rq_mul_fu_431_r_coeffs_q0,
        a_coeffs_address0 => grp_poly_Rq_mul_fu_431_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_Rq_mul_fu_431_a_coeffs_ce0,
        a_coeffs_q0 => x1_coeffs_q0,
        b_coeffs_address0 => grp_poly_Rq_mul_fu_431_b_coeffs_address0,
        b_coeffs_ce0 => grp_poly_Rq_mul_fu_431_b_coeffs_ce0,
        b_coeffs_q0 => grp_poly_Rq_mul_fu_431_b_coeffs_q0);

    grp_poly_S3_tobytes_fu_438 : component poly_S3_tobytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_S3_tobytes_fu_438_ap_start,
        ap_done => grp_poly_S3_tobytes_fu_438_ap_done,
        ap_idle => grp_poly_S3_tobytes_fu_438_ap_idle,
        ap_ready => grp_poly_S3_tobytes_fu_438_ap_ready,
        msg_address0 => grp_poly_S3_tobytes_fu_438_msg_address0,
        msg_ce0 => grp_poly_S3_tobytes_fu_438_msg_ce0,
        msg_we0 => grp_poly_S3_tobytes_fu_438_msg_we0,
        msg_d0 => grp_poly_S3_tobytes_fu_438_msg_d0,
        msg_offset => grp_poly_S3_tobytes_fu_438_msg_offset,
        a_coeffs_address0 => grp_poly_S3_tobytes_fu_438_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_S3_tobytes_fu_438_a_coeffs_ce0,
        a_coeffs_q0 => x4_coeffs_q0,
        a_coeffs_address1 => grp_poly_S3_tobytes_fu_438_a_coeffs_address1,
        a_coeffs_ce1 => grp_poly_S3_tobytes_fu_438_a_coeffs_ce1,
        a_coeffs_q1 => x4_coeffs_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_poly_Rq_mul_fu_431_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Rq_mul_fu_431_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_i7_fu_523_p2 = ap_const_lv1_1)))) then 
                    grp_poly_Rq_mul_fu_431_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Rq_mul_fu_431_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Rq_mul_fu_431_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_Rq_to_S3_fu_425_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Rq_to_S3_fu_425_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_poly_Rq_to_S3_fu_425_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Rq_to_S3_fu_425_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Rq_to_S3_fu_425_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_S3_frombytes_fu_415_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_S3_frombytes_fu_415_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((exitcond_i_fu_474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    grp_poly_S3_frombytes_fu_415_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_S3_frombytes_fu_415_ap_ready = ap_const_logic_1)) then 
                    grp_poly_S3_frombytes_fu_415_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_S3_mul_fu_408_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_S3_mul_fu_408_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    grp_poly_S3_mul_fu_408_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_S3_mul_fu_408_ap_ready = ap_const_logic_1)) then 
                    grp_poly_S3_mul_fu_408_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_S3_tobytes_fu_438_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_S3_tobytes_fu_438_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (exitcond_i5_fu_968_p2 = ap_const_lv1_1)))) then 
                    grp_poly_S3_tobytes_fu_438_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_S3_tobytes_fu_438_ap_ready = ap_const_logic_1)) then 
                    grp_poly_S3_tobytes_fu_438_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_Sq_frombytes_1_fu_393_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Sq_frombytes_1_fu_393_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond_fu_751_p2 = ap_const_lv1_1))) then 
                    grp_poly_Sq_frombytes_1_fu_393_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Sq_frombytes_1_fu_393_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Sq_frombytes_1_fu_393_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_Sq_frombytes_fu_400_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Sq_frombytes_fu_400_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_poly_Sq_frombytes_fu_400_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Sq_frombytes_fu_400_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Sq_frombytes_fu_400_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i1_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_i1_reg_292 <= i_14_reg_1050;
            elsif (((grp_poly_S3_tobytes_fu_438_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                i_i1_reg_292 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i2_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_i2_reg_315 <= i_15_reg_1078;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond_i1_fu_559_p2 = ap_const_lv1_1))) then 
                i_i2_reg_315 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i3_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i_i3_reg_348 <= i_18_reg_1133;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (grp_poly_Rq_mul_fu_431_ap_done = ap_const_logic_1))) then 
                i_i3_reg_348 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i4_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond_i3_fu_784_p2 = ap_const_lv1_1))) then 
                i_i4_reg_359 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                i_i4_reg_359 <= i_19_reg_1147;
            end if; 
        end if;
    end process;

    i_i5_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                i_i5_reg_382 <= i_20_reg_1169;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                i_i5_reg_382 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i6_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_i6_reg_269 <= i_13_reg_1037;
            elsif (((grp_poly_S3_frombytes_fu_415_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_i6_reg_269 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i_i_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond_i2_fu_698_p2 = ap_const_lv1_1))) then 
                i_i_i_reg_326 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_i_i_reg_326 <= i_16_reg_1096;
            end if; 
        end if;
    end process;

    i_i_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_i_reg_258 <= i_12_reg_1019;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_i_reg_258 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond_i_i_fu_715_p2 = ap_const_lv1_1))) then 
                i_reg_337 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_reg_337 <= i_17_reg_1109;
            end if; 
        end if;
    end process;

    m1_i_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                m1_i_reg_303 <= m1_fu_692_p2;
            elsif (((grp_poly_S3_tobytes_fu_438_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                m1_i_reg_303 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    p1_i_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                p1_i_reg_280 <= p1_fu_674_p2;
            elsif (((grp_poly_S3_tobytes_fu_438_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                p1_i_reg_280 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    t_i_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond_i3_fu_784_p2 = ap_const_lv1_1))) then 
                t_i_reg_370 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                t_i_reg_370 <= t_2_fu_913_p3;
            end if; 
        end if;
    end process;

    tmp_i_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                tmp_i_reg_247 <= phitmp_fu_517_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                tmp_i_reg_247 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_751_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                b_coeffs_addr_4_reg_1114 <= tmp_s_fu_763_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                fail_reg_1162 <= fail_fu_963_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_12_reg_1019 <= i_12_fu_480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_13_reg_1037 <= i_13_fu_529_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                i_14_reg_1050 <= i_14_fu_565_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                i_15_reg_1078 <= i_15_fu_704_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                i_16_reg_1096 <= i_16_fu_721_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                i_17_reg_1109 <= i_17_fu_757_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                i_18_reg_1133 <= i_18_fu_790_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                i_19_reg_1147 <= i_19_fu_822_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                i_20_reg_1169 <= i_20_fu_974_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_fu_715_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                liftm_coeffs_addr_2_reg_1101 <= tmp_i_i_fu_727_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i7_fu_523_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                liftm_coeffs_addr_reg_1042 <= tmp_i8_fu_535_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i3_fu_784_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                r_coeffs_addr_25_reg_1138 <= tmp_i3_fu_796_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i5_fu_968_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                r_coeffs_addr_27_reg_1174 <= tmp_i5_fu_980_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond_i1_fu_559_p2 = ap_const_lv1_1))) then
                tmp_209_reg_1060 <= tmp_211_i_fu_652_p2(32 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i2_fu_698_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    tmp_i2_reg_1083(9 downto 0) <= tmp_i2_fu_710_p1(9 downto 0);
            end if;
        end if;
    end process;
    tmp_i2_reg_1083(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, exitcond_i_fu_474_p2, ap_CS_fsm_state7, exitcond_i7_fu_523_p2, ap_CS_fsm_state18, exitcond_i1_fu_559_p2, ap_CS_fsm_state20, exitcond_i2_fu_698_p2, ap_CS_fsm_state22, exitcond_i_i_fu_715_p2, ap_CS_fsm_state24, exitcond_fu_751_p2, ap_CS_fsm_state28, grp_poly_Rq_mul_fu_431_ap_done, ap_CS_fsm_state29, exitcond_i3_fu_784_p2, ap_CS_fsm_state31, exitcond_i4_fu_816_p2, ap_CS_fsm_state34, exitcond_i5_fu_968_p2, grp_poly_Sq_frombytes_1_fu_393_ap_done, grp_poly_Sq_frombytes_fu_400_ap_done, grp_poly_S3_mul_fu_408_ap_done, grp_poly_S3_frombytes_fu_415_ap_done, grp_poly_Rq_to_S3_fu_425_ap_done, grp_poly_S3_tobytes_fu_438_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state26, ap_CS_fsm_state2, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state36)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_poly_Sq_frombytes_fu_400_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((exitcond_i_fu_474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((grp_poly_S3_frombytes_fu_415_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_i7_fu_523_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_poly_Rq_mul_fu_431_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_poly_Rq_to_S3_fu_425_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_poly_S3_frombytes_fu_415_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_poly_S3_mul_fu_408_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_poly_S3_tobytes_fu_438_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond_i1_fu_559_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond_i2_fu_698_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond_i_i_fu_715_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond_fu_751_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state26 => 
                if (((grp_poly_Sq_frombytes_1_fu_393_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (grp_poly_Rq_mul_fu_431_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond_i3_fu_784_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond_i4_fu_816_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (exitcond_i5_fu_968_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state36 => 
                if (((grp_poly_S3_tobytes_fu_438_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_poly_S3_tobytes_fu_438_ap_done, ap_CS_fsm_state36)
    begin
        if ((((grp_poly_S3_tobytes_fu_438_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_poly_S3_tobytes_fu_438_ap_done, ap_CS_fsm_state36)
    begin
        if (((grp_poly_S3_tobytes_fu_438_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= fail_reg_1162;
    b_coeffs_addr_reg_1010 <= ap_const_lv64_2A4(10 - 1 downto 0);
    ciphertext_address0 <= grp_poly_Sq_frombytes_fu_400_a_address0;
    ciphertext_address1 <= grp_poly_Sq_frombytes_fu_400_a_address1;
    ciphertext_ce0 <= grp_poly_Sq_frombytes_fu_400_a_ce0;
    ciphertext_ce1 <= grp_poly_Sq_frombytes_fu_400_a_ce1;
    exitcond_fu_751_p2 <= "1" when (i_reg_337 = ap_const_lv10_2A5) else "0";
    exitcond_i1_fu_559_p2 <= "1" when (i_i1_reg_292 = ap_const_lv10_2A5) else "0";
    exitcond_i2_fu_698_p2 <= "1" when (i_i2_reg_315 = ap_const_lv10_2A5) else "0";
    exitcond_i3_fu_784_p2 <= "1" when (i_i3_reg_348 = ap_const_lv10_2A5) else "0";
    exitcond_i4_fu_816_p2 <= "1" when (i_i4_reg_359 = ap_const_lv10_2A5) else "0";
    exitcond_i5_fu_968_p2 <= "1" when (i_i5_reg_382 = ap_const_lv10_2A5) else "0";
    exitcond_i7_fu_523_p2 <= "1" when (i_i6_reg_269 = ap_const_lv10_2A5) else "0";
    exitcond_i_fu_474_p2 <= "1" when (i_i_reg_258 = ap_const_lv10_2A4) else "0";
    exitcond_i_i_fu_715_p2 <= "1" when (i_i_i_reg_326 = ap_const_lv10_2A5) else "0";
    fail_fu_963_p2 <= (tmp_222_fu_955_p3 or tmp_209_reg_1060);
    grp_fu_448_p4 <= x2_coeffs_q0(11 downto 1);
    grp_fu_458_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(grp_fu_448_p4));
    grp_fu_464_p4 <= x2_coeffs_q0(15 downto 11);
    grp_poly_Rq_mul_fu_431_ap_start <= grp_poly_Rq_mul_fu_431_ap_start_reg;

    grp_poly_Rq_mul_fu_431_b_coeffs_q0_assign_proc : process(ap_CS_fsm_state28, x2_coeffs_q0, x3_coeffs_q0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_poly_Rq_mul_fu_431_b_coeffs_q0 <= x3_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_poly_Rq_mul_fu_431_b_coeffs_q0 <= x2_coeffs_q0;
        else 
            grp_poly_Rq_mul_fu_431_b_coeffs_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_Rq_mul_fu_431_r_coeffs_q0_assign_proc : process(ap_CS_fsm_state28, x3_coeffs_q0, x4_coeffs_q0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_poly_Rq_mul_fu_431_r_coeffs_q0 <= x4_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_poly_Rq_mul_fu_431_r_coeffs_q0 <= x3_coeffs_q0;
        else 
            grp_poly_Rq_mul_fu_431_r_coeffs_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_poly_Rq_to_S3_fu_425_ap_start <= grp_poly_Rq_to_S3_fu_425_ap_start_reg;
    grp_poly_S3_frombytes_fu_415_ap_start <= grp_poly_S3_frombytes_fu_415_ap_start_reg;

    grp_poly_S3_frombytes_fu_415_msg_offset_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_poly_S3_frombytes_fu_415_msg_offset <= ap_const_lv10_88;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_poly_S3_frombytes_fu_415_msg_offset <= ap_const_lv10_0;
        else 
            grp_poly_S3_frombytes_fu_415_msg_offset <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_poly_S3_mul_fu_408_ap_start <= grp_poly_S3_mul_fu_408_ap_start_reg;
    grp_poly_S3_tobytes_fu_438_ap_start <= grp_poly_S3_tobytes_fu_438_ap_start_reg;

    grp_poly_S3_tobytes_fu_438_msg_offset_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_poly_S3_tobytes_fu_438_msg_offset <= ap_const_lv9_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_poly_S3_tobytes_fu_438_msg_offset <= ap_const_lv9_88;
        else 
            grp_poly_S3_tobytes_fu_438_msg_offset <= "XXXXXXXXX";
        end if; 
    end process;

    grp_poly_Sq_frombytes_1_fu_393_ap_start <= grp_poly_Sq_frombytes_1_fu_393_ap_start_reg;
    grp_poly_Sq_frombytes_fu_400_ap_start <= grp_poly_Sq_frombytes_fu_400_ap_start_reg;
    i_12_fu_480_p2 <= std_logic_vector(unsigned(i_i_reg_258) + unsigned(ap_const_lv10_1));
    i_13_fu_529_p2 <= std_logic_vector(unsigned(i_i6_reg_269) + unsigned(ap_const_lv10_1));
    i_14_fu_565_p2 <= std_logic_vector(unsigned(i_i1_reg_292) + unsigned(ap_const_lv10_1));
    i_15_fu_704_p2 <= std_logic_vector(unsigned(i_i2_reg_315) + unsigned(ap_const_lv10_1));
    i_16_fu_721_p2 <= std_logic_vector(unsigned(i_i_i_reg_326) + unsigned(ap_const_lv10_1));
    i_17_fu_757_p2 <= std_logic_vector(unsigned(i_reg_337) + unsigned(ap_const_lv10_1));
    i_18_fu_790_p2 <= std_logic_vector(unsigned(i_i3_reg_348) + unsigned(ap_const_lv10_1));
    i_19_fu_822_p2 <= std_logic_vector(unsigned(i_i4_reg_359) + unsigned(ap_const_lv10_1));
    i_20_fu_974_p2 <= std_logic_vector(unsigned(i_i5_reg_382) + unsigned(ap_const_lv10_1));
    m1_fu_692_p2 <= std_logic_vector(unsigned(tmp_216_i_cast_fu_688_p1) + unsigned(m1_i_reg_303));
    m1_i_cast9_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m1_i_reg_303),11));
    p1_fu_674_p2 <= std_logic_vector(unsigned(tmp_214_i_cast_fu_670_p1) + unsigned(p1_i_reg_280));
    p1_i_cast_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p1_i_reg_280),11));
    phitmp_fu_517_p2 <= std_logic_vector(unsigned(tmp_203_fu_506_p1) + unsigned(tmp_202_fu_502_p1));
    rm_address0 <= grp_poly_S3_tobytes_fu_438_msg_address0;

    rm_ce0_assign_proc : process(grp_poly_S3_tobytes_fu_438_msg_ce0, ap_CS_fsm_state17, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            rm_ce0 <= grp_poly_S3_tobytes_fu_438_msg_ce0;
        else 
            rm_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rm_d0 <= grp_poly_S3_tobytes_fu_438_msg_d0;

    rm_we0_assign_proc : process(grp_poly_S3_tobytes_fu_438_msg_we0, ap_CS_fsm_state17, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            rm_we0 <= grp_poly_S3_tobytes_fu_438_msg_we0;
        else 
            rm_we0 <= ap_const_logic_0;
        end if; 
    end process;


    secretkey_address0_assign_proc : process(grp_poly_Sq_frombytes_1_fu_393_a_address0, grp_poly_S3_frombytes_fu_415_msg_address0, ap_CS_fsm_state6, ap_CS_fsm_state26, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            secretkey_address0 <= grp_poly_S3_frombytes_fu_415_msg_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            secretkey_address0 <= grp_poly_Sq_frombytes_1_fu_393_a_address0;
        else 
            secretkey_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    secretkey_address1 <= grp_poly_Sq_frombytes_1_fu_393_a_address1;

    secretkey_ce0_assign_proc : process(grp_poly_Sq_frombytes_1_fu_393_a_ce0, grp_poly_S3_frombytes_fu_415_msg_ce0, ap_CS_fsm_state6, ap_CS_fsm_state26, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            secretkey_ce0 <= grp_poly_S3_frombytes_fu_415_msg_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            secretkey_ce0 <= grp_poly_Sq_frombytes_1_fu_393_a_ce0;
        else 
            secretkey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    secretkey_ce1_assign_proc : process(grp_poly_Sq_frombytes_1_fu_393_a_ce1, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            secretkey_ce1 <= grp_poly_Sq_frombytes_1_fu_393_a_ce1;
        else 
            secretkey_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    t_2_fu_913_p3 <= (tmp_212_fu_903_p4 & tmp_211_fu_897_p2);
    t_cast_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_i_fu_640_p3),33));
    t_fu_941_p3 <= (tmp_42_i_fu_931_p4 & tmp_41_i_fu_925_p2);
    tmp_183_i_cast_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_cast_fu_491_p2),16));
    tmp_184_i_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_258),64));
    tmp_185_i_fu_510_p2 <= std_logic_vector(unsigned(x1_coeffs_q1) + unsigned(x1_coeffs_q0));
    tmp_194_fu_544_p2 <= (tmp_205_fu_540_p1 or grp_fu_458_p2);
    tmp_195_fu_769_p2 <= std_logic_vector(unsigned(x1_coeffs_q1) - unsigned(x2_coeffs_q0));
    tmp_196_cast_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_219_fu_775_p1),16));
    tmp_197_fu_596_p2 <= std_logic_vector(unsigned(p1_i_reg_280) + unsigned(m1_i_reg_303));
    tmp_198_fu_608_p2 <= (tmp_197_fu_596_p2 xor ap_const_lv10_FE);
    tmp_199_fu_614_p2 <= (tmp_i1_fu_584_p2 or tmp_198_fu_608_p2);
    tmp_201_fu_736_p2 <= (tmp_218_fu_732_p1 or grp_fu_458_p2);
    tmp_202_fu_502_p1 <= x1_coeffs_q1(11 - 1 downto 0);
    tmp_202_i_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i4_reg_359),64));
    tmp_203_fu_506_p1 <= x1_coeffs_q0(11 - 1 downto 0);
    tmp_204_i_cast_fu_841_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(tmp_223_fu_833_p1));
    tmp_205_fu_540_p1 <= x2_coeffs_q0(11 - 1 downto 0);
    tmp_206_fu_847_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(tmp_224_fu_837_p1));
    tmp_206_i_fu_853_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(tmp_224_fu_837_p1));
    tmp_207_fu_859_p2 <= (tmp_206_i_fu_853_p2 or tmp_206_fu_847_p2);
    tmp_208_fu_620_p3 <= tmp_48_i_fu_602_p2(10 downto 10);
    tmp_210_fu_873_p4 <= tmp_204_i_cast_fu_841_p2(10 downto 3);
    tmp_211_fu_897_p2 <= (tmp_fu_883_p4 or tmp_226_fu_893_p1);
    tmp_211_i_fu_652_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(t_cast_fu_648_p1));
    tmp_212_fu_903_p4 <= t_i_reg_370(63 downto 11);
    tmp_213_fu_666_p1 <= x4_coeffs_q0(1 - 1 downto 0);
    tmp_213_i_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_292),64));
    tmp_214_fu_985_p4 <= x4_coeffs_q0(11 downto 10);
    tmp_214_i_cast_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_213_fu_666_p1),10));
    tmp_216_i_cast_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_217_fu_680_p3),10));
    tmp_217_fu_680_p3 <= x4_coeffs_q0(1 downto 1);
    tmp_218_fu_732_p1 <= x2_coeffs_q0(11 - 1 downto 0);
    tmp_219_fu_775_p1 <= tmp_195_fu_769_p2(11 - 1 downto 0);
    tmp_220_fu_807_p1 <= tmp_i3_42_fu_801_p2(11 - 1 downto 0);
    tmp_221_fu_921_p1 <= t_i_reg_370(16 - 1 downto 0);
    tmp_222_fu_955_p3 <= tmp_i4_fu_949_p2(63 downto 63);
    tmp_223_fu_833_p1 <= x4_coeffs_q1(11 - 1 downto 0);
    tmp_224_fu_837_p1 <= x4_coeffs_q1(3 - 1 downto 0);
    tmp_225_fu_865_p3 <= tmp_207_fu_859_p2(2 downto 2);
    tmp_226_fu_893_p1 <= t_i_reg_370(11 - 1 downto 0);
    tmp_227_fu_995_p1 <= x4_coeffs_q0(2 - 1 downto 0);
    tmp_3_i_fu_550_p3 <= (grp_fu_464_p4 & tmp_194_fu_544_p2);
    tmp_3_i_i_fu_742_p3 <= (grp_fu_464_p4 & tmp_201_fu_736_p2);
    tmp_41_i_fu_925_p2 <= (x4_coeffs_q1 or tmp_221_fu_921_p1);
    tmp_42_i_fu_931_p4 <= t_i_reg_370(63 downto 16);
    tmp_47_i_fu_590_p2 <= std_logic_vector(unsigned(m1_i_cast9_fu_580_p1) + unsigned(p1_i_cast_fu_576_p1));
    tmp_48_i_fu_602_p2 <= (tmp_47_i_fu_590_p2 xor ap_const_lv11_FE);
    tmp_49_i_cast_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_i_fu_628_p3),16));
    tmp_49_i_fu_628_p3 <= (tmp_208_fu_620_p3 & tmp_199_fu_614_p2);
    tmp_4_i_cast_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_220_fu_807_p1),16));
    tmp_51_i_fu_640_p3 <= (ap_const_lv16_0 & tmp_49_i_cast_fu_636_p1);
    tmp_7_i_cast_fu_999_p2 <= (tmp_227_fu_995_p1 xor tmp_214_fu_985_p4);
    tmp_8_i_cast_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_i_cast_fu_999_p2),16));
    tmp_fu_883_p4 <= ((tmp_210_fu_873_p4 & tmp_225_fu_865_p3) & ap_const_lv2_0);
    tmp_i1_fu_584_p2 <= (p1_i_reg_280 xor m1_i_reg_303);
    tmp_i2_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i2_reg_315),64));
    tmp_i3_42_fu_801_p2 <= std_logic_vector(unsigned(x4_coeffs_q0) - unsigned(x4_coeffs_q1));
    tmp_i3_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i3_reg_348),64));
    tmp_i4_fu_949_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(t_fu_941_p3));
    tmp_i5_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i5_reg_382),64));
    tmp_i8_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i6_reg_269),64));
    tmp_i_cast_fu_491_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(tmp_i_reg_247));
    tmp_i_i_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i_reg_326),64));
    tmp_s_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_337),64));

    x1_coeffs_address0_assign_proc : process(b_coeffs_addr_reg_1010, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_i_fu_474_p2, b_coeffs_addr_4_reg_1114, ap_CS_fsm_state28, grp_poly_Sq_frombytes_fu_400_r_coeffs_address0, grp_poly_Rq_mul_fu_431_a_coeffs_address0, ap_CS_fsm_state25, ap_CS_fsm_state2, ap_CS_fsm_state9, tmp_184_i_fu_486_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            x1_coeffs_address0 <= b_coeffs_addr_4_reg_1114;
        elsif (((exitcond_i_fu_474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x1_coeffs_address0 <= b_coeffs_addr_reg_1010;
        elsif (((exitcond_i_fu_474_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x1_coeffs_address0 <= tmp_184_i_fu_486_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x1_coeffs_address0 <= ap_const_lv64_2A4(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            x1_coeffs_address0 <= grp_poly_Rq_mul_fu_431_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_address0 <= grp_poly_Sq_frombytes_fu_400_r_coeffs_address0;
        else 
            x1_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state24, grp_poly_Sq_frombytes_fu_400_r_coeffs_address1, ap_CS_fsm_state2, tmp_s_fu_763_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            x1_coeffs_address1 <= tmp_s_fu_763_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            x1_coeffs_address1 <= ap_const_lv64_2A4(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_address1 <= grp_poly_Sq_frombytes_fu_400_r_coeffs_address1;
        else 
            x1_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_i_fu_474_p2, ap_CS_fsm_state28, grp_poly_Sq_frombytes_fu_400_r_coeffs_ce0, grp_poly_Rq_mul_fu_431_a_coeffs_ce0, ap_CS_fsm_state25, ap_CS_fsm_state2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state25) or ((exitcond_i_fu_474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((exitcond_i_fu_474_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            x1_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            x1_coeffs_ce0 <= grp_poly_Rq_mul_fu_431_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_ce0 <= grp_poly_Sq_frombytes_fu_400_r_coeffs_ce0;
        else 
            x1_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state24, grp_poly_Sq_frombytes_fu_400_r_coeffs_ce1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            x1_coeffs_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_ce1 <= grp_poly_Sq_frombytes_fu_400_r_coeffs_ce1;
        else 
            x1_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_i_fu_474_p2, grp_poly_Sq_frombytes_fu_400_r_coeffs_d0, ap_CS_fsm_state25, ap_CS_fsm_state2, tmp_183_i_cast_fu_497_p1, tmp_196_cast_fu_779_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            x1_coeffs_d0 <= tmp_196_cast_fu_779_p1;
        elsif (((exitcond_i_fu_474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x1_coeffs_d0 <= tmp_183_i_cast_fu_497_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x1_coeffs_d0 <= ap_const_lv16_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_d0 <= grp_poly_Sq_frombytes_fu_400_r_coeffs_d0;
        else 
            x1_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_d1_assign_proc : process(ap_CS_fsm_state5, grp_poly_Sq_frombytes_fu_400_r_coeffs_d1, ap_CS_fsm_state2, tmp_185_i_fu_510_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x1_coeffs_d1 <= tmp_185_i_fu_510_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_d1 <= grp_poly_Sq_frombytes_fu_400_r_coeffs_d1;
        else 
            x1_coeffs_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_i_fu_474_p2, grp_poly_Sq_frombytes_fu_400_r_coeffs_we0, ap_CS_fsm_state25, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state25) or ((exitcond_i_fu_474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            x1_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_we0 <= grp_poly_Sq_frombytes_fu_400_r_coeffs_we0;
        else 
            x1_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_we1_assign_proc : process(ap_CS_fsm_state5, grp_poly_Sq_frombytes_fu_400_r_coeffs_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x1_coeffs_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_we1 <= grp_poly_Sq_frombytes_fu_400_r_coeffs_we1;
        else 
            x1_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_address0_assign_proc : process(ap_CS_fsm_state7, liftm_coeffs_addr_reg_1042, exitcond_i7_fu_523_p2, tmp_i2_reg_1083, ap_CS_fsm_state22, liftm_coeffs_addr_2_reg_1101, ap_CS_fsm_state24, grp_poly_S3_mul_fu_408_a_coeffs_address0, grp_poly_S3_frombytes_fu_415_r_coeffs_address0, grp_poly_Rq_to_S3_fu_425_r_coeffs_address0, grp_poly_Rq_mul_fu_431_b_coeffs_address0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state15, ap_CS_fsm_state11, ap_CS_fsm_state9, tmp_i8_fu_535_p1, tmp_i_i_fu_727_p1, tmp_s_fu_763_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            x2_coeffs_address0 <= tmp_s_fu_763_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            x2_coeffs_address0 <= liftm_coeffs_addr_2_reg_1101;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            x2_coeffs_address0 <= tmp_i_i_fu_727_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            x2_coeffs_address0 <= tmp_i2_reg_1083(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x2_coeffs_address0 <= liftm_coeffs_addr_reg_1042;
        elsif (((exitcond_i7_fu_523_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            x2_coeffs_address0 <= tmp_i8_fu_535_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x2_coeffs_address0 <= grp_poly_Rq_mul_fu_431_b_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x2_coeffs_address0 <= grp_poly_Rq_to_S3_fu_425_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_address0 <= grp_poly_S3_frombytes_fu_415_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x2_coeffs_address0 <= grp_poly_S3_mul_fu_408_a_coeffs_address0;
        else 
            x2_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_address1_assign_proc : process(grp_poly_S3_frombytes_fu_415_r_coeffs_address1, grp_poly_Rq_to_S3_fu_425_r_coeffs_address1, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x2_coeffs_address1 <= grp_poly_Rq_to_S3_fu_425_r_coeffs_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_address1 <= grp_poly_S3_frombytes_fu_415_r_coeffs_address1;
        else 
            x2_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_ce0_assign_proc : process(ap_CS_fsm_state7, exitcond_i7_fu_523_p2, ap_CS_fsm_state22, ap_CS_fsm_state24, grp_poly_S3_mul_fu_408_a_coeffs_ce0, grp_poly_S3_frombytes_fu_415_r_coeffs_ce0, grp_poly_Rq_to_S3_fu_425_r_coeffs_ce0, grp_poly_Rq_mul_fu_431_b_coeffs_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state15, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((exitcond_i7_fu_523_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            x2_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x2_coeffs_ce0 <= grp_poly_Rq_mul_fu_431_b_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x2_coeffs_ce0 <= grp_poly_Rq_to_S3_fu_425_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_ce0 <= grp_poly_S3_frombytes_fu_415_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x2_coeffs_ce0 <= grp_poly_S3_mul_fu_408_a_coeffs_ce0;
        else 
            x2_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_ce1_assign_proc : process(grp_poly_S3_frombytes_fu_415_r_coeffs_ce1, grp_poly_Rq_to_S3_fu_425_r_coeffs_ce1, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x2_coeffs_ce1 <= grp_poly_Rq_to_S3_fu_425_r_coeffs_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_ce1 <= grp_poly_S3_frombytes_fu_415_r_coeffs_ce1;
        else 
            x2_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_d0_assign_proc : process(x4_coeffs_q0, grp_poly_S3_frombytes_fu_415_r_coeffs_d0, grp_poly_Rq_to_S3_fu_425_r_coeffs_d0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state11, tmp_3_i_fu_550_p3, tmp_3_i_i_fu_742_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            x2_coeffs_d0 <= tmp_3_i_i_fu_742_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            x2_coeffs_d0 <= x4_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x2_coeffs_d0 <= tmp_3_i_fu_550_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x2_coeffs_d0 <= grp_poly_Rq_to_S3_fu_425_r_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_d0 <= grp_poly_S3_frombytes_fu_415_r_coeffs_d0;
        else 
            x2_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_d1_assign_proc : process(grp_poly_S3_frombytes_fu_415_r_coeffs_d1, grp_poly_Rq_to_S3_fu_425_r_coeffs_d1, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x2_coeffs_d1 <= grp_poly_Rq_to_S3_fu_425_r_coeffs_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_d1 <= grp_poly_S3_frombytes_fu_415_r_coeffs_d1;
        else 
            x2_coeffs_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_we0_assign_proc : process(grp_poly_S3_frombytes_fu_415_r_coeffs_we0, grp_poly_Rq_to_S3_fu_425_r_coeffs_we0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            x2_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x2_coeffs_we0 <= grp_poly_Rq_to_S3_fu_425_r_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_we0 <= grp_poly_S3_frombytes_fu_415_r_coeffs_we0;
        else 
            x2_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_we1_assign_proc : process(grp_poly_S3_frombytes_fu_415_r_coeffs_we1, grp_poly_Rq_to_S3_fu_425_r_coeffs_we1, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x2_coeffs_we1 <= grp_poly_Rq_to_S3_fu_425_r_coeffs_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_we1 <= grp_poly_S3_frombytes_fu_415_r_coeffs_we1;
        else 
            x2_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_address0_assign_proc : process(ap_CS_fsm_state28, grp_poly_Sq_frombytes_1_fu_393_r_coeffs_address0, grp_poly_S3_mul_fu_408_b_coeffs_address0, grp_poly_S3_frombytes_fu_415_r_coeffs_address0, grp_poly_Rq_to_S3_fu_425_a_coeffs_address0, grp_poly_Rq_mul_fu_431_r_coeffs_address0, grp_poly_Rq_mul_fu_431_b_coeffs_address0, ap_CS_fsm_state26, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            x3_coeffs_address0 <= grp_poly_Rq_mul_fu_431_b_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_address0 <= grp_poly_Rq_mul_fu_431_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x3_coeffs_address0 <= grp_poly_Rq_to_S3_fu_425_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_address0 <= grp_poly_S3_frombytes_fu_415_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x3_coeffs_address0 <= grp_poly_S3_mul_fu_408_b_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            x3_coeffs_address0 <= grp_poly_Sq_frombytes_1_fu_393_r_coeffs_address0;
        else 
            x3_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_address1_assign_proc : process(grp_poly_Sq_frombytes_1_fu_393_r_coeffs_address1, grp_poly_S3_frombytes_fu_415_r_coeffs_address1, ap_CS_fsm_state26, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_address1 <= grp_poly_S3_frombytes_fu_415_r_coeffs_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            x3_coeffs_address1 <= grp_poly_Sq_frombytes_1_fu_393_r_coeffs_address1;
        else 
            x3_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_ce0_assign_proc : process(ap_CS_fsm_state28, grp_poly_Sq_frombytes_1_fu_393_r_coeffs_ce0, grp_poly_S3_mul_fu_408_b_coeffs_ce0, grp_poly_S3_frombytes_fu_415_r_coeffs_ce0, grp_poly_Rq_to_S3_fu_425_a_coeffs_ce0, grp_poly_Rq_mul_fu_431_r_coeffs_ce0, grp_poly_Rq_mul_fu_431_b_coeffs_ce0, ap_CS_fsm_state26, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            x3_coeffs_ce0 <= grp_poly_Rq_mul_fu_431_b_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_ce0 <= grp_poly_Rq_mul_fu_431_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x3_coeffs_ce0 <= grp_poly_Rq_to_S3_fu_425_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_ce0 <= grp_poly_S3_frombytes_fu_415_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x3_coeffs_ce0 <= grp_poly_S3_mul_fu_408_b_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            x3_coeffs_ce0 <= grp_poly_Sq_frombytes_1_fu_393_r_coeffs_ce0;
        else 
            x3_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_ce1_assign_proc : process(grp_poly_Sq_frombytes_1_fu_393_r_coeffs_ce1, grp_poly_S3_frombytes_fu_415_r_coeffs_ce1, ap_CS_fsm_state26, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_ce1 <= grp_poly_S3_frombytes_fu_415_r_coeffs_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            x3_coeffs_ce1 <= grp_poly_Sq_frombytes_1_fu_393_r_coeffs_ce1;
        else 
            x3_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_d0_assign_proc : process(grp_poly_Sq_frombytes_1_fu_393_r_coeffs_d0, grp_poly_S3_frombytes_fu_415_r_coeffs_d0, grp_poly_Rq_mul_fu_431_r_coeffs_d0, ap_CS_fsm_state26, ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_d0 <= grp_poly_Rq_mul_fu_431_r_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_d0 <= grp_poly_S3_frombytes_fu_415_r_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            x3_coeffs_d0 <= grp_poly_Sq_frombytes_1_fu_393_r_coeffs_d0;
        else 
            x3_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_d1_assign_proc : process(grp_poly_Sq_frombytes_1_fu_393_r_coeffs_d1, grp_poly_S3_frombytes_fu_415_r_coeffs_d1, ap_CS_fsm_state26, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_d1 <= grp_poly_S3_frombytes_fu_415_r_coeffs_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            x3_coeffs_d1 <= grp_poly_Sq_frombytes_1_fu_393_r_coeffs_d1;
        else 
            x3_coeffs_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_we0_assign_proc : process(grp_poly_Sq_frombytes_1_fu_393_r_coeffs_we0, grp_poly_S3_frombytes_fu_415_r_coeffs_we0, grp_poly_Rq_mul_fu_431_r_coeffs_we0, ap_CS_fsm_state26, ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_we0 <= grp_poly_Rq_mul_fu_431_r_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_we0 <= grp_poly_S3_frombytes_fu_415_r_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            x3_coeffs_we0 <= grp_poly_Sq_frombytes_1_fu_393_r_coeffs_we0;
        else 
            x3_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_we1_assign_proc : process(grp_poly_Sq_frombytes_1_fu_393_r_coeffs_we1, grp_poly_S3_frombytes_fu_415_r_coeffs_we1, ap_CS_fsm_state26, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_we1 <= grp_poly_S3_frombytes_fu_415_r_coeffs_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            x3_coeffs_we1 <= grp_poly_Sq_frombytes_1_fu_393_r_coeffs_we1;
        else 
            x3_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x4_coeffs_address0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state20, tmp_i2_fu_710_p1, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state34, r_coeffs_addr_27_reg_1174, exitcond_i5_fu_968_p2, grp_poly_S3_mul_fu_408_r_coeffs_address0, grp_poly_Rq_mul_fu_431_r_coeffs_address0, grp_poly_S3_tobytes_fu_438_a_coeffs_address0, ap_CS_fsm_state17, ap_CS_fsm_state35, ap_CS_fsm_state15, ap_CS_fsm_state36, tmp_213_i_fu_571_p1, tmp_i3_fu_796_p1, tmp_i5_fu_980_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            x4_coeffs_address0 <= r_coeffs_addr_27_reg_1174;
        elsif (((exitcond_i5_fu_968_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            x4_coeffs_address0 <= tmp_i5_fu_980_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            x4_coeffs_address0 <= tmp_i3_fu_796_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            x4_coeffs_address0 <= tmp_i2_fu_710_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            x4_coeffs_address0 <= tmp_213_i_fu_571_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            x4_coeffs_address0 <= grp_poly_S3_tobytes_fu_438_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            x4_coeffs_address0 <= grp_poly_Rq_mul_fu_431_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x4_coeffs_address0 <= grp_poly_S3_mul_fu_408_r_coeffs_address0;
        else 
            x4_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x4_coeffs_address1_assign_proc : process(ap_CS_fsm_state29, r_coeffs_addr_25_reg_1138, ap_CS_fsm_state31, exitcond_i4_fu_816_p2, grp_poly_S3_mul_fu_408_r_coeffs_address1, grp_poly_S3_tobytes_fu_438_a_coeffs_address1, ap_CS_fsm_state17, ap_CS_fsm_state30, ap_CS_fsm_state15, ap_CS_fsm_state36, tmp_202_i_fu_828_p1)
    begin
        if (((exitcond_i4_fu_816_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            x4_coeffs_address1 <= tmp_202_i_fu_828_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            x4_coeffs_address1 <= r_coeffs_addr_25_reg_1138;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond_i4_fu_816_p2 = ap_const_lv1_1)))) then 
            x4_coeffs_address1 <= ap_const_lv64_2A4(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            x4_coeffs_address1 <= grp_poly_S3_tobytes_fu_438_a_coeffs_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x4_coeffs_address1 <= grp_poly_S3_mul_fu_408_r_coeffs_address1;
        else 
            x4_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    x4_coeffs_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state34, exitcond_i5_fu_968_p2, grp_poly_S3_mul_fu_408_r_coeffs_ce0, grp_poly_Rq_mul_fu_431_r_coeffs_ce0, grp_poly_S3_tobytes_fu_438_a_coeffs_ce0, ap_CS_fsm_state17, ap_CS_fsm_state35, ap_CS_fsm_state15, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((exitcond_i5_fu_968_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34)))) then 
            x4_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            x4_coeffs_ce0 <= grp_poly_S3_tobytes_fu_438_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            x4_coeffs_ce0 <= grp_poly_Rq_mul_fu_431_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x4_coeffs_ce0 <= grp_poly_S3_mul_fu_408_r_coeffs_ce0;
        else 
            x4_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x4_coeffs_ce1_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state31, exitcond_i4_fu_816_p2, grp_poly_S3_mul_fu_408_r_coeffs_ce1, grp_poly_S3_tobytes_fu_438_a_coeffs_ce1, ap_CS_fsm_state17, ap_CS_fsm_state30, ap_CS_fsm_state15, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond_i4_fu_816_p2 = ap_const_lv1_1)) or ((exitcond_i4_fu_816_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31)))) then 
            x4_coeffs_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            x4_coeffs_ce1 <= grp_poly_S3_tobytes_fu_438_a_coeffs_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x4_coeffs_ce1 <= grp_poly_S3_mul_fu_408_r_coeffs_ce1;
        else 
            x4_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x4_coeffs_d0_assign_proc : process(ap_CS_fsm_state28, grp_poly_S3_mul_fu_408_r_coeffs_d0, grp_poly_Rq_mul_fu_431_r_coeffs_d0, ap_CS_fsm_state35, ap_CS_fsm_state15, tmp_8_i_cast_fu_1005_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            x4_coeffs_d0 <= tmp_8_i_cast_fu_1005_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            x4_coeffs_d0 <= grp_poly_Rq_mul_fu_431_r_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x4_coeffs_d0 <= grp_poly_S3_mul_fu_408_r_coeffs_d0;
        else 
            x4_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x4_coeffs_d1_assign_proc : process(grp_poly_S3_mul_fu_408_r_coeffs_d1, ap_CS_fsm_state30, ap_CS_fsm_state15, tmp_4_i_cast_fu_811_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            x4_coeffs_d1 <= tmp_4_i_cast_fu_811_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x4_coeffs_d1 <= grp_poly_S3_mul_fu_408_r_coeffs_d1;
        else 
            x4_coeffs_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x4_coeffs_we0_assign_proc : process(ap_CS_fsm_state28, grp_poly_S3_mul_fu_408_r_coeffs_we0, grp_poly_Rq_mul_fu_431_r_coeffs_we0, ap_CS_fsm_state35, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            x4_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            x4_coeffs_we0 <= grp_poly_Rq_mul_fu_431_r_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x4_coeffs_we0 <= grp_poly_S3_mul_fu_408_r_coeffs_we0;
        else 
            x4_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x4_coeffs_we1_assign_proc : process(grp_poly_S3_mul_fu_408_r_coeffs_we1, ap_CS_fsm_state30, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            x4_coeffs_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x4_coeffs_we1 <= grp_poly_S3_mul_fu_408_r_coeffs_we1;
        else 
            x4_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
