// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="crypto_kem_enc,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tfbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.122000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=33,HLS_SYN_DSP=2,HLS_SYN_FF=9199,HLS_SYN_LUT=47392,HLS_VERSION=2018_3}" *)

module crypto_kem_enc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        c_address0,
        c_ce0,
        c_we0,
        c_d0,
        c_address1,
        c_ce1,
        c_we1,
        c_d1,
        k_address0,
        k_ce0,
        k_we0,
        k_d0,
        pk_address0,
        pk_ce0,
        pk_q0,
        pk_address1,
        pk_ce1,
        pk_q1,
        DRBG_ctx_V_address0,
        DRBG_ctx_V_ce0,
        DRBG_ctx_V_we0,
        DRBG_ctx_V_d0,
        DRBG_ctx_V_q0,
        DRBG_ctx_V_address1,
        DRBG_ctx_V_ce1,
        DRBG_ctx_V_q1,
        DRBG_ctx_Key_address0,
        DRBG_ctx_Key_ce0,
        DRBG_ctx_Key_we0,
        DRBG_ctx_Key_d0,
        DRBG_ctx_Key_q0,
        DRBG_ctx_Key_address1,
        DRBG_ctx_Key_ce1,
        DRBG_ctx_Key_q1,
        DRBG_ctx_reseed_counter_i,
        DRBG_ctx_reseed_counter_o,
        DRBG_ctx_reseed_counter_o_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] c_address0;
output   c_ce0;
output   c_we0;
output  [7:0] c_d0;
output  [9:0] c_address1;
output   c_ce1;
output   c_we1;
output  [7:0] c_d1;
output  [4:0] k_address0;
output   k_ce0;
output   k_we0;
output  [7:0] k_d0;
output  [9:0] pk_address0;
output   pk_ce0;
input  [7:0] pk_q0;
output  [9:0] pk_address1;
output   pk_ce1;
input  [7:0] pk_q1;
output  [3:0] DRBG_ctx_V_address0;
output   DRBG_ctx_V_ce0;
output   DRBG_ctx_V_we0;
output  [7:0] DRBG_ctx_V_d0;
input  [7:0] DRBG_ctx_V_q0;
output  [3:0] DRBG_ctx_V_address1;
output   DRBG_ctx_V_ce1;
input  [7:0] DRBG_ctx_V_q1;
output  [4:0] DRBG_ctx_Key_address0;
output   DRBG_ctx_Key_ce0;
output   DRBG_ctx_Key_we0;
output  [7:0] DRBG_ctx_Key_d0;
input  [7:0] DRBG_ctx_Key_q0;
output  [4:0] DRBG_ctx_Key_address1;
output   DRBG_ctx_Key_ce1;
input  [7:0] DRBG_ctx_Key_q1;
input  [31:0] DRBG_ctx_reseed_counter_i;
output  [31:0] DRBG_ctx_reseed_counter_o;
output   DRBG_ctx_reseed_counter_o_ap_vld;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] DRBG_ctx_reseed_counter_o;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] i_fu_197_p2;
reg   [9:0] i_reg_390;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_i_i_i_fu_203_p1;
reg   [63:0] tmp_i_i_i_reg_395;
wire   [0:0] exitcond_i_i_i_fu_191_p2;
wire   [2:0] r_5_fu_320_p2;
reg   [2:0] r_5_reg_405;
wire    ap_CS_fsm_state4;
reg   [9:0] r_coeffs_address0;
reg    r_coeffs_ce0;
reg    r_coeffs_we0;
reg   [15:0] r_coeffs_d0;
wire   [15:0] r_coeffs_q0;
reg    r_coeffs_ce1;
wire   [15:0] r_coeffs_q1;
reg   [9:0] m_coeffs_address0;
reg    m_coeffs_ce0;
reg    m_coeffs_we0;
wire   [15:0] m_coeffs_q0;
reg    m_coeffs_ce1;
wire   [15:0] m_coeffs_q1;
reg   [8:0] rm_address0;
reg    rm_ce0;
reg    rm_we0;
wire   [7:0] rm_q0;
reg   [11:0] rm_seed_address0;
reg    rm_seed_ce0;
reg    rm_seed_we0;
wire   [7:0] rm_seed_q0;
reg    rm_seed_ce1;
wire   [7:0] rm_seed_q1;
wire    grp_sha3_256_fu_142_ap_start;
wire    grp_sha3_256_fu_142_ap_done;
wire    grp_sha3_256_fu_142_ap_idle;
wire    grp_sha3_256_fu_142_ap_ready;
wire   [4:0] grp_sha3_256_fu_142_output_r_address0;
wire    grp_sha3_256_fu_142_output_r_ce0;
wire    grp_sha3_256_fu_142_output_r_we0;
wire   [7:0] grp_sha3_256_fu_142_output_r_d0;
wire   [8:0] grp_sha3_256_fu_142_input_r_address0;
wire    grp_sha3_256_fu_142_input_r_ce0;
wire    grp_randombytes_fu_151_ap_start;
wire    grp_randombytes_fu_151_ap_done;
wire    grp_randombytes_fu_151_ap_idle;
wire    grp_randombytes_fu_151_ap_ready;
wire   [11:0] grp_randombytes_fu_151_x_address0;
wire    grp_randombytes_fu_151_x_ce0;
wire    grp_randombytes_fu_151_x_we0;
wire   [7:0] grp_randombytes_fu_151_x_d0;
wire   [3:0] grp_randombytes_fu_151_DRBG_ctx_V_address0;
wire    grp_randombytes_fu_151_DRBG_ctx_V_ce0;
wire    grp_randombytes_fu_151_DRBG_ctx_V_we0;
wire   [7:0] grp_randombytes_fu_151_DRBG_ctx_V_d0;
wire   [3:0] grp_randombytes_fu_151_DRBG_ctx_V_address1;
wire    grp_randombytes_fu_151_DRBG_ctx_V_ce1;
wire   [4:0] grp_randombytes_fu_151_DRBG_ctx_Key_address0;
wire    grp_randombytes_fu_151_DRBG_ctx_Key_ce0;
wire    grp_randombytes_fu_151_DRBG_ctx_Key_we0;
wire   [7:0] grp_randombytes_fu_151_DRBG_ctx_Key_d0;
wire   [4:0] grp_randombytes_fu_151_DRBG_ctx_Key_address1;
wire    grp_randombytes_fu_151_DRBG_ctx_Key_ce1;
wire   [31:0] grp_randombytes_fu_151_DRBG_ctx_reseed_counter_o;
wire    grp_randombytes_fu_151_DRBG_ctx_reseed_counter_o_ap_vld;
wire    grp_sample_fixed_type_fu_167_ap_start;
wire    grp_sample_fixed_type_fu_167_ap_done;
wire    grp_sample_fixed_type_fu_167_ap_idle;
wire    grp_sample_fixed_type_fu_167_ap_ready;
wire   [9:0] grp_sample_fixed_type_fu_167_r_coeffs_address0;
wire    grp_sample_fixed_type_fu_167_r_coeffs_ce0;
wire    grp_sample_fixed_type_fu_167_r_coeffs_we0;
wire   [15:0] grp_sample_fixed_type_fu_167_r_coeffs_d0;
wire   [11:0] grp_sample_fixed_type_fu_167_u_address0;
wire    grp_sample_fixed_type_fu_167_u_ce0;
wire   [11:0] grp_sample_fixed_type_fu_167_u_address1;
wire    grp_sample_fixed_type_fu_167_u_ce1;
wire    grp_owcpa_enc_fu_173_ap_start;
wire    grp_owcpa_enc_fu_173_ap_done;
wire    grp_owcpa_enc_fu_173_ap_idle;
wire    grp_owcpa_enc_fu_173_ap_ready;
wire   [9:0] grp_owcpa_enc_fu_173_c_address0;
wire    grp_owcpa_enc_fu_173_c_ce0;
wire    grp_owcpa_enc_fu_173_c_we0;
wire   [7:0] grp_owcpa_enc_fu_173_c_d0;
wire   [9:0] grp_owcpa_enc_fu_173_c_address1;
wire    grp_owcpa_enc_fu_173_c_ce1;
wire    grp_owcpa_enc_fu_173_c_we1;
wire   [7:0] grp_owcpa_enc_fu_173_c_d1;
wire   [8:0] grp_owcpa_enc_fu_173_rm_address0;
wire    grp_owcpa_enc_fu_173_rm_ce0;
wire   [9:0] grp_owcpa_enc_fu_173_pk_address0;
wire    grp_owcpa_enc_fu_173_pk_ce0;
wire   [9:0] grp_owcpa_enc_fu_173_pk_address1;
wire    grp_owcpa_enc_fu_173_pk_ce1;
wire    grp_poly_S3_tobytes_fu_182_ap_start;
wire    grp_poly_S3_tobytes_fu_182_ap_done;
wire    grp_poly_S3_tobytes_fu_182_ap_idle;
wire    grp_poly_S3_tobytes_fu_182_ap_ready;
wire   [8:0] grp_poly_S3_tobytes_fu_182_msg_address0;
wire    grp_poly_S3_tobytes_fu_182_msg_ce0;
wire    grp_poly_S3_tobytes_fu_182_msg_we0;
wire   [7:0] grp_poly_S3_tobytes_fu_182_msg_d0;
reg   [9:0] grp_poly_S3_tobytes_fu_182_msg_offset;
wire   [9:0] grp_poly_S3_tobytes_fu_182_a_coeffs_address0;
wire    grp_poly_S3_tobytes_fu_182_a_coeffs_ce0;
reg   [15:0] grp_poly_S3_tobytes_fu_182_a_coeffs_q0;
wire   [9:0] grp_poly_S3_tobytes_fu_182_a_coeffs_address1;
wire    grp_poly_S3_tobytes_fu_182_a_coeffs_ce1;
reg   [15:0] grp_poly_S3_tobytes_fu_182_a_coeffs_q1;
reg   [9:0] i_i_i_i_reg_131;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state5;
reg    grp_sha3_256_fu_142_ap_start_reg;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg    grp_randombytes_fu_151_ap_start_reg;
reg    grp_sample_fixed_type_fu_167_ap_start_reg;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg    grp_owcpa_enc_fu_173_ap_start_reg;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
reg    grp_poly_S3_tobytes_fu_182_ap_start_reg;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire   [15:0] tmp_345_i_i_i_i_fu_380_p2;
wire   [3:0] tmp_167_fu_212_p4;
wire   [3:0] tmp_fu_208_p1;
wire   [4:0] tmp_337_i_i_i_i_cast_fu_226_p1;
wire   [4:0] tmp_336_i_i_i_i_cast_fu_222_p1;
wire   [4:0] r_fu_236_p2;
wire   [2:0] tmp_169_fu_242_p4;
wire   [1:0] tmp_67_fu_260_p4;
wire   [1:0] tmp_244_fu_256_p1;
wire   [1:0] fold1_i_i_i_i_cast_fu_270_p2;
wire   [3:0] tmp_339_i_i_i_i_cast_fu_276_p1;
wire   [3:0] tmp_338_i_i_i_i_cast_fu_252_p1;
wire   [3:0] r_4_fu_280_p2;
wire   [1:0] tmp_170_fu_286_p4;
wire   [3:0] tmp_168_fu_230_p2;
wire   [1:0] tmp_68_fu_300_p4;
wire   [1:0] fold2_i_i_i_i_cast_fu_310_p2;
wire   [2:0] tmp_341_i_i_i_i_cast_fu_316_p1;
wire   [2:0] tmp_340_i_i_i_i_cast_fu_296_p1;
wire   [2:0] t_fu_326_p2;
wire   [0:0] tmp_245_fu_331_p3;
wire   [2:0] c_13_cast_fu_339_p3;
wire   [2:0] tmp_342_i_i_i_i_fu_347_p2;
wire   [0:0] not_tmp_33_i_i_i_i_fu_356_p2;
wire   [2:0] tmp_343_i_i_i_i_cast_fu_362_p3;
wire   [2:0] tmp_344_i_i_i_i_fu_370_p2;
wire   [15:0] tmp_342_i_i_i_i_cast_fu_352_p1;
wire  signed [15:0] tmp_344_i_i_i_i_cast_fu_376_p1;
reg   [12:0] ap_NS_fsm;
reg    ap_block_state7_on_subcall_done;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 grp_sha3_256_fu_142_ap_start_reg = 1'b0;
#0 grp_randombytes_fu_151_ap_start_reg = 1'b0;
#0 grp_sample_fixed_type_fu_167_ap_start_reg = 1'b0;
#0 grp_owcpa_enc_fu_173_ap_start_reg = 1'b0;
#0 grp_poly_S3_tobytes_fu_182_ap_start_reg = 1'b0;
end

crypto_kem_enc_r_coeffs #(
    .DataWidth( 16 ),
    .AddressRange( 677 ),
    .AddressWidth( 10 ))
r_coeffs_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(r_coeffs_address0),
    .ce0(r_coeffs_ce0),
    .we0(r_coeffs_we0),
    .d0(r_coeffs_d0),
    .q0(r_coeffs_q0),
    .address1(grp_poly_S3_tobytes_fu_182_a_coeffs_address1),
    .ce1(r_coeffs_ce1),
    .q1(r_coeffs_q1)
);

crypto_kem_enc_r_coeffs #(
    .DataWidth( 16 ),
    .AddressRange( 677 ),
    .AddressWidth( 10 ))
m_coeffs_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_coeffs_address0),
    .ce0(m_coeffs_ce0),
    .we0(m_coeffs_we0),
    .d0(grp_sample_fixed_type_fu_167_r_coeffs_d0),
    .q0(m_coeffs_q0),
    .address1(grp_poly_S3_tobytes_fu_182_a_coeffs_address1),
    .ce1(m_coeffs_ce1),
    .q1(m_coeffs_q1)
);

crypto_kem_enc_rm #(
    .DataWidth( 8 ),
    .AddressRange( 272 ),
    .AddressWidth( 9 ))
rm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rm_address0),
    .ce0(rm_ce0),
    .we0(rm_we0),
    .d0(grp_poly_S3_tobytes_fu_182_msg_d0),
    .q0(rm_q0)
);

crypto_kem_enc_rm_seed #(
    .DataWidth( 8 ),
    .AddressRange( 3211 ),
    .AddressWidth( 12 ))
rm_seed_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rm_seed_address0),
    .ce0(rm_seed_ce0),
    .we0(rm_seed_we0),
    .d0(grp_randombytes_fu_151_x_d0),
    .q0(rm_seed_q0),
    .address1(grp_sample_fixed_type_fu_167_u_address1),
    .ce1(rm_seed_ce1),
    .q1(rm_seed_q1)
);

sha3_256 grp_sha3_256_fu_142(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sha3_256_fu_142_ap_start),
    .ap_done(grp_sha3_256_fu_142_ap_done),
    .ap_idle(grp_sha3_256_fu_142_ap_idle),
    .ap_ready(grp_sha3_256_fu_142_ap_ready),
    .output_r_address0(grp_sha3_256_fu_142_output_r_address0),
    .output_r_ce0(grp_sha3_256_fu_142_output_r_ce0),
    .output_r_we0(grp_sha3_256_fu_142_output_r_we0),
    .output_r_d0(grp_sha3_256_fu_142_output_r_d0),
    .input_r_address0(grp_sha3_256_fu_142_input_r_address0),
    .input_r_ce0(grp_sha3_256_fu_142_input_r_ce0),
    .input_r_q0(rm_q0)
);

randombytes grp_randombytes_fu_151(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_randombytes_fu_151_ap_start),
    .ap_done(grp_randombytes_fu_151_ap_done),
    .ap_idle(grp_randombytes_fu_151_ap_idle),
    .ap_ready(grp_randombytes_fu_151_ap_ready),
    .x_address0(grp_randombytes_fu_151_x_address0),
    .x_ce0(grp_randombytes_fu_151_x_ce0),
    .x_we0(grp_randombytes_fu_151_x_we0),
    .x_d0(grp_randombytes_fu_151_x_d0),
    .DRBG_ctx_V_address0(grp_randombytes_fu_151_DRBG_ctx_V_address0),
    .DRBG_ctx_V_ce0(grp_randombytes_fu_151_DRBG_ctx_V_ce0),
    .DRBG_ctx_V_we0(grp_randombytes_fu_151_DRBG_ctx_V_we0),
    .DRBG_ctx_V_d0(grp_randombytes_fu_151_DRBG_ctx_V_d0),
    .DRBG_ctx_V_q0(DRBG_ctx_V_q0),
    .DRBG_ctx_V_address1(grp_randombytes_fu_151_DRBG_ctx_V_address1),
    .DRBG_ctx_V_ce1(grp_randombytes_fu_151_DRBG_ctx_V_ce1),
    .DRBG_ctx_V_q1(DRBG_ctx_V_q1),
    .DRBG_ctx_Key_address0(grp_randombytes_fu_151_DRBG_ctx_Key_address0),
    .DRBG_ctx_Key_ce0(grp_randombytes_fu_151_DRBG_ctx_Key_ce0),
    .DRBG_ctx_Key_we0(grp_randombytes_fu_151_DRBG_ctx_Key_we0),
    .DRBG_ctx_Key_d0(grp_randombytes_fu_151_DRBG_ctx_Key_d0),
    .DRBG_ctx_Key_q0(DRBG_ctx_Key_q0),
    .DRBG_ctx_Key_address1(grp_randombytes_fu_151_DRBG_ctx_Key_address1),
    .DRBG_ctx_Key_ce1(grp_randombytes_fu_151_DRBG_ctx_Key_ce1),
    .DRBG_ctx_Key_q1(DRBG_ctx_Key_q1),
    .DRBG_ctx_reseed_counter_i(DRBG_ctx_reseed_counter_i),
    .DRBG_ctx_reseed_counter_o(grp_randombytes_fu_151_DRBG_ctx_reseed_counter_o),
    .DRBG_ctx_reseed_counter_o_ap_vld(grp_randombytes_fu_151_DRBG_ctx_reseed_counter_o_ap_vld)
);

sample_fixed_type grp_sample_fixed_type_fu_167(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sample_fixed_type_fu_167_ap_start),
    .ap_done(grp_sample_fixed_type_fu_167_ap_done),
    .ap_idle(grp_sample_fixed_type_fu_167_ap_idle),
    .ap_ready(grp_sample_fixed_type_fu_167_ap_ready),
    .r_coeffs_address0(grp_sample_fixed_type_fu_167_r_coeffs_address0),
    .r_coeffs_ce0(grp_sample_fixed_type_fu_167_r_coeffs_ce0),
    .r_coeffs_we0(grp_sample_fixed_type_fu_167_r_coeffs_we0),
    .r_coeffs_d0(grp_sample_fixed_type_fu_167_r_coeffs_d0),
    .u_address0(grp_sample_fixed_type_fu_167_u_address0),
    .u_ce0(grp_sample_fixed_type_fu_167_u_ce0),
    .u_q0(rm_seed_q0),
    .u_address1(grp_sample_fixed_type_fu_167_u_address1),
    .u_ce1(grp_sample_fixed_type_fu_167_u_ce1),
    .u_q1(rm_seed_q1)
);

owcpa_enc grp_owcpa_enc_fu_173(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_owcpa_enc_fu_173_ap_start),
    .ap_done(grp_owcpa_enc_fu_173_ap_done),
    .ap_idle(grp_owcpa_enc_fu_173_ap_idle),
    .ap_ready(grp_owcpa_enc_fu_173_ap_ready),
    .c_address0(grp_owcpa_enc_fu_173_c_address0),
    .c_ce0(grp_owcpa_enc_fu_173_c_ce0),
    .c_we0(grp_owcpa_enc_fu_173_c_we0),
    .c_d0(grp_owcpa_enc_fu_173_c_d0),
    .c_address1(grp_owcpa_enc_fu_173_c_address1),
    .c_ce1(grp_owcpa_enc_fu_173_c_ce1),
    .c_we1(grp_owcpa_enc_fu_173_c_we1),
    .c_d1(grp_owcpa_enc_fu_173_c_d1),
    .rm_address0(grp_owcpa_enc_fu_173_rm_address0),
    .rm_ce0(grp_owcpa_enc_fu_173_rm_ce0),
    .rm_q0(rm_q0),
    .pk_address0(grp_owcpa_enc_fu_173_pk_address0),
    .pk_ce0(grp_owcpa_enc_fu_173_pk_ce0),
    .pk_q0(pk_q0),
    .pk_address1(grp_owcpa_enc_fu_173_pk_address1),
    .pk_ce1(grp_owcpa_enc_fu_173_pk_ce1),
    .pk_q1(pk_q1)
);

poly_S3_tobytes grp_poly_S3_tobytes_fu_182(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_poly_S3_tobytes_fu_182_ap_start),
    .ap_done(grp_poly_S3_tobytes_fu_182_ap_done),
    .ap_idle(grp_poly_S3_tobytes_fu_182_ap_idle),
    .ap_ready(grp_poly_S3_tobytes_fu_182_ap_ready),
    .msg_address0(grp_poly_S3_tobytes_fu_182_msg_address0),
    .msg_ce0(grp_poly_S3_tobytes_fu_182_msg_ce0),
    .msg_we0(grp_poly_S3_tobytes_fu_182_msg_we0),
    .msg_d0(grp_poly_S3_tobytes_fu_182_msg_d0),
    .msg_offset(grp_poly_S3_tobytes_fu_182_msg_offset),
    .a_coeffs_address0(grp_poly_S3_tobytes_fu_182_a_coeffs_address0),
    .a_coeffs_ce0(grp_poly_S3_tobytes_fu_182_a_coeffs_ce0),
    .a_coeffs_q0(grp_poly_S3_tobytes_fu_182_a_coeffs_q0),
    .a_coeffs_address1(grp_poly_S3_tobytes_fu_182_a_coeffs_address1),
    .a_coeffs_ce1(grp_poly_S3_tobytes_fu_182_a_coeffs_ce1),
    .a_coeffs_q1(grp_poly_S3_tobytes_fu_182_a_coeffs_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_owcpa_enc_fu_173_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            grp_owcpa_enc_fu_173_ap_start_reg <= 1'b1;
        end else if ((grp_owcpa_enc_fu_173_ap_ready == 1'b1)) begin
            grp_owcpa_enc_fu_173_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_poly_S3_tobytes_fu_182_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
            grp_poly_S3_tobytes_fu_182_ap_start_reg <= 1'b1;
        end else if ((grp_poly_S3_tobytes_fu_182_ap_ready == 1'b1)) begin
            grp_poly_S3_tobytes_fu_182_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_randombytes_fu_151_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_randombytes_fu_151_ap_start_reg <= 1'b1;
        end else if ((grp_randombytes_fu_151_ap_ready == 1'b1)) begin
            grp_randombytes_fu_151_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sample_fixed_type_fu_167_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_sample_fixed_type_fu_167_ap_start_reg <= 1'b1;
        end else if ((grp_sample_fixed_type_fu_167_ap_ready == 1'b1)) begin
            grp_sample_fixed_type_fu_167_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sha3_256_fu_142_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            grp_sha3_256_fu_142_ap_start_reg <= 1'b1;
        end else if ((grp_sha3_256_fu_142_ap_ready == 1'b1)) begin
            grp_sha3_256_fu_142_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_i_i_i_reg_131 <= i_reg_390;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_randombytes_fu_151_ap_done == 1'b1))) begin
        i_i_i_i_reg_131 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_390 <= i_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_5_reg_405 <= r_5_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_i_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_i_i_i_reg_395[9 : 0] <= tmp_i_i_i_fu_203_p1[9 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_randombytes_fu_151_DRBG_ctx_reseed_counter_o_ap_vld == 1'b1))) begin
        DRBG_ctx_reseed_counter_o = grp_randombytes_fu_151_DRBG_ctx_reseed_counter_o;
    end else begin
        DRBG_ctx_reseed_counter_o = DRBG_ctx_reseed_counter_i;
    end
end

always @ (*) begin
    if (((grp_owcpa_enc_fu_173_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_owcpa_enc_fu_173_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_poly_S3_tobytes_fu_182_a_coeffs_q0 = m_coeffs_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_poly_S3_tobytes_fu_182_a_coeffs_q0 = r_coeffs_q0;
    end else begin
        grp_poly_S3_tobytes_fu_182_a_coeffs_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_poly_S3_tobytes_fu_182_a_coeffs_q1 = m_coeffs_q1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_poly_S3_tobytes_fu_182_a_coeffs_q1 = r_coeffs_q1;
    end else begin
        grp_poly_S3_tobytes_fu_182_a_coeffs_q1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_poly_S3_tobytes_fu_182_msg_offset = 10'd136;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_poly_S3_tobytes_fu_182_msg_offset = 10'd0;
    end else begin
        grp_poly_S3_tobytes_fu_182_msg_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        m_coeffs_address0 = grp_poly_S3_tobytes_fu_182_a_coeffs_address0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        m_coeffs_address0 = grp_sample_fixed_type_fu_167_r_coeffs_address0;
    end else begin
        m_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        m_coeffs_ce0 = grp_poly_S3_tobytes_fu_182_a_coeffs_ce0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        m_coeffs_ce0 = grp_sample_fixed_type_fu_167_r_coeffs_ce0;
    end else begin
        m_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        m_coeffs_ce1 = grp_poly_S3_tobytes_fu_182_a_coeffs_ce1;
    end else begin
        m_coeffs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        m_coeffs_we0 = grp_sample_fixed_type_fu_167_r_coeffs_we0;
    end else begin
        m_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        r_coeffs_address0 = tmp_i_i_i_reg_395;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        r_coeffs_address0 = 64'd676;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_coeffs_address0 = grp_poly_S3_tobytes_fu_182_a_coeffs_address0;
    end else begin
        r_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        r_coeffs_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_coeffs_ce0 = grp_poly_S3_tobytes_fu_182_a_coeffs_ce0;
    end else begin
        r_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_coeffs_ce1 = grp_poly_S3_tobytes_fu_182_a_coeffs_ce1;
    end else begin
        r_coeffs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        r_coeffs_d0 = tmp_345_i_i_i_i_fu_380_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        r_coeffs_d0 = 16'd0;
    end else begin
        r_coeffs_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((exitcond_i_i_i_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        r_coeffs_we0 = 1'b1;
    end else begin
        r_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        rm_address0 = grp_poly_S3_tobytes_fu_182_msg_address0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        rm_address0 = grp_owcpa_enc_fu_173_rm_address0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        rm_address0 = grp_sha3_256_fu_142_input_r_address0;
    end else begin
        rm_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        rm_ce0 = grp_poly_S3_tobytes_fu_182_msg_ce0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        rm_ce0 = grp_owcpa_enc_fu_173_rm_ce0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        rm_ce0 = grp_sha3_256_fu_142_input_r_ce0;
    end else begin
        rm_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        rm_seed_address0 = tmp_i_i_i_fu_203_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        rm_seed_address0 = grp_sample_fixed_type_fu_167_u_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rm_seed_address0 = grp_randombytes_fu_151_x_address0;
    end else begin
        rm_seed_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        rm_seed_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        rm_seed_ce0 = grp_sample_fixed_type_fu_167_u_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rm_seed_ce0 = grp_randombytes_fu_151_x_ce0;
    end else begin
        rm_seed_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        rm_seed_ce1 = grp_sample_fixed_type_fu_167_u_ce1;
    end else begin
        rm_seed_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        rm_seed_we0 = grp_randombytes_fu_151_x_we0;
    end else begin
        rm_seed_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        rm_we0 = grp_poly_S3_tobytes_fu_182_msg_we0;
    end else begin
        rm_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_randombytes_fu_151_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_i_i_i_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((grp_poly_S3_tobytes_fu_182_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (grp_sha3_256_fu_142_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((grp_owcpa_enc_fu_173_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DRBG_ctx_Key_address0 = grp_randombytes_fu_151_DRBG_ctx_Key_address0;

assign DRBG_ctx_Key_address1 = grp_randombytes_fu_151_DRBG_ctx_Key_address1;

assign DRBG_ctx_Key_ce0 = grp_randombytes_fu_151_DRBG_ctx_Key_ce0;

assign DRBG_ctx_Key_ce1 = grp_randombytes_fu_151_DRBG_ctx_Key_ce1;

assign DRBG_ctx_Key_d0 = grp_randombytes_fu_151_DRBG_ctx_Key_d0;

assign DRBG_ctx_Key_we0 = grp_randombytes_fu_151_DRBG_ctx_Key_we0;

assign DRBG_ctx_V_address0 = grp_randombytes_fu_151_DRBG_ctx_V_address0;

assign DRBG_ctx_V_address1 = grp_randombytes_fu_151_DRBG_ctx_V_address1;

assign DRBG_ctx_V_ce0 = grp_randombytes_fu_151_DRBG_ctx_V_ce0;

assign DRBG_ctx_V_ce1 = grp_randombytes_fu_151_DRBG_ctx_V_ce1;

assign DRBG_ctx_V_d0 = grp_randombytes_fu_151_DRBG_ctx_V_d0;

assign DRBG_ctx_V_we0 = grp_randombytes_fu_151_DRBG_ctx_V_we0;

assign DRBG_ctx_reseed_counter_o_ap_vld = grp_randombytes_fu_151_DRBG_ctx_reseed_counter_o_ap_vld;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state7_on_subcall_done = ((grp_poly_S3_tobytes_fu_182_ap_done == 1'b0) | (grp_sample_fixed_type_fu_167_ap_done == 1'b0));
end

assign ap_return = 32'd0;

assign c_13_cast_fu_339_p3 = ((tmp_245_fu_331_p3[0:0] === 1'b1) ? 3'd7 : 3'd0);

assign c_address0 = grp_owcpa_enc_fu_173_c_address0;

assign c_address1 = grp_owcpa_enc_fu_173_c_address1;

assign c_ce0 = grp_owcpa_enc_fu_173_c_ce0;

assign c_ce1 = grp_owcpa_enc_fu_173_c_ce1;

assign c_d0 = grp_owcpa_enc_fu_173_c_d0;

assign c_d1 = grp_owcpa_enc_fu_173_c_d1;

assign c_we0 = grp_owcpa_enc_fu_173_c_we0;

assign c_we1 = grp_owcpa_enc_fu_173_c_we1;

assign exitcond_i_i_i_fu_191_p2 = ((i_i_i_i_reg_131 == 10'd676) ? 1'b1 : 1'b0);

assign fold1_i_i_i_i_cast_fu_270_p2 = (tmp_67_fu_260_p4 + tmp_244_fu_256_p1);

assign fold2_i_i_i_i_cast_fu_310_p2 = (fold1_i_i_i_i_cast_fu_270_p2 + tmp_68_fu_300_p4);

assign grp_owcpa_enc_fu_173_ap_start = grp_owcpa_enc_fu_173_ap_start_reg;

assign grp_poly_S3_tobytes_fu_182_ap_start = grp_poly_S3_tobytes_fu_182_ap_start_reg;

assign grp_randombytes_fu_151_ap_start = grp_randombytes_fu_151_ap_start_reg;

assign grp_sample_fixed_type_fu_167_ap_start = grp_sample_fixed_type_fu_167_ap_start_reg;

assign grp_sha3_256_fu_142_ap_start = grp_sha3_256_fu_142_ap_start_reg;

assign i_fu_197_p2 = (i_i_i_i_reg_131 + 10'd1);

assign k_address0 = grp_sha3_256_fu_142_output_r_address0;

assign k_ce0 = grp_sha3_256_fu_142_output_r_ce0;

assign k_d0 = grp_sha3_256_fu_142_output_r_d0;

assign k_we0 = grp_sha3_256_fu_142_output_r_we0;

assign not_tmp_33_i_i_i_i_fu_356_p2 = (tmp_245_fu_331_p3 ^ 1'd1);

assign pk_address0 = grp_owcpa_enc_fu_173_pk_address0;

assign pk_address1 = grp_owcpa_enc_fu_173_pk_address1;

assign pk_ce0 = grp_owcpa_enc_fu_173_pk_ce0;

assign pk_ce1 = grp_owcpa_enc_fu_173_pk_ce1;

assign r_4_fu_280_p2 = (tmp_339_i_i_i_i_cast_fu_276_p1 + tmp_338_i_i_i_i_cast_fu_252_p1);

assign r_5_fu_320_p2 = (tmp_341_i_i_i_i_cast_fu_316_p1 + tmp_340_i_i_i_i_cast_fu_296_p1);

assign r_fu_236_p2 = (tmp_337_i_i_i_i_cast_fu_226_p1 + tmp_336_i_i_i_i_cast_fu_222_p1);

assign t_fu_326_p2 = ($signed(3'd5) + $signed(r_5_reg_405));

assign tmp_167_fu_212_p4 = {{rm_seed_q0[7:4]}};

assign tmp_168_fu_230_p2 = (tmp_167_fu_212_p4 + tmp_fu_208_p1);

assign tmp_169_fu_242_p4 = {{r_fu_236_p2[4:2]}};

assign tmp_170_fu_286_p4 = {{r_4_fu_280_p2[3:2]}};

assign tmp_244_fu_256_p1 = rm_seed_q0[1:0];

assign tmp_245_fu_331_p3 = t_fu_326_p2[32'd2];

assign tmp_336_i_i_i_i_cast_fu_222_p1 = tmp_167_fu_212_p4;

assign tmp_337_i_i_i_i_cast_fu_226_p1 = tmp_fu_208_p1;

assign tmp_338_i_i_i_i_cast_fu_252_p1 = tmp_169_fu_242_p4;

assign tmp_339_i_i_i_i_cast_fu_276_p1 = fold1_i_i_i_i_cast_fu_270_p2;

assign tmp_340_i_i_i_i_cast_fu_296_p1 = tmp_170_fu_286_p4;

assign tmp_341_i_i_i_i_cast_fu_316_p1 = fold2_i_i_i_i_cast_fu_310_p2;

assign tmp_342_i_i_i_i_cast_fu_352_p1 = tmp_342_i_i_i_i_fu_347_p2;

assign tmp_342_i_i_i_i_fu_347_p2 = (r_5_reg_405 & c_13_cast_fu_339_p3);

assign tmp_343_i_i_i_i_cast_fu_362_p3 = ((not_tmp_33_i_i_i_i_fu_356_p2[0:0] === 1'b1) ? 3'd7 : 3'd0);

assign tmp_344_i_i_i_i_cast_fu_376_p1 = $signed(tmp_344_i_i_i_i_fu_370_p2);

assign tmp_344_i_i_i_i_fu_370_p2 = (tmp_343_i_i_i_i_cast_fu_362_p3 & t_fu_326_p2);

assign tmp_345_i_i_i_i_fu_380_p2 = (tmp_344_i_i_i_i_cast_fu_376_p1 ^ tmp_342_i_i_i_i_cast_fu_352_p1);

assign tmp_67_fu_260_p4 = {{rm_seed_q0[5:4]}};

assign tmp_68_fu_300_p4 = {{tmp_168_fu_230_p2[3:2]}};

assign tmp_fu_208_p1 = rm_seed_q0[3:0];

assign tmp_i_i_i_fu_203_p1 = i_i_i_i_reg_131;

always @ (posedge ap_clk) begin
    tmp_i_i_i_reg_395[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //crypto_kem_enc
