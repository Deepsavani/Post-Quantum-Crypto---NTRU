-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity poly_S3_frombytes is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce0 : OUT STD_LOGIC;
    r_coeffs_we0 : OUT STD_LOGIC;
    r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce1 : OUT STD_LOGIC;
    r_coeffs_we1 : OUT STD_LOGIC;
    r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    msg_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    msg_ce0 : OUT STD_LOGIC;
    msg_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    msg_offset : IN STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of poly_S3_frombytes is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_2A3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010100011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_2A4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010100100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_87 : STD_LOGIC_VECTOR (7 downto 0) := "10000111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_87 : STD_LOGIC_VECTOR (8 downto 0) := "010000111";
    constant ap_const_lv16_AB : STD_LOGIC_VECTOR (15 downto 0) := "0000000010101011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_CB : STD_LOGIC_VECTOR (15 downto 0) := "0000000011001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv14_39 : STD_LOGIC_VECTOR (13 downto 0) := "00000000111001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv13_13 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_184 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_mod3_fu_174_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_189 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_mod3_fu_179_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_195 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_198_fu_200_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_198_reg_394 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_10_fu_214_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_10_reg_403 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_175_fu_242_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_175_reg_413 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_reg_427 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_157_reg_432 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_155_reg_437 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_156_reg_442 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mod3_fu_174_ap_ready : STD_LOGIC;
    signal grp_mod3_fu_174_a : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mod3_fu_179_ap_ready : STD_LOGIC;
    signal grp_mod3_fu_179_a : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_163 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_305_cast_cast_fu_352_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_315_cast_fu_380_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_300_cast_fu_302_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_310_cast_cast_fu_356_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_cast_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_176_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_180_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_184_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_188_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_192_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_cast_fu_220_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_fu_224_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_234_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_cast3_fu_204_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum2_fu_248_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_177_fu_262_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_258_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_177_fu_262_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_189_fu_278_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_189_fu_278_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_181_fu_306_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_181_fu_306_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_185_fu_322_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_185_fu_322_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_179_fu_342_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_183_fu_360_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_187_fu_370_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_191_fu_384_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_181_fu_306_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_185_fu_322_p00 : STD_LOGIC_VECTOR (12 downto 0);

    component mod3 IS
    port (
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_mod3_fu_174 : component mod3
    port map (
        ap_ready => grp_mod3_fu_174_ap_ready,
        a => grp_mod3_fu_174_a,
        ap_return => grp_mod3_fu_174_ap_return);

    grp_mod3_fu_179 : component mod3
    port map (
        ap_ready => grp_mod3_fu_179_ap_ready,
        a => grp_mod3_fu_179_a,
        ap_return => grp_mod3_fu_179_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_reg_163 <= i_10_reg_403;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_163 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_10_reg_403 <= i_10_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_184 <= msg_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_189 <= grp_mod3_fu_174_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_195 <= grp_mod3_fu_179_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_155_reg_437 <= tmp_181_fu_306_p2(13 downto 9);
                tmp_156_reg_442 <= tmp_185_fu_322_p2(12 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_157_reg_432 <= tmp_189_fu_278_p2(15 downto 14);
                tmp_reg_427 <= tmp_177_fu_262_p2(15 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_208_p2 = ap_const_lv1_0))) then
                tmp_175_reg_413 <= tmp_175_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_198_reg_394 <= tmp_198_fu_200_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_208_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_208_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_208_p2 <= "1" when (i_reg_163 = ap_const_lv8_87) else "0";

    grp_mod3_fu_174_a_assign_proc : process(reg_184, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, tmp_305_cast_cast_fu_352_p1, tmp_315_cast_fu_380_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_mod3_fu_174_a <= tmp_315_cast_fu_380_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_mod3_fu_174_a <= tmp_305_cast_cast_fu_352_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_mod3_fu_174_a <= reg_184;
        else 
            grp_mod3_fu_174_a <= "XXXXXXXX";
        end if; 
    end process;


    grp_mod3_fu_179_a_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_300_cast_fu_302_p1, tmp_310_cast_cast_fu_356_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_mod3_fu_179_a <= tmp_310_cast_cast_fu_356_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_mod3_fu_179_a <= tmp_300_cast_fu_302_p1;
        else 
            grp_mod3_fu_179_a <= "XXXXXXXX";
        end if; 
    end process;

    i_10_fu_214_p2 <= std_logic_vector(unsigned(i_reg_163) + unsigned(ap_const_lv8_1));
    i_cast3_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_163),10));

    msg_address0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_208_p2, sum_cast_fu_229_p1, sum2_cast_fu_253_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            if ((exitcond1_fu_208_p2 = ap_const_lv1_1)) then 
                msg_address0 <= sum2_cast_fu_253_p1(9 - 1 downto 0);
            elsif ((exitcond1_fu_208_p2 = ap_const_lv1_0)) then 
                msg_address0 <= sum_cast_fu_229_p1(9 - 1 downto 0);
            else 
                msg_address0 <= "XXXXXXXXX";
            end if;
        else 
            msg_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    msg_ce0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_208_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_208_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_208_p2 = ap_const_lv1_0)))) then 
            msg_ce0 <= ap_const_logic_1;
        else 
            msg_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_fu_234_p3 <= (i_reg_163 & ap_const_lv2_0);

    r_coeffs_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, tmp_176_fu_338_p1, tmp_184_fu_365_p1, tmp_192_fu_389_p1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_coeffs_address0 <= ap_const_lv64_2A4(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_coeffs_address0 <= tmp_192_fu_389_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_address0 <= tmp_184_fu_365_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_address0 <= tmp_176_fu_338_p1(10 - 1 downto 0);
        else 
            r_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_180_fu_347_p1, tmp_188_fu_375_p1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_coeffs_address1 <= ap_const_lv64_2A3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_address1 <= tmp_188_fu_375_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_address1 <= tmp_180_fu_347_p1(10 - 1 downto 0);
        else 
            r_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            r_coeffs_ce0 <= ap_const_logic_1;
        else 
            r_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            r_coeffs_ce1 <= ap_const_logic_1;
        else 
            r_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_d0_assign_proc : process(reg_189, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_coeffs_d0 <= ap_const_lv16_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            r_coeffs_d0 <= reg_189;
        else 
            r_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_d1_assign_proc : process(reg_189, ap_CS_fsm_state5, ap_CS_fsm_state6, reg_195, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_coeffs_d1 <= reg_189;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_coeffs_d1 <= reg_195;
        else 
            r_coeffs_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            r_coeffs_we0 <= ap_const_logic_1;
        else 
            r_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            r_coeffs_we1 <= ap_const_logic_1;
        else 
            r_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sum2_cast_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_248_p2),64));
    sum2_fu_248_p2 <= std_logic_vector(unsigned(tmp_198_reg_394) + unsigned(ap_const_lv9_87));
    sum_cast_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_224_p2),64));
    sum_fu_224_p2 <= std_logic_vector(unsigned(tmp_cast_fu_220_p1) + unsigned(tmp_198_reg_394));
    tmp_175_fu_242_p2 <= std_logic_vector(unsigned(p_shl_fu_234_p3) + unsigned(i_cast3_fu_204_p1));
    tmp_176_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_175_reg_413),64));
    tmp_177_fu_262_p0 <= tmp_s_fu_258_p1(8 - 1 downto 0);
    tmp_177_fu_262_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_177_fu_262_p0) * unsigned(ap_const_lv16_AB), 16));
    tmp_179_fu_342_p2 <= std_logic_vector(unsigned(tmp_175_reg_413) + unsigned(ap_const_lv10_1));
    tmp_180_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_179_fu_342_p2),64));
    tmp_181_fu_306_p0 <= tmp_181_fu_306_p00(8 - 1 downto 0);
    tmp_181_fu_306_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_184),14));
    tmp_181_fu_306_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_181_fu_306_p0) * unsigned(ap_const_lv14_39), 14));
    tmp_183_fu_360_p2 <= std_logic_vector(unsigned(tmp_175_reg_413) + unsigned(ap_const_lv10_2));
    tmp_184_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_183_fu_360_p2),64));
    tmp_185_fu_322_p0 <= tmp_185_fu_322_p00(8 - 1 downto 0);
    tmp_185_fu_322_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_184),13));
    tmp_185_fu_322_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_185_fu_322_p0) * unsigned(ap_const_lv13_13), 13));
    tmp_187_fu_370_p2 <= std_logic_vector(unsigned(tmp_175_reg_413) + unsigned(ap_const_lv10_3));
    tmp_188_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_187_fu_370_p2),64));
    tmp_189_fu_278_p0 <= tmp_s_fu_258_p1(8 - 1 downto 0);
    tmp_189_fu_278_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_189_fu_278_p0) * unsigned(ap_const_lv16_CB), 16));
    tmp_191_fu_384_p2 <= std_logic_vector(unsigned(tmp_175_reg_413) + unsigned(ap_const_lv10_4));
    tmp_192_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_191_fu_384_p2),64));
    tmp_198_fu_200_p1 <= msg_offset(9 - 1 downto 0);
    tmp_300_cast_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_427),8));
    tmp_305_cast_cast_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_155_reg_437),8));
    tmp_310_cast_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_156_reg_442),8));
    tmp_315_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_157_reg_432),8));
    tmp_cast_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_163),9));
    tmp_s_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(msg_q0),16));
end behav;
