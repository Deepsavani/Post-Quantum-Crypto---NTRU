-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity poly_S3_inv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce0 : OUT STD_LOGIC;
    r_coeffs_we0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce1 : OUT STD_LOGIC;
    r_coeffs_we1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    r_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a_coeffs_ce0 : OUT STD_LOGIC;
    a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of poly_S3_inv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (60 downto 0) := "0000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (60 downto 0) := "0000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (60 downto 0) := "0000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (60 downto 0) := "0000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (60 downto 0) := "0000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (60 downto 0) := "0000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (60 downto 0) := "0001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (60 downto 0) := "0010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (60 downto 0) := "0100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (60 downto 0) := "1000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv16_2A4 : STD_LOGIC_VECTOR (15 downto 0) := "0000001010100100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_2A4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010100100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv10_2A5 : STD_LOGIC_VECTOR (9 downto 0) := "1010100101";
    constant ap_const_lv11_547 : STD_LOGIC_VECTOR (10 downto 0) := "10101000111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv10_2A4 : STD_LOGIC_VECTOR (9 downto 0) := "1010100100";
    constant ap_const_lv11_2A4 : STD_LOGIC_VECTOR (10 downto 0) := "01010100100";
    constant ap_const_lv12_2A5 : STD_LOGIC_VECTOR (11 downto 0) := "001010100101";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv11_2A5 : STD_LOGIC_VECTOR (10 downto 0) := "01010100101";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_54A : STD_LOGIC_VECTOR (10 downto 0) := "10101001010";
    constant ap_const_lv14_2371 : STD_LOGIC_VECTOR (13 downto 0) := "10001101110001";
    constant ap_const_lv14_2616 : STD_LOGIC_VECTOR (13 downto 0) := "10011000010110";
    constant ap_const_lv10_8F : STD_LOGIC_VECTOR (9 downto 0) := "0010001111";
    constant ap_const_lv16_9D1C : STD_LOGIC_VECTOR (15 downto 0) := "1001110100011100";
    constant ap_const_lv16_9FC1 : STD_LOGIC_VECTOR (15 downto 0) := "1001111111000001";
    constant ap_const_lv10_2E4 : STD_LOGIC_VECTOR (9 downto 0) := "1011100100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal g_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_630 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal f_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_634 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_mod3_fu_621_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_638 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal i_10_fu_657_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond10_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_11_fu_669_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_12_fu_686_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_12_reg_1766 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_171_fu_692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_171_reg_1771 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond8_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_13_fu_703_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond7_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_720_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_5_reg_1812 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_174_fu_1723_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_174_reg_1817 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_208_fu_732_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_208_reg_1822 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_209_reg_1827 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_cast_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_cast_reg_1832 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_210_fu_762_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_210_reg_1837 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_770_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_64_reg_1842 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_64_cast_fu_774_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_64_cast_reg_1847 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i3_cast_fu_790_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i3_cast_reg_1852 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_9_fu_804_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_9_reg_1861 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal temp_r_coeffs_addr_3_reg_1866 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i5_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal g_coeffs_addr_2_reg_1871 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_15_fu_847_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_15_reg_1879 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal b_coeffs_addr_3_reg_1884 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i9_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_coeffs_addr_2_reg_1889 : STD_LOGIC_VECTOR (9 downto 0);
    signal degf_1_fu_889_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal degf_1_reg_1894 : STD_LOGIC_VECTOR (15 downto 0);
    signal degg_1_fu_895_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal degg_1_reg_1899 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_185_fu_909_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_185_reg_1904 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_17_fu_946_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_17_reg_1913 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal temp_r_coeffs_addr_5_reg_1918 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond5_fu_940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1729_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_196_reg_1928 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_19_fu_964_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_19_reg_1936 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal b_coeffs_addr_4_reg_1941 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond4_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_1951 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_coeffs_load_2_reg_1956 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_1736_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_200_reg_1961 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal exitcond_i_fu_982_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal done_reg_477 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_r_coeffs_addr_7_reg_1974 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_21_fu_1004_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_21_reg_1979 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i_50_fu_1019_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_50_reg_1984 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal exitcond_i6_fu_1033_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_coeffs_addr_5_reg_1997 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_22_fu_1061_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_22_reg_2002 : STD_LOGIC_VECTOR (9 downto 0);
    signal degf_2_fu_1067_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal degf_2_reg_2007 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_3_fu_1071_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_3_reg_2012 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_269_reg_2017 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_cast_fu_1137_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_2_cast_reg_2022 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_14_fu_1147_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_14_reg_2030 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_177_fu_1153_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_177_reg_2035 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_fu_1141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_coeffs_load_reg_2045 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp_178_fu_1742_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_178_reg_2050 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal i_20_fu_1168_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_20_reg_2058 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_270_cast_fu_1180_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_270_cast_reg_2063 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_1162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_6_fu_1194_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_6_reg_2076 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal exitcond1_fu_1188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_assign_1_cast_fu_1215_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_assign_1_cast_reg_2086 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal i_18_fu_1239_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_18_reg_2099 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal tmp_213_fu_1245_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_213_reg_2104 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_fu_1233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_coeffs_addr_5_reg_2115 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_5_fu_1347_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal start_pos_fu_1351_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal start_pos_reg_2125 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal end_pos_fu_1359_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal end_pos_reg_2131 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_225_fu_1426_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_225_reg_2137 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_228_fu_1436_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_228_reg_2142 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_249_fu_1540_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_249_reg_2147 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_16_fu_1700_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_16_reg_2156 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal r_coeffs_addr_3_reg_2161 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_1694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_187_fu_1717_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_187_reg_2167 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal b_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal b_coeffs_ce0 : STD_LOGIC;
    signal b_coeffs_we0 : STD_LOGIC;
    signal b_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_coeffs_ce0 : STD_LOGIC;
    signal c_coeffs_we0 : STD_LOGIC;
    signal c_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_coeffs_ce0 : STD_LOGIC;
    signal f_coeffs_we0 : STD_LOGIC;
    signal f_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal g_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal g_coeffs_ce0 : STD_LOGIC;
    signal g_coeffs_we0 : STD_LOGIC;
    signal g_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mod3_fu_621_ap_ready : STD_LOGIC;
    signal grp_mod3_fu_621_a : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_386 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_397 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond9_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_408 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_3_reg_419 : STD_LOGIC_VECTOR (9 downto 0);
    signal degg_reg_430 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal degf_reg_442 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_reg_454 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_reg_466 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_i4_reg_489 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_i8_reg_500 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_4_reg_511 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal i_5_reg_522 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal i_i_reg_533 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_i5_reg_544 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal i_6_reg_555 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal k_1_reg_566 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_7_reg_576 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_587 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal i_i1_reg_599 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal i_8_reg_610 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal tmp_207_fu_726_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_172_fu_709_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_361_i_fu_810_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_361_i1_fu_853_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_194_fu_952_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_198_fu_970_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_112_i_fu_988_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_114_i_fu_999_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_107_i_fu_1045_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_109_i_fu_1056_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_192_fu_1223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_193_fu_1228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2_cast_fu_1297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2371_cast_fu_1332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_186_fu_1706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_363_i1_fu_926_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_364_i1_fu_933_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_110_i_fu_1090_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_105_i_fu_1099_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond6_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_363_i_fu_827_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_115_i_fu_1010_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_111_i_fu_1026_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_364_i_fu_834_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_267_fu_1677_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mask_fu_1687_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_626_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_626_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_250_cast_fu_748_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_251_cast_fu_752_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_176_fu_756_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp21_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal swap_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_362_i_fu_816_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_fu_822_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp22_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_182_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_181_fu_859_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_257_cast_fu_875_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_183_fu_883_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_184_fu_901_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_362_i1_fu_915_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_1_fu_921_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_113_i_fu_993_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_106_i_fu_1039_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_108_i_fu_1050_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_202_fu_1076_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_173_fu_1109_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_191_fu_1115_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_cast_fu_1105_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_240_cast_cast_fu_1123_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_2_fu_1131_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_7_cast_fu_1158_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_180_fu_1174_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_cast_fu_1184_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1205_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_212_fu_1211_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1205_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal adjSize_fu_1249_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal adjSize340_cast_cast_fu_1263_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mem_index_gep_fu_1267_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_214_fu_1273_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal addrCmp_fu_1277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex_fu_1283_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal gepindex2_fu_1289_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal adjSize340_cast_fu_1259_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mem_index_gep1_fu_1302_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_232_fu_1308_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal addrCmp1_fu_1312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex1_fu_1318_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal gepindex3_fu_1324_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_4_fu_1337_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_216_fu_1366_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_217_fu_1370_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_219_fu_1384_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_221_fu_1396_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_218_fu_1374_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_220_fu_1390_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_222_fu_1402_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_224_fu_1418_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_223_fu_1410_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_226_fu_1432_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_234_fu_1448_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_235_fu_1452_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_233_fu_1442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_237_fu_1466_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_239_fu_1478_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_236_fu_1456_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_238_fu_1472_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_240_fu_1484_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_242_fu_1500_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_243_fu_1508_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_241_fu_1492_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_244_fu_1514_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_245_fu_1518_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_246_fu_1522_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_247_fu_1528_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_248_fu_1534_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_227_fu_1544_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_229_fu_1547_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_230_fu_1553_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_231_fu_1558_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i1_fu_1562_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i1_56_fu_1567_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_386_i_fu_1572_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_251_fu_1577_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_252_fu_1580_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_254_fu_1587_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_255_fu_1593_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_257_fu_1609_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_256_fu_1601_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_258_fu_1617_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_253_fu_1583_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_259_fu_1623_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_262_fu_1635_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_263_fu_1641_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_260_fu_1627_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_261_fu_1631_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_265_fu_1659_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_266_fu_1665_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_264_fu_1651_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_demorgan_fu_1671_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_268_fu_1684_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_211_fu_1711_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1205_ap_start : STD_LOGIC;
    signal grp_fu_1205_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (60 downto 0);

    component mod3 IS
    port (
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component crypto_kem_keypair_urem_11ns_11ns_11_15_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component crypto_kem_keypair_mul_mul_16s_16s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component crypto_kem_keypair_mac_muladd_16s_16s_16ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_S3_inv_b_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    b_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 677,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_coeffs_address0,
        ce0 => b_coeffs_ce0,
        we0 => b_coeffs_we0,
        d0 => b_coeffs_d0,
        q0 => b_coeffs_q0);

    c_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 677,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_coeffs_address0,
        ce0 => c_coeffs_ce0,
        we0 => c_coeffs_we0,
        d0 => c_coeffs_d0,
        q0 => c_coeffs_q0);

    f_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 677,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_coeffs_address0,
        ce0 => f_coeffs_ce0,
        we0 => f_coeffs_we0,
        d0 => f_coeffs_d0,
        q0 => f_coeffs_q0);

    g_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 677,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => g_coeffs_address0,
        ce0 => g_coeffs_ce0,
        we0 => g_coeffs_we0,
        d0 => g_coeffs_d0,
        q0 => g_coeffs_q0);

    grp_mod3_fu_621 : component mod3
    port map (
        ap_ready => grp_mod3_fu_621_ap_ready,
        a => grp_mod3_fu_621_a,
        ap_return => grp_mod3_fu_621_ap_return);

    crypto_kem_keypair_urem_11ns_11ns_11_15_seq_1_U35 : component crypto_kem_keypair_urem_11ns_11ns_11_15_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_1205_ap_start,
        done => grp_fu_1205_ap_done,
        din0 => grp_fu_1205_p0,
        din1 => ap_const_lv11_2A5,
        ce => ap_const_logic_1,
        dout => grp_fu_1205_p2);

    crypto_kem_keypair_mul_mul_16s_16s_16_1_1_U36 : component crypto_kem_keypair_mul_mul_16s_16s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_634,
        din1 => reg_630,
        dout => tmp_174_fu_1723_p2);

    crypto_kem_keypair_mac_muladd_16s_16s_16ns_16_1_1_U37 : component crypto_kem_keypair_mac_muladd_16s_16s_16ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_630,
        din1 => tmp_185_reg_1904,
        din2 => f_coeffs_q0,
        dout => grp_fu_1729_p3);

    crypto_kem_keypair_mac_muladd_16s_16s_16ns_16_1_1_U38 : component crypto_kem_keypair_mac_muladd_16s_16s_16ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => c_coeffs_load_2_reg_1956,
        din1 => tmp_185_reg_1904,
        din2 => b_coeffs_q0,
        dout => grp_fu_1736_p3);

    crypto_kem_keypair_mul_mul_16s_16s_16_1_1_U39 : component crypto_kem_keypair_mul_mul_16s_16s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_634,
        din1 => b_coeffs_load_reg_2045,
        dout => tmp_178_fu_1742_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    degf_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond7_fu_697_p2 = ap_const_lv1_1))) then 
                degf_reg_442 <= ap_const_lv16_2A4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                degf_reg_442 <= degf_2_reg_2007;
            end if; 
        end if;
    end process;

    degg_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond7_fu_697_p2 = ap_const_lv1_1))) then 
                degg_reg_430 <= ap_const_lv16_2A4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                degg_reg_430 <= degg_1_reg_1899;
            end if; 
        end if;
    end process;

    done_reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond7_fu_697_p2 = ap_const_lv1_1))) then 
                done_reg_477 <= ap_const_lv1_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                done_reg_477 <= tmp_269_reg_2017;
            end if; 
        end if;
    end process;

    i_1_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_663_p2 = ap_const_lv1_0))) then 
                i_1_reg_397 <= i_11_fu_669_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond10_fu_646_p2 = ap_const_lv1_1))) then 
                i_1_reg_397 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_2_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_663_p2 = ap_const_lv1_1))) then 
                i_2_reg_408 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_2_reg_408 <= i_12_reg_1766;
            end if; 
        end if;
    end process;

    i_3_reg_419_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond8_fu_680_p2 = ap_const_lv1_1))) then 
                i_3_reg_419 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond7_fu_697_p2 = ap_const_lv1_0))) then 
                i_3_reg_419 <= i_13_fu_703_p2;
            end if; 
        end if;
    end process;

    i_4_reg_511_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_4_reg_511 <= i_17_reg_1913;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_i9_fu_841_p2 = ap_const_lv1_1))) then 
                i_4_reg_511 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_5_reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond5_fu_940_p2 = ap_const_lv1_1))) then 
                i_5_reg_522 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_5_reg_522 <= i_19_reg_1936;
            end if; 
        end if;
    end process;

    i_6_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                i_6_reg_555 <= i_14_reg_2030;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                i_6_reg_555 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_7_reg_576_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond3_fu_1141_p2 = ap_const_lv1_1))) then 
                i_7_reg_576 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state55) and (exitcond_i1_fu_1233_p2 = ap_const_lv1_1))) then 
                i_7_reg_576 <= i_20_reg_2058;
            end if; 
        end if;
    end process;

    i_8_reg_610_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond2_fu_1162_p2 = ap_const_lv1_1))) then 
                i_8_reg_610 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                i_8_reg_610 <= i_16_reg_2156;
            end if; 
        end if;
    end process;

    i_i1_reg_599_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                i_i1_reg_599 <= i_18_reg_2099;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state39) and (exitcond1_fu_1188_p2 = ap_const_lv1_1))) then 
                i_i1_reg_599 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    i_i4_reg_489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_i4_reg_489 <= i_9_reg_1861;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_i4_reg_489 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i5_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i_i5_reg_544 <= i_22_reg_2002;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                i_i5_reg_544 <= ap_const_lv10_1;
            end if; 
        end if;
    end process;

    i_i8_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_i5_fu_798_p2 = ap_const_lv1_1))) then 
                i_i8_reg_500 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_i8_reg_500 <= i_15_reg_1879;
            end if; 
        end if;
    end process;

    i_i_reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                i_i_reg_533 <= i_21_reg_1979;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond4_fu_958_p2 = ap_const_lv1_1))) then 
                i_i_reg_533 <= ap_const_lv10_1;
            end if; 
        end if;
    end process;

    i_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond10_fu_646_p2 = ap_const_lv1_0))) then 
                i_reg_386 <= i_10_fu_657_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_386 <= ap_const_lv10_1;
            end if; 
        end if;
    end process;

    j_1_reg_587_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond2_fu_1162_p2 = ap_const_lv1_0))) then 
                j_1_reg_587 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                j_1_reg_587 <= j_6_reg_2076;
            end if; 
        end if;
    end process;

    j_reg_466_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond7_fu_697_p2 = ap_const_lv1_1))) then 
                j_reg_466 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                j_reg_466 <= j_5_reg_1812;
            end if; 
        end if;
    end process;

    k_1_reg_566_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond3_fu_1141_p2 = ap_const_lv1_1))) then 
                k_1_reg_566 <= k_2_cast_reg_2022;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state55) and (exitcond_i1_fu_1233_p2 = ap_const_lv1_1))) then 
                k_1_reg_566 <= k_5_fu_1347_p1;
            end if; 
        end if;
    end process;

    k_reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond7_fu_697_p2 = ap_const_lv1_1))) then 
                k_reg_454 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                k_reg_454 <= k_3_reg_2012;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) and (exitcond1_fu_1188_p2 = ap_const_lv1_1))) then
                b_assign_1_cast_reg_2086 <= b_assign_1_cast_fu_1215_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_i9_fu_841_p2 = ap_const_lv1_0))) then
                b_coeffs_addr_3_reg_1884 <= tmp_361_i1_fu_853_p1(10 - 1 downto 0);
                c_coeffs_addr_2_reg_1889 <= tmp_361_i1_fu_853_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond4_fu_958_p2 = ap_const_lv1_0))) then
                b_coeffs_addr_4_reg_1941 <= tmp_198_fu_970_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                b_coeffs_load_reg_2045 <= b_coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond_i6_fu_1033_p2 = ap_const_lv1_0))) then
                c_coeffs_addr_5_reg_1997 <= tmp_109_i_fu_1056_p1(10 - 1 downto 0);
                i_22_reg_2002 <= i_22_fu_1061_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                c_coeffs_load_2_reg_1956 <= c_coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_i9_fu_841_p2 = ap_const_lv1_1))) then
                degf_1_reg_1894 <= degf_1_fu_889_p2;
                degg_1_reg_1899 <= degg_1_fu_895_p2;
                tmp_185_reg_1904 <= tmp_185_fu_909_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond_i6_fu_1033_p2 = ap_const_lv1_1))) then
                degf_2_reg_2007 <= degf_2_fu_1067_p2;
                k_3_reg_2012 <= k_3_fu_1071_p2;
                tmp_269_reg_2017 <= tmp_202_fu_1076_p2(15 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                    end_pos_reg_2131(3) <= end_pos_fu_1359_p2(3);
                    start_pos_reg_2125(3) <= start_pos_fu_1351_p3(3);
                    tmp_225_reg_2137(4 downto 1) <= tmp_225_fu_1426_p2(4 downto 1);
                tmp_228_reg_2142 <= tmp_228_fu_1436_p2;
                tmp_249_reg_2147 <= tmp_249_fu_1540_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_i5_fu_798_p2 = ap_const_lv1_0))) then
                g_coeffs_addr_2_reg_1871 <= tmp_361_i_fu_810_p1(10 - 1 downto 0);
                temp_r_coeffs_addr_3_reg_1866 <= tmp_361_i_fu_810_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_12_reg_1766 <= i_12_fu_686_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                i_14_reg_2030 <= i_14_fu_1147_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_15_reg_1879 <= i_15_fu_847_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                i_16_reg_2156 <= i_16_fu_1700_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_17_reg_1913 <= i_17_fu_946_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                i_18_reg_2099 <= i_18_fu_1239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                i_19_reg_1936 <= i_19_fu_964_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                i_20_reg_2058 <= i_20_fu_1168_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond_i_fu_982_p2 = ap_const_lv1_0))) then
                i_21_reg_1979 <= i_21_fu_1004_p2;
                temp_r_coeffs_addr_7_reg_1974 <= tmp_114_i_fu_999_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_9_reg_1861 <= i_9_fu_804_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_5_reg_1812 <= j_5_fu_720_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                j_6_reg_2076 <= j_6_fu_1194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                k_2_cast_reg_2022 <= k_2_cast_fu_1137_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state58) and (exitcond_fu_1694_p2 = ap_const_lv1_0))) then
                r_coeffs_addr_3_reg_2161 <= tmp_186_fu_1706_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state55) and (exitcond_i1_fu_1233_p2 = ap_const_lv1_0))) then
                r_coeffs_addr_5_reg_2115 <= gepindex2371_cast_fu_1332_p1(10 - 1 downto 0);
                tmp_213_reg_2104 <= tmp_213_fu_1245_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_630 <= g_coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_634 <= f_coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_638 <= grp_mod3_fu_621_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond5_fu_940_p2 = ap_const_lv1_0))) then
                temp_r_coeffs_addr_5_reg_1918 <= tmp_194_fu_952_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond8_fu_680_p2 = ap_const_lv1_0))) then
                    tmp_171_reg_1771(9 downto 0) <= tmp_171_fu_692_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_174_reg_1817 <= tmp_174_fu_1723_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond3_fu_1141_p2 = ap_const_lv1_0))) then
                    tmp_177_reg_2035(9 downto 0) <= tmp_177_fu_1153_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                tmp_178_reg_2050 <= tmp_178_fu_1742_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                tmp_187_reg_2167 <= tmp_187_fu_1717_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_196_reg_1928 <= grp_fu_1729_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_200_reg_1961 <= grp_fu_1736_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_208_reg_1822 <= tmp_208_fu_732_p1;
                tmp_209_reg_1827 <= grp_mod3_fu_621_ap_return(1 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_210_reg_1837 <= tmp_176_fu_756_p2(15 downto 15);
                tmp_61_cast_reg_1832 <= tmp_61_cast_fu_744_p2;
                    tmp_64_cast_reg_1847(0) <= tmp_64_cast_fu_774_p1(0);
                    tmp_64_reg_1842(0) <= tmp_64_fu_770_p1(0);
                tmp_i3_cast_reg_1852 <= tmp_i3_cast_fu_790_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond2_fu_1162_p2 = ap_const_lv1_0))) then
                    tmp_270_cast_reg_2063(9 downto 0) <= tmp_270_cast_fu_1180_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_i_50_reg_1984 <= tmp_i_50_fu_1019_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond4_fu_958_p2 = ap_const_lv1_1))) then
                tmp_i_reg_1951 <= tmp_i_fu_976_p2;
            end if;
        end if;
    end process;
    tmp_171_reg_1771(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    tmp_64_reg_1842(15 downto 1) <= "000000000000000";
    tmp_64_cast_reg_1847(10 downto 1) <= "0000000000";
    tmp_177_reg_2035(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    tmp_270_cast_reg_2063(10) <= '0';
    start_pos_reg_2125(2 downto 0) <= "000";
    end_pos_reg_2131(2 downto 0) <= "111";
    tmp_225_reg_2137(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond10_fu_646_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond8_fu_680_p2, ap_CS_fsm_state6, exitcond7_fu_697_p2, ap_CS_fsm_state7, ap_CS_fsm_state12, exitcond_i5_fu_798_p2, ap_CS_fsm_state14, exitcond_i9_fu_841_p2, ap_CS_fsm_state16, exitcond5_fu_940_p2, ap_CS_fsm_state21, exitcond4_fu_958_p2, ap_CS_fsm_state26, exitcond_i_fu_982_p2, ap_CS_fsm_state29, exitcond_i6_fu_1033_p2, ap_CS_fsm_state33, exitcond3_fu_1141_p2, ap_CS_fsm_state38, exitcond2_fu_1162_p2, ap_CS_fsm_state39, exitcond1_fu_1188_p2, ap_CS_fsm_state55, exitcond_i1_fu_1233_p2, ap_CS_fsm_state58, exitcond_fu_1694_p2, exitcond9_fu_663_p2, exitcond6_fu_714_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond10_fu_646_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_663_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond8_fu_680_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond7_fu_697_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond6_fu_714_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_i5_fu_798_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_i9_fu_841_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond5_fu_940_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond4_fu_958_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond_i_fu_982_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond_i6_fu_1033_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (exitcond3_fu_1141_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (exitcond2_fu_1162_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (exitcond1_fu_1188_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state55 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state55) and (exitcond_i1_fu_1233_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state58 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state58) and (exitcond_fu_1694_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_coeffs_address0 <= tmp_171_fu_692_p1(10 - 1 downto 0);

    a_coeffs_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_coeffs_ce0 <= ap_const_logic_1;
        else 
            a_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    addrCmp1_fu_1312_p2 <= "1" when (unsigned(mem_index_gep1_fu_1302_p2) < unsigned(ap_const_lv16_9FC1)) else "0";
    addrCmp_fu_1277_p2 <= "1" when (unsigned(mem_index_gep_fu_1267_p2) < unsigned(ap_const_lv14_2616)) else "0";
    adjSize340_cast_cast_fu_1263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(adjSize_fu_1249_p4),14));
    adjSize340_cast_fu_1259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(adjSize_fu_1249_p4),16));
    adjSize_fu_1249_p4 <= i_i1_reg_599(10 downto 1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state58, exitcond_fu_1694_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (exitcond_fu_1694_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state58, exitcond_fu_1694_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) and (exitcond_fu_1694_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_assign_1_cast_fu_1215_p3 <= 
        ap_const_lv8_FF when (tmp_212_fu_1211_p1(0) = '1') else 
        ap_const_lv8_0;

    b_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, exitcond10_fu_646_p2, ap_CS_fsm_state14, b_coeffs_addr_3_reg_1884, b_coeffs_addr_4_reg_1941, ap_CS_fsm_state22, ap_CS_fsm_state33, tmp_177_fu_1153_p1, ap_CS_fsm_state15, ap_CS_fsm_state25, tmp_fu_652_p1, tmp_361_i1_fu_853_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            b_coeffs_address0 <= tmp_177_fu_1153_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            b_coeffs_address0 <= b_coeffs_addr_4_reg_1941;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_coeffs_address0 <= b_coeffs_addr_3_reg_1884;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            b_coeffs_address0 <= tmp_361_i1_fu_853_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond10_fu_646_p2 = ap_const_lv1_1))) then 
            b_coeffs_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond10_fu_646_p2 = ap_const_lv1_0))) then 
            b_coeffs_address0 <= tmp_fu_652_p1(10 - 1 downto 0);
        else 
            b_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    b_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, exitcond10_fu_646_p2, ap_CS_fsm_state14, ap_CS_fsm_state22, ap_CS_fsm_state33, ap_CS_fsm_state15, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond10_fu_646_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond10_fu_646_p2 = ap_const_lv1_0)))) then 
            b_coeffs_ce0 <= ap_const_logic_1;
        else 
            b_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_coeffs_d0_assign_proc : process(reg_638, ap_CS_fsm_state2, exitcond10_fu_646_p2, ap_CS_fsm_state15, ap_CS_fsm_state25, tmp_363_i1_fu_926_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            b_coeffs_d0 <= reg_638;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_coeffs_d0 <= tmp_363_i1_fu_926_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond10_fu_646_p2 = ap_const_lv1_1))) then 
            b_coeffs_d0 <= ap_const_lv16_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond10_fu_646_p2 = ap_const_lv1_0))) then 
            b_coeffs_d0 <= ap_const_lv16_0;
        else 
            b_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    b_coeffs_we0_assign_proc : process(ap_CS_fsm_state2, exitcond10_fu_646_p2, ap_CS_fsm_state15, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond10_fu_646_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond10_fu_646_p2 = ap_const_lv1_0)))) then 
            b_coeffs_we0 <= ap_const_logic_1;
        else 
            b_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_coeffs_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state14, c_coeffs_addr_2_reg_1889, ap_CS_fsm_state21, done_reg_477, ap_CS_fsm_state29, exitcond_i6_fu_1033_p2, c_coeffs_addr_5_reg_1997, ap_CS_fsm_state31, ap_CS_fsm_state15, ap_CS_fsm_state30, tmp_s_fu_675_p1, tmp_361_i1_fu_853_p1, tmp_198_fu_970_p1, tmp_107_i_fu_1045_p1, tmp_109_i_fu_1056_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            c_coeffs_address0 <= c_coeffs_addr_5_reg_1997;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond_i6_fu_1033_p2 = ap_const_lv1_1)))) then 
            c_coeffs_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond_i6_fu_1033_p2 = ap_const_lv1_0) and (done_reg_477 = ap_const_lv1_0))) then 
            c_coeffs_address0 <= tmp_109_i_fu_1056_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (done_reg_477 = ap_const_lv1_1) and (exitcond_i6_fu_1033_p2 = ap_const_lv1_0))) then 
            c_coeffs_address0 <= tmp_107_i_fu_1045_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            c_coeffs_address0 <= tmp_198_fu_970_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            c_coeffs_address0 <= c_coeffs_addr_2_reg_1889;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            c_coeffs_address0 <= tmp_361_i1_fu_853_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c_coeffs_address0 <= tmp_s_fu_675_p1(10 - 1 downto 0);
        else 
            c_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    c_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state14, ap_CS_fsm_state21, done_reg_477, ap_CS_fsm_state29, exitcond_i6_fu_1033_p2, ap_CS_fsm_state31, ap_CS_fsm_state15, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond_i6_fu_1033_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond_i6_fu_1033_p2 = ap_const_lv1_0) and (done_reg_477 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (done_reg_477 = ap_const_lv1_1) and (exitcond_i6_fu_1033_p2 = ap_const_lv1_0)))) then 
            c_coeffs_ce0 <= ap_const_logic_1;
        else 
            c_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_coeffs_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state31, ap_CS_fsm_state15, ap_CS_fsm_state30, tmp_364_i1_fu_933_p2, tmp_110_i_fu_1090_p3, tmp_105_i_fu_1099_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            c_coeffs_d0 <= tmp_105_i_fu_1099_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            c_coeffs_d0 <= tmp_110_i_fu_1090_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            c_coeffs_d0 <= tmp_364_i1_fu_933_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c_coeffs_d0 <= ap_const_lv16_0;
        else 
            c_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c_coeffs_we0_assign_proc : process(ap_CS_fsm_state3, exitcond9_fu_663_p2, ap_CS_fsm_state31, ap_CS_fsm_state15, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state31) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_663_p2 = ap_const_lv1_0)))) then 
            c_coeffs_we0 <= ap_const_logic_1;
        else 
            c_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    degf_1_fu_889_p2 <= (tmp_183_fu_883_p2 xor degf_reg_442);
    degf_2_fu_1067_p2 <= std_logic_vector(unsigned(degf_1_reg_1894) - unsigned(tmp_64_reg_1842));
    degg_1_fu_895_p2 <= (tmp_183_fu_883_p2 xor degg_reg_430);
    end_pos_fu_1359_p2 <= (start_pos_fu_1351_p3 or ap_const_lv4_7);
    exitcond10_fu_646_p2 <= "1" when (i_reg_386 = ap_const_lv10_2A5) else "0";
    exitcond1_fu_1188_p2 <= "1" when (j_1_reg_587 = ap_const_lv10_2A5) else "0";
    exitcond2_fu_1162_p2 <= "1" when (i_7_reg_576 = ap_const_lv4_A) else "0";
    exitcond3_fu_1141_p2 <= "1" when (i_6_reg_555 = ap_const_lv10_2A5) else "0";
    exitcond4_fu_958_p2 <= "1" when (i_5_reg_522 = ap_const_lv10_2A5) else "0";
    exitcond5_fu_940_p2 <= "1" when (i_4_reg_511 = ap_const_lv10_2A5) else "0";
    exitcond6_fu_714_p2 <= "1" when (j_reg_466 = ap_const_lv11_547) else "0";
    exitcond7_fu_697_p2 <= "1" when (i_3_reg_419 = ap_const_lv10_2A5) else "0";
    exitcond8_fu_680_p2 <= "1" when (i_2_reg_408 = ap_const_lv10_2A5) else "0";
    exitcond9_fu_663_p2 <= "1" when (i_1_reg_397 = ap_const_lv10_2A5) else "0";
    exitcond_fu_1694_p2 <= "1" when (i_8_reg_610 = ap_const_lv10_2A5) else "0";
    exitcond_i1_fu_1233_p2 <= "1" when (i_i1_reg_599 = ap_const_lv11_54A) else "0";
    exitcond_i5_fu_798_p2 <= "1" when (i_i4_reg_489 = ap_const_lv10_2A5) else "0";
    exitcond_i6_fu_1033_p2 <= "1" when (i_i5_reg_544 = ap_const_lv10_2A5) else "0";
    exitcond_i9_fu_841_p2 <= "1" when (i_i8_reg_500 = ap_const_lv10_2A5) else "0";
    exitcond_i_fu_982_p2 <= "1" when (i_i_reg_533 = ap_const_lv10_2A5) else "0";

    f_coeffs_address0_assign_proc : process(ap_CS_fsm_state17, tmp_171_reg_1771, ap_CS_fsm_state7, ap_CS_fsm_state12, temp_r_coeffs_addr_3_reg_1866, temp_r_coeffs_addr_5_reg_1918, ap_CS_fsm_state26, exitcond_i_fu_982_p2, done_reg_477, temp_r_coeffs_addr_7_reg_1974, ap_CS_fsm_state28, ap_CS_fsm_state55, ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state54, tmp_361_i_fu_810_p1, tmp_112_i_fu_988_p1, tmp_114_i_fu_999_p1, tmp_193_fu_1228_p1, gepindex2_cast_fu_1297_p1, exitcond6_fu_714_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            f_coeffs_address0 <= gepindex2_cast_fu_1297_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            f_coeffs_address0 <= tmp_193_fu_1228_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            f_coeffs_address0 <= temp_r_coeffs_addr_7_reg_1974;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond_i_fu_982_p2 = ap_const_lv1_1)))) then 
            f_coeffs_address0 <= ap_const_lv64_2A4(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (done_reg_477 = ap_const_lv1_0) and (exitcond_i_fu_982_p2 = ap_const_lv1_0))) then 
            f_coeffs_address0 <= tmp_114_i_fu_999_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (done_reg_477 = ap_const_lv1_1) and (exitcond_i_fu_982_p2 = ap_const_lv1_0))) then 
            f_coeffs_address0 <= tmp_112_i_fu_988_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            f_coeffs_address0 <= temp_r_coeffs_addr_5_reg_1918;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            f_coeffs_address0 <= temp_r_coeffs_addr_3_reg_1866;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            f_coeffs_address0 <= tmp_361_i_fu_810_p1(10 - 1 downto 0);
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond6_fu_714_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond6_fu_714_p2 = ap_const_lv1_0)))) then 
            f_coeffs_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            f_coeffs_address0 <= tmp_171_reg_1771(10 - 1 downto 0);
        else 
            f_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    f_coeffs_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state26, exitcond_i_fu_982_p2, done_reg_477, ap_CS_fsm_state28, ap_CS_fsm_state55, ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state54, exitcond6_fu_714_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond_i_fu_982_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (done_reg_477 = ap_const_lv1_0) and (exitcond_i_fu_982_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (done_reg_477 = ap_const_lv1_1) and (exitcond_i_fu_982_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond6_fu_714_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond6_fu_714_p2 = ap_const_lv1_0)))) then 
            f_coeffs_ce0 <= ap_const_logic_1;
        else 
            f_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    f_coeffs_d0_assign_proc : process(r_coeffs_q0, a_coeffs_q0, reg_638, ap_CS_fsm_state28, ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state54, tmp_363_i_fu_827_p2, tmp_115_i_fu_1010_p3, tmp_111_i_fu_1026_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            f_coeffs_d0 <= r_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            f_coeffs_d0 <= tmp_111_i_fu_1026_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            f_coeffs_d0 <= tmp_115_i_fu_1010_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            f_coeffs_d0 <= reg_638;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            f_coeffs_d0 <= tmp_363_i_fu_827_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            f_coeffs_d0 <= a_coeffs_q0;
        else 
            f_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    f_coeffs_we0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state54)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            f_coeffs_we0 <= ap_const_logic_1;
        else 
            f_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    g_coeffs_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state12, g_coeffs_addr_2_reg_1871, ap_CS_fsm_state16, ap_CS_fsm_state13, tmp_172_fu_709_p1, tmp_361_i_fu_810_p1, tmp_194_fu_952_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            g_coeffs_address0 <= tmp_194_fu_952_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            g_coeffs_address0 <= g_coeffs_addr_2_reg_1871;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            g_coeffs_address0 <= tmp_361_i_fu_810_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            g_coeffs_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            g_coeffs_address0 <= tmp_172_fu_709_p1(10 - 1 downto 0);
        else 
            g_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    g_coeffs_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            g_coeffs_ce0 <= ap_const_logic_1;
        else 
            g_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    g_coeffs_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state13, tmp_364_i_fu_834_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            g_coeffs_d0 <= tmp_364_i_fu_834_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            g_coeffs_d0 <= ap_const_lv16_1;
        else 
            g_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    g_coeffs_we0_assign_proc : process(ap_CS_fsm_state6, exitcond7_fu_697_p2, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond7_fu_697_p2 = ap_const_lv1_0)))) then 
            g_coeffs_we0 <= ap_const_logic_1;
        else 
            g_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    gepindex1_fu_1318_p2 <= std_logic_vector(signed(ap_const_lv10_2E4) + signed(tmp_232_fu_1308_p1));
    gepindex2371_cast_fu_1332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gepindex3_fu_1324_p3),64));
    gepindex2_cast_fu_1297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gepindex2_fu_1289_p3),64));
    gepindex2_fu_1289_p3 <= 
        gepindex_fu_1283_p2 when (addrCmp_fu_1277_p2(0) = '1') else 
        ap_const_lv10_2A4;
    gepindex3_fu_1324_p3 <= 
        gepindex1_fu_1318_p2 when (addrCmp1_fu_1312_p2(0) = '1') else 
        ap_const_lv10_2A4;
    gepindex_fu_1283_p2 <= std_logic_vector(unsigned(ap_const_lv10_8F) + unsigned(tmp_214_fu_1273_p1));

    grp_fu_1205_ap_start_assign_proc : process(ap_CS_fsm_state39, exitcond1_fu_1188_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) and (exitcond1_fu_1188_p2 = ap_const_lv1_0))) then 
            grp_fu_1205_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1205_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1205_p0 <= std_logic_vector(unsigned(tmp_270_cast_reg_2063) + unsigned(j_1_cast_fu_1184_p1));

    grp_fu_626_p0_assign_proc : process(start_pos_fu_1351_p3, start_pos_reg_2125, ap_CS_fsm_state56, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_626_p0 <= start_pos_reg_2125;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_626_p0 <= start_pos_fu_1351_p3;
        else 
            grp_fu_626_p0 <= "XXXX";
        end if; 
    end process;


    grp_fu_626_p1_assign_proc : process(ap_CS_fsm_state56, end_pos_fu_1359_p2, end_pos_reg_2131, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_626_p1 <= end_pos_reg_2131;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_626_p1 <= end_pos_fu_1359_p2;
        else 
            grp_fu_626_p1 <= "XXXX";
        end if; 
    end process;

    grp_fu_626_p2 <= "1" when (unsigned(grp_fu_626_p0) > unsigned(grp_fu_626_p1)) else "0";

    grp_mod3_fu_621_a_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state19, ap_CS_fsm_state24, ap_CS_fsm_state36, ap_CS_fsm_state60, tmp_196_reg_1928, tmp_200_reg_1961, tmp_178_reg_2050, tmp_187_reg_2167, tmp_207_fu_726_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_mod3_fu_621_a <= tmp_187_reg_2167;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_mod3_fu_621_a <= tmp_178_reg_2050;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_mod3_fu_621_a <= tmp_200_reg_1961;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_mod3_fu_621_a <= tmp_196_reg_1928;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_mod3_fu_621_a <= tmp_207_fu_726_p2;
        else 
            grp_mod3_fu_621_a <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_10_fu_657_p2 <= std_logic_vector(unsigned(i_reg_386) + unsigned(ap_const_lv10_1));
    i_11_fu_669_p2 <= std_logic_vector(unsigned(i_1_reg_397) + unsigned(ap_const_lv10_1));
    i_12_fu_686_p2 <= std_logic_vector(unsigned(i_2_reg_408) + unsigned(ap_const_lv10_1));
    i_13_fu_703_p2 <= std_logic_vector(unsigned(i_3_reg_419) + unsigned(ap_const_lv10_1));
    i_14_fu_1147_p2 <= std_logic_vector(unsigned(i_6_reg_555) + unsigned(ap_const_lv10_1));
    i_15_fu_847_p2 <= std_logic_vector(unsigned(i_i8_reg_500) + unsigned(ap_const_lv10_1));
    i_16_fu_1700_p2 <= std_logic_vector(unsigned(i_8_reg_610) + unsigned(ap_const_lv10_1));
    i_17_fu_946_p2 <= std_logic_vector(unsigned(i_4_reg_511) + unsigned(ap_const_lv10_1));
    i_18_fu_1239_p2 <= std_logic_vector(unsigned(i_i1_reg_599) + unsigned(ap_const_lv11_1));
    i_19_fu_964_p2 <= std_logic_vector(unsigned(i_5_reg_522) + unsigned(ap_const_lv10_1));
    i_20_fu_1168_p2 <= std_logic_vector(unsigned(i_7_reg_576) + unsigned(ap_const_lv4_1));
    i_21_fu_1004_p2 <= std_logic_vector(unsigned(i_i_reg_533) + unsigned(ap_const_lv10_1));
    i_22_fu_1061_p2 <= std_logic_vector(unsigned(i_i5_reg_544) + unsigned(ap_const_lv10_1));
    i_7_cast_fu_1158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_576),10));
    i_9_fu_804_p2 <= std_logic_vector(unsigned(i_i4_reg_489) + unsigned(ap_const_lv10_1));
    j_1_cast_fu_1184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_587),11));
    j_5_fu_720_p2 <= std_logic_vector(unsigned(j_reg_466) + unsigned(ap_const_lv11_1));
    j_6_fu_1194_p2 <= std_logic_vector(unsigned(j_1_reg_587) + unsigned(ap_const_lv10_1));
        k_2_cast_fu_1137_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(k_2_fu_1131_p2),16));

    k_2_fu_1131_p2 <= std_logic_vector(unsigned(k_cast_fu_1105_p1) - unsigned(tmp_240_cast_cast_fu_1123_p3));
    k_3_fu_1071_p2 <= std_logic_vector(unsigned(tmp_64_cast_reg_1847) + unsigned(k_reg_454));
    k_4_fu_1337_p4 <= k_1_reg_566(15 downto 1);
    k_5_fu_1347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_4_fu_1337_p4),16));
    k_cast_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_454),12));
    mask_fu_1687_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv2_1),to_integer(unsigned('0' & tmp_268_fu_1684_p1(2-1 downto 0)))));
    mem_index_gep1_fu_1302_p2 <= std_logic_vector(signed(ap_const_lv16_9D1C) + signed(adjSize340_cast_fu_1259_p1));
    mem_index_gep_fu_1267_p2 <= std_logic_vector(signed(ap_const_lv14_2371) + signed(adjSize340_cast_cast_fu_1263_p1));
    p_demorgan_fu_1671_p2 <= (tmp_266_fu_1665_p2 and tmp_265_fu_1659_p2);

    r_coeffs_address0_assign_proc : process(tmp_177_reg_2035, ap_CS_fsm_state53, ap_CS_fsm_state55, r_coeffs_addr_5_reg_2115, ap_CS_fsm_state58, ap_CS_fsm_state37, ap_CS_fsm_state57, tmp_192_fu_1223_p1, gepindex2371_cast_fu_1332_p1, tmp_186_fu_1706_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            r_coeffs_address0 <= tmp_186_fu_1706_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            r_coeffs_address0 <= r_coeffs_addr_5_reg_2115;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            r_coeffs_address0 <= gepindex2371_cast_fu_1332_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            r_coeffs_address0 <= tmp_192_fu_1223_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            r_coeffs_address0 <= tmp_177_reg_2035(10 - 1 downto 0);
        else 
            r_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_address1_assign_proc : process(ap_CS_fsm_state58, r_coeffs_addr_3_reg_2161, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            r_coeffs_address1 <= r_coeffs_addr_3_reg_2161;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            r_coeffs_address1 <= ap_const_lv64_2A4(10 - 1 downto 0);
        else 
            r_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_ce0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state58, ap_CS_fsm_state37, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            r_coeffs_ce0 <= ap_const_logic_1;
        else 
            r_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_ce1_assign_proc : process(ap_CS_fsm_state58, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            r_coeffs_ce1 <= ap_const_logic_1;
        else 
            r_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_d0_assign_proc : process(reg_638, ap_CS_fsm_state37, ap_CS_fsm_state57, tmp_267_fu_1677_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            r_coeffs_d0 <= tmp_267_fu_1677_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            r_coeffs_d0 <= reg_638;
        else 
            r_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    r_coeffs_d1 <= reg_638;

    r_coeffs_we0_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state57, mask_fu_1687_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            r_coeffs_we0 <= mask_fu_1687_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            r_coeffs_we0 <= ap_const_lv2_3;
        else 
            r_coeffs_we0 <= ap_const_lv2_0;
        end if; 
    end process;


    r_coeffs_we1_assign_proc : process(ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            r_coeffs_we1 <= ap_const_lv2_3;
        else 
            r_coeffs_we1 <= ap_const_lv2_0;
        end if; 
    end process;

    start_pos_fu_1351_p3 <= (tmp_213_reg_2104 & ap_const_lv3_0);
    swap_fu_784_p2 <= (tmp_210_fu_762_p3 and tmp21_fu_778_p2);
    t_1_fu_921_p2 <= (tmp_i3_cast_reg_1852 and tmp_362_i1_fu_915_p2);
    t_fu_822_p2 <= (tmp_i3_cast_reg_1852 and tmp_362_i_fu_816_p2);
    tmp21_fu_778_p2 <= (tmp_61_cast_fu_744_p2 and done_reg_477);
    tmp22_fu_865_p2 <= (tmp_210_reg_1837 and done_reg_477);
    tmp_105_i_fu_1099_p2 <= (tmp_i_50_reg_1984 and c_coeffs_q0);
    tmp_106_i_fu_1039_p2 <= std_logic_vector(signed(ap_const_lv10_2A4) - signed(i_i5_reg_544));
    tmp_107_i_fu_1045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_106_i_fu_1039_p2),64));
    tmp_108_i_fu_1050_p2 <= std_logic_vector(signed(ap_const_lv10_2A5) - signed(i_i5_reg_544));
    tmp_109_i_fu_1056_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_108_i_fu_1050_p2),64));
    tmp_110_i_fu_1090_p3 <= 
        c_coeffs_q0 when (done_reg_477(0) = '1') else 
        c_coeffs_q0;
    tmp_111_i_fu_1026_p2 <= (tmp_i_50_fu_1019_p3 and f_coeffs_q0);
    tmp_112_i_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_533),64));
    tmp_113_i_fu_993_p2 <= std_logic_vector(unsigned(i_i_reg_533) + unsigned(ap_const_lv10_3FF));
    tmp_114_i_fu_999_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_113_i_fu_993_p2),64));
    tmp_115_i_fu_1010_p3 <= 
        f_coeffs_q0 when (done_reg_477(0) = '1') else 
        f_coeffs_q0;
    tmp_171_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_408),64));
    tmp_172_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_419),64));
    tmp_173_fu_1109_p2 <= std_logic_vector(unsigned(ap_const_lv11_2A4) - unsigned(k_reg_454));
    tmp_176_fu_756_p2 <= std_logic_vector(unsigned(tmp_250_cast_fu_748_p1) - unsigned(tmp_251_cast_fu_752_p1));
    tmp_177_fu_1153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_555),64));
    tmp_180_fu_1174_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv10_1),to_integer(unsigned('0' & i_7_cast_fu_1158_p1(10-1 downto 0)))));
    tmp_181_fu_859_p2 <= (degg_reg_430 xor degf_reg_442);
    tmp_182_fu_870_p2 <= (tmp_61_cast_reg_1832 and tmp22_fu_865_p2);
    tmp_183_fu_883_p2 <= (tmp_257_cast_fu_875_p3 and tmp_181_fu_859_p2);
    tmp_184_fu_901_p3 <= 
        ap_const_lv16_FFFF when (done_reg_477(0) = '1') else 
        ap_const_lv16_0;
    tmp_185_fu_909_p2 <= (tmp_184_fu_901_p3 and reg_638);
    tmp_186_fu_1706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_reg_610),64));
    tmp_187_fu_1717_p2 <= std_logic_vector(unsigned(r_coeffs_q0) + unsigned(tmp_211_fu_1711_p2));
    tmp_191_fu_1115_p3 <= tmp_173_fu_1109_p2(10 downto 10);
    tmp_192_fu_1223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1205_p2),64));
    tmp_193_fu_1228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_587),64));
    tmp_194_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_511),64));
    tmp_198_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_522),64));
    tmp_202_fu_1076_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(degf_2_fu_1067_p2));
    tmp_207_fu_726_p2 <= std_logic_vector(shift_left(unsigned(tmp_174_reg_1817),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_208_fu_732_p1 <= grp_mod3_fu_621_ap_return(1 - 1 downto 0);
    tmp_210_fu_762_p3 <= tmp_176_fu_756_p2(15 downto 15);
    tmp_211_fu_1711_p2 <= std_logic_vector(shift_left(unsigned(r_coeffs_q1),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_212_fu_1211_p1 <= k_1_reg_566(1 - 1 downto 0);
    tmp_213_fu_1245_p1 <= i_i1_reg_599(1 - 1 downto 0);
    tmp_214_fu_1273_p1 <= mem_index_gep_fu_1267_p2(10 - 1 downto 0);
    tmp_216_fu_1366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos_fu_1351_p3),5));
    tmp_217_fu_1370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos_fu_1359_p2),5));
    
    tmp_218_fu_1374_p4_proc : process(f_coeffs_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_218_fu_1374_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := f_coeffs_q0;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for tmp_218_fu_1374_p4_i in 0 to 16-1 loop
                v0_cpy(tmp_218_fu_1374_p4_i) := f_coeffs_q0(16-1-tmp_218_fu_1374_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_218_fu_1374_p4 <= resvalue(16-1 downto 0);
    end process;

    tmp_219_fu_1384_p2 <= std_logic_vector(unsigned(tmp_216_fu_1366_p1) - unsigned(tmp_217_fu_1370_p1));
    tmp_220_fu_1390_p2 <= (tmp_216_fu_1366_p1 xor ap_const_lv5_F);
    tmp_221_fu_1396_p2 <= std_logic_vector(unsigned(tmp_217_fu_1370_p1) - unsigned(tmp_216_fu_1366_p1));
    tmp_222_fu_1402_p3 <= 
        tmp_219_fu_1384_p2 when (grp_fu_626_p2(0) = '1') else 
        tmp_221_fu_1396_p2;
    tmp_223_fu_1410_p3 <= 
        tmp_218_fu_1374_p4 when (grp_fu_626_p2(0) = '1') else 
        f_coeffs_q0;
    tmp_224_fu_1418_p3 <= 
        tmp_220_fu_1390_p2 when (grp_fu_626_p2(0) = '1') else 
        tmp_216_fu_1366_p1;
    tmp_225_fu_1426_p2 <= std_logic_vector(unsigned(ap_const_lv5_F) - unsigned(tmp_222_fu_1402_p3));
    tmp_226_fu_1432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_224_fu_1418_p3),16));
    tmp_227_fu_1544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_225_reg_2137),16));
    tmp_228_fu_1436_p2 <= std_logic_vector(shift_right(unsigned(tmp_223_fu_1410_p3),to_integer(unsigned('0' & tmp_226_fu_1432_p1(16-1 downto 0)))));
    tmp_229_fu_1547_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & tmp_227_fu_1544_p1(16-1 downto 0)))));
    tmp_230_fu_1553_p2 <= (tmp_229_fu_1547_p2 and tmp_228_reg_2142);
    tmp_231_fu_1558_p1 <= tmp_230_fu_1553_p2(8 - 1 downto 0);
    tmp_232_fu_1308_p1 <= mem_index_gep1_fu_1302_p2(10 - 1 downto 0);
    tmp_233_fu_1442_p2 <= "1" when (unsigned(start_pos_fu_1351_p3) > unsigned(end_pos_fu_1359_p2)) else "0";
    tmp_234_fu_1448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos_fu_1351_p3),5));
    tmp_235_fu_1452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos_fu_1359_p2),5));
    
    tmp_236_fu_1456_p4_proc : process(r_coeffs_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_236_fu_1456_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := r_coeffs_q0;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for tmp_236_fu_1456_p4_i in 0 to 16-1 loop
                v0_cpy(tmp_236_fu_1456_p4_i) := r_coeffs_q0(16-1-tmp_236_fu_1456_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_236_fu_1456_p4 <= resvalue(16-1 downto 0);
    end process;

    tmp_237_fu_1466_p2 <= std_logic_vector(unsigned(tmp_234_fu_1448_p1) - unsigned(tmp_235_fu_1452_p1));
    tmp_238_fu_1472_p2 <= (tmp_234_fu_1448_p1 xor ap_const_lv5_F);
    tmp_239_fu_1478_p2 <= std_logic_vector(unsigned(tmp_235_fu_1452_p1) - unsigned(tmp_234_fu_1448_p1));
    tmp_240_cast_cast_fu_1123_p3 <= 
        ap_const_lv12_2A5 when (tmp_191_fu_1115_p3(0) = '1') else 
        ap_const_lv12_0;
    tmp_240_fu_1484_p3 <= 
        tmp_237_fu_1466_p2 when (tmp_233_fu_1442_p2(0) = '1') else 
        tmp_239_fu_1478_p2;
    tmp_241_fu_1492_p3 <= 
        tmp_236_fu_1456_p4 when (tmp_233_fu_1442_p2(0) = '1') else 
        r_coeffs_q0;
    tmp_242_fu_1500_p3 <= 
        tmp_238_fu_1472_p2 when (tmp_233_fu_1442_p2(0) = '1') else 
        tmp_234_fu_1448_p1;
    tmp_243_fu_1508_p2 <= std_logic_vector(unsigned(ap_const_lv5_F) - unsigned(tmp_240_fu_1484_p3));
    tmp_244_fu_1514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_242_fu_1500_p3),16));
    tmp_245_fu_1518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_243_fu_1508_p2),16));
    tmp_246_fu_1522_p2 <= std_logic_vector(shift_right(unsigned(tmp_241_fu_1492_p3),to_integer(unsigned('0' & tmp_244_fu_1514_p1(16-1 downto 0)))));
    tmp_247_fu_1528_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & tmp_245_fu_1518_p1(16-1 downto 0)))));
    tmp_248_fu_1534_p2 <= (tmp_247_fu_1528_p2 and tmp_246_fu_1522_p2);
    tmp_249_fu_1540_p1 <= tmp_248_fu_1534_p2(8 - 1 downto 0);
    tmp_250_cast_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(degf_reg_442),17));
    tmp_251_cast_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(degg_reg_430),17));
    tmp_251_fu_1577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos_reg_2125),5));
    tmp_252_fu_1580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos_reg_2131),5));
    tmp_253_fu_1583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_386_i_fu_1572_p2),16));
    tmp_254_fu_1587_p2 <= (tmp_251_fu_1577_p1 xor ap_const_lv5_F);
    tmp_255_fu_1593_p3 <= 
        tmp_251_fu_1577_p1 when (grp_fu_626_p2(0) = '1') else 
        tmp_252_fu_1580_p1;
    tmp_256_fu_1601_p3 <= 
        tmp_252_fu_1580_p1 when (grp_fu_626_p2(0) = '1') else 
        tmp_251_fu_1577_p1;
    tmp_257_cast_fu_875_p3 <= 
        ap_const_lv16_FFFF when (tmp_182_fu_870_p2(0) = '1') else 
        ap_const_lv16_0;
    tmp_257_fu_1609_p3 <= 
        tmp_254_fu_1587_p2 when (grp_fu_626_p2(0) = '1') else 
        tmp_251_fu_1577_p1;
    tmp_258_fu_1617_p2 <= (tmp_255_fu_1593_p3 xor ap_const_lv5_F);
    tmp_259_fu_1623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_257_fu_1609_p3),16));
    tmp_260_fu_1627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_256_fu_1601_p3),16));
    tmp_261_fu_1631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_258_fu_1617_p2),16));
    tmp_262_fu_1635_p2 <= std_logic_vector(shift_left(unsigned(tmp_253_fu_1583_p1),to_integer(unsigned('0' & tmp_259_fu_1623_p1(16-1 downto 0)))));
    
    tmp_263_fu_1641_p4_proc : process(tmp_262_fu_1635_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_263_fu_1641_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_262_fu_1635_p2;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for tmp_263_fu_1641_p4_i in 0 to 16-1 loop
                v0_cpy(tmp_263_fu_1641_p4_i) := tmp_262_fu_1635_p2(16-1-tmp_263_fu_1641_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_263_fu_1641_p4 <= resvalue(16-1 downto 0);
    end process;

    tmp_264_fu_1651_p3 <= 
        tmp_263_fu_1641_p4 when (grp_fu_626_p2(0) = '1') else 
        tmp_262_fu_1635_p2;
    tmp_265_fu_1659_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & tmp_260_fu_1627_p1(16-1 downto 0)))));
    tmp_266_fu_1665_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & tmp_261_fu_1631_p1(16-1 downto 0)))));
    tmp_267_fu_1677_p2 <= (tmp_264_fu_1651_p3 and p_demorgan_fu_1671_p2);
    tmp_268_fu_1684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_213_reg_2104),2));
    tmp_270_cast_fu_1180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_180_fu_1174_p2),11));
    tmp_361_i1_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i8_reg_500),64));
    tmp_361_i_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i4_reg_489),64));
    tmp_362_i1_fu_915_p2 <= (c_coeffs_q0 xor b_coeffs_q0);
    tmp_362_i_fu_816_p2 <= (g_coeffs_q0 xor f_coeffs_q0);
    tmp_363_i1_fu_926_p2 <= (t_1_fu_921_p2 xor b_coeffs_q0);
    tmp_363_i_fu_827_p2 <= (t_fu_822_p2 xor f_coeffs_q0);
    tmp_364_i1_fu_933_p2 <= (t_1_fu_921_p2 xor c_coeffs_q0);
    tmp_364_i_fu_834_p2 <= (t_fu_822_p2 xor g_coeffs_q0);
    tmp_386_i_fu_1572_p2 <= (tmp_i1_56_fu_1567_p2 xor tmp_249_reg_2147);
    tmp_61_cast_fu_744_p2 <= (tmp_209_reg_1827 or tmp_208_reg_1822);
    tmp_64_cast_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(done_reg_477),11));
    tmp_64_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(done_reg_477),16));
    tmp_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_386),64));
    tmp_i1_56_fu_1567_p2 <= (tmp_i1_fu_1562_p2 and b_assign_1_cast_reg_2086);
    tmp_i1_fu_1562_p2 <= (tmp_249_reg_2147 xor tmp_231_fu_1558_p1);
    tmp_i3_cast_fu_790_p3 <= 
        ap_const_lv16_FFFF when (swap_fu_784_p2(0) = '1') else 
        ap_const_lv16_0;
    tmp_i_50_fu_1019_p3 <= 
        ap_const_lv16_FFFF when (tmp_i_reg_1951(0) = '1') else 
        ap_const_lv16_0;
    tmp_i_fu_976_p2 <= (done_reg_477 xor ap_const_lv1_1);
    tmp_s_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_397),64));
end behav;
