-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity poly_Sq_tobytes_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    r_ce0 : OUT STD_LOGIC;
    r_we0 : OUT STD_LOGIC;
    r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    r_ce1 : OUT STD_LOGIC;
    r_we1 : OUT STD_LOGIC;
    r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a_coeffs_ce0 : OUT STD_LOGIC;
    a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of poly_Sq_tobytes_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_4B1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010010110001";
    constant ap_const_lv64_4B0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010010110000";
    constant ap_const_lv64_4AF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010010101111";
    constant ap_const_lv64_4AE : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010010101110";
    constant ap_const_lv64_4AD : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010010101101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_4AC : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010010101100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_B : STD_LOGIC_VECTOR (9 downto 0) := "0000001011";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv11_110 : STD_LOGIC_VECTOR (10 downto 0) := "00100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_9 : STD_LOGIC_VECTOR (9 downto 0) := "0000001001";
    constant ap_const_lv10_A : STD_LOGIC_VECTOR (9 downto 0) := "0000001010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_522_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul_reg_1227 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_49_fu_534_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_49_reg_1235 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_540_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_reg_1240 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond3_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_558_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_reg_1248 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond2_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_1258 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_492_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_23_reg_1263 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_30_reg_1268 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_34_reg_1273 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_70_reg_1278 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_48_fu_1039_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_48_reg_1286 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal exitcond1_fu_1033_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_1074_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exitcond_fu_1063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_fu_1099_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_86_reg_1304 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_502_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_46_reg_1309 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_88_fu_1124_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_88_reg_1314 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_89_fu_1152_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_89_reg_1319 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce1 : STD_LOGIC;
    signal t_we1 : STD_LOGIC;
    signal t_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_423 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal phi_mul_reg_434 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_446 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_1_reg_458 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal j_2_reg_470 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_74_fu_569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_75_fu_574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum8_cast_fu_693_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum10_cast_fu_714_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum12_cast_fu_761_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum14_cast_fu_801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum15_cast_fu_850_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum16_cast_fu_882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum17_cast_fu_947_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum18_cast_fu_997_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum19_cast_fu_1028_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_1053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_1058_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_87_fu_1069_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_33_fu_579_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_fu_621_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_fu_671_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_56_fu_736_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_58_fu_778_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_fu_828_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_fu_922_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_68_fu_974_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_77_fu_1092_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_78_fu_1116_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_82_fu_1145_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_85_fu_1173_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_90_fu_1180_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast6_fu_548_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_73_fu_564_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_110_cast_fu_584_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_fu_588_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_36_fu_609_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_fu_613_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_599_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_51_fu_628_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_114_cast_fu_634_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum2_fu_638_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_39_fu_659_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_22_fu_663_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_fu_677_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_118_cast_fu_683_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum8_fu_687_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_55_fu_698_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_134_cast_fu_704_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum10_fu_708_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_40_fu_719_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_25_fu_723_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_26_fu_731_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_57_fu_745_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_142_cast_fu_751_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum12_fu_755_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_41_fu_766_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_28_fu_770_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_512_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_59_fu_785_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_149_cast_fu_791_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum14_fu_795_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_42_fu_816_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_820_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_61_fu_834_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_153_cast_fu_840_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum15_fu_844_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_63_fu_866_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_158_cast_fu_872_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum16_fu_876_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_64_fu_897_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_37_fu_901_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_72_fu_914_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_909_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_66_fu_931_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_162_cast_fu_937_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum17_fu_941_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_80_fu_952_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_67_fu_956_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_fu_964_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_69_fu_981_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_168_cast_fu_987_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum18_fu_991_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_71_fu_1012_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_172_cast_fu_1018_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum19_fu_1022_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_fu_1045_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_83_fu_1080_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_76_fu_1084_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_fu_1103_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_45_fu_1110_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_1135_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_81_fu_1128_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_1163_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_84_fu_1156_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component poly_Sq_tobytes_1_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    t_U : component poly_Sq_tobytes_1_t
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0,
        address1 => t_address1,
        ce1 => t_ce1,
        we1 => t_we1,
        d1 => a_coeffs_q0,
        q1 => t_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_reg_423 <= tmp_49_reg_1235;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_423 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_1_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_528_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_1_reg_458 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j_1_reg_458 <= tmp_48_reg_1286;
            end if; 
        end if;
    end process;

    j_2_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond1_fu_1033_p2 = ap_const_lv1_1))) then 
                j_2_reg_470 <= ap_const_lv4_4;
            elsif (((exitcond_fu_1063_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                j_2_reg_470 <= j_4_fu_1074_p2;
            end if; 
        end if;
    end process;

    j_reg_446_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_528_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_446 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_446 <= j_3_reg_1248;
            end if; 
        end if;
    end process;

    phi_mul_reg_434_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                phi_mul_reg_434 <= next_mul_reg_1227;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_434 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_3_reg_1248 <= j_3_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul_reg_1227 <= next_mul_fu_522_p2;
                tmp_49_reg_1235 <= tmp_49_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_21_reg_1258 <= t_q1(12 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_23_reg_1263 <= t_q1(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_30_reg_1268 <= t_q1(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_34_reg_1273 <= t_q0(15 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_46_reg_1309 <= t_q0(6 downto 5);
                tmp_86_reg_1304 <= tmp_86_fu_1099_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_48_reg_1286 <= tmp_48_fu_1039_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_70_reg_1278 <= t_q0(10 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_88_reg_1314 <= tmp_88_fu_1124_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_89_reg_1319 <= tmp_89_fu_1152_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_528_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_reg_1240(9 downto 3) <= tmp_fu_540_p3(9 downto 3);
            end if;
        end if;
    end process;
    tmp_reg_1240(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_528_p2, ap_CS_fsm_state3, exitcond2_fu_552_p2, ap_CS_fsm_state11, exitcond1_fu_1033_p2, ap_CS_fsm_state13, exitcond_fu_1063_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_528_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond2_fu_552_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond1_fu_1033_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (((exitcond_fu_1063_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;

    a_coeffs_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11, tmp_74_fu_569_p1, tmp_s_fu_1053_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            a_coeffs_address0 <= tmp_s_fu_1053_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_coeffs_address0 <= tmp_74_fu_569_p1(10 - 1 downto 0);
        else 
            a_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    a_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            a_coeffs_ce0 <= ap_const_logic_1;
        else 
            a_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_1033_p2 <= "1" when (j_1_reg_458 = ap_const_lv3_4) else "0";
    exitcond2_fu_552_p2 <= "1" when (j_reg_446 = ap_const_lv4_8) else "0";
    exitcond3_fu_528_p2 <= "1" when (i_reg_423 = ap_const_lv7_54) else "0";
    exitcond_fu_1063_p2 <= "1" when (j_2_reg_470 = ap_const_lv4_8) else "0";
    grp_fu_492_p4 <= t_q1(15 downto 10);
    grp_fu_502_p4 <= t_q0(6 downto 5);
    grp_fu_512_p4 <= t_q0(14 downto 7);
    j_3_fu_558_p2 <= std_logic_vector(unsigned(j_reg_446) + unsigned(ap_const_lv4_1));
    j_4_fu_1074_p2 <= std_logic_vector(unsigned(j_2_reg_470) + unsigned(ap_const_lv4_1));
    j_cast6_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_446),10));
    next_mul_fu_522_p2 <= std_logic_vector(unsigned(phi_mul_reg_434) + unsigned(ap_const_lv10_B));

    r_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state10, sum_cast_fu_594_p1, sum8_cast_fu_693_p1, sum12_cast_fu_761_p1, sum15_cast_fu_850_p1, sum17_cast_fu_947_p1, sum19_cast_fu_1028_p1, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_address0 <= ap_const_lv64_4AC(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            r_address0 <= ap_const_lv64_4AE(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            r_address0 <= ap_const_lv64_4B0(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_address0 <= sum19_cast_fu_1028_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_address0 <= sum17_cast_fu_947_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_address0 <= sum15_cast_fu_850_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_address0 <= sum12_cast_fu_761_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_address0 <= sum8_cast_fu_693_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_address0 <= sum_cast_fu_594_p1(11 - 1 downto 0);
        else 
            r_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    r_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state15, sum2_cast_fu_644_p1, sum10_cast_fu_714_p1, sum14_cast_fu_801_p1, sum16_cast_fu_882_p1, sum18_cast_fu_997_p1, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_address1 <= ap_const_lv64_4AD(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            r_address1 <= ap_const_lv64_4AF(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            r_address1 <= ap_const_lv64_4B1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_address1 <= sum18_cast_fu_997_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_address1 <= sum16_cast_fu_882_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_address1 <= sum14_cast_fu_801_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_address1 <= sum10_cast_fu_714_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_address1 <= sum2_cast_fu_644_p1(11 - 1 downto 0);
        else 
            r_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    r_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state10, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_ce0 <= ap_const_logic_1;
        else 
            r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_ce1 <= ap_const_logic_1;
        else 
            r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, tmp_70_reg_1278, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state10, ap_CS_fsm_state17, tmp_33_fu_579_p1, tmp_52_fu_671_p2, tmp_56_fu_736_p3, tmp_60_fu_828_p2, tmp_65_fu_922_p3, tmp_78_fu_1116_p3, tmp_82_fu_1145_p2, tmp_90_fu_1180_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_d0 <= tmp_90_fu_1180_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            r_d0 <= tmp_82_fu_1145_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            r_d0 <= tmp_78_fu_1116_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_d0 <= tmp_70_reg_1278;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_d0 <= tmp_65_fu_922_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_d0 <= tmp_60_fu_828_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_d0 <= tmp_56_fu_736_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_d0 <= tmp_52_fu_671_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_d0 <= tmp_33_fu_579_p1;
        else 
            r_d0 <= "XXXXXXXX";
        end if; 
    end process;


    r_d1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state15, t_q0, t_q1, ap_CS_fsm_state17, tmp_50_fu_621_p2, tmp_58_fu_778_p2, tmp_68_fu_974_p2, tmp_77_fu_1092_p2, tmp_85_fu_1173_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_d1 <= tmp_85_fu_1173_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            r_d1 <= tmp_77_fu_1092_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_d1 <= tmp_68_fu_974_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_d1 <= t_q0(8 downto 1);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_d1 <= tmp_58_fu_778_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            r_d1 <= t_q1(9 downto 2);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_d1 <= tmp_50_fu_621_p2;
        else 
            r_d1 <= "XXXXXXXX";
        end if; 
    end process;


    r_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state10, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_we0 <= ap_const_logic_1;
        else 
            r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_we1 <= ap_const_logic_1;
        else 
            r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sum10_cast_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum10_fu_708_p2),64));
    sum10_fu_708_p2 <= std_logic_vector(unsigned(ap_const_lv11_110) + unsigned(tmp_134_cast_fu_704_p1));
    sum12_cast_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum12_fu_755_p2),64));
    sum12_fu_755_p2 <= std_logic_vector(unsigned(ap_const_lv11_110) + unsigned(tmp_142_cast_fu_751_p1));
    sum14_cast_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum14_fu_795_p2),64));
    sum14_fu_795_p2 <= std_logic_vector(unsigned(ap_const_lv11_110) + unsigned(tmp_149_cast_fu_791_p1));
    sum15_cast_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum15_fu_844_p2),64));
    sum15_fu_844_p2 <= std_logic_vector(unsigned(ap_const_lv11_110) + unsigned(tmp_153_cast_fu_840_p1));
    sum16_cast_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum16_fu_876_p2),64));
    sum16_fu_876_p2 <= std_logic_vector(unsigned(ap_const_lv11_110) + unsigned(tmp_158_cast_fu_872_p1));
    sum17_cast_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum17_fu_941_p2),64));
    sum17_fu_941_p2 <= std_logic_vector(unsigned(ap_const_lv11_110) + unsigned(tmp_162_cast_fu_937_p1));
    sum18_cast_fu_997_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum18_fu_991_p2),64));
    sum18_fu_991_p2 <= std_logic_vector(unsigned(ap_const_lv11_110) + unsigned(tmp_168_cast_fu_987_p1));
    sum19_cast_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum19_fu_1022_p2),64));
    sum19_fu_1022_p2 <= std_logic_vector(unsigned(ap_const_lv11_110) + unsigned(tmp_172_cast_fu_1018_p1));
    sum2_cast_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_638_p2),64));
    sum2_fu_638_p2 <= std_logic_vector(unsigned(ap_const_lv11_110) + unsigned(tmp_114_cast_fu_634_p1));
    sum8_cast_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum8_fu_687_p2),64));
    sum8_fu_687_p2 <= std_logic_vector(unsigned(ap_const_lv11_110) + unsigned(tmp_118_cast_fu_683_p1));
    sum_cast_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_588_p2),64));
    sum_fu_588_p2 <= std_logic_vector(unsigned(ap_const_lv11_110) + unsigned(tmp_110_cast_fu_584_p1));

    t_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state13, exitcond_fu_1063_p2, ap_CS_fsm_state15, ap_CS_fsm_state4, tmp_75_fu_574_p1, tmp_87_fu_1069_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            t_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((exitcond_fu_1063_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            t_address0 <= tmp_87_fu_1069_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            t_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            t_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_1063_p2 = ap_const_lv1_1)))) then 
            t_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_address0 <= tmp_75_fu_574_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            t_address0 <= "XXX";
        end if; 
    end process;


    t_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state12, tmp_47_fu_1058_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_address1 <= tmp_47_fu_1058_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            t_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            t_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            t_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            t_address1 <= "XXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state13, exitcond_fu_1063_p2, ap_CS_fsm_state15, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_1063_p2 = ap_const_lv1_1)) or ((exitcond_fu_1063_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            t_ce1 <= ap_const_logic_1;
        else 
            t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(a_coeffs_q0, ap_CS_fsm_state13, exitcond_fu_1063_p2, ap_CS_fsm_state4)
    begin
        if (((exitcond_fu_1063_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            t_d0 <= ap_const_lv16_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_d0 <= a_coeffs_q0;
        else 
            t_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    t_we0_assign_proc : process(ap_CS_fsm_state13, exitcond_fu_1063_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((exitcond_fu_1063_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_we1_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_we1 <= ap_const_logic_1;
        else 
            t_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_1045_p3 <= (ap_const_lv7_54 & j_1_reg_458);
    tmp_110_cast_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_434),11));
    tmp_114_cast_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_628_p2),11));
    tmp_118_cast_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_677_p2),11));
    tmp_134_cast_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_698_p2),11));
    tmp_142_cast_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_745_p2),11));
    tmp_149_cast_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_785_p2),11));
    tmp_153_cast_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_61_fu_834_p2),11));
    tmp_158_cast_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_866_p2),11));
    tmp_15_fu_1135_p4 <= t_q0(12 downto 5);
    tmp_162_cast_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_fu_931_p2),11));
    tmp_168_cast_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_fu_981_p2),11));
    tmp_16_fu_1163_p4 <= t_q1(15 downto 8);
    tmp_172_cast_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_71_fu_1012_p2),11));
    tmp_18_fu_599_p4 <= t_q0(15 downto 8);
    tmp_19_fu_613_p3 <= (tmp_36_fu_609_p1 & ap_const_lv3_0);
    tmp_22_fu_663_p3 <= (tmp_39_fu_659_p1 & ap_const_lv6_0);
    tmp_25_fu_723_p3 <= (tmp_40_fu_719_p1 & ap_const_lv1_0);
    tmp_26_fu_731_p2 <= (tmp_25_fu_723_p3 or tmp_23_reg_1263);
    tmp_28_fu_770_p3 <= (tmp_41_fu_766_p1 & ap_const_lv4_0);
    tmp_31_fu_820_p3 <= (tmp_42_fu_816_p1 & ap_const_lv7_0);
    tmp_33_fu_579_p1 <= t_q0(8 - 1 downto 0);
    tmp_35_fu_964_p4 <= t_q1(13 downto 6);
    tmp_36_fu_609_p1 <= t_q1(5 - 1 downto 0);
    tmp_37_fu_901_p3 <= (tmp_64_fu_897_p1 & ap_const_lv2_0);
    tmp_38_fu_909_p2 <= (tmp_37_fu_901_p3 or tmp_34_reg_1273);
    tmp_39_fu_659_p1 <= t_q1(2 - 1 downto 0);
    tmp_40_fu_719_p1 <= t_q0(5 - 1 downto 0);
    tmp_41_fu_766_p1 <= t_q1(4 - 1 downto 0);
    tmp_42_fu_816_p1 <= t_q0(1 - 1 downto 0);
    tmp_44_fu_1103_p3 <= (tmp_86_reg_1304 & ap_const_lv1_0);
    tmp_45_fu_1110_p2 <= (tmp_44_fu_1103_p3 or grp_fu_492_p4);
    tmp_47_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_458),64));
    tmp_48_fu_1039_p2 <= std_logic_vector(unsigned(j_1_reg_458) + unsigned(ap_const_lv3_1));
    tmp_49_fu_534_p2 <= std_logic_vector(unsigned(i_reg_423) + unsigned(ap_const_lv7_1));
    tmp_50_fu_621_p2 <= (tmp_19_fu_613_p3 or tmp_18_fu_599_p4);
    tmp_51_fu_628_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(phi_mul_reg_434));
    tmp_52_fu_671_p2 <= (tmp_22_fu_663_p3 or tmp_21_reg_1258);
    tmp_53_fu_677_p2 <= std_logic_vector(unsigned(ap_const_lv10_2) + unsigned(phi_mul_reg_434));
    tmp_55_fu_698_p2 <= std_logic_vector(unsigned(ap_const_lv10_3) + unsigned(phi_mul_reg_434));
    tmp_56_fu_736_p3 <= (grp_fu_502_p4 & tmp_26_fu_731_p2);
    tmp_57_fu_745_p2 <= std_logic_vector(unsigned(ap_const_lv10_4) + unsigned(phi_mul_reg_434));
    tmp_58_fu_778_p2 <= (tmp_28_fu_770_p3 or grp_fu_512_p4);
    tmp_59_fu_785_p2 <= std_logic_vector(unsigned(ap_const_lv10_5) + unsigned(phi_mul_reg_434));
    tmp_60_fu_828_p2 <= (tmp_31_fu_820_p3 or tmp_30_reg_1268);
    tmp_61_fu_834_p2 <= std_logic_vector(unsigned(ap_const_lv10_6) + unsigned(phi_mul_reg_434));
    tmp_63_fu_866_p2 <= std_logic_vector(unsigned(ap_const_lv10_7) + unsigned(phi_mul_reg_434));
    tmp_64_fu_897_p1 <= t_q1(5 - 1 downto 0);
    tmp_65_fu_922_p3 <= (tmp_72_fu_914_p3 & tmp_38_fu_909_p2);
    tmp_66_fu_931_p2 <= std_logic_vector(unsigned(ap_const_lv10_8) + unsigned(phi_mul_reg_434));
    tmp_67_fu_956_p3 <= (tmp_80_fu_952_p1 & ap_const_lv5_0);
    tmp_68_fu_974_p2 <= (tmp_67_fu_956_p3 or tmp_35_fu_964_p4);
    tmp_69_fu_981_p2 <= std_logic_vector(unsigned(ap_const_lv10_9) + unsigned(phi_mul_reg_434));
    tmp_71_fu_1012_p2 <= std_logic_vector(unsigned(ap_const_lv10_A) + unsigned(phi_mul_reg_434));
    tmp_72_fu_914_p3 <= t_q1(5 downto 5);
    tmp_73_fu_564_p2 <= std_logic_vector(unsigned(tmp_reg_1240) + unsigned(j_cast6_fu_548_p1));
    tmp_74_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_73_fu_564_p2),64));
    tmp_75_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_446),64));
    tmp_76_fu_1084_p3 <= (tmp_83_fu_1080_p1 & ap_const_lv4_0);
    tmp_77_fu_1092_p2 <= (tmp_76_fu_1084_p3 or grp_fu_512_p4);
    tmp_78_fu_1116_p3 <= (tmp_46_reg_1309 & tmp_45_fu_1110_p2);
    tmp_80_fu_952_p1 <= t_q0(3 - 1 downto 0);
    tmp_81_fu_1128_p3 <= (tmp_88_reg_1314 & ap_const_lv6_0);
    tmp_82_fu_1145_p2 <= (tmp_81_fu_1128_p3 or tmp_15_fu_1135_p4);
    tmp_83_fu_1080_p1 <= t_q1(4 - 1 downto 0);
    tmp_84_fu_1156_p3 <= (tmp_89_reg_1319 & ap_const_lv3_0);
    tmp_85_fu_1173_p2 <= (tmp_84_fu_1156_p3 or tmp_16_fu_1163_p4);
    tmp_86_fu_1099_p1 <= t_q0(5 - 1 downto 0);
    tmp_87_fu_1069_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_470),64));
    tmp_88_fu_1124_p1 <= t_q1(2 - 1 downto 0);
    tmp_89_fu_1152_p1 <= t_q0(5 - 1 downto 0);
    tmp_90_fu_1180_p1 <= t_q1(8 - 1 downto 0);
    tmp_fu_540_p3 <= (i_reg_423 & ap_const_lv3_0);
    tmp_s_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_1045_p3),64));
end behav;
