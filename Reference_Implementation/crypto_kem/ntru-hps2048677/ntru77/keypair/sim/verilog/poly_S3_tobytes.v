// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module poly_S3_tobytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        msg_address0,
        msg_ce0,
        msg_we0,
        msg_d0,
        msg_offset,
        a_coeffs_address0,
        a_coeffs_ce0,
        a_coeffs_q0,
        a_coeffs_address1,
        a_coeffs_ce1,
        a_coeffs_q1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] msg_address0;
output   msg_ce0;
output   msg_we0;
output  [7:0] msg_d0;
input  [9:0] msg_offset;
output  [9:0] a_coeffs_address0;
output   a_coeffs_ce0;
input  [15:0] a_coeffs_q0;
output  [9:0] a_coeffs_address1;
output   a_coeffs_ce1;
input  [15:0] a_coeffs_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] msg_address0;
reg msg_ce0;
reg msg_we0;
reg[7:0] msg_d0;
reg[9:0] a_coeffs_address0;
reg a_coeffs_ce0;
reg[9:0] a_coeffs_address1;
reg a_coeffs_ce1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] tmp_162_fu_139_p1;
reg   [8:0] tmp_162_reg_339;
wire   [7:0] i_9_fu_153_p2;
reg   [7:0] i_9_reg_348;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_fu_167_p2;
reg   [9:0] tmp_reg_353;
wire   [0:0] exitcond_fu_147_p2;
wire   [7:0] c_1_fu_221_p2;
reg   [7:0] c_1_reg_375;
wire    ap_CS_fsm_state3;
wire   [8:0] sum_fu_241_p2;
reg   [8:0] sum_reg_386;
wire   [7:0] c_2_fu_260_p2;
reg   [7:0] c_2_reg_391;
wire    ap_CS_fsm_state4;
wire   [7:0] c_3_fu_294_p2;
reg   [7:0] c_3_reg_407;
wire    ap_CS_fsm_state5;
wire   [7:0] tmp_180_fu_300_p1;
reg   [7:0] tmp_180_reg_413;
reg   [7:0] i_reg_127;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_157_fu_179_p1;
wire   [63:0] tmp_160_fu_190_p1;
wire   [63:0] tmp_164_fu_232_p1;
wire   [63:0] tmp_168_fu_271_p1;
wire   [63:0] tmp_170_fu_276_p1;
wire   [63:0] sum_cast_fu_320_p1;
wire   [63:0] sum2_cast_fu_334_p1;
wire    ap_CS_fsm_state7;
wire   [7:0] c_4_fu_314_p2;
wire   [7:0] tmp_166_fu_324_p1;
wire   [9:0] p_shl7_fu_159_p3;
wire   [9:0] i_cast1_fu_143_p1;
wire   [9:0] tmp_s_fu_173_p2;
wire   [9:0] tmp_159_fu_184_p2;
wire   [5:0] tmp_173_fu_199_p1;
wire   [7:0] p_shl6_fu_203_p3;
wire   [7:0] c_fu_195_p1;
wire   [7:0] tmp_158_fu_211_p2;
wire   [7:0] tmp_174_fu_217_p1;
wire   [9:0] tmp_163_fu_227_p2;
wire   [8:0] tmp_236_cast_fu_237_p1;
wire   [7:0] tmp_175_fu_246_p2;
wire   [7:0] tmp_176_fu_256_p1;
wire   [7:0] tmp_161_fu_251_p2;
wire   [9:0] tmp_167_fu_266_p2;
wire   [7:0] tmp_177_fu_280_p2;
wire   [7:0] tmp_178_fu_290_p1;
wire   [7:0] tmp_165_fu_285_p2;
wire   [7:0] tmp_179_fu_304_p2;
wire   [7:0] tmp_169_fu_309_p2;
wire   [8:0] sum2_fu_329_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_127 <= i_9_reg_348;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_127 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_1_reg_375 <= c_1_fu_221_p2;
        sum_reg_386 <= sum_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_2_reg_391 <= c_2_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_3_reg_407 <= c_3_fu_294_p2;
        tmp_180_reg_413 <= tmp_180_fu_300_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_9_reg_348 <= i_9_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_162_reg_339 <= tmp_162_fu_139_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_353 <= tmp_fu_167_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_coeffs_address0 = tmp_168_fu_271_p1;
    end else if (((exitcond_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        a_coeffs_address0 = 64'd675;
    end else if (((exitcond_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_coeffs_address0 = tmp_157_fu_179_p1;
    end else begin
        a_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_coeffs_address1 = tmp_170_fu_276_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_coeffs_address1 = tmp_164_fu_232_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_coeffs_address1 = tmp_160_fu_190_p1;
    end else begin
        a_coeffs_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((exitcond_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((exitcond_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        a_coeffs_ce0 = 1'b1;
    end else begin
        a_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        a_coeffs_ce1 = 1'b1;
    end else begin
        a_coeffs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        msg_address0 = sum2_cast_fu_334_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        msg_address0 = sum_cast_fu_320_p1;
    end else begin
        msg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        msg_ce0 = 1'b1;
    end else begin
        msg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        msg_d0 = tmp_166_fu_324_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        msg_d0 = c_4_fu_314_p2;
    end else begin
        msg_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        msg_we0 = 1'b1;
    end else begin
        msg_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign c_1_fu_221_p2 = (tmp_158_fu_211_p2 + tmp_174_fu_217_p1);

assign c_2_fu_260_p2 = (tmp_176_fu_256_p1 + tmp_161_fu_251_p2);

assign c_3_fu_294_p2 = (tmp_178_fu_290_p1 + tmp_165_fu_285_p2);

assign c_4_fu_314_p2 = (tmp_180_reg_413 + tmp_169_fu_309_p2);

assign c_fu_195_p1 = a_coeffs_q0[7:0];

assign exitcond_fu_147_p2 = ((i_reg_127 == 8'd135) ? 1'b1 : 1'b0);

assign i_9_fu_153_p2 = (i_reg_127 + 8'd1);

assign i_cast1_fu_143_p1 = i_reg_127;

assign p_shl6_fu_203_p3 = {{tmp_173_fu_199_p1}, {2'd0}};

assign p_shl7_fu_159_p3 = {{i_reg_127}, {2'd0}};

assign sum2_cast_fu_334_p1 = sum2_fu_329_p2;

assign sum2_fu_329_p2 = (9'd135 + tmp_162_reg_339);

assign sum_cast_fu_320_p1 = sum_reg_386;

assign sum_fu_241_p2 = (tmp_236_cast_fu_237_p1 + tmp_162_reg_339);

assign tmp_157_fu_179_p1 = tmp_s_fu_173_p2;

assign tmp_158_fu_211_p2 = (p_shl6_fu_203_p3 - c_fu_195_p1);

assign tmp_159_fu_184_p2 = (10'd3 + tmp_fu_167_p2);

assign tmp_160_fu_190_p1 = tmp_159_fu_184_p2;

assign tmp_161_fu_251_p2 = (tmp_175_fu_246_p2 - c_1_reg_375);

assign tmp_162_fu_139_p1 = msg_offset[8:0];

assign tmp_163_fu_227_p2 = (10'd2 + tmp_reg_353);

assign tmp_164_fu_232_p1 = tmp_163_fu_227_p2;

assign tmp_165_fu_285_p2 = (tmp_177_fu_280_p2 - c_2_reg_391);

assign tmp_166_fu_324_p1 = a_coeffs_q0[7:0];

assign tmp_167_fu_266_p2 = (10'd1 + tmp_reg_353);

assign tmp_168_fu_271_p1 = tmp_167_fu_266_p2;

assign tmp_169_fu_309_p2 = (tmp_179_fu_304_p2 - c_3_reg_407);

assign tmp_170_fu_276_p1 = tmp_reg_353;

assign tmp_173_fu_199_p1 = a_coeffs_q0[5:0];

assign tmp_174_fu_217_p1 = a_coeffs_q1[7:0];

assign tmp_175_fu_246_p2 = c_1_reg_375 << 8'd2;

assign tmp_176_fu_256_p1 = a_coeffs_q1[7:0];

assign tmp_177_fu_280_p2 = c_2_reg_391 << 8'd2;

assign tmp_178_fu_290_p1 = a_coeffs_q0[7:0];

assign tmp_179_fu_304_p2 = c_3_reg_407 << 8'd2;

assign tmp_180_fu_300_p1 = a_coeffs_q1[7:0];

assign tmp_236_cast_fu_237_p1 = i_reg_127;

assign tmp_fu_167_p2 = (p_shl7_fu_159_p3 + i_cast1_fu_143_p1);

assign tmp_s_fu_173_p2 = (10'd4 + tmp_fu_167_p2);

endmodule //poly_S3_tobytes
