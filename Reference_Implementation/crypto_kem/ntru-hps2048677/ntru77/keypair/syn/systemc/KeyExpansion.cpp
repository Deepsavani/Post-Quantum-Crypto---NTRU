// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "KeyExpansion.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic KeyExpansion::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic KeyExpansion::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> KeyExpansion::ap_ST_fsm_state1 = "1";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state2 = "10";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state3 = "100";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state4 = "1000";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state5 = "10000";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state6 = "100000";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> KeyExpansion::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> KeyExpansion::ap_const_lv32_5 = "101";
const sc_lv<32> KeyExpansion::ap_const_lv32_6 = "110";
const sc_lv<32> KeyExpansion::ap_const_lv32_7 = "111";
const sc_lv<32> KeyExpansion::ap_const_lv32_1 = "1";
const sc_lv<1> KeyExpansion::ap_const_lv1_0 = "0";
const sc_lv<32> KeyExpansion::ap_const_lv32_2 = "10";
const sc_lv<32> KeyExpansion::ap_const_lv32_4 = "100";
const sc_lv<1> KeyExpansion::ap_const_lv1_1 = "1";
const sc_lv<32> KeyExpansion::ap_const_lv32_8 = "1000";
const sc_lv<4> KeyExpansion::ap_const_lv4_0 = "0000";
const sc_lv<32> KeyExpansion::ap_const_lv32_3 = "11";
const sc_lv<32> KeyExpansion::ap_const_lv32_9 = "1001";
const sc_lv<6> KeyExpansion::ap_const_lv6_8 = "1000";
const sc_lv<4> KeyExpansion::ap_const_lv4_8 = "1000";
const sc_lv<4> KeyExpansion::ap_const_lv4_1 = "1";
const sc_lv<2> KeyExpansion::ap_const_lv2_0 = "00";
const sc_lv<5> KeyExpansion::ap_const_lv5_1 = "1";
const sc_lv<5> KeyExpansion::ap_const_lv5_2 = "10";
const sc_lv<5> KeyExpansion::ap_const_lv5_3 = "11";
const sc_lv<6> KeyExpansion::ap_const_lv6_3C = "111100";
const sc_lv<8> KeyExpansion::ap_const_lv8_FC = "11111100";
const sc_lv<8> KeyExpansion::ap_const_lv8_FD = "11111101";
const sc_lv<3> KeyExpansion::ap_const_lv3_0 = "000";
const sc_lv<3> KeyExpansion::ap_const_lv3_4 = "100";
const sc_lv<6> KeyExpansion::ap_const_lv6_1 = "1";
const sc_lv<8> KeyExpansion::ap_const_lv8_FE = "11111110";
const sc_lv<8> KeyExpansion::ap_const_lv8_FF = "11111111";
const sc_lv<8> KeyExpansion::ap_const_lv8_E0 = "11100000";
const sc_lv<8> KeyExpansion::ap_const_lv8_E1 = "11100001";
const sc_lv<8> KeyExpansion::ap_const_lv8_E2 = "11100010";
const sc_lv<8> KeyExpansion::ap_const_lv8_E3 = "11100011";
const sc_lv<8> KeyExpansion::ap_const_lv8_1 = "1";
const sc_lv<8> KeyExpansion::ap_const_lv8_2 = "10";
const sc_lv<8> KeyExpansion::ap_const_lv8_3 = "11";
const bool KeyExpansion::ap_const_boolean_1 = true;

KeyExpansion::KeyExpansion(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbox_U = new KeyExpansion_sbox("sbox_U");
    sbox_U->clk(ap_clk);
    sbox_U->reset(ap_rst);
    sbox_U->address0(sbox_address0);
    sbox_U->ce0(sbox_ce0);
    sbox_U->q0(sbox_q0);
    sbox_U->address1(sbox_address1);
    sbox_U->ce1(sbox_ce1);
    sbox_U->q1(sbox_q1);
    sbox_U->address2(sbox_address2);
    sbox_U->ce2(sbox_ce2);
    sbox_U->q2(sbox_q2);
    sbox_U->address3(sbox_address3);
    sbox_U->ce3(sbox_ce3);
    sbox_U->q3(sbox_q3);
    Rcon_U = new KeyExpansion_Rcon("Rcon_U");
    Rcon_U->clk(ap_clk);
    Rcon_U->reset(ap_rst);
    Rcon_U->address0(Rcon_address0);
    Rcon_U->ce0(Rcon_ce0);
    Rcon_U->q0(Rcon_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Key_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_260_fu_397_p1 );
    sensitive << ( tmp_264_fu_418_p1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_Key_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_262_fu_408_p1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_266_fu_428_p1 );

    SC_METHOD(thread_Key_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_Key_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_Rcon_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_281_fu_526_p1 );

    SC_METHOD(thread_Rcon_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_RoundKey_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_260_reg_734 );
    sensitive << ( tmp_264_reg_754 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_268_fu_453_p1 );
    sensitive << ( tmp_272_fu_506_p1 );
    sensitive << ( tmp_288_fu_568_p1 );
    sensitive << ( tmp_297_fu_634_p1 );
    sensitive << ( tmp_290_fu_667_p1 );
    sensitive << ( tmp_300_fu_705_p1 );

    SC_METHOD(thread_RoundKey_address1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_262_reg_744 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_266_reg_764 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_270_fu_464_p1 );
    sensitive << ( tmp_274_fu_516_p1 );
    sensitive << ( tmp_292_fu_578_p1 );
    sensitive << ( tmp_302_fu_644_p1 );
    sensitive << ( tmp_295_fu_683_p1 );
    sensitive << ( tmp_305_fu_715_p1 );

    SC_METHOD(thread_RoundKey_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_RoundKey_ce1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_RoundKey_d0);
    sensitive << ( Key_q0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_289_reg_922 );
    sensitive << ( tmp_298_reg_937 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_RoundKey_d1);
    sensitive << ( Key_q1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_303_reg_942 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_293_fu_671_p2 );

    SC_METHOD(thread_RoundKey_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_RoundKey_we1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_433_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_433_p2 );

    SC_METHOD(thread_exitcond_fu_433_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i_1_reg_357 );

    SC_METHOD(thread_i_43_fu_379_p2);
    sensitive << ( i_reg_346 );

    SC_METHOD(thread_i_44_fu_495_p2);
    sensitive << ( i_1_reg_357 );

    SC_METHOD(thread_j_fu_439_p3);
    sensitive << ( i_1_reg_357 );

    SC_METHOD(thread_sbox_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_276_fu_521_p1 );
    sensitive << ( tmp_277_fu_530_p1 );
    sensitive << ( tmp_284_fu_602_p1 );

    SC_METHOD(thread_sbox_address1);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_278_fu_535_p1 );
    sensitive << ( tmp_285_fu_607_p1 );

    SC_METHOD(thread_sbox_address2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_279_fu_540_p1 );
    sensitive << ( tmp_286_fu_612_p1 );

    SC_METHOD(thread_sbox_address3);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_283_fu_558_p1 );

    SC_METHOD(thread_sbox_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_sbox_ce1);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_sbox_ce2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_sbox_ce3);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_tempa_0_2_fu_551_p3);
    sensitive << ( reg_368 );
    sensitive << ( tmp_275_reg_801 );
    sensitive << ( tempa_0_fu_545_p2 );

    SC_METHOD(thread_tempa_0_4_fu_617_p3);
    sensitive << ( sbox_q3 );
    sensitive << ( tmp_282_reg_814 );
    sensitive << ( tempa_0_2_reg_872 );

    SC_METHOD(thread_tempa_0_fu_545_p2);
    sensitive << ( sbox_q0 );
    sensitive << ( Rcon_q0 );

    SC_METHOD(thread_tempa_1_2_fu_596_p3);
    sensitive << ( sbox_q0 );
    sensitive << ( tmp_275_reg_801 );
    sensitive << ( tempa_1_reg_827 );

    SC_METHOD(thread_tempa_1_4_fu_661_p3);
    sensitive << ( sbox_q0 );
    sensitive << ( tmp_282_reg_814 );
    sensitive << ( tempa_1_2_reg_902 );

    SC_METHOD(thread_tempa_2_2_fu_589_p3);
    sensitive << ( sbox_q1 );
    sensitive << ( reg_368 );
    sensitive << ( tmp_275_reg_801 );

    SC_METHOD(thread_tempa_2_4_fu_655_p3);
    sensitive << ( sbox_q1 );
    sensitive << ( tmp_282_reg_814 );
    sensitive << ( tempa_2_2_reg_897 );

    SC_METHOD(thread_tempa_3_2_fu_583_p3);
    sensitive << ( sbox_q2 );
    sensitive << ( tmp_275_reg_801 );
    sensitive << ( tempa_3_reg_852 );

    SC_METHOD(thread_tempa_3_4_fu_649_p3);
    sensitive << ( sbox_q2 );
    sensitive << ( tmp_282_reg_814 );
    sensitive << ( tempa_3_2_reg_892 );

    SC_METHOD(thread_tmp_260_fu_397_p1);
    sensitive << ( tmp_s_fu_389_p3 );

    SC_METHOD(thread_tmp_261_fu_402_p2);
    sensitive << ( tmp_s_fu_389_p3 );

    SC_METHOD(thread_tmp_262_fu_408_p1);
    sensitive << ( tmp_261_fu_402_p2 );

    SC_METHOD(thread_tmp_263_fu_413_p2);
    sensitive << ( tmp_s_reg_728 );

    SC_METHOD(thread_tmp_264_fu_418_p1);
    sensitive << ( tmp_263_fu_413_p2 );

    SC_METHOD(thread_tmp_265_fu_423_p2);
    sensitive << ( tmp_s_reg_728 );

    SC_METHOD(thread_tmp_266_fu_428_p1);
    sensitive << ( tmp_265_fu_423_p2 );

    SC_METHOD(thread_tmp_267_fu_447_p2);
    sensitive << ( j_fu_439_p3 );

    SC_METHOD(thread_tmp_268_fu_453_p1);
    sensitive << ( tmp_267_fu_447_p2 );

    SC_METHOD(thread_tmp_269_fu_458_p2);
    sensitive << ( j_fu_439_p3 );

    SC_METHOD(thread_tmp_270_fu_464_p1);
    sensitive << ( tmp_269_fu_458_p2 );

    SC_METHOD(thread_tmp_271_fu_501_p2);
    sensitive << ( j_reg_777 );

    SC_METHOD(thread_tmp_272_fu_506_p1);
    sensitive << ( tmp_271_fu_501_p2 );

    SC_METHOD(thread_tmp_273_fu_511_p2);
    sensitive << ( j_reg_777 );

    SC_METHOD(thread_tmp_274_fu_516_p1);
    sensitive << ( tmp_273_fu_511_p2 );

    SC_METHOD(thread_tmp_275_fu_473_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_433_p2 );
    sensitive << ( tmp_357_fu_469_p1 );

    SC_METHOD(thread_tmp_276_fu_521_p1);
    sensitive << ( RoundKey_q1 );

    SC_METHOD(thread_tmp_277_fu_530_p1);
    sensitive << ( RoundKey_q0 );

    SC_METHOD(thread_tmp_278_fu_535_p1);
    sensitive << ( RoundKey_q1 );

    SC_METHOD(thread_tmp_279_fu_540_p1);
    sensitive << ( reg_368 );

    SC_METHOD(thread_tmp_281_fu_526_p1);
    sensitive << ( tmp_280_reg_809 );

    SC_METHOD(thread_tmp_282_fu_489_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_433_p2 );
    sensitive << ( tmp_357_fu_469_p1 );

    SC_METHOD(thread_tmp_283_fu_558_p1);
    sensitive << ( tempa_0_2_fu_551_p3 );

    SC_METHOD(thread_tmp_284_fu_602_p1);
    sensitive << ( tempa_1_2_fu_596_p3 );

    SC_METHOD(thread_tmp_285_fu_607_p1);
    sensitive << ( tempa_2_2_fu_589_p3 );

    SC_METHOD(thread_tmp_286_fu_612_p1);
    sensitive << ( tempa_3_2_fu_583_p3 );

    SC_METHOD(thread_tmp_287_fu_563_p2);
    sensitive << ( j_reg_777 );

    SC_METHOD(thread_tmp_288_fu_568_p1);
    sensitive << ( tmp_287_fu_563_p2 );

    SC_METHOD(thread_tmp_289_fu_623_p2);
    sensitive << ( RoundKey_q0 );
    sensitive << ( tempa_0_4_fu_617_p3 );

    SC_METHOD(thread_tmp_290_fu_667_p1);
    sensitive << ( j_reg_777 );

    SC_METHOD(thread_tmp_291_fu_573_p2);
    sensitive << ( j_reg_777 );

    SC_METHOD(thread_tmp_292_fu_578_p1);
    sensitive << ( tmp_291_fu_573_p2 );

    SC_METHOD(thread_tmp_293_fu_671_p2);
    sensitive << ( reg_368 );
    sensitive << ( tempa_1_4_fu_661_p3 );

    SC_METHOD(thread_tmp_294_fu_678_p2);
    sensitive << ( j_reg_777 );

    SC_METHOD(thread_tmp_295_fu_683_p1);
    sensitive << ( tmp_294_fu_678_p2 );

    SC_METHOD(thread_tmp_296_fu_629_p2);
    sensitive << ( j_reg_777 );

    SC_METHOD(thread_tmp_297_fu_634_p1);
    sensitive << ( tmp_296_fu_629_p2 );

    SC_METHOD(thread_tmp_298_fu_688_p2);
    sensitive << ( RoundKey_q0 );
    sensitive << ( tempa_2_4_fu_655_p3 );

    SC_METHOD(thread_tmp_299_fu_700_p2);
    sensitive << ( j_reg_777 );

    SC_METHOD(thread_tmp_300_fu_705_p1);
    sensitive << ( tmp_299_fu_700_p2 );

    SC_METHOD(thread_tmp_301_fu_639_p2);
    sensitive << ( j_reg_777 );

    SC_METHOD(thread_tmp_302_fu_644_p1);
    sensitive << ( tmp_301_fu_639_p2 );

    SC_METHOD(thread_tmp_303_fu_694_p2);
    sensitive << ( RoundKey_q1 );
    sensitive << ( tempa_3_4_fu_649_p3 );

    SC_METHOD(thread_tmp_304_fu_710_p2);
    sensitive << ( j_reg_777 );

    SC_METHOD(thread_tmp_305_fu_715_p1);
    sensitive << ( tmp_304_fu_710_p2 );

    SC_METHOD(thread_tmp_356_fu_385_p1);
    sensitive << ( i_reg_346 );

    SC_METHOD(thread_tmp_357_fu_469_p1);
    sensitive << ( i_1_reg_357 );

    SC_METHOD(thread_tmp_fu_373_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_346 );

    SC_METHOD(thread_tmp_s_fu_389_p3);
    sensitive << ( tmp_356_fu_385_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_373_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_433_p2 );

    ap_CS_fsm = "0000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "KeyExpansion_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, RoundKey_address0, "(port)RoundKey_address0");
    sc_trace(mVcdFile, RoundKey_ce0, "(port)RoundKey_ce0");
    sc_trace(mVcdFile, RoundKey_we0, "(port)RoundKey_we0");
    sc_trace(mVcdFile, RoundKey_d0, "(port)RoundKey_d0");
    sc_trace(mVcdFile, RoundKey_q0, "(port)RoundKey_q0");
    sc_trace(mVcdFile, RoundKey_address1, "(port)RoundKey_address1");
    sc_trace(mVcdFile, RoundKey_ce1, "(port)RoundKey_ce1");
    sc_trace(mVcdFile, RoundKey_we1, "(port)RoundKey_we1");
    sc_trace(mVcdFile, RoundKey_d1, "(port)RoundKey_d1");
    sc_trace(mVcdFile, RoundKey_q1, "(port)RoundKey_q1");
    sc_trace(mVcdFile, Key_address0, "(port)Key_address0");
    sc_trace(mVcdFile, Key_ce0, "(port)Key_ce0");
    sc_trace(mVcdFile, Key_q0, "(port)Key_q0");
    sc_trace(mVcdFile, Key_address1, "(port)Key_address1");
    sc_trace(mVcdFile, Key_ce1, "(port)Key_ce1");
    sc_trace(mVcdFile, Key_q1, "(port)Key_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sbox_address0, "sbox_address0");
    sc_trace(mVcdFile, sbox_ce0, "sbox_ce0");
    sc_trace(mVcdFile, sbox_q0, "sbox_q0");
    sc_trace(mVcdFile, sbox_address1, "sbox_address1");
    sc_trace(mVcdFile, sbox_ce1, "sbox_ce1");
    sc_trace(mVcdFile, sbox_q1, "sbox_q1");
    sc_trace(mVcdFile, sbox_address2, "sbox_address2");
    sc_trace(mVcdFile, sbox_ce2, "sbox_ce2");
    sc_trace(mVcdFile, sbox_q2, "sbox_q2");
    sc_trace(mVcdFile, sbox_address3, "sbox_address3");
    sc_trace(mVcdFile, sbox_ce3, "sbox_ce3");
    sc_trace(mVcdFile, sbox_q3, "sbox_q3");
    sc_trace(mVcdFile, Rcon_address0, "Rcon_address0");
    sc_trace(mVcdFile, Rcon_ce0, "Rcon_ce0");
    sc_trace(mVcdFile, Rcon_q0, "Rcon_q0");
    sc_trace(mVcdFile, reg_368, "reg_368");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, i_43_fu_379_p2, "i_43_fu_379_p2");
    sc_trace(mVcdFile, i_43_reg_723, "i_43_reg_723");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_s_fu_389_p3, "tmp_s_fu_389_p3");
    sc_trace(mVcdFile, tmp_s_reg_728, "tmp_s_reg_728");
    sc_trace(mVcdFile, tmp_fu_373_p2, "tmp_fu_373_p2");
    sc_trace(mVcdFile, tmp_260_fu_397_p1, "tmp_260_fu_397_p1");
    sc_trace(mVcdFile, tmp_260_reg_734, "tmp_260_reg_734");
    sc_trace(mVcdFile, tmp_262_fu_408_p1, "tmp_262_fu_408_p1");
    sc_trace(mVcdFile, tmp_262_reg_744, "tmp_262_reg_744");
    sc_trace(mVcdFile, tmp_264_fu_418_p1, "tmp_264_fu_418_p1");
    sc_trace(mVcdFile, tmp_264_reg_754, "tmp_264_reg_754");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_266_fu_428_p1, "tmp_266_fu_428_p1");
    sc_trace(mVcdFile, tmp_266_reg_764, "tmp_266_reg_764");
    sc_trace(mVcdFile, j_fu_439_p3, "j_fu_439_p3");
    sc_trace(mVcdFile, j_reg_777, "j_reg_777");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, exitcond_fu_433_p2, "exitcond_fu_433_p2");
    sc_trace(mVcdFile, tmp_275_fu_473_p2, "tmp_275_fu_473_p2");
    sc_trace(mVcdFile, tmp_275_reg_801, "tmp_275_reg_801");
    sc_trace(mVcdFile, tmp_280_reg_809, "tmp_280_reg_809");
    sc_trace(mVcdFile, tmp_282_fu_489_p2, "tmp_282_fu_489_p2");
    sc_trace(mVcdFile, tmp_282_reg_814, "tmp_282_reg_814");
    sc_trace(mVcdFile, i_44_fu_495_p2, "i_44_fu_495_p2");
    sc_trace(mVcdFile, i_44_reg_822, "i_44_reg_822");
    sc_trace(mVcdFile, tempa_1_reg_827, "tempa_1_reg_827");
    sc_trace(mVcdFile, tempa_3_reg_852, "tempa_3_reg_852");
    sc_trace(mVcdFile, tempa_0_2_fu_551_p3, "tempa_0_2_fu_551_p3");
    sc_trace(mVcdFile, tempa_0_2_reg_872, "tempa_0_2_reg_872");
    sc_trace(mVcdFile, tempa_3_2_fu_583_p3, "tempa_3_2_fu_583_p3");
    sc_trace(mVcdFile, tempa_3_2_reg_892, "tempa_3_2_reg_892");
    sc_trace(mVcdFile, tempa_2_2_fu_589_p3, "tempa_2_2_fu_589_p3");
    sc_trace(mVcdFile, tempa_2_2_reg_897, "tempa_2_2_reg_897");
    sc_trace(mVcdFile, tempa_1_2_fu_596_p3, "tempa_1_2_fu_596_p3");
    sc_trace(mVcdFile, tempa_1_2_reg_902, "tempa_1_2_reg_902");
    sc_trace(mVcdFile, tmp_289_fu_623_p2, "tmp_289_fu_623_p2");
    sc_trace(mVcdFile, tmp_289_reg_922, "tmp_289_reg_922");
    sc_trace(mVcdFile, tmp_298_fu_688_p2, "tmp_298_fu_688_p2");
    sc_trace(mVcdFile, tmp_298_reg_937, "tmp_298_reg_937");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_303_fu_694_p2, "tmp_303_fu_694_p2");
    sc_trace(mVcdFile, tmp_303_reg_942, "tmp_303_reg_942");
    sc_trace(mVcdFile, i_reg_346, "i_reg_346");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_1_reg_357, "i_1_reg_357");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_268_fu_453_p1, "tmp_268_fu_453_p1");
    sc_trace(mVcdFile, tmp_270_fu_464_p1, "tmp_270_fu_464_p1");
    sc_trace(mVcdFile, tmp_272_fu_506_p1, "tmp_272_fu_506_p1");
    sc_trace(mVcdFile, tmp_274_fu_516_p1, "tmp_274_fu_516_p1");
    sc_trace(mVcdFile, tmp_276_fu_521_p1, "tmp_276_fu_521_p1");
    sc_trace(mVcdFile, tmp_281_fu_526_p1, "tmp_281_fu_526_p1");
    sc_trace(mVcdFile, tmp_277_fu_530_p1, "tmp_277_fu_530_p1");
    sc_trace(mVcdFile, tmp_278_fu_535_p1, "tmp_278_fu_535_p1");
    sc_trace(mVcdFile, tmp_279_fu_540_p1, "tmp_279_fu_540_p1");
    sc_trace(mVcdFile, tmp_283_fu_558_p1, "tmp_283_fu_558_p1");
    sc_trace(mVcdFile, tmp_288_fu_568_p1, "tmp_288_fu_568_p1");
    sc_trace(mVcdFile, tmp_292_fu_578_p1, "tmp_292_fu_578_p1");
    sc_trace(mVcdFile, tmp_284_fu_602_p1, "tmp_284_fu_602_p1");
    sc_trace(mVcdFile, tmp_285_fu_607_p1, "tmp_285_fu_607_p1");
    sc_trace(mVcdFile, tmp_286_fu_612_p1, "tmp_286_fu_612_p1");
    sc_trace(mVcdFile, tmp_297_fu_634_p1, "tmp_297_fu_634_p1");
    sc_trace(mVcdFile, tmp_302_fu_644_p1, "tmp_302_fu_644_p1");
    sc_trace(mVcdFile, tmp_290_fu_667_p1, "tmp_290_fu_667_p1");
    sc_trace(mVcdFile, tmp_295_fu_683_p1, "tmp_295_fu_683_p1");
    sc_trace(mVcdFile, tmp_300_fu_705_p1, "tmp_300_fu_705_p1");
    sc_trace(mVcdFile, tmp_305_fu_715_p1, "tmp_305_fu_715_p1");
    sc_trace(mVcdFile, tmp_293_fu_671_p2, "tmp_293_fu_671_p2");
    sc_trace(mVcdFile, tmp_356_fu_385_p1, "tmp_356_fu_385_p1");
    sc_trace(mVcdFile, tmp_261_fu_402_p2, "tmp_261_fu_402_p2");
    sc_trace(mVcdFile, tmp_263_fu_413_p2, "tmp_263_fu_413_p2");
    sc_trace(mVcdFile, tmp_265_fu_423_p2, "tmp_265_fu_423_p2");
    sc_trace(mVcdFile, tmp_267_fu_447_p2, "tmp_267_fu_447_p2");
    sc_trace(mVcdFile, tmp_269_fu_458_p2, "tmp_269_fu_458_p2");
    sc_trace(mVcdFile, tmp_357_fu_469_p1, "tmp_357_fu_469_p1");
    sc_trace(mVcdFile, tmp_271_fu_501_p2, "tmp_271_fu_501_p2");
    sc_trace(mVcdFile, tmp_273_fu_511_p2, "tmp_273_fu_511_p2");
    sc_trace(mVcdFile, tempa_0_fu_545_p2, "tempa_0_fu_545_p2");
    sc_trace(mVcdFile, tmp_287_fu_563_p2, "tmp_287_fu_563_p2");
    sc_trace(mVcdFile, tmp_291_fu_573_p2, "tmp_291_fu_573_p2");
    sc_trace(mVcdFile, tempa_0_4_fu_617_p3, "tempa_0_4_fu_617_p3");
    sc_trace(mVcdFile, tmp_296_fu_629_p2, "tmp_296_fu_629_p2");
    sc_trace(mVcdFile, tmp_301_fu_639_p2, "tmp_301_fu_639_p2");
    sc_trace(mVcdFile, tempa_1_4_fu_661_p3, "tempa_1_4_fu_661_p3");
    sc_trace(mVcdFile, tmp_294_fu_678_p2, "tmp_294_fu_678_p2");
    sc_trace(mVcdFile, tempa_2_4_fu_655_p3, "tempa_2_4_fu_655_p3");
    sc_trace(mVcdFile, tempa_3_4_fu_649_p3, "tempa_3_4_fu_649_p3");
    sc_trace(mVcdFile, tmp_299_fu_700_p2, "tmp_299_fu_700_p2");
    sc_trace(mVcdFile, tmp_304_fu_710_p2, "tmp_304_fu_710_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

KeyExpansion::~KeyExpansion() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sbox_U;
    delete Rcon_U;
}

void KeyExpansion::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_373_p2.read(), ap_const_lv1_1))) {
        i_1_reg_357 = ap_const_lv6_8;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        i_1_reg_357 = i_44_reg_822.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_reg_346 = i_43_reg_723.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_346 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        reg_368 = RoundKey_q1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        reg_368 = RoundKey_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_43_reg_723 = i_43_fu_379_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_433_p2.read()))) {
        i_44_reg_822 = i_44_fu_495_p2.read();
        j_reg_777 = j_fu_439_p3.read();
        tmp_275_reg_801 = tmp_275_fu_473_p2.read();
        tmp_280_reg_809 = i_1_reg_357.read().range(5, 3);
        tmp_282_reg_814 = tmp_282_fu_489_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tempa_0_2_reg_872 = tempa_0_2_fu_551_p3.read();
        tempa_3_reg_852 = RoundKey_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tempa_1_2_reg_902 = tempa_1_2_fu_596_p3.read();
        tempa_2_2_reg_897 = tempa_2_2_fu_589_p3.read();
        tempa_3_2_reg_892 = tempa_3_2_fu_583_p3.read();
        tmp_289_reg_922 = tmp_289_fu_623_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        tempa_1_reg_827 = RoundKey_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_373_p2.read(), ap_const_lv1_0))) {
        tmp_260_reg_734 = tmp_260_fu_397_p1.read();
        tmp_262_reg_744 = tmp_262_fu_408_p1.read();
        tmp_s_reg_728 = tmp_s_fu_389_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_264_reg_754 = tmp_264_fu_418_p1.read();
        tmp_266_reg_764 = tmp_266_fu_428_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        tmp_298_reg_937 = tmp_298_fu_688_p2.read();
        tmp_303_reg_942 = tmp_303_fu_694_p2.read();
    }
}

void KeyExpansion::thread_Key_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        Key_address0 =  (sc_lv<5>) (tmp_264_fu_418_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Key_address0 =  (sc_lv<5>) (tmp_260_fu_397_p1.read());
    } else {
        Key_address0 = "XXXXX";
    }
}

void KeyExpansion::thread_Key_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        Key_address1 =  (sc_lv<5>) (tmp_266_fu_428_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Key_address1 =  (sc_lv<5>) (tmp_262_fu_408_p1.read());
    } else {
        Key_address1 = "XXXXX";
    }
}

void KeyExpansion::thread_Key_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        Key_ce0 = ap_const_logic_1;
    } else {
        Key_ce0 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_Key_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        Key_ce1 = ap_const_logic_1;
    } else {
        Key_ce1 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_Rcon_address0() {
    Rcon_address0 =  (sc_lv<4>) (tmp_281_fu_526_p1.read());
}

void KeyExpansion::thread_Rcon_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        Rcon_ce0 = ap_const_logic_1;
    } else {
        Rcon_ce0 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_RoundKey_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        RoundKey_address0 =  (sc_lv<8>) (tmp_300_fu_705_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        RoundKey_address0 =  (sc_lv<8>) (tmp_290_fu_667_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        RoundKey_address0 =  (sc_lv<8>) (tmp_297_fu_634_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        RoundKey_address0 =  (sc_lv<8>) (tmp_288_fu_568_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        RoundKey_address0 =  (sc_lv<8>) (tmp_272_fu_506_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_address0 =  (sc_lv<8>) (tmp_268_fu_453_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        RoundKey_address0 =  (sc_lv<8>) (tmp_264_reg_754.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        RoundKey_address0 =  (sc_lv<8>) (tmp_260_reg_734.read());
    } else {
        RoundKey_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void KeyExpansion::thread_RoundKey_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        RoundKey_address1 =  (sc_lv<8>) (tmp_305_fu_715_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        RoundKey_address1 =  (sc_lv<8>) (tmp_295_fu_683_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        RoundKey_address1 =  (sc_lv<8>) (tmp_302_fu_644_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        RoundKey_address1 =  (sc_lv<8>) (tmp_292_fu_578_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        RoundKey_address1 =  (sc_lv<8>) (tmp_274_fu_516_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_address1 =  (sc_lv<8>) (tmp_270_fu_464_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        RoundKey_address1 =  (sc_lv<8>) (tmp_266_reg_764.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        RoundKey_address1 =  (sc_lv<8>) (tmp_262_reg_744.read());
    } else {
        RoundKey_address1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void KeyExpansion::thread_RoundKey_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        RoundKey_ce0 = ap_const_logic_1;
    } else {
        RoundKey_ce0 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_RoundKey_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        RoundKey_ce1 = ap_const_logic_1;
    } else {
        RoundKey_ce1 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_RoundKey_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        RoundKey_d0 = tmp_298_reg_937.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        RoundKey_d0 = tmp_289_reg_922.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        RoundKey_d0 = Key_q0.read();
    } else {
        RoundKey_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void KeyExpansion::thread_RoundKey_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        RoundKey_d1 = tmp_303_reg_942.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        RoundKey_d1 = tmp_293_fu_671_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        RoundKey_d1 = Key_q1.read();
    } else {
        RoundKey_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void KeyExpansion::thread_RoundKey_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        RoundKey_we0 = ap_const_logic_1;
    } else {
        RoundKey_we0 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_RoundKey_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        RoundKey_we1 = ap_const_logic_1;
    } else {
        RoundKey_we1 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void KeyExpansion::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void KeyExpansion::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void KeyExpansion::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void KeyExpansion::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void KeyExpansion::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void KeyExpansion::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void KeyExpansion::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void KeyExpansion::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void KeyExpansion::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void KeyExpansion::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_433_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void KeyExpansion::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void KeyExpansion::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_433_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void KeyExpansion::thread_exitcond_fu_433_p2() {
    exitcond_fu_433_p2 = (!i_1_reg_357.read().is_01() || !ap_const_lv6_3C.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_357.read() == ap_const_lv6_3C);
}

void KeyExpansion::thread_i_43_fu_379_p2() {
    i_43_fu_379_p2 = (!i_reg_346.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_346.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void KeyExpansion::thread_i_44_fu_495_p2() {
    i_44_fu_495_p2 = (!ap_const_lv6_1.is_01() || !i_1_reg_357.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_1) + sc_biguint<6>(i_1_reg_357.read()));
}

void KeyExpansion::thread_j_fu_439_p3() {
    j_fu_439_p3 = esl_concat<6,2>(i_1_reg_357.read(), ap_const_lv2_0);
}

void KeyExpansion::thread_sbox_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sbox_address0 =  (sc_lv<8>) (tmp_284_fu_602_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sbox_address0 =  (sc_lv<8>) (tmp_277_fu_530_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sbox_address0 =  (sc_lv<8>) (tmp_276_fu_521_p1.read());
    } else {
        sbox_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void KeyExpansion::thread_sbox_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sbox_address1 =  (sc_lv<8>) (tmp_285_fu_607_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sbox_address1 =  (sc_lv<8>) (tmp_278_fu_535_p1.read());
    } else {
        sbox_address1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void KeyExpansion::thread_sbox_address2() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sbox_address2 =  (sc_lv<8>) (tmp_286_fu_612_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sbox_address2 =  (sc_lv<8>) (tmp_279_fu_540_p1.read());
    } else {
        sbox_address2 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void KeyExpansion::thread_sbox_address3() {
    sbox_address3 =  (sc_lv<8>) (tmp_283_fu_558_p1.read());
}

void KeyExpansion::thread_sbox_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        sbox_ce0 = ap_const_logic_1;
    } else {
        sbox_ce0 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_sbox_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        sbox_ce1 = ap_const_logic_1;
    } else {
        sbox_ce1 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_sbox_ce2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        sbox_ce2 = ap_const_logic_1;
    } else {
        sbox_ce2 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_sbox_ce3() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sbox_ce3 = ap_const_logic_1;
    } else {
        sbox_ce3 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_tempa_0_2_fu_551_p3() {
    tempa_0_2_fu_551_p3 = (!tmp_275_reg_801.read()[0].is_01())? sc_lv<8>(): ((tmp_275_reg_801.read()[0].to_bool())? tempa_0_fu_545_p2.read(): reg_368.read());
}

void KeyExpansion::thread_tempa_0_4_fu_617_p3() {
    tempa_0_4_fu_617_p3 = (!tmp_282_reg_814.read()[0].is_01())? sc_lv<8>(): ((tmp_282_reg_814.read()[0].to_bool())? sbox_q3.read(): tempa_0_2_reg_872.read());
}

void KeyExpansion::thread_tempa_0_fu_545_p2() {
    tempa_0_fu_545_p2 = (Rcon_q0.read() ^ sbox_q0.read());
}

void KeyExpansion::thread_tempa_1_2_fu_596_p3() {
    tempa_1_2_fu_596_p3 = (!tmp_275_reg_801.read()[0].is_01())? sc_lv<8>(): ((tmp_275_reg_801.read()[0].to_bool())? sbox_q0.read(): tempa_1_reg_827.read());
}

void KeyExpansion::thread_tempa_1_4_fu_661_p3() {
    tempa_1_4_fu_661_p3 = (!tmp_282_reg_814.read()[0].is_01())? sc_lv<8>(): ((tmp_282_reg_814.read()[0].to_bool())? sbox_q0.read(): tempa_1_2_reg_902.read());
}

void KeyExpansion::thread_tempa_2_2_fu_589_p3() {
    tempa_2_2_fu_589_p3 = (!tmp_275_reg_801.read()[0].is_01())? sc_lv<8>(): ((tmp_275_reg_801.read()[0].to_bool())? sbox_q1.read(): reg_368.read());
}

void KeyExpansion::thread_tempa_2_4_fu_655_p3() {
    tempa_2_4_fu_655_p3 = (!tmp_282_reg_814.read()[0].is_01())? sc_lv<8>(): ((tmp_282_reg_814.read()[0].to_bool())? sbox_q1.read(): tempa_2_2_reg_897.read());
}

void KeyExpansion::thread_tempa_3_2_fu_583_p3() {
    tempa_3_2_fu_583_p3 = (!tmp_275_reg_801.read()[0].is_01())? sc_lv<8>(): ((tmp_275_reg_801.read()[0].to_bool())? sbox_q2.read(): tempa_3_reg_852.read());
}

void KeyExpansion::thread_tempa_3_4_fu_649_p3() {
    tempa_3_4_fu_649_p3 = (!tmp_282_reg_814.read()[0].is_01())? sc_lv<8>(): ((tmp_282_reg_814.read()[0].to_bool())? sbox_q2.read(): tempa_3_2_reg_892.read());
}

void KeyExpansion::thread_tmp_260_fu_397_p1() {
    tmp_260_fu_397_p1 = esl_zext<64,5>(tmp_s_fu_389_p3.read());
}

void KeyExpansion::thread_tmp_261_fu_402_p2() {
    tmp_261_fu_402_p2 = (tmp_s_fu_389_p3.read() | ap_const_lv5_1);
}

void KeyExpansion::thread_tmp_262_fu_408_p1() {
    tmp_262_fu_408_p1 = esl_zext<64,5>(tmp_261_fu_402_p2.read());
}

void KeyExpansion::thread_tmp_263_fu_413_p2() {
    tmp_263_fu_413_p2 = (tmp_s_reg_728.read() | ap_const_lv5_2);
}

void KeyExpansion::thread_tmp_264_fu_418_p1() {
    tmp_264_fu_418_p1 = esl_zext<64,5>(tmp_263_fu_413_p2.read());
}

void KeyExpansion::thread_tmp_265_fu_423_p2() {
    tmp_265_fu_423_p2 = (tmp_s_reg_728.read() | ap_const_lv5_3);
}

void KeyExpansion::thread_tmp_266_fu_428_p1() {
    tmp_266_fu_428_p1 = esl_zext<64,5>(tmp_265_fu_423_p2.read());
}

void KeyExpansion::thread_tmp_267_fu_447_p2() {
    tmp_267_fu_447_p2 = (!ap_const_lv8_FC.is_01() || !j_fu_439_p3.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_FC) + sc_biguint<8>(j_fu_439_p3.read()));
}

void KeyExpansion::thread_tmp_268_fu_453_p1() {
    tmp_268_fu_453_p1 = esl_zext<64,8>(tmp_267_fu_447_p2.read());
}

void KeyExpansion::thread_tmp_269_fu_458_p2() {
    tmp_269_fu_458_p2 = (!ap_const_lv8_FD.is_01() || !j_fu_439_p3.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_FD) + sc_biguint<8>(j_fu_439_p3.read()));
}

void KeyExpansion::thread_tmp_270_fu_464_p1() {
    tmp_270_fu_464_p1 = esl_zext<64,8>(tmp_269_fu_458_p2.read());
}

void KeyExpansion::thread_tmp_271_fu_501_p2() {
    tmp_271_fu_501_p2 = (!ap_const_lv8_FE.is_01() || !j_reg_777.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_FE) + sc_biguint<8>(j_reg_777.read()));
}

void KeyExpansion::thread_tmp_272_fu_506_p1() {
    tmp_272_fu_506_p1 = esl_zext<64,8>(tmp_271_fu_501_p2.read());
}

void KeyExpansion::thread_tmp_273_fu_511_p2() {
    tmp_273_fu_511_p2 = (!ap_const_lv8_FF.is_01() || !j_reg_777.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_FF) + sc_biguint<8>(j_reg_777.read()));
}

void KeyExpansion::thread_tmp_274_fu_516_p1() {
    tmp_274_fu_516_p1 = esl_zext<64,8>(tmp_273_fu_511_p2.read());
}

void KeyExpansion::thread_tmp_275_fu_473_p2() {
    tmp_275_fu_473_p2 = (!tmp_357_fu_469_p1.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_357_fu_469_p1.read() == ap_const_lv3_0);
}

void KeyExpansion::thread_tmp_276_fu_521_p1() {
    tmp_276_fu_521_p1 = esl_zext<64,8>(RoundKey_q1.read());
}

void KeyExpansion::thread_tmp_277_fu_530_p1() {
    tmp_277_fu_530_p1 = esl_zext<64,8>(RoundKey_q0.read());
}

void KeyExpansion::thread_tmp_278_fu_535_p1() {
    tmp_278_fu_535_p1 = esl_zext<64,8>(RoundKey_q1.read());
}

void KeyExpansion::thread_tmp_279_fu_540_p1() {
    tmp_279_fu_540_p1 = esl_zext<64,8>(reg_368.read());
}

void KeyExpansion::thread_tmp_281_fu_526_p1() {
    tmp_281_fu_526_p1 = esl_zext<64,3>(tmp_280_reg_809.read());
}

void KeyExpansion::thread_tmp_282_fu_489_p2() {
    tmp_282_fu_489_p2 = (!tmp_357_fu_469_p1.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(tmp_357_fu_469_p1.read() == ap_const_lv3_4);
}

void KeyExpansion::thread_tmp_283_fu_558_p1() {
    tmp_283_fu_558_p1 = esl_zext<64,8>(tempa_0_2_fu_551_p3.read());
}

void KeyExpansion::thread_tmp_284_fu_602_p1() {
    tmp_284_fu_602_p1 = esl_zext<64,8>(tempa_1_2_fu_596_p3.read());
}

void KeyExpansion::thread_tmp_285_fu_607_p1() {
    tmp_285_fu_607_p1 = esl_zext<64,8>(tempa_2_2_fu_589_p3.read());
}

void KeyExpansion::thread_tmp_286_fu_612_p1() {
    tmp_286_fu_612_p1 = esl_zext<64,8>(tempa_3_2_fu_583_p3.read());
}

void KeyExpansion::thread_tmp_287_fu_563_p2() {
    tmp_287_fu_563_p2 = (!ap_const_lv8_E0.is_01() || !j_reg_777.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_E0) + sc_biguint<8>(j_reg_777.read()));
}

void KeyExpansion::thread_tmp_288_fu_568_p1() {
    tmp_288_fu_568_p1 = esl_zext<64,8>(tmp_287_fu_563_p2.read());
}

void KeyExpansion::thread_tmp_289_fu_623_p2() {
    tmp_289_fu_623_p2 = (RoundKey_q0.read() ^ tempa_0_4_fu_617_p3.read());
}

void KeyExpansion::thread_tmp_290_fu_667_p1() {
    tmp_290_fu_667_p1 = esl_zext<64,8>(j_reg_777.read());
}

void KeyExpansion::thread_tmp_291_fu_573_p2() {
    tmp_291_fu_573_p2 = (!ap_const_lv8_E1.is_01() || !j_reg_777.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_E1) + sc_biguint<8>(j_reg_777.read()));
}

void KeyExpansion::thread_tmp_292_fu_578_p1() {
    tmp_292_fu_578_p1 = esl_zext<64,8>(tmp_291_fu_573_p2.read());
}

void KeyExpansion::thread_tmp_293_fu_671_p2() {
    tmp_293_fu_671_p2 = (reg_368.read() ^ tempa_1_4_fu_661_p3.read());
}

void KeyExpansion::thread_tmp_294_fu_678_p2() {
    tmp_294_fu_678_p2 = (j_reg_777.read() | ap_const_lv8_1);
}

void KeyExpansion::thread_tmp_295_fu_683_p1() {
    tmp_295_fu_683_p1 = esl_zext<64,8>(tmp_294_fu_678_p2.read());
}

void KeyExpansion::thread_tmp_296_fu_629_p2() {
    tmp_296_fu_629_p2 = (!ap_const_lv8_E2.is_01() || !j_reg_777.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_E2) + sc_biguint<8>(j_reg_777.read()));
}

void KeyExpansion::thread_tmp_297_fu_634_p1() {
    tmp_297_fu_634_p1 = esl_zext<64,8>(tmp_296_fu_629_p2.read());
}

void KeyExpansion::thread_tmp_298_fu_688_p2() {
    tmp_298_fu_688_p2 = (RoundKey_q0.read() ^ tempa_2_4_fu_655_p3.read());
}

void KeyExpansion::thread_tmp_299_fu_700_p2() {
    tmp_299_fu_700_p2 = (j_reg_777.read() | ap_const_lv8_2);
}

void KeyExpansion::thread_tmp_300_fu_705_p1() {
    tmp_300_fu_705_p1 = esl_zext<64,8>(tmp_299_fu_700_p2.read());
}

void KeyExpansion::thread_tmp_301_fu_639_p2() {
    tmp_301_fu_639_p2 = (!ap_const_lv8_E3.is_01() || !j_reg_777.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_E3) + sc_biguint<8>(j_reg_777.read()));
}

void KeyExpansion::thread_tmp_302_fu_644_p1() {
    tmp_302_fu_644_p1 = esl_zext<64,8>(tmp_301_fu_639_p2.read());
}

void KeyExpansion::thread_tmp_303_fu_694_p2() {
    tmp_303_fu_694_p2 = (RoundKey_q1.read() ^ tempa_3_4_fu_649_p3.read());
}

void KeyExpansion::thread_tmp_304_fu_710_p2() {
    tmp_304_fu_710_p2 = (j_reg_777.read() | ap_const_lv8_3);
}

void KeyExpansion::thread_tmp_305_fu_715_p1() {
    tmp_305_fu_715_p1 = esl_zext<64,8>(tmp_304_fu_710_p2.read());
}

void KeyExpansion::thread_tmp_356_fu_385_p1() {
    tmp_356_fu_385_p1 = i_reg_346.read().range(3-1, 0);
}

void KeyExpansion::thread_tmp_357_fu_469_p1() {
    tmp_357_fu_469_p1 = i_1_reg_357.read().range(3-1, 0);
}

void KeyExpansion::thread_tmp_fu_373_p2() {
    tmp_fu_373_p2 = (!i_reg_346.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_346.read() == ap_const_lv4_8);
}

void KeyExpansion::thread_tmp_s_fu_389_p3() {
    tmp_s_fu_389_p3 = esl_concat<3,2>(tmp_356_fu_385_p1.read(), ap_const_lv2_0);
}

void KeyExpansion::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_373_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(exitcond_fu_433_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<10>) ("XXXXXXXXXX");
            break;
    }
}

}

