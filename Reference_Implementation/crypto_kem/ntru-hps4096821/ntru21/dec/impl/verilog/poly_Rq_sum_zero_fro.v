// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module poly_Rq_sum_zero_fro (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_coeffs_address0,
        r_coeffs_ce0,
        r_coeffs_we0,
        r_coeffs_d0,
        r_coeffs_q0,
        r_coeffs_address1,
        r_coeffs_ce1,
        r_coeffs_we1,
        r_coeffs_d1,
        r_coeffs_q1,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] r_coeffs_address0;
output   r_coeffs_ce0;
output   r_coeffs_we0;
output  [15:0] r_coeffs_d0;
input  [15:0] r_coeffs_q0;
output  [9:0] r_coeffs_address1;
output   r_coeffs_ce1;
output   r_coeffs_we1;
output  [15:0] r_coeffs_d1;
input  [15:0] r_coeffs_q1;
output  [10:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [10:0] a_address1;
output   a_ce1;
input  [7:0] a_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] r_coeffs_address0;
reg r_coeffs_ce0;
reg r_coeffs_we0;
reg[15:0] r_coeffs_d0;
reg r_coeffs_ce1;
reg r_coeffs_we1;
reg[10:0] a_address0;
reg a_ce0;
reg a_ce1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] i_10_fu_170_p2;
reg   [8:0] i_10_reg_346;
wire    ap_CS_fsm_state2;
wire  signed [11:0] tmp_i_fu_188_p2;
reg  signed [11:0] tmp_i_reg_351;
wire   [0:0] exitcond_i_fu_164_p2;
wire   [9:0] r_coeffs_addr_reg_366;
wire   [9:0] tmp_12_i_fu_235_p3;
reg   [9:0] tmp_12_i_reg_372;
wire    ap_CS_fsm_state3;
reg   [3:0] tmp_15_i_reg_377;
wire   [9:0] i_11_fu_300_p2;
reg   [9:0] i_11_reg_390;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_294_p2;
wire   [11:0] phitmp_fu_337_p2;
wire    ap_CS_fsm_state6;
reg   [8:0] i_i_reg_126;
wire    ap_CS_fsm_state4;
reg   [11:0] tmp_reg_138;
reg   [9:0] i_reg_149;
wire   [63:0] tmp_i_34_fu_198_p1;
wire   [63:0] tmp_7_i_fu_213_p1;
wire   [63:0] tmp_13_i_fu_243_p1;
wire   [63:0] tmp_17_i_fu_267_p1;
wire   [63:0] tmp_22_i_fu_289_p1;
wire   [63:0] tmp_s_fu_306_p1;
wire   [15:0] tmp_11_i_fu_230_p1;
wire   [15:0] tmp_20_i_cast_fu_279_p1;
wire   [15:0] tmp_63_cast_fu_317_p1;
wire   [10:0] p_shl_i_fu_176_p3;
wire   [11:0] p_shl_i_cast_fu_184_p1;
wire   [11:0] i_i_cast3_fu_160_p1;
wire  signed [31:0] tmp_i_cast_fu_194_p1;
wire   [11:0] tmp_6_i_fu_203_p2;
wire  signed [31:0] tmp_6_i_cast_fu_209_p1;
wire   [3:0] tmp_75_fu_218_p1;
wire   [11:0] tmp_4_i_fu_222_p3;
wire   [11:0] tmp_16_i_fu_258_p2;
wire  signed [31:0] tmp_16_i_cast_fu_263_p1;
wire   [11:0] tmp_20_i_fu_272_p3;
wire   [9:0] tmp_21_i_fu_284_p2;
wire   [11:0] tmp_cast_fu_311_p2;
wire   [11:0] tmp_77_fu_326_p1;
wire   [11:0] tmp_76_fu_322_p1;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_i_reg_126 <= i_10_reg_346;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_i_reg_126 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_149 <= i_11_reg_390;
    end else if (((exitcond_i_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_149 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_reg_138 <= phitmp_fu_337_p2;
    end else if (((exitcond_i_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_138 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_10_reg_346 <= i_10_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_11_reg_390 <= i_11_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_12_i_reg_372[9 : 1] <= tmp_12_i_fu_235_p3[9 : 1];
        tmp_15_i_reg_377 <= {{a_q1[7:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_i_reg_351 <= tmp_i_fu_188_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address0 = tmp_17_i_fu_267_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_address0 = tmp_i_34_fu_198_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        r_coeffs_address0 = r_coeffs_addr_reg_366;
    end else if (((exitcond_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        r_coeffs_address0 = tmp_s_fu_306_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_coeffs_address0 = tmp_22_i_fu_289_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        r_coeffs_address0 = tmp_13_i_fu_243_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        r_coeffs_address0 = 64'd820;
    end else begin
        r_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | ((exitcond_fu_294_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((exitcond_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        r_coeffs_ce0 = 1'b1;
    end else begin
        r_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        r_coeffs_ce1 = 1'b1;
    end else begin
        r_coeffs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        r_coeffs_d0 = tmp_63_cast_fu_317_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_coeffs_d0 = tmp_20_i_cast_fu_279_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        r_coeffs_d0 = tmp_11_i_fu_230_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        r_coeffs_d0 = 16'd0;
    end else begin
        r_coeffs_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | ((exitcond_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((exitcond_i_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        r_coeffs_we0 = 1'b1;
    end else begin
        r_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_we1 = 1'b1;
    end else begin
        r_coeffs_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_i_fu_164_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_fu_294_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address1 = tmp_7_i_fu_213_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign exitcond_fu_294_p2 = ((i_reg_149 == 10'd820) ? 1'b1 : 1'b0);

assign exitcond_i_fu_164_p2 = ((i_i_reg_126 == 9'd410) ? 1'b1 : 1'b0);

assign i_10_fu_170_p2 = (i_i_reg_126 + 9'd1);

assign i_11_fu_300_p2 = (i_reg_149 + 10'd1);

assign i_i_cast3_fu_160_p1 = i_i_reg_126;

assign p_shl_i_cast_fu_184_p1 = p_shl_i_fu_176_p3;

assign p_shl_i_fu_176_p3 = {{i_i_reg_126}, {2'd0}};

assign phitmp_fu_337_p2 = (tmp_77_fu_326_p1 + tmp_76_fu_322_p1);

assign r_coeffs_addr_reg_366 = 64'd820;

assign r_coeffs_address1 = 64'd820;

assign r_coeffs_d1 = (r_coeffs_q1 + r_coeffs_q0);

assign tmp_11_i_fu_230_p1 = tmp_4_i_fu_222_p3;

assign tmp_12_i_fu_235_p3 = {{i_i_reg_126}, {1'd0}};

assign tmp_13_i_fu_243_p1 = tmp_12_i_fu_235_p3;

assign tmp_16_i_cast_fu_263_p1 = $signed(tmp_16_i_fu_258_p2);

assign tmp_16_i_fu_258_p2 = ($signed(12'd2) + $signed(tmp_i_reg_351));

assign tmp_17_i_fu_267_p1 = $unsigned(tmp_16_i_cast_fu_263_p1);

assign tmp_20_i_cast_fu_279_p1 = tmp_20_i_fu_272_p3;

assign tmp_20_i_fu_272_p3 = {{a_q0}, {tmp_15_i_reg_377}};

assign tmp_21_i_fu_284_p2 = (tmp_12_i_reg_372 | 10'd1);

assign tmp_22_i_fu_289_p1 = tmp_21_i_fu_284_p2;

assign tmp_4_i_fu_222_p3 = {{tmp_75_fu_218_p1}, {a_q0}};

assign tmp_63_cast_fu_317_p1 = tmp_cast_fu_311_p2;

assign tmp_6_i_cast_fu_209_p1 = $signed(tmp_6_i_fu_203_p2);

assign tmp_6_i_fu_203_p2 = ($signed(12'd1) + $signed(tmp_i_fu_188_p2));

assign tmp_75_fu_218_p1 = a_q1[3:0];

assign tmp_76_fu_322_p1 = r_coeffs_q1[11:0];

assign tmp_77_fu_326_p1 = r_coeffs_q0[11:0];

assign tmp_7_i_fu_213_p1 = $unsigned(tmp_6_i_cast_fu_209_p1);

assign tmp_cast_fu_311_p2 = (12'd0 - tmp_reg_138);

assign tmp_i_34_fu_198_p1 = $unsigned(tmp_i_cast_fu_194_p1);

assign tmp_i_cast_fu_194_p1 = tmp_i_fu_188_p2;

assign tmp_i_fu_188_p2 = (p_shl_i_cast_fu_184_p1 - i_i_cast3_fu_160_p1);

assign tmp_s_fu_306_p1 = i_reg_149;

always @ (posedge ap_clk) begin
    tmp_12_i_reg_372[0] <= 1'b0;
end

endmodule //poly_Rq_sum_zero_fro
