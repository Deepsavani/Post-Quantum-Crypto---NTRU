-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity owcpa_dec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rm_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    rm_ce0 : OUT STD_LOGIC;
    rm_we0 : OUT STD_LOGIC;
    rm_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ciphertext_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ciphertext_ce0 : OUT STD_LOGIC;
    ciphertext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ciphertext_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ciphertext_ce1 : OUT STD_LOGIC;
    ciphertext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    secretkey_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    secretkey_ce0 : OUT STD_LOGIC;
    secretkey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    secretkey_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    secretkey_ce1 : OUT STD_LOGIC;
    secretkey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of owcpa_dec is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv10_A4 : STD_LOGIC_VECTOR (9 downto 0) := "0010100100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv9_A4 : STD_LOGIC_VECTOR (8 downto 0) := "010100100";
    constant ap_const_lv64_334 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001100110100";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv10_335 : STD_LOGIC_VECTOR (9 downto 0) := "1100110101";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_1FE : STD_LOGIC_VECTOR (10 downto 0) := "00111111110";
    constant ap_const_lv10_1FE : STD_LOGIC_VECTOR (9 downto 0) := "0111111110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv9_19A : STD_LOGIC_VECTOR (8 downto 0) := "110011010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_148 : STD_LOGIC_VECTOR (11 downto 0) := "000101001000";
    constant ap_const_lv12_149 : STD_LOGIC_VECTOR (11 downto 0) := "000101001001";
    constant ap_const_lv12_14A : STD_LOGIC_VECTOR (11 downto 0) := "000101001010";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_14_fu_522_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_14_reg_1134 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal liftm_coeffs_addr_reg_1139 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_15_fu_558_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_15_reg_1147 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal exitcond_i7_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_reg_1157 : STD_LOGIC_VECTOR (0 downto 0);
    signal p1_fu_667_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal m1_fu_685_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_16_fu_697_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_16_reg_1175 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_i1_fu_703_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_reg_1180 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i1_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_17_fu_714_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_17_reg_1193 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal liftm_coeffs_addr_2_reg_1198 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i_i_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_18_fu_750_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_18_reg_1206 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal b_coeffs_addr_reg_1211 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_19_fu_787_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_19_reg_1224 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_i2_fu_805_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i2_reg_1229 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_i2_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_fu_850_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_i_reg_1244 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_9_i_reg_1249 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_poly_Rq_mul_fu_465_ap_ready : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_465_ap_done : STD_LOGIC;
    signal i_20_fu_911_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_20_reg_1267 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal r_coeffs_addr_15_reg_1272 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i3_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_21_fu_943_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_21_reg_1281 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal exitcond_i4_fu_937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_2_fu_1034_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal fail_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fail_reg_1296 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal i_22_fu_1095_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_22_reg_1303 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal r_coeffs_addr_17_reg_1308 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i5_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x1_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x1_coeffs_ce0 : STD_LOGIC;
    signal x1_coeffs_we0 : STD_LOGIC;
    signal x1_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_ce1 : STD_LOGIC;
    signal x1_coeffs_we1 : STD_LOGIC;
    signal x1_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x2_coeffs_ce0 : STD_LOGIC;
    signal x2_coeffs_we0 : STD_LOGIC;
    signal x2_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal x2_coeffs_ce1 : STD_LOGIC;
    signal x2_coeffs_we1 : STD_LOGIC;
    signal x2_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x3_coeffs_ce0 : STD_LOGIC;
    signal x3_coeffs_we0 : STD_LOGIC;
    signal x3_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_ce1 : STD_LOGIC;
    signal x3_coeffs_we1 : STD_LOGIC;
    signal x4_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x4_coeffs_ce0 : STD_LOGIC;
    signal x4_coeffs_we0 : STD_LOGIC;
    signal x4_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x4_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x4_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal x4_coeffs_ce1 : STD_LOGIC;
    signal x4_coeffs_we1 : STD_LOGIC;
    signal x4_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x4_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_mul_fu_441_ap_start : STD_LOGIC;
    signal grp_poly_S3_mul_fu_441_ap_done : STD_LOGIC;
    signal grp_poly_S3_mul_fu_441_ap_idle : STD_LOGIC;
    signal grp_poly_S3_mul_fu_441_ap_ready : STD_LOGIC;
    signal grp_poly_S3_mul_fu_441_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_mul_fu_441_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_mul_fu_441_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_S3_mul_fu_441_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_mul_fu_441_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_mul_fu_441_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_S3_mul_fu_441_r_coeffs_we1 : STD_LOGIC;
    signal grp_poly_S3_mul_fu_441_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_mul_fu_441_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_mul_fu_441_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_mul_fu_441_b_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_mul_fu_441_b_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_448_ap_start : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_448_ap_done : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_448_ap_idle : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_448_ap_ready : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_448_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_frombytes_fu_448_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_448_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_448_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_frombytes_fu_448_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_frombytes_fu_448_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_448_r_coeffs_we1 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_448_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_frombytes_fu_448_msg_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_S3_frombytes_fu_448_msg_ce0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_448_msg_offset : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_to_S3_fu_459_ap_start : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_459_ap_done : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_459_ap_idle : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_459_ap_ready : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_459_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_to_S3_fu_459_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_459_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_459_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_to_S3_fu_459_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_to_S3_fu_459_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_459_r_coeffs_we1 : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_459_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_to_S3_fu_459_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_to_S3_fu_459_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_465_ap_start : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_465_ap_idle : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_465_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_465_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_465_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_465_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_mul_fu_465_r_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_mul_fu_465_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_465_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_465_b_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_465_b_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_465_b_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_sum_zero_fro_fu_472_ap_start : STD_LOGIC;
    signal grp_poly_Rq_sum_zero_fro_fu_472_ap_done : STD_LOGIC;
    signal grp_poly_Rq_sum_zero_fro_fu_472_ap_idle : STD_LOGIC;
    signal grp_poly_Rq_sum_zero_fro_fu_472_ap_ready : STD_LOGIC;
    signal grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_we1 : STD_LOGIC;
    signal grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_sum_zero_fro_fu_472_a_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_Rq_sum_zero_fro_fu_472_a_ce0 : STD_LOGIC;
    signal grp_poly_Rq_sum_zero_fro_fu_472_a_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_Rq_sum_zero_fro_fu_472_a_ce1 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_480_ap_start : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_480_ap_done : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_480_ap_idle : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_480_ap_ready : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_480_msg_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_S3_tobytes_fu_480_msg_ce0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_480_msg_we0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_480_msg_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_S3_tobytes_fu_480_msg_offset : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_S3_tobytes_fu_480_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_tobytes_fu_480_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_480_a_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_tobytes_fu_480_a_coeffs_ce1 : STD_LOGIC;
    signal i_i_reg_305 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p1_i_reg_316 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_i6_reg_328 : STD_LOGIC_VECTOR (9 downto 0);
    signal m1_i_reg_339 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_i1_reg_351 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_i_i_reg_362 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i_reg_373 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal i_i2_reg_384 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal i_i3_reg_396 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_i4_reg_407 : STD_LOGIC_VECTOR (9 downto 0);
    signal t_i_reg_418 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_i5_reg_430 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_poly_S3_mul_fu_441_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_poly_S3_frombytes_fu_448_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_poly_Rq_to_S3_fu_459_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_poly_Rq_mul_fu_465_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_poly_Rq_sum_zero_fro_fu_472_ap_start_reg : STD_LOGIC := '0';
    signal grp_poly_S3_tobytes_fu_480_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_i_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_i_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i_cast_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_i_cast_fu_828_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_i_fu_858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_i_cast_fu_878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_i_fu_900_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_fu_917_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_106_i_fu_949_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i5_fu_1101_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_i_fu_543_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_i_i_fu_735_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_i1_cast_fu_932_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_i2_cast_fu_1126_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_80_cast_fu_772_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_i1_fu_845_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_i1_cast_fu_890_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_490_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_79_fu_533_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_500_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_506_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_48_fu_537_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal m1_i_cast_fu_573_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p1_i_cast_fu_569_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_i_fu_583_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_50_fu_589_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_51_fu_601_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i8_fu_577_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_i_fu_595_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_80_fu_613_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_607_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_i_fu_621_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_i_cast_fu_629_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_i_fu_633_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_cast_fu_641_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_115_i_fu_645_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_82_fu_659_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_118_i_cast_fu_663_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_83_fu_673_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_120_i_cast_fu_681_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_84_fu_725_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_58_fu_729_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_73_fu_762_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_85_fu_768_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_i_fu_793_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_i_cast_fu_801_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_i2_cast6_fu_777_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum_i_fu_811_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum2_i_fu_822_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_86_fu_833_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_i1_fu_837_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum4_i_fu_873_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_i1_fu_883_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_i1_fu_895_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i2_44_fu_922_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_87_fu_928_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_90_fu_954_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_91_fu_958_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_65_fu_968_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_110_i_fu_974_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_66_fu_980_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_108_i_cast_fu_962_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_68_fu_994_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_92_fu_986_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_fu_1014_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_1004_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_71_fu_1024_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_70_fu_1018_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_88_fu_1042_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_i1_fu_1052_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_5_i1_fu_1046_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_fu_1062_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_46_fu_1070_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_89_fu_1076_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_fu_1116_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_72_fu_1106_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_i2_cast_fu_1120_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);

    component poly_S3_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        b_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        b_coeffs_ce0 : OUT STD_LOGIC;
        b_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_S3_frombytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        msg_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msg_ce0 : OUT STD_LOGIC;
        msg_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        msg_offset : IN STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component poly_Rq_to_S3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_Rq_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        b_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        b_coeffs_ce0 : OUT STD_LOGIC;
        b_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_Rq_sum_zero_fro IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component poly_S3_tobytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        msg_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        msg_ce0 : OUT STD_LOGIC;
        msg_we0 : OUT STD_LOGIC;
        msg_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        msg_offset : IN STD_LOGIC_VECTOR (8 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce1 : OUT STD_LOGIC;
        a_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_dec_x1_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_dec_x3_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    x1_coeffs_U : component owcpa_dec_x1_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 821,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x1_coeffs_address0,
        ce0 => x1_coeffs_ce0,
        we0 => x1_coeffs_we0,
        d0 => x1_coeffs_d0,
        q0 => x1_coeffs_q0,
        address1 => grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_address1,
        ce1 => x1_coeffs_ce1,
        we1 => x1_coeffs_we1,
        d1 => grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_d1,
        q1 => x1_coeffs_q1);

    x2_coeffs_U : component owcpa_dec_x1_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 821,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x2_coeffs_address0,
        ce0 => x2_coeffs_ce0,
        we0 => x2_coeffs_we0,
        d0 => x2_coeffs_d0,
        q0 => x2_coeffs_q0,
        address1 => x2_coeffs_address1,
        ce1 => x2_coeffs_ce1,
        we1 => x2_coeffs_we1,
        d1 => x2_coeffs_d1,
        q1 => x2_coeffs_q1);

    x3_coeffs_U : component owcpa_dec_x3_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 821,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x3_coeffs_address0,
        ce0 => x3_coeffs_ce0,
        we0 => x3_coeffs_we0,
        d0 => x3_coeffs_d0,
        q0 => x3_coeffs_q0,
        address1 => grp_poly_S3_frombytes_fu_448_r_coeffs_address1,
        ce1 => x3_coeffs_ce1,
        we1 => x3_coeffs_we1,
        d1 => grp_poly_S3_frombytes_fu_448_r_coeffs_d1);

    x4_coeffs_U : component owcpa_dec_x1_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 821,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x4_coeffs_address0,
        ce0 => x4_coeffs_ce0,
        we0 => x4_coeffs_we0,
        d0 => x4_coeffs_d0,
        q0 => x4_coeffs_q0,
        address1 => x4_coeffs_address1,
        ce1 => x4_coeffs_ce1,
        we1 => x4_coeffs_we1,
        d1 => x4_coeffs_d1,
        q1 => x4_coeffs_q1);

    grp_poly_S3_mul_fu_441 : component poly_S3_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_S3_mul_fu_441_ap_start,
        ap_done => grp_poly_S3_mul_fu_441_ap_done,
        ap_idle => grp_poly_S3_mul_fu_441_ap_idle,
        ap_ready => grp_poly_S3_mul_fu_441_ap_ready,
        r_coeffs_address0 => grp_poly_S3_mul_fu_441_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_S3_mul_fu_441_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_S3_mul_fu_441_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_S3_mul_fu_441_r_coeffs_d0,
        r_coeffs_q0 => x4_coeffs_q0,
        r_coeffs_address1 => grp_poly_S3_mul_fu_441_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_S3_mul_fu_441_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_S3_mul_fu_441_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_S3_mul_fu_441_r_coeffs_d1,
        r_coeffs_q1 => x4_coeffs_q1,
        a_coeffs_address0 => grp_poly_S3_mul_fu_441_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_S3_mul_fu_441_a_coeffs_ce0,
        a_coeffs_q0 => x2_coeffs_q0,
        b_coeffs_address0 => grp_poly_S3_mul_fu_441_b_coeffs_address0,
        b_coeffs_ce0 => grp_poly_S3_mul_fu_441_b_coeffs_ce0,
        b_coeffs_q0 => x3_coeffs_q0);

    grp_poly_S3_frombytes_fu_448 : component poly_S3_frombytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_S3_frombytes_fu_448_ap_start,
        ap_done => grp_poly_S3_frombytes_fu_448_ap_done,
        ap_idle => grp_poly_S3_frombytes_fu_448_ap_idle,
        ap_ready => grp_poly_S3_frombytes_fu_448_ap_ready,
        r_coeffs_address0 => grp_poly_S3_frombytes_fu_448_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_S3_frombytes_fu_448_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_S3_frombytes_fu_448_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_S3_frombytes_fu_448_r_coeffs_d0,
        r_coeffs_address1 => grp_poly_S3_frombytes_fu_448_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_S3_frombytes_fu_448_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_S3_frombytes_fu_448_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_S3_frombytes_fu_448_r_coeffs_d1,
        msg_address0 => grp_poly_S3_frombytes_fu_448_msg_address0,
        msg_ce0 => grp_poly_S3_frombytes_fu_448_msg_ce0,
        msg_q0 => secretkey_q0,
        msg_offset => grp_poly_S3_frombytes_fu_448_msg_offset);

    grp_poly_Rq_to_S3_fu_459 : component poly_Rq_to_S3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Rq_to_S3_fu_459_ap_start,
        ap_done => grp_poly_Rq_to_S3_fu_459_ap_done,
        ap_idle => grp_poly_Rq_to_S3_fu_459_ap_idle,
        ap_ready => grp_poly_Rq_to_S3_fu_459_ap_ready,
        r_coeffs_address0 => grp_poly_Rq_to_S3_fu_459_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_Rq_to_S3_fu_459_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_Rq_to_S3_fu_459_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_Rq_to_S3_fu_459_r_coeffs_d0,
        r_coeffs_q0 => x2_coeffs_q0,
        r_coeffs_address1 => grp_poly_Rq_to_S3_fu_459_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_Rq_to_S3_fu_459_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_Rq_to_S3_fu_459_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_Rq_to_S3_fu_459_r_coeffs_d1,
        r_coeffs_q1 => x2_coeffs_q1,
        a_coeffs_address0 => grp_poly_Rq_to_S3_fu_459_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_Rq_to_S3_fu_459_a_coeffs_ce0,
        a_coeffs_q0 => x3_coeffs_q0);

    grp_poly_Rq_mul_fu_465 : component poly_Rq_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Rq_mul_fu_465_ap_start,
        ap_done => grp_poly_Rq_mul_fu_465_ap_done,
        ap_idle => grp_poly_Rq_mul_fu_465_ap_idle,
        ap_ready => grp_poly_Rq_mul_fu_465_ap_ready,
        r_coeffs_address0 => grp_poly_Rq_mul_fu_465_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_Rq_mul_fu_465_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_Rq_mul_fu_465_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_Rq_mul_fu_465_r_coeffs_d0,
        r_coeffs_q0 => grp_poly_Rq_mul_fu_465_r_coeffs_q0,
        a_coeffs_address0 => grp_poly_Rq_mul_fu_465_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_Rq_mul_fu_465_a_coeffs_ce0,
        a_coeffs_q0 => x1_coeffs_q0,
        b_coeffs_address0 => grp_poly_Rq_mul_fu_465_b_coeffs_address0,
        b_coeffs_ce0 => grp_poly_Rq_mul_fu_465_b_coeffs_ce0,
        b_coeffs_q0 => grp_poly_Rq_mul_fu_465_b_coeffs_q0);

    grp_poly_Rq_sum_zero_fro_fu_472 : component poly_Rq_sum_zero_fro
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Rq_sum_zero_fro_fu_472_ap_start,
        ap_done => grp_poly_Rq_sum_zero_fro_fu_472_ap_done,
        ap_idle => grp_poly_Rq_sum_zero_fro_fu_472_ap_idle,
        ap_ready => grp_poly_Rq_sum_zero_fro_fu_472_ap_ready,
        r_coeffs_address0 => grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_d0,
        r_coeffs_q0 => x1_coeffs_q0,
        r_coeffs_address1 => grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_d1,
        r_coeffs_q1 => x1_coeffs_q1,
        a_address0 => grp_poly_Rq_sum_zero_fro_fu_472_a_address0,
        a_ce0 => grp_poly_Rq_sum_zero_fro_fu_472_a_ce0,
        a_q0 => ciphertext_q0,
        a_address1 => grp_poly_Rq_sum_zero_fro_fu_472_a_address1,
        a_ce1 => grp_poly_Rq_sum_zero_fro_fu_472_a_ce1,
        a_q1 => ciphertext_q1);

    grp_poly_S3_tobytes_fu_480 : component poly_S3_tobytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_S3_tobytes_fu_480_ap_start,
        ap_done => grp_poly_S3_tobytes_fu_480_ap_done,
        ap_idle => grp_poly_S3_tobytes_fu_480_ap_idle,
        ap_ready => grp_poly_S3_tobytes_fu_480_ap_ready,
        msg_address0 => grp_poly_S3_tobytes_fu_480_msg_address0,
        msg_ce0 => grp_poly_S3_tobytes_fu_480_msg_ce0,
        msg_we0 => grp_poly_S3_tobytes_fu_480_msg_we0,
        msg_d0 => grp_poly_S3_tobytes_fu_480_msg_d0,
        msg_offset => grp_poly_S3_tobytes_fu_480_msg_offset,
        a_coeffs_address0 => grp_poly_S3_tobytes_fu_480_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_S3_tobytes_fu_480_a_coeffs_ce0,
        a_coeffs_q0 => x4_coeffs_q0,
        a_coeffs_address1 => grp_poly_S3_tobytes_fu_480_a_coeffs_address1,
        a_coeffs_ce1 => grp_poly_S3_tobytes_fu_480_a_coeffs_ce1,
        a_coeffs_q1 => x4_coeffs_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_poly_Rq_mul_fu_465_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Rq_mul_fu_465_ap_start_reg <= ap_const_logic_0;
            else
                if ((((exitcond_i_fu_516_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond_i2_fu_781_p2 = ap_const_lv1_1)))) then 
                    grp_poly_Rq_mul_fu_465_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Rq_mul_fu_465_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Rq_mul_fu_465_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_Rq_sum_zero_fro_fu_472_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Rq_sum_zero_fro_fu_472_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_poly_Rq_sum_zero_fro_fu_472_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Rq_sum_zero_fro_fu_472_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Rq_sum_zero_fro_fu_472_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_Rq_to_S3_fu_459_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Rq_to_S3_fu_459_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_poly_Rq_to_S3_fu_459_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Rq_to_S3_fu_459_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Rq_to_S3_fu_459_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_S3_frombytes_fu_448_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_S3_frombytes_fu_448_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_poly_S3_frombytes_fu_448_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_S3_frombytes_fu_448_ap_ready = ap_const_logic_1)) then 
                    grp_poly_S3_frombytes_fu_448_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_S3_mul_fu_441_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_S3_mul_fu_441_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_poly_S3_mul_fu_441_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_S3_mul_fu_441_ap_ready = ap_const_logic_1)) then 
                    grp_poly_S3_mul_fu_441_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_S3_tobytes_fu_480_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_S3_tobytes_fu_480_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond_i5_fu_1089_p2 = ap_const_lv1_1)))) then 
                    grp_poly_S3_tobytes_fu_480_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_S3_tobytes_fu_480_ap_ready = ap_const_logic_1)) then 
                    grp_poly_S3_tobytes_fu_480_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i1_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_i1_reg_351 <= i_16_reg_1175;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_i7_fu_552_p2 = ap_const_lv1_1))) then 
                i_i1_reg_351 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i2_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond_fu_744_p2 = ap_const_lv1_1))) then 
                i_i2_reg_384 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i_i2_reg_384 <= i_19_reg_1224;
            end if; 
        end if;
    end process;

    i_i3_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                i_i3_reg_396 <= i_20_reg_1267;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_poly_Rq_mul_fu_465_ap_done = ap_const_logic_1))) then 
                i_i3_reg_396 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i4_reg_407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond_i3_fu_905_p2 = ap_const_lv1_1))) then 
                i_i4_reg_407 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                i_i4_reg_407 <= i_21_reg_1281;
            end if; 
        end if;
    end process;

    i_i5_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                i_i5_reg_430 <= i_22_reg_1303;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i_i5_reg_430 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i6_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_i6_reg_328 <= i_15_reg_1147;
            elsif (((grp_poly_S3_tobytes_fu_480_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_i6_reg_328 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i_i_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_i1_fu_691_p2 = ap_const_lv1_1))) then 
                i_i_i_reg_362 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_i_i_reg_362 <= i_17_reg_1193;
            end if; 
        end if;
    end process;

    i_i_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_i_reg_305 <= i_14_reg_1134;
            elsif (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_i_reg_305 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond_i_i_fu_708_p2 = ap_const_lv1_1))) then 
                i_reg_373 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_reg_373 <= i_18_reg_1206;
            end if; 
        end if;
    end process;

    m1_i_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                m1_i_reg_339 <= m1_fu_685_p2;
            elsif (((grp_poly_S3_tobytes_fu_480_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                m1_i_reg_339 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    p1_i_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                p1_i_reg_316 <= p1_fu_667_p2;
            elsif (((grp_poly_S3_tobytes_fu_480_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                p1_i_reg_316 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    t_i_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond_i3_fu_905_p2 = ap_const_lv1_1))) then 
                t_i_reg_418 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                t_i_reg_418 <= t_2_fu_1034_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_744_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                b_coeffs_addr_reg_1211 <= tmp_s_fu_756_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                fail_reg_1296 <= fail_fu_1084_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_14_reg_1134 <= i_14_fu_522_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_15_reg_1147 <= i_15_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_16_reg_1175 <= i_16_fu_697_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                i_17_reg_1193 <= i_17_fu_714_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                i_18_reg_1206 <= i_18_fu_750_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                i_19_reg_1224 <= i_19_fu_787_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                i_20_reg_1267 <= i_20_fu_911_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                i_21_reg_1281 <= i_21_fu_943_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                i_22_reg_1303 <= i_22_fu_1095_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_fu_708_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                liftm_coeffs_addr_2_reg_1198 <= tmp_i_i_fu_720_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_516_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                liftm_coeffs_addr_reg_1139 <= tmp_i_fu_528_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i3_fu_905_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                r_coeffs_addr_15_reg_1272 <= tmp_i3_fu_917_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i5_fu_1089_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                r_coeffs_addr_17_reg_1308 <= tmp_i5_fu_1101_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                    tmp_4_i_reg_1244(9 downto 1) <= tmp_4_i_fu_850_p3(9 downto 1);
                tmp_9_i_reg_1249 <= secretkey_q1(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_i7_fu_552_p2 = ap_const_lv1_1))) then
                tmp_81_reg_1157 <= tmp_115_i_fu_645_p2(32 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i1_fu_691_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    tmp_i1_reg_1180(9 downto 0) <= tmp_i1_fu_703_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i2_fu_781_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                tmp_i2_reg_1229 <= tmp_i2_fu_805_p2;
            end if;
        end if;
    end process;
    tmp_i1_reg_1180(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    tmp_4_i_reg_1244(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond_i_fu_516_p2, ap_CS_fsm_state14, exitcond_i7_fu_552_p2, ap_CS_fsm_state16, exitcond_i1_fu_691_p2, ap_CS_fsm_state18, exitcond_i_i_fu_708_p2, ap_CS_fsm_state20, exitcond_fu_744_p2, ap_CS_fsm_state22, exitcond_i2_fu_781_p2, ap_CS_fsm_state25, grp_poly_Rq_mul_fu_465_ap_done, ap_CS_fsm_state26, exitcond_i3_fu_905_p2, ap_CS_fsm_state28, exitcond_i4_fu_937_p2, ap_CS_fsm_state31, exitcond_i5_fu_1089_p2, grp_poly_S3_mul_fu_441_ap_done, grp_poly_S3_frombytes_fu_448_ap_done, grp_poly_Rq_to_S3_fu_459_ap_done, grp_poly_S3_tobytes_fu_480_ap_done, ap_CS_fsm_state2, ap_block_state2_on_subcall_done, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state33)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_i_fu_516_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_poly_Rq_mul_fu_465_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_poly_Rq_to_S3_fu_459_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_poly_S3_frombytes_fu_448_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_poly_S3_mul_fu_441_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_poly_S3_tobytes_fu_480_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_i7_fu_552_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_i1_fu_691_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond_i_i_fu_708_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond_fu_744_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond_i2_fu_781_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_poly_Rq_mul_fu_465_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond_i3_fu_905_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (exitcond_i4_fu_937_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (exitcond_i5_fu_1089_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state33 => 
                if (((grp_poly_S3_tobytes_fu_480_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state2_on_subcall_done_assign_proc : process(grp_poly_S3_frombytes_fu_448_ap_done, grp_poly_Rq_sum_zero_fro_fu_472_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((grp_poly_Rq_sum_zero_fro_fu_472_ap_done = ap_const_logic_0) or (grp_poly_S3_frombytes_fu_448_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_poly_S3_tobytes_fu_480_ap_done, ap_CS_fsm_state33)
    begin
        if ((((grp_poly_S3_tobytes_fu_480_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_poly_S3_tobytes_fu_480_ap_done, ap_CS_fsm_state33)
    begin
        if (((grp_poly_S3_tobytes_fu_480_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= fail_reg_1296;
    ciphertext_address0 <= grp_poly_Rq_sum_zero_fro_fu_472_a_address0;
    ciphertext_address1 <= grp_poly_Rq_sum_zero_fro_fu_472_a_address1;
    ciphertext_ce0 <= grp_poly_Rq_sum_zero_fro_fu_472_a_ce0;
    ciphertext_ce1 <= grp_poly_Rq_sum_zero_fro_fu_472_a_ce1;
    exitcond_fu_744_p2 <= "1" when (i_reg_373 = ap_const_lv10_335) else "0";
    exitcond_i1_fu_691_p2 <= "1" when (i_i1_reg_351 = ap_const_lv10_335) else "0";
    exitcond_i2_fu_781_p2 <= "1" when (i_i2_reg_384 = ap_const_lv9_19A) else "0";
    exitcond_i3_fu_905_p2 <= "1" when (i_i3_reg_396 = ap_const_lv10_335) else "0";
    exitcond_i4_fu_937_p2 <= "1" when (i_i4_reg_407 = ap_const_lv10_335) else "0";
    exitcond_i5_fu_1089_p2 <= "1" when (i_i5_reg_430 = ap_const_lv10_335) else "0";
    exitcond_i7_fu_552_p2 <= "1" when (i_i6_reg_328 = ap_const_lv10_335) else "0";
    exitcond_i_fu_516_p2 <= "1" when (i_i_reg_305 = ap_const_lv10_335) else "0";
    exitcond_i_i_fu_708_p2 <= "1" when (i_i_i_reg_362 = ap_const_lv10_335) else "0";
    fail_fu_1084_p2 <= (tmp_89_fu_1076_p3 or tmp_81_reg_1157);
    grp_fu_490_p4 <= x2_coeffs_q0(12 downto 1);
    grp_fu_500_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(grp_fu_490_p4));
    grp_fu_506_p4 <= x2_coeffs_q0(15 downto 12);
    grp_poly_Rq_mul_fu_465_ap_start <= grp_poly_Rq_mul_fu_465_ap_start_reg;

    grp_poly_Rq_mul_fu_465_b_coeffs_q0_assign_proc : process(ap_CS_fsm_state25, x2_coeffs_q0, x3_coeffs_q0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_poly_Rq_mul_fu_465_b_coeffs_q0 <= x3_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_poly_Rq_mul_fu_465_b_coeffs_q0 <= x2_coeffs_q0;
        else 
            grp_poly_Rq_mul_fu_465_b_coeffs_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_Rq_mul_fu_465_r_coeffs_q0_assign_proc : process(ap_CS_fsm_state25, x3_coeffs_q0, x4_coeffs_q0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_poly_Rq_mul_fu_465_r_coeffs_q0 <= x4_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_poly_Rq_mul_fu_465_r_coeffs_q0 <= x3_coeffs_q0;
        else 
            grp_poly_Rq_mul_fu_465_r_coeffs_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_poly_Rq_sum_zero_fro_fu_472_ap_start <= grp_poly_Rq_sum_zero_fro_fu_472_ap_start_reg;
    grp_poly_Rq_to_S3_fu_459_ap_start <= grp_poly_Rq_to_S3_fu_459_ap_start_reg;
    grp_poly_S3_frombytes_fu_448_ap_start <= grp_poly_S3_frombytes_fu_448_ap_start_reg;

    grp_poly_S3_frombytes_fu_448_msg_offset_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_poly_S3_frombytes_fu_448_msg_offset <= ap_const_lv10_A4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_poly_S3_frombytes_fu_448_msg_offset <= ap_const_lv10_0;
        else 
            grp_poly_S3_frombytes_fu_448_msg_offset <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_poly_S3_mul_fu_441_ap_start <= grp_poly_S3_mul_fu_441_ap_start_reg;
    grp_poly_S3_tobytes_fu_480_ap_start <= grp_poly_S3_tobytes_fu_480_ap_start_reg;

    grp_poly_S3_tobytes_fu_480_msg_offset_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_poly_S3_tobytes_fu_480_msg_offset <= ap_const_lv9_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_poly_S3_tobytes_fu_480_msg_offset <= ap_const_lv9_A4;
        else 
            grp_poly_S3_tobytes_fu_480_msg_offset <= "XXXXXXXXX";
        end if; 
    end process;

    i_14_fu_522_p2 <= std_logic_vector(unsigned(i_i_reg_305) + unsigned(ap_const_lv10_1));
    i_15_fu_558_p2 <= std_logic_vector(unsigned(i_i6_reg_328) + unsigned(ap_const_lv10_1));
    i_16_fu_697_p2 <= std_logic_vector(unsigned(i_i1_reg_351) + unsigned(ap_const_lv10_1));
    i_17_fu_714_p2 <= std_logic_vector(unsigned(i_i_i_reg_362) + unsigned(ap_const_lv10_1));
    i_18_fu_750_p2 <= std_logic_vector(unsigned(i_reg_373) + unsigned(ap_const_lv10_1));
    i_19_fu_787_p2 <= std_logic_vector(unsigned(i_i2_reg_384) + unsigned(ap_const_lv9_1));
    i_20_fu_911_p2 <= std_logic_vector(unsigned(i_i3_reg_396) + unsigned(ap_const_lv10_1));
    i_21_fu_943_p2 <= std_logic_vector(unsigned(i_i4_reg_407) + unsigned(ap_const_lv10_1));
    i_22_fu_1095_p2 <= std_logic_vector(unsigned(i_i5_reg_430) + unsigned(ap_const_lv10_1));
    i_i2_cast6_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i2_reg_384),12));
    m1_fu_685_p2 <= std_logic_vector(unsigned(tmp_120_i_cast_fu_681_p1) + unsigned(m1_i_reg_339));
    m1_i_cast_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m1_i_reg_339),11));
    p1_fu_667_p2 <= std_logic_vector(unsigned(tmp_118_i_cast_fu_663_p1) + unsigned(p1_i_reg_316));
    p1_i_cast_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p1_i_reg_316),11));
    p_shl_i_cast_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_fu_793_p3),12));
    p_shl_i_fu_793_p3 <= (i_i2_reg_384 & ap_const_lv2_0);
    rm_address0 <= grp_poly_S3_tobytes_fu_480_msg_address0;

    rm_ce0_assign_proc : process(grp_poly_S3_tobytes_fu_480_msg_ce0, ap_CS_fsm_state13, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            rm_ce0 <= grp_poly_S3_tobytes_fu_480_msg_ce0;
        else 
            rm_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rm_d0 <= grp_poly_S3_tobytes_fu_480_msg_d0;

    rm_we0_assign_proc : process(grp_poly_S3_tobytes_fu_480_msg_we0, ap_CS_fsm_state13, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            rm_we0 <= grp_poly_S3_tobytes_fu_480_msg_we0;
        else 
            rm_we0 <= ap_const_logic_0;
        end if; 
    end process;


    secretkey_address0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, grp_poly_S3_frombytes_fu_448_msg_address0, ap_CS_fsm_state2, ap_CS_fsm_state9, sum_i_cast_fu_817_p1, sum4_i_cast_fu_878_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            secretkey_address0 <= sum4_i_cast_fu_878_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            secretkey_address0 <= sum_i_cast_fu_817_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            secretkey_address0 <= grp_poly_S3_frombytes_fu_448_msg_address0;
        else 
            secretkey_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    secretkey_address1 <= sum2_i_cast_fu_828_p1(11 - 1 downto 0);

    secretkey_ce0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, grp_poly_S3_frombytes_fu_448_msg_ce0, ap_CS_fsm_state2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            secretkey_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            secretkey_ce0 <= grp_poly_S3_frombytes_fu_448_msg_ce0;
        else 
            secretkey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    secretkey_ce1_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            secretkey_ce1 <= ap_const_logic_1;
        else 
            secretkey_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        sum2_i_cast_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum2_i_fu_822_p2),64));

    sum2_i_fu_822_p2 <= std_logic_vector(unsigned(ap_const_lv12_149) + unsigned(tmp_i2_fu_805_p2));
        sum4_i_cast_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum4_i_fu_873_p2),64));

    sum4_i_fu_873_p2 <= std_logic_vector(unsigned(ap_const_lv12_14A) + unsigned(tmp_i2_reg_1229));
        sum_i_cast_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_i_fu_811_p2),64));

    sum_i_fu_811_p2 <= std_logic_vector(unsigned(ap_const_lv12_148) + unsigned(tmp_i2_fu_805_p2));
    t_2_fu_1034_p3 <= (tmp_71_fu_1024_p4 & tmp_70_fu_1018_p2);
    t_cast_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_i_fu_633_p3),33));
    t_fu_1062_p3 <= (tmp_6_i1_fu_1052_p4 & tmp_5_i1_fu_1046_p2);
    tmp_106_i_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i4_reg_407),64));
    tmp_108_i_cast_fu_962_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) + unsigned(tmp_90_fu_954_p1));
    tmp_110_i_fu_974_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(tmp_91_fu_958_p1));
    tmp_115_i_fu_645_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(t_cast_fu_641_p1));
    tmp_117_i_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i6_reg_328),64));
    tmp_118_i_cast_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_82_fu_659_p1),10));
    tmp_11_i_fu_583_p2 <= std_logic_vector(unsigned(m1_i_cast_fu_573_p1) + unsigned(p1_i_cast_fu_569_p1));
    tmp_120_i_cast_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_83_fu_673_p3),10));
    tmp_12_i_fu_595_p2 <= (tmp_11_i_fu_583_p2 xor ap_const_lv11_1FE);
    tmp_13_i_cast_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_i_fu_621_p3),16));
    tmp_13_i_fu_621_p3 <= (tmp_80_fu_613_p3 & tmp_52_fu_607_p2);
    tmp_14_i1_cast_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_i1_fu_883_p3),16));
    tmp_14_i1_fu_883_p3 <= (secretkey_q0 & tmp_9_i_reg_1249);
    tmp_15_i1_fu_895_p2 <= (tmp_4_i_reg_1244 or ap_const_lv10_1);
    tmp_15_i_fu_633_p3 <= (ap_const_lv16_0 & tmp_13_i_cast_fu_629_p1);
    tmp_16_i_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_i1_fu_895_p2),64));
    tmp_2_i1_fu_837_p3 <= (tmp_86_fu_833_p1 & secretkey_q0);
    tmp_3_i1_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_i1_fu_837_p3),16));
    tmp_3_i_fu_543_p3 <= (grp_fu_506_p4 & tmp_48_fu_537_p2);
    tmp_3_i_i_fu_735_p3 <= (grp_fu_506_p4 & tmp_58_fu_729_p2);
    tmp_48_fu_537_p2 <= (tmp_79_fu_533_p1 or grp_fu_500_p2);
    tmp_4_i1_cast_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_87_fu_928_p1),16));
    tmp_4_i_fu_850_p3 <= (i_i2_reg_384 & ap_const_lv1_0);
    tmp_50_fu_589_p2 <= std_logic_vector(unsigned(p1_i_reg_316) + unsigned(m1_i_reg_339));
    tmp_51_fu_601_p2 <= (tmp_50_fu_589_p2 xor ap_const_lv10_1FE);
    tmp_52_fu_607_p2 <= (tmp_i8_fu_577_p2 or tmp_51_fu_601_p2);
    tmp_58_fu_729_p2 <= (tmp_84_fu_725_p1 or grp_fu_500_p2);
    tmp_5_i1_fu_1046_p2 <= (x4_coeffs_q1 or tmp_88_fu_1042_p1);
    tmp_5_i_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_i_fu_850_p3),64));
    tmp_65_fu_968_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(tmp_91_fu_958_p1));
    tmp_66_fu_980_p2 <= (tmp_65_fu_968_p2 or tmp_110_i_fu_974_p2);
    tmp_68_fu_994_p4 <= tmp_108_i_cast_fu_962_p2(11 downto 3);
    tmp_6_i1_fu_1052_p4 <= t_i_reg_418(63 downto 16);
    tmp_70_fu_1018_p2 <= (tmp_fu_1004_p4 or tmp_93_fu_1014_p1);
    tmp_71_fu_1024_p4 <= t_i_reg_418(63 downto 12);
    tmp_72_fu_1106_p4 <= x4_coeffs_q0(12 downto 11);
    tmp_73_fu_762_p2 <= std_logic_vector(unsigned(x1_coeffs_q0) - unsigned(x2_coeffs_q0));
    tmp_79_fu_533_p1 <= x2_coeffs_q0(12 - 1 downto 0);
    tmp_7_i2_cast_fu_1120_p2 <= (tmp_94_fu_1116_p1 xor tmp_72_fu_1106_p4);
    tmp_80_cast_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_85_fu_768_p1),16));
    tmp_80_fu_613_p3 <= tmp_12_i_fu_595_p2(10 downto 10);
    tmp_82_fu_659_p1 <= x4_coeffs_q0(1 - 1 downto 0);
    tmp_83_fu_673_p3 <= x4_coeffs_q0(1 downto 1);
    tmp_84_fu_725_p1 <= x2_coeffs_q0(12 - 1 downto 0);
    tmp_85_fu_768_p1 <= tmp_73_fu_762_p2(12 - 1 downto 0);
    tmp_86_fu_833_p1 <= secretkey_q1(4 - 1 downto 0);
    tmp_87_fu_928_p1 <= tmp_i2_44_fu_922_p2(12 - 1 downto 0);
    tmp_88_fu_1042_p1 <= t_i_reg_418(16 - 1 downto 0);
    tmp_89_fu_1076_p3 <= tmp_i3_46_fu_1070_p2(63 downto 63);
    tmp_8_i2_cast_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_i2_cast_fu_1120_p2),16));
    tmp_90_fu_954_p1 <= x4_coeffs_q1(12 - 1 downto 0);
    tmp_91_fu_958_p1 <= x4_coeffs_q1(3 - 1 downto 0);
    tmp_92_fu_986_p3 <= tmp_66_fu_980_p2(2 downto 2);
    tmp_93_fu_1014_p1 <= t_i_reg_418(12 - 1 downto 0);
    tmp_94_fu_1116_p1 <= x4_coeffs_q0(2 - 1 downto 0);
    tmp_fu_1004_p4 <= ((tmp_68_fu_994_p4 & tmp_92_fu_986_p3) & ap_const_lv2_0);
    tmp_i1_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_351),64));
    tmp_i2_44_fu_922_p2 <= std_logic_vector(unsigned(x4_coeffs_q0) - unsigned(x4_coeffs_q1));
    tmp_i2_fu_805_p2 <= std_logic_vector(unsigned(p_shl_i_cast_fu_801_p1) - unsigned(i_i2_cast6_fu_777_p1));
    tmp_i3_46_fu_1070_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(t_fu_1062_p3));
    tmp_i3_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i3_reg_396),64));
    tmp_i5_fu_1101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i5_reg_430),64));
    tmp_i8_fu_577_p2 <= (p1_i_reg_316 xor m1_i_reg_339);
    tmp_i_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_305),64));
    tmp_i_i_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i_reg_362),64));
    tmp_s_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_373),64));

    x1_coeffs_address0_assign_proc : process(ap_CS_fsm_state20, b_coeffs_addr_reg_1211, ap_CS_fsm_state25, grp_poly_Rq_mul_fu_465_a_coeffs_address0, grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_address0, ap_CS_fsm_state2, ap_CS_fsm_state21, ap_CS_fsm_state5, tmp_s_fu_756_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            x1_coeffs_address0 <= b_coeffs_addr_reg_1211;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            x1_coeffs_address0 <= tmp_s_fu_756_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_address0 <= grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            x1_coeffs_address0 <= grp_poly_Rq_mul_fu_465_a_coeffs_address0;
        else 
            x1_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state25, grp_poly_Rq_mul_fu_465_a_coeffs_ce0, grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_ce0, ap_CS_fsm_state2, ap_CS_fsm_state21, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            x1_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_ce0 <= grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            x1_coeffs_ce0 <= grp_poly_Rq_mul_fu_465_a_coeffs_ce0;
        else 
            x1_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_ce1_assign_proc : process(grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_ce1 <= grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_ce1;
        else 
            x1_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_d0_assign_proc : process(grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_d0, ap_CS_fsm_state2, ap_CS_fsm_state21, tmp_80_cast_fu_772_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            x1_coeffs_d0 <= tmp_80_cast_fu_772_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_d0 <= grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_d0;
        else 
            x1_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_we0_assign_proc : process(grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_we0, ap_CS_fsm_state2, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            x1_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_we0 <= grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_we0;
        else 
            x1_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_we1_assign_proc : process(grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_we1 <= grp_poly_Rq_sum_zero_fro_fu_472_r_coeffs_we1;
        else 
            x1_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_address0_assign_proc : process(ap_CS_fsm_state3, liftm_coeffs_addr_reg_1139, exitcond_i_fu_516_p2, tmp_i1_reg_1180, ap_CS_fsm_state18, liftm_coeffs_addr_2_reg_1198, ap_CS_fsm_state20, grp_poly_S3_mul_fu_441_a_coeffs_address0, grp_poly_S3_frombytes_fu_448_r_coeffs_address0, grp_poly_Rq_to_S3_fu_459_r_coeffs_address0, grp_poly_Rq_mul_fu_465_b_coeffs_address0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state5, tmp_i_fu_528_p1, tmp_i_i_fu_720_p1, tmp_s_fu_756_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            x2_coeffs_address0 <= tmp_s_fu_756_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            x2_coeffs_address0 <= liftm_coeffs_addr_2_reg_1198;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            x2_coeffs_address0 <= tmp_i_i_fu_720_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            x2_coeffs_address0 <= tmp_i1_reg_1180(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x2_coeffs_address0 <= liftm_coeffs_addr_reg_1139;
        elsif (((exitcond_i_fu_516_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            x2_coeffs_address0 <= tmp_i_fu_528_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x2_coeffs_address0 <= grp_poly_Rq_mul_fu_465_b_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x2_coeffs_address0 <= grp_poly_Rq_to_S3_fu_459_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x2_coeffs_address0 <= grp_poly_S3_frombytes_fu_448_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x2_coeffs_address0 <= grp_poly_S3_mul_fu_441_a_coeffs_address0;
        else 
            x2_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_address1_assign_proc : process(grp_poly_S3_frombytes_fu_448_r_coeffs_address1, grp_poly_Rq_to_S3_fu_459_r_coeffs_address1, ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x2_coeffs_address1 <= grp_poly_Rq_to_S3_fu_459_r_coeffs_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x2_coeffs_address1 <= grp_poly_S3_frombytes_fu_448_r_coeffs_address1;
        else 
            x2_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3, exitcond_i_fu_516_p2, ap_CS_fsm_state18, ap_CS_fsm_state20, grp_poly_S3_mul_fu_441_a_coeffs_ce0, grp_poly_S3_frombytes_fu_448_r_coeffs_ce0, grp_poly_Rq_to_S3_fu_459_r_coeffs_ce0, grp_poly_Rq_mul_fu_465_b_coeffs_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((exitcond_i_fu_516_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            x2_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x2_coeffs_ce0 <= grp_poly_Rq_mul_fu_465_b_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x2_coeffs_ce0 <= grp_poly_Rq_to_S3_fu_459_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x2_coeffs_ce0 <= grp_poly_S3_frombytes_fu_448_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x2_coeffs_ce0 <= grp_poly_S3_mul_fu_441_a_coeffs_ce0;
        else 
            x2_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_ce1_assign_proc : process(grp_poly_S3_frombytes_fu_448_r_coeffs_ce1, grp_poly_Rq_to_S3_fu_459_r_coeffs_ce1, ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x2_coeffs_ce1 <= grp_poly_Rq_to_S3_fu_459_r_coeffs_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x2_coeffs_ce1 <= grp_poly_S3_frombytes_fu_448_r_coeffs_ce1;
        else 
            x2_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_d0_assign_proc : process(x4_coeffs_q0, grp_poly_S3_frombytes_fu_448_r_coeffs_d0, grp_poly_Rq_to_S3_fu_459_r_coeffs_d0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state7, tmp_3_i_fu_543_p3, tmp_3_i_i_fu_735_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            x2_coeffs_d0 <= tmp_3_i_i_fu_735_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            x2_coeffs_d0 <= x4_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x2_coeffs_d0 <= tmp_3_i_fu_543_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x2_coeffs_d0 <= grp_poly_Rq_to_S3_fu_459_r_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x2_coeffs_d0 <= grp_poly_S3_frombytes_fu_448_r_coeffs_d0;
        else 
            x2_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_d1_assign_proc : process(grp_poly_S3_frombytes_fu_448_r_coeffs_d1, grp_poly_Rq_to_S3_fu_459_r_coeffs_d1, ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x2_coeffs_d1 <= grp_poly_Rq_to_S3_fu_459_r_coeffs_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x2_coeffs_d1 <= grp_poly_S3_frombytes_fu_448_r_coeffs_d1;
        else 
            x2_coeffs_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_we0_assign_proc : process(grp_poly_S3_frombytes_fu_448_r_coeffs_we0, grp_poly_Rq_to_S3_fu_459_r_coeffs_we0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x2_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x2_coeffs_we0 <= grp_poly_Rq_to_S3_fu_459_r_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x2_coeffs_we0 <= grp_poly_S3_frombytes_fu_448_r_coeffs_we0;
        else 
            x2_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_we1_assign_proc : process(grp_poly_S3_frombytes_fu_448_r_coeffs_we1, grp_poly_Rq_to_S3_fu_459_r_coeffs_we1, ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x2_coeffs_we1 <= grp_poly_Rq_to_S3_fu_459_r_coeffs_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x2_coeffs_we1 <= grp_poly_S3_frombytes_fu_448_r_coeffs_we1;
        else 
            x2_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_address0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state25, grp_poly_S3_mul_fu_441_b_coeffs_address0, grp_poly_S3_frombytes_fu_448_r_coeffs_address0, grp_poly_Rq_to_S3_fu_459_a_coeffs_address0, grp_poly_Rq_mul_fu_465_r_coeffs_address0, grp_poly_Rq_mul_fu_465_b_coeffs_address0, ap_CS_fsm_state24, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state5, tmp_5_i_fu_858_p1, tmp_16_i_fu_900_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            x3_coeffs_address0 <= tmp_16_i_fu_900_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            x3_coeffs_address0 <= tmp_5_i_fu_858_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            x3_coeffs_address0 <= grp_poly_Rq_mul_fu_465_b_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x3_coeffs_address0 <= grp_poly_Rq_mul_fu_465_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x3_coeffs_address0 <= grp_poly_Rq_to_S3_fu_459_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_address0 <= grp_poly_S3_frombytes_fu_448_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x3_coeffs_address0 <= grp_poly_S3_mul_fu_441_b_coeffs_address0;
        else 
            x3_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_ce0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state25, grp_poly_S3_mul_fu_441_b_coeffs_ce0, grp_poly_S3_frombytes_fu_448_r_coeffs_ce0, grp_poly_Rq_to_S3_fu_459_a_coeffs_ce0, grp_poly_Rq_mul_fu_465_r_coeffs_ce0, grp_poly_Rq_mul_fu_465_b_coeffs_ce0, ap_CS_fsm_state24, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            x3_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            x3_coeffs_ce0 <= grp_poly_Rq_mul_fu_465_b_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x3_coeffs_ce0 <= grp_poly_Rq_mul_fu_465_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x3_coeffs_ce0 <= grp_poly_Rq_to_S3_fu_459_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_ce0 <= grp_poly_S3_frombytes_fu_448_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x3_coeffs_ce0 <= grp_poly_S3_mul_fu_441_b_coeffs_ce0;
        else 
            x3_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_ce1_assign_proc : process(grp_poly_S3_frombytes_fu_448_r_coeffs_ce1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_ce1 <= grp_poly_S3_frombytes_fu_448_r_coeffs_ce1;
        else 
            x3_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_d0_assign_proc : process(ap_CS_fsm_state23, grp_poly_S3_frombytes_fu_448_r_coeffs_d0, grp_poly_Rq_mul_fu_465_r_coeffs_d0, ap_CS_fsm_state24, ap_CS_fsm_state9, ap_CS_fsm_state5, tmp_3_i1_fu_845_p1, tmp_14_i1_cast_fu_890_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            x3_coeffs_d0 <= tmp_14_i1_cast_fu_890_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            x3_coeffs_d0 <= tmp_3_i1_fu_845_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x3_coeffs_d0 <= grp_poly_Rq_mul_fu_465_r_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_d0 <= grp_poly_S3_frombytes_fu_448_r_coeffs_d0;
        else 
            x3_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_we0_assign_proc : process(ap_CS_fsm_state23, grp_poly_S3_frombytes_fu_448_r_coeffs_we0, grp_poly_Rq_mul_fu_465_r_coeffs_we0, ap_CS_fsm_state24, ap_CS_fsm_state9, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            x3_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x3_coeffs_we0 <= grp_poly_Rq_mul_fu_465_r_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_we0 <= grp_poly_S3_frombytes_fu_448_r_coeffs_we0;
        else 
            x3_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_we1_assign_proc : process(grp_poly_S3_frombytes_fu_448_r_coeffs_we1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_we1 <= grp_poly_S3_frombytes_fu_448_r_coeffs_we1;
        else 
            x3_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x4_coeffs_address0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state16, tmp_i1_fu_703_p1, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state31, r_coeffs_addr_17_reg_1308, exitcond_i5_fu_1089_p2, grp_poly_S3_mul_fu_441_r_coeffs_address0, grp_poly_Rq_mul_fu_465_r_coeffs_address0, grp_poly_S3_tobytes_fu_480_a_coeffs_address0, ap_CS_fsm_state13, ap_CS_fsm_state32, ap_CS_fsm_state11, ap_CS_fsm_state33, tmp_117_i_fu_564_p1, tmp_i3_fu_917_p1, tmp_i5_fu_1101_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            x4_coeffs_address0 <= r_coeffs_addr_17_reg_1308;
        elsif (((exitcond_i5_fu_1089_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            x4_coeffs_address0 <= tmp_i5_fu_1101_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            x4_coeffs_address0 <= tmp_i3_fu_917_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            x4_coeffs_address0 <= tmp_i1_fu_703_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            x4_coeffs_address0 <= tmp_117_i_fu_564_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            x4_coeffs_address0 <= grp_poly_S3_tobytes_fu_480_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            x4_coeffs_address0 <= grp_poly_Rq_mul_fu_465_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x4_coeffs_address0 <= grp_poly_S3_mul_fu_441_r_coeffs_address0;
        else 
            x4_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x4_coeffs_address1_assign_proc : process(ap_CS_fsm_state26, r_coeffs_addr_15_reg_1272, ap_CS_fsm_state28, exitcond_i4_fu_937_p2, grp_poly_S3_mul_fu_441_r_coeffs_address1, grp_poly_S3_tobytes_fu_480_a_coeffs_address1, ap_CS_fsm_state13, ap_CS_fsm_state27, ap_CS_fsm_state11, ap_CS_fsm_state33, tmp_106_i_fu_949_p1)
    begin
        if (((exitcond_i4_fu_937_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            x4_coeffs_address1 <= tmp_106_i_fu_949_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            x4_coeffs_address1 <= r_coeffs_addr_15_reg_1272;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (exitcond_i4_fu_937_p2 = ap_const_lv1_1)))) then 
            x4_coeffs_address1 <= ap_const_lv64_334(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            x4_coeffs_address1 <= grp_poly_S3_tobytes_fu_480_a_coeffs_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x4_coeffs_address1 <= grp_poly_S3_mul_fu_441_r_coeffs_address1;
        else 
            x4_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    x4_coeffs_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state31, exitcond_i5_fu_1089_p2, grp_poly_S3_mul_fu_441_r_coeffs_ce0, grp_poly_Rq_mul_fu_465_r_coeffs_ce0, grp_poly_S3_tobytes_fu_480_a_coeffs_ce0, ap_CS_fsm_state13, ap_CS_fsm_state32, ap_CS_fsm_state11, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((exitcond_i5_fu_1089_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31)))) then 
            x4_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            x4_coeffs_ce0 <= grp_poly_S3_tobytes_fu_480_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            x4_coeffs_ce0 <= grp_poly_Rq_mul_fu_465_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x4_coeffs_ce0 <= grp_poly_S3_mul_fu_441_r_coeffs_ce0;
        else 
            x4_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x4_coeffs_ce1_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state28, exitcond_i4_fu_937_p2, grp_poly_S3_mul_fu_441_r_coeffs_ce1, grp_poly_S3_tobytes_fu_480_a_coeffs_ce1, ap_CS_fsm_state13, ap_CS_fsm_state27, ap_CS_fsm_state11, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (exitcond_i4_fu_937_p2 = ap_const_lv1_1)) or ((exitcond_i4_fu_937_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28)))) then 
            x4_coeffs_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            x4_coeffs_ce1 <= grp_poly_S3_tobytes_fu_480_a_coeffs_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x4_coeffs_ce1 <= grp_poly_S3_mul_fu_441_r_coeffs_ce1;
        else 
            x4_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x4_coeffs_d0_assign_proc : process(ap_CS_fsm_state25, grp_poly_S3_mul_fu_441_r_coeffs_d0, grp_poly_Rq_mul_fu_465_r_coeffs_d0, ap_CS_fsm_state32, ap_CS_fsm_state11, tmp_8_i2_cast_fu_1126_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            x4_coeffs_d0 <= tmp_8_i2_cast_fu_1126_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            x4_coeffs_d0 <= grp_poly_Rq_mul_fu_465_r_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x4_coeffs_d0 <= grp_poly_S3_mul_fu_441_r_coeffs_d0;
        else 
            x4_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x4_coeffs_d1_assign_proc : process(grp_poly_S3_mul_fu_441_r_coeffs_d1, ap_CS_fsm_state27, ap_CS_fsm_state11, tmp_4_i1_cast_fu_932_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            x4_coeffs_d1 <= tmp_4_i1_cast_fu_932_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x4_coeffs_d1 <= grp_poly_S3_mul_fu_441_r_coeffs_d1;
        else 
            x4_coeffs_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x4_coeffs_we0_assign_proc : process(ap_CS_fsm_state25, grp_poly_S3_mul_fu_441_r_coeffs_we0, grp_poly_Rq_mul_fu_465_r_coeffs_we0, ap_CS_fsm_state32, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            x4_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            x4_coeffs_we0 <= grp_poly_Rq_mul_fu_465_r_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x4_coeffs_we0 <= grp_poly_S3_mul_fu_441_r_coeffs_we0;
        else 
            x4_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x4_coeffs_we1_assign_proc : process(grp_poly_S3_mul_fu_441_r_coeffs_we1, ap_CS_fsm_state27, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            x4_coeffs_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x4_coeffs_we1 <= grp_poly_S3_mul_fu_441_r_coeffs_we1;
        else 
            x4_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
