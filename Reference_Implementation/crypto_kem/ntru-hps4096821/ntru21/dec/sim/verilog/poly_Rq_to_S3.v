// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module poly_Rq_to_S3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_coeffs_address0,
        r_coeffs_ce0,
        r_coeffs_we0,
        r_coeffs_d0,
        r_coeffs_q0,
        r_coeffs_address1,
        r_coeffs_ce1,
        r_coeffs_we1,
        r_coeffs_d1,
        r_coeffs_q1,
        a_coeffs_address0,
        a_coeffs_ce0,
        a_coeffs_q0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] r_coeffs_address0;
output   r_coeffs_ce0;
output   r_coeffs_we0;
output  [15:0] r_coeffs_d0;
input  [15:0] r_coeffs_q0;
output  [9:0] r_coeffs_address1;
output   r_coeffs_ce1;
output   r_coeffs_we1;
output  [15:0] r_coeffs_d1;
input  [15:0] r_coeffs_q1;
output  [9:0] a_coeffs_address0;
output   a_coeffs_ce0;
input  [15:0] a_coeffs_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] r_coeffs_address0;
reg r_coeffs_ce0;
reg r_coeffs_we0;
reg[15:0] r_coeffs_d0;
reg[9:0] r_coeffs_address1;
reg r_coeffs_ce1;
reg r_coeffs_we1;
reg a_coeffs_ce0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] i_8_fu_153_p2;
reg   [9:0] i_8_reg_749;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_s_fu_159_p1;
reg   [63:0] tmp_s_reg_754;
wire   [0:0] exitcond1_fu_147_p2;
wire   [9:0] r_coeffs_addr_reg_764;
reg   [1:0] tmp_53_reg_770;
wire    ap_CS_fsm_state4;
wire   [1:0] fold2_i_cast_fu_349_p2;
reg   [1:0] fold2_i_cast_reg_775;
wire   [9:0] i_9_fu_436_p2;
reg   [9:0] i_9_reg_783;
wire    ap_CS_fsm_state6;
reg   [9:0] r_coeffs_addr_9_reg_788;
wire   [0:0] exitcond_fu_430_p2;
reg   [3:0] tmp_123_i8_cast_reg_794;
wire    ap_CS_fsm_state7;
wire   [1:0] fold1_i9_cast_fu_631_p2;
reg   [1:0] fold1_i9_cast_reg_799;
reg   [1:0] tmp_38_reg_805;
reg   [9:0] i_reg_125;
wire    ap_CS_fsm_state3;
reg   [9:0] i_1_reg_136;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state8;
wire   [63:0] tmp_58_fu_442_p1;
wire   [15:0] tmp_57_fu_188_p2;
wire   [15:0] tmp_130_i_fu_423_p2;
wire   [3:0] tmp_54_fu_164_p4;
wire   [15:0] tmp_55_fu_174_p3;
wire   [15:0] tmp_56_fu_182_p2;
wire   [7:0] tmp_50_fu_199_p4;
wire   [7:0] tmp_59_fu_195_p1;
wire   [8:0] tmp_i_cast_32_fu_213_p1;
wire   [8:0] tmp_i_cast_fu_209_p1;
wire   [8:0] r_fu_223_p2;
wire   [4:0] tmp_52_fu_229_p4;
wire   [3:0] tmp_60_fu_253_p1;
wire   [3:0] tmp_fu_243_p4;
wire   [3:0] fold_i_cast_fu_271_p2;
wire   [5:0] tmp_122_i_cast_fu_277_p1;
wire   [5:0] tmp_121_i_cast_fu_239_p1;
wire   [5:0] r_4_fu_281_p2;
wire   [1:0] tmp_61_fu_257_p1;
wire   [1:0] tmp_19_fu_261_p4;
wire   [7:0] tmp_51_fu_217_p2;
wire   [1:0] tmp_21_fu_303_p4;
wire   [1:0] tmp_20_fu_297_p2;
wire   [1:0] fold1_i_cast_fu_313_p2;
wire   [3:0] tmp_124_i_cast_fu_319_p1;
wire   [3:0] tmp_123_i_cast_fu_287_p4;
wire   [3:0] r_5_fu_323_p2;
wire   [1:0] tmp_22_fu_339_p4;
wire   [2:0] tmp_126_i_cast_fu_358_p1;
wire   [2:0] tmp_125_i_cast_fu_355_p1;
wire   [2:0] r_6_fu_361_p2;
wire   [2:0] t_fu_367_p2;
wire   [0:0] tmp_62_fu_373_p3;
wire   [2:0] c_cast_fu_381_p3;
wire   [2:0] tmp_127_i_fu_389_p2;
wire   [0:0] not_tmp_17_i_fu_399_p2;
wire   [2:0] tmp_128_i_cast_cast_fu_405_p3;
wire   [2:0] tmp_129_i_fu_413_p2;
wire   [15:0] tmp_127_i_cast_fu_395_p1;
wire  signed [15:0] tmp_129_i_cast_fu_419_p1;
wire   [6:0] tmp_68_fu_453_p1;
wire   [2:0] tmp_71_fu_473_p1;
wire   [0:0] tmp_72_fu_485_p1;
wire   [15:0] tmp_63_fu_447_p2;
wire   [7:0] tmp_26_fu_457_p3;
wire   [7:0] tmp_69_fu_465_p1;
wire   [15:0] a_assign_1_fu_501_p2;
wire   [7:0] tmp_64_fu_513_p4;
wire   [7:0] a_assign_1_cast_fu_507_p2;
wire   [8:0] tmp_i1_cast_fu_523_p1;
wire   [8:0] tmp_i2_cast_fu_527_p1;
wire   [8:0] r_7_fu_537_p2;
wire   [4:0] tmp_66_fu_543_p4;
wire   [3:0] tmp_29_fu_477_p3;
wire   [3:0] tmp_70_fu_469_p1;
wire   [1:0] tmp_30_fu_489_p3;
wire   [1:0] tmp_73_fu_497_p1;
wire   [3:0] tmp_32_fu_557_p2;
wire   [3:0] tmp_33_fu_563_p4;
wire   [3:0] fold_i5_cast_fu_589_p2;
wire   [5:0] tmp_121_i4_cast_fu_553_p1;
wire   [5:0] tmp_122_i6_cast_fu_595_p1;
wire   [5:0] r_8_fu_599_p2;
wire   [1:0] tmp_35_fu_583_p2;
wire   [1:0] tmp_34_fu_573_p4;
wire   [7:0] tmp_65_fu_531_p2;
wire   [1:0] tmp_36_fu_615_p2;
wire   [1:0] tmp_37_fu_621_p4;
wire   [3:0] tmp_124_i1_cast_fu_647_p1;
wire   [3:0] r_9_fu_650_p2;
wire   [1:0] tmp_67_fu_655_p4;
wire   [1:0] fold2_i1_cast_fu_669_p2;
wire   [2:0] tmp_125_i1_cast_fu_665_p1;
wire   [2:0] tmp_126_i1_cast_fu_673_p1;
wire   [2:0] r_10_fu_677_p2;
wire   [2:0] t_1_fu_683_p2;
wire   [0:0] tmp_74_fu_689_p3;
wire   [2:0] c_5_cast_fu_697_p3;
wire   [2:0] tmp_127_i1_fu_705_p2;
wire   [0:0] not_tmp_17_i1_fu_715_p2;
wire   [2:0] tmp_128_i1_cast_cast_fu_721_p3;
wire   [2:0] tmp_129_i1_fu_729_p2;
wire   [15:0] tmp_127_i1_cast_fu_711_p1;
wire  signed [15:0] tmp_129_i1_cast_fu_735_p1;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_1_reg_136 <= i_9_reg_783;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_reg_136 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_125 <= i_8_reg_749;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_125 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        fold1_i9_cast_reg_799 <= fold1_i9_cast_fu_631_p2;
        tmp_123_i8_cast_reg_794 <= {{r_8_fu_599_p2[5:2]}};
        tmp_38_reg_805 <= {{r_8_fu_599_p2[3:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fold2_i_cast_reg_775 <= fold2_i_cast_fu_349_p2;
        tmp_53_reg_770 <= {{r_5_fu_323_p2[3:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_8_reg_749 <= i_8_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_9_reg_783 <= i_9_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_430_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        r_coeffs_addr_9_reg_788 <= tmp_58_fu_442_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_s_reg_754[9 : 0] <= tmp_s_fu_159_p1[9 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_coeffs_ce0 = 1'b1;
    end else begin
        a_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_fu_430_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_430_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_address0 = tmp_58_fu_442_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_coeffs_address0 = r_coeffs_addr_reg_764;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        r_coeffs_address0 = tmp_s_reg_754;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        r_coeffs_address0 = 64'd820;
    end else begin
        r_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        r_coeffs_address1 = r_coeffs_addr_9_reg_788;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_address1 = 64'd820;
    end else begin
        r_coeffs_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        r_coeffs_ce0 = 1'b1;
    end else begin
        r_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8))) begin
        r_coeffs_ce1 = 1'b1;
    end else begin
        r_coeffs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        r_coeffs_d0 = tmp_130_i_fu_423_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        r_coeffs_d0 = tmp_57_fu_188_p2;
    end else begin
        r_coeffs_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        r_coeffs_we0 = 1'b1;
    end else begin
        r_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        r_coeffs_we1 = 1'b1;
    end else begin
        r_coeffs_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond_fu_430_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_assign_1_cast_fu_507_p2 = (tmp_26_fu_457_p3 + tmp_69_fu_465_p1);

assign a_assign_1_fu_501_p2 = (r_coeffs_q0 + tmp_63_fu_447_p2);

assign a_coeffs_address0 = tmp_s_fu_159_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign c_5_cast_fu_697_p3 = ((tmp_74_fu_689_p3[0:0] === 1'b1) ? 3'd7 : 3'd0);

assign c_cast_fu_381_p3 = ((tmp_62_fu_373_p3[0:0] === 1'b1) ? 3'd7 : 3'd0);

assign exitcond1_fu_147_p2 = ((i_reg_125 == 10'd821) ? 1'b1 : 1'b0);

assign exitcond_fu_430_p2 = ((i_1_reg_136 == 10'd821) ? 1'b1 : 1'b0);

assign fold1_i9_cast_fu_631_p2 = (tmp_36_fu_615_p2 + tmp_37_fu_621_p4);

assign fold1_i_cast_fu_313_p2 = (tmp_21_fu_303_p4 + tmp_20_fu_297_p2);

assign fold2_i1_cast_fu_669_p2 = (tmp_38_reg_805 + fold1_i9_cast_reg_799);

assign fold2_i_cast_fu_349_p2 = (fold1_i_cast_fu_313_p2 + tmp_22_fu_339_p4);

assign fold_i5_cast_fu_589_p2 = (tmp_32_fu_557_p2 + tmp_33_fu_563_p4);

assign fold_i_cast_fu_271_p2 = (tmp_60_fu_253_p1 + tmp_fu_243_p4);

assign i_8_fu_153_p2 = (i_reg_125 + 10'd1);

assign i_9_fu_436_p2 = (i_1_reg_136 + 10'd1);

assign not_tmp_17_i1_fu_715_p2 = (tmp_74_fu_689_p3 ^ 1'd1);

assign not_tmp_17_i_fu_399_p2 = (tmp_62_fu_373_p3 ^ 1'd1);

assign r_10_fu_677_p2 = (tmp_125_i1_cast_fu_665_p1 + tmp_126_i1_cast_fu_673_p1);

assign r_4_fu_281_p2 = (tmp_122_i_cast_fu_277_p1 + tmp_121_i_cast_fu_239_p1);

assign r_5_fu_323_p2 = (tmp_124_i_cast_fu_319_p1 + tmp_123_i_cast_fu_287_p4);

assign r_6_fu_361_p2 = (tmp_126_i_cast_fu_358_p1 + tmp_125_i_cast_fu_355_p1);

assign r_7_fu_537_p2 = (tmp_i1_cast_fu_523_p1 + tmp_i2_cast_fu_527_p1);

assign r_8_fu_599_p2 = (tmp_121_i4_cast_fu_553_p1 + tmp_122_i6_cast_fu_595_p1);

assign r_9_fu_650_p2 = (tmp_123_i8_cast_reg_794 + tmp_124_i1_cast_fu_647_p1);

assign r_coeffs_addr_reg_764 = 64'd820;

assign r_coeffs_d1 = (tmp_129_i1_cast_fu_735_p1 ^ tmp_127_i1_cast_fu_711_p1);

assign r_fu_223_p2 = (tmp_i_cast_32_fu_213_p1 + tmp_i_cast_fu_209_p1);

assign t_1_fu_683_p2 = ($signed(3'd5) + $signed(r_10_fu_677_p2));

assign t_fu_367_p2 = ($signed(3'd5) + $signed(r_6_fu_361_p2));

assign tmp_121_i4_cast_fu_553_p1 = tmp_66_fu_543_p4;

assign tmp_121_i_cast_fu_239_p1 = tmp_52_fu_229_p4;

assign tmp_122_i6_cast_fu_595_p1 = fold_i5_cast_fu_589_p2;

assign tmp_122_i_cast_fu_277_p1 = fold_i_cast_fu_271_p2;

assign tmp_123_i_cast_fu_287_p4 = {{r_4_fu_281_p2[5:2]}};

assign tmp_124_i1_cast_fu_647_p1 = fold1_i9_cast_reg_799;

assign tmp_124_i_cast_fu_319_p1 = fold1_i_cast_fu_313_p2;

assign tmp_125_i1_cast_fu_665_p1 = tmp_67_fu_655_p4;

assign tmp_125_i_cast_fu_355_p1 = tmp_53_reg_770;

assign tmp_126_i1_cast_fu_673_p1 = fold2_i1_cast_fu_669_p2;

assign tmp_126_i_cast_fu_358_p1 = fold2_i_cast_reg_775;

assign tmp_127_i1_cast_fu_711_p1 = tmp_127_i1_fu_705_p2;

assign tmp_127_i1_fu_705_p2 = (r_10_fu_677_p2 & c_5_cast_fu_697_p3);

assign tmp_127_i_cast_fu_395_p1 = tmp_127_i_fu_389_p2;

assign tmp_127_i_fu_389_p2 = (r_6_fu_361_p2 & c_cast_fu_381_p3);

assign tmp_128_i1_cast_cast_fu_721_p3 = ((not_tmp_17_i1_fu_715_p2[0:0] === 1'b1) ? 3'd7 : 3'd0);

assign tmp_128_i_cast_cast_fu_405_p3 = ((not_tmp_17_i_fu_399_p2[0:0] === 1'b1) ? 3'd7 : 3'd0);

assign tmp_129_i1_cast_fu_735_p1 = $signed(tmp_129_i1_fu_729_p2);

assign tmp_129_i1_fu_729_p2 = (tmp_128_i1_cast_cast_fu_721_p3 & t_1_fu_683_p2);

assign tmp_129_i_cast_fu_419_p1 = $signed(tmp_129_i_fu_413_p2);

assign tmp_129_i_fu_413_p2 = (tmp_128_i_cast_cast_fu_405_p3 & t_fu_367_p2);

assign tmp_130_i_fu_423_p2 = (tmp_129_i_cast_fu_419_p1 ^ tmp_127_i_cast_fu_395_p1);

assign tmp_19_fu_261_p4 = {{r_coeffs_q0[9:8]}};

assign tmp_20_fu_297_p2 = (tmp_61_fu_257_p1 + tmp_19_fu_261_p4);

assign tmp_21_fu_303_p4 = {{tmp_51_fu_217_p2[5:4]}};

assign tmp_22_fu_339_p4 = {{r_4_fu_281_p2[3:2]}};

assign tmp_26_fu_457_p3 = {{tmp_68_fu_453_p1}, {1'd0}};

assign tmp_29_fu_477_p3 = {{tmp_71_fu_473_p1}, {1'd0}};

assign tmp_30_fu_489_p3 = {{tmp_72_fu_485_p1}, {1'd0}};

assign tmp_32_fu_557_p2 = (tmp_29_fu_477_p3 + tmp_70_fu_469_p1);

assign tmp_33_fu_563_p4 = {{a_assign_1_fu_501_p2[11:8]}};

assign tmp_34_fu_573_p4 = {{a_assign_1_fu_501_p2[9:8]}};

assign tmp_35_fu_583_p2 = (tmp_30_fu_489_p3 + tmp_73_fu_497_p1);

assign tmp_36_fu_615_p2 = (tmp_35_fu_583_p2 + tmp_34_fu_573_p4);

assign tmp_37_fu_621_p4 = {{tmp_65_fu_531_p2[5:4]}};

assign tmp_50_fu_199_p4 = {{r_coeffs_q0[15:8]}};

assign tmp_51_fu_217_p2 = (tmp_50_fu_199_p4 + tmp_59_fu_195_p1);

assign tmp_52_fu_229_p4 = {{r_fu_223_p2[8:4]}};

assign tmp_54_fu_164_p4 = {{a_coeffs_q0[14:11]}};

assign tmp_55_fu_174_p3 = {{tmp_54_fu_164_p4}, {12'd0}};

assign tmp_56_fu_182_p2 = (tmp_55_fu_174_p3 ^ 16'd12288);

assign tmp_57_fu_188_p2 = (tmp_56_fu_182_p2 + a_coeffs_q0);

assign tmp_58_fu_442_p1 = i_1_reg_136;

assign tmp_59_fu_195_p1 = r_coeffs_q0[7:0];

assign tmp_60_fu_253_p1 = r_coeffs_q0[3:0];

assign tmp_61_fu_257_p1 = r_coeffs_q0[1:0];

assign tmp_62_fu_373_p3 = t_fu_367_p2[32'd2];

assign tmp_63_fu_447_p2 = r_coeffs_q1 << 16'd1;

assign tmp_64_fu_513_p4 = {{a_assign_1_fu_501_p2[15:8]}};

assign tmp_65_fu_531_p2 = (a_assign_1_cast_fu_507_p2 + tmp_64_fu_513_p4);

assign tmp_66_fu_543_p4 = {{r_7_fu_537_p2[8:4]}};

assign tmp_67_fu_655_p4 = {{r_9_fu_650_p2[3:2]}};

assign tmp_68_fu_453_p1 = r_coeffs_q1[6:0];

assign tmp_69_fu_465_p1 = r_coeffs_q0[7:0];

assign tmp_70_fu_469_p1 = r_coeffs_q0[3:0];

assign tmp_71_fu_473_p1 = r_coeffs_q1[2:0];

assign tmp_72_fu_485_p1 = r_coeffs_q1[0:0];

assign tmp_73_fu_497_p1 = r_coeffs_q0[1:0];

assign tmp_74_fu_689_p3 = t_1_fu_683_p2[32'd2];

assign tmp_fu_243_p4 = {{r_coeffs_q0[11:8]}};

assign tmp_i1_cast_fu_523_p1 = tmp_64_fu_513_p4;

assign tmp_i2_cast_fu_527_p1 = a_assign_1_cast_fu_507_p2;

assign tmp_i_cast_32_fu_213_p1 = tmp_59_fu_195_p1;

assign tmp_i_cast_fu_209_p1 = tmp_50_fu_199_p4;

assign tmp_s_fu_159_p1 = i_reg_125;

always @ (posedge ap_clk) begin
    tmp_s_reg_754[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //poly_Rq_to_S3
