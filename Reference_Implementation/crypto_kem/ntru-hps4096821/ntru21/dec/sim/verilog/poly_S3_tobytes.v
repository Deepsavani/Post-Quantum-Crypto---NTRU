// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module poly_S3_tobytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        msg_address0,
        msg_ce0,
        msg_we0,
        msg_d0,
        msg_offset,
        a_coeffs_address0,
        a_coeffs_ce0,
        a_coeffs_q0,
        a_coeffs_address1,
        a_coeffs_ce1,
        a_coeffs_q1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] msg_address0;
output   msg_ce0;
output   msg_we0;
output  [7:0] msg_d0;
input  [8:0] msg_offset;
output  [9:0] a_coeffs_address0;
output   a_coeffs_ce0;
input  [15:0] a_coeffs_q0;
output  [9:0] a_coeffs_address1;
output   a_coeffs_ce1;
input  [15:0] a_coeffs_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg msg_ce0;
reg msg_we0;
reg[9:0] a_coeffs_address0;
reg a_coeffs_ce0;
reg[9:0] a_coeffs_address1;
reg a_coeffs_ce1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] i_4_fu_125_p2;
reg   [7:0] i_4_reg_304;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_fu_139_p2;
reg   [9:0] tmp_reg_309;
wire   [0:0] exitcond_fu_119_p2;
wire   [8:0] sum_fu_171_p2;
reg   [8:0] sum_reg_326;
wire   [7:0] c_1_fu_202_p2;
reg   [7:0] c_1_reg_331;
wire    ap_CS_fsm_state3;
wire   [7:0] c_2_fu_232_p2;
reg   [7:0] c_2_reg_342;
wire    ap_CS_fsm_state4;
wire   [7:0] c_3_fu_266_p2;
reg   [7:0] c_3_reg_358;
wire    ap_CS_fsm_state5;
wire   [7:0] tmp_21_fu_272_p1;
reg   [7:0] tmp_21_reg_364;
reg   [7:0] i_reg_104;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_1_fu_151_p1;
wire   [63:0] tmp_4_fu_162_p1;
wire   [63:0] tmp_8_fu_213_p1;
wire   [63:0] tmp_11_fu_243_p1;
wire   [63:0] tmp_14_fu_248_p1;
wire   [63:0] sum_cast_fu_292_p1;
wire   [9:0] p_shl5_fu_131_p3;
wire   [9:0] i_cast1_fu_115_p1;
wire   [9:0] tmp_s_fu_145_p2;
wire   [9:0] tmp_3_fu_156_p2;
wire   [8:0] tmp_17_cast_fu_167_p1;
wire   [5:0] tmp_9_fu_180_p1;
wire   [7:0] p_shl4_fu_184_p3;
wire   [7:0] c_fu_176_p1;
wire   [7:0] tmp_2_fu_192_p2;
wire   [7:0] tmp_13_fu_198_p1;
wire   [9:0] tmp_7_fu_208_p2;
wire   [7:0] tmp_16_fu_218_p2;
wire   [7:0] tmp_17_fu_228_p1;
wire   [7:0] tmp_6_fu_223_p2;
wire   [9:0] tmp_10_fu_238_p2;
wire   [7:0] tmp_18_fu_252_p2;
wire   [7:0] tmp_19_fu_262_p1;
wire   [7:0] tmp_5_fu_257_p2;
wire   [7:0] tmp_20_fu_276_p2;
wire   [7:0] tmp_12_fu_281_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_104 <= i_4_reg_304;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_104 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_1_reg_331 <= c_1_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_2_reg_342 <= c_2_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_3_reg_358 <= c_3_fu_266_p2;
        tmp_21_reg_364 <= tmp_21_fu_272_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_4_reg_304 <= i_4_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_119_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_reg_326 <= sum_fu_171_p2;
        tmp_reg_309 <= tmp_fu_139_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_coeffs_address0 = tmp_14_fu_248_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_coeffs_address0 = tmp_8_fu_213_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_coeffs_address0 = tmp_1_fu_151_p1;
    end else begin
        a_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_coeffs_address1 = tmp_11_fu_243_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_coeffs_address1 = tmp_4_fu_162_p1;
    end else begin
        a_coeffs_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        a_coeffs_ce0 = 1'b1;
    end else begin
        a_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        a_coeffs_ce1 = 1'b1;
    end else begin
        a_coeffs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        msg_ce0 = 1'b1;
    end else begin
        msg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        msg_we0 = 1'b1;
    end else begin
        msg_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign c_1_fu_202_p2 = (tmp_2_fu_192_p2 + tmp_13_fu_198_p1);

assign c_2_fu_232_p2 = (tmp_17_fu_228_p1 + tmp_6_fu_223_p2);

assign c_3_fu_266_p2 = (tmp_19_fu_262_p1 + tmp_5_fu_257_p2);

assign c_fu_176_p1 = a_coeffs_q0[7:0];

assign exitcond_fu_119_p2 = ((i_reg_104 == 8'd164) ? 1'b1 : 1'b0);

assign i_4_fu_125_p2 = (i_reg_104 + 8'd1);

assign i_cast1_fu_115_p1 = i_reg_104;

assign msg_address0 = sum_cast_fu_292_p1;

assign msg_d0 = (tmp_21_reg_364 + tmp_12_fu_281_p2);

assign p_shl4_fu_184_p3 = {{tmp_9_fu_180_p1}, {2'd0}};

assign p_shl5_fu_131_p3 = {{i_reg_104}, {2'd0}};

assign sum_cast_fu_292_p1 = sum_reg_326;

assign sum_fu_171_p2 = (msg_offset + tmp_17_cast_fu_167_p1);

assign tmp_10_fu_238_p2 = (10'd1 + tmp_reg_309);

assign tmp_11_fu_243_p1 = tmp_10_fu_238_p2;

assign tmp_12_fu_281_p2 = (tmp_20_fu_276_p2 - c_3_reg_358);

assign tmp_13_fu_198_p1 = a_coeffs_q1[7:0];

assign tmp_14_fu_248_p1 = tmp_reg_309;

assign tmp_16_fu_218_p2 = c_1_reg_331 << 8'd2;

assign tmp_17_cast_fu_167_p1 = i_reg_104;

assign tmp_17_fu_228_p1 = a_coeffs_q0[7:0];

assign tmp_18_fu_252_p2 = c_2_reg_342 << 8'd2;

assign tmp_19_fu_262_p1 = a_coeffs_q1[7:0];

assign tmp_1_fu_151_p1 = tmp_s_fu_145_p2;

assign tmp_20_fu_276_p2 = c_3_reg_358 << 8'd2;

assign tmp_21_fu_272_p1 = a_coeffs_q0[7:0];

assign tmp_2_fu_192_p2 = (p_shl4_fu_184_p3 - c_fu_176_p1);

assign tmp_3_fu_156_p2 = (10'd3 + tmp_fu_139_p2);

assign tmp_4_fu_162_p1 = tmp_3_fu_156_p2;

assign tmp_5_fu_257_p2 = (tmp_18_fu_252_p2 - c_2_reg_342);

assign tmp_6_fu_223_p2 = (tmp_16_fu_218_p2 - c_1_reg_331);

assign tmp_7_fu_208_p2 = (10'd2 + tmp_reg_309);

assign tmp_8_fu_213_p1 = tmp_7_fu_208_p2;

assign tmp_9_fu_180_p1 = a_coeffs_q0[5:0];

assign tmp_fu_139_p2 = (p_shl5_fu_131_p3 + i_cast1_fu_115_p1);

assign tmp_s_fu_145_p2 = (10'd4 + tmp_fu_139_p2);

endmodule //poly_S3_tobytes
