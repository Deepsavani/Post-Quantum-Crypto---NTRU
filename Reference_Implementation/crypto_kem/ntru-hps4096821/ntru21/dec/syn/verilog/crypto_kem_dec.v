// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="crypto_kem_dec,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tfbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.122000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=26,HLS_SYN_DSP=4,HLS_SYN_FF=14385,HLS_SYN_LUT=75802,HLS_VERSION=2018_3}" *)

module crypto_kem_dec (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        k_address0,
        k_ce0,
        k_we0,
        k_d0,
        k_q0,
        c_address0,
        c_ce0,
        c_q0,
        c_address1,
        c_ce1,
        c_q1,
        sk_address0,
        sk_ce0,
        sk_q0,
        sk_address1,
        sk_ce1,
        sk_q1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] k_address0;
output   k_ce0;
output   k_we0;
output  [7:0] k_d0;
input  [7:0] k_q0;
output  [10:0] c_address0;
output   c_ce0;
input  [7:0] c_q0;
output  [10:0] c_address1;
output   c_ce1;
input  [7:0] c_q1;
output  [10:0] sk_address0;
output   sk_ce0;
input  [7:0] sk_q0;
output  [10:0] sk_address1;
output   sk_ce1;
input  [7:0] sk_q1;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] k_address0;
reg k_ce0;
reg k_we0;
reg[7:0] k_d0;
reg[10:0] c_address0;
reg c_ce0;
reg c_ce1;
reg[10:0] sk_address0;
reg sk_ce0;
reg sk_ce1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] grp_owcpa_dec_fu_184_ap_return;
reg   [0:0] fail_reg_301;
wire    ap_CS_fsm_state2;
wire    grp_owcpa_dec_fu_184_ap_ready;
wire    grp_owcpa_dec_fu_184_ap_done;
wire   [5:0] i_33_fu_204_p2;
reg   [5:0] i_33_reg_309;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond1_fu_198_p2;
wire   [10:0] i_34_fu_236_p2;
reg   [10:0] i_34_reg_322;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond_fu_230_p2;
wire   [7:0] b_assign_fu_258_p3;
reg   [7:0] b_assign_reg_332;
wire    ap_CS_fsm_state9;
wire    grp_sha3_256_fu_167_ap_ready;
wire    grp_sha3_256_fu_167_ap_done;
wire   [5:0] i_35_fu_277_p2;
reg   [5:0] i_35_reg_340;
wire    ap_CS_fsm_state10;
wire   [0:0] exitcond_i_fu_271_p2;
reg   [4:0] k_addr_reg_350;
reg   [8:0] rm_address0;
reg    rm_ce0;
reg    rm_we0;
reg   [7:0] rm_d0;
wire   [7:0] rm_q0;
reg   [10:0] buf_address0;
reg    buf_ce0;
reg    buf_we0;
reg   [7:0] buf_d0;
wire   [7:0] buf_q0;
wire    grp_sha3_256_fu_167_ap_start;
wire    grp_sha3_256_fu_167_ap_idle;
wire   [8:0] grp_sha3_256_fu_167_output_r_address0;
wire    grp_sha3_256_fu_167_output_r_ce0;
wire    grp_sha3_256_fu_167_output_r_we0;
wire   [7:0] grp_sha3_256_fu_167_output_r_d0;
wire   [10:0] grp_sha3_256_fu_167_input_r_address0;
wire    grp_sha3_256_fu_167_input_r_ce0;
wire    grp_sha3_256_1_fu_175_ap_start;
wire    grp_sha3_256_1_fu_175_ap_done;
wire    grp_sha3_256_1_fu_175_ap_idle;
wire    grp_sha3_256_1_fu_175_ap_ready;
wire   [4:0] grp_sha3_256_1_fu_175_output_r_address0;
wire    grp_sha3_256_1_fu_175_output_r_ce0;
wire    grp_sha3_256_1_fu_175_output_r_we0;
wire   [7:0] grp_sha3_256_1_fu_175_output_r_d0;
wire   [8:0] grp_sha3_256_1_fu_175_input_r_address0;
wire    grp_sha3_256_1_fu_175_input_r_ce0;
wire    grp_owcpa_dec_fu_184_ap_start;
wire    grp_owcpa_dec_fu_184_ap_idle;
wire   [8:0] grp_owcpa_dec_fu_184_rm_address0;
wire    grp_owcpa_dec_fu_184_rm_ce0;
wire    grp_owcpa_dec_fu_184_rm_we0;
wire   [7:0] grp_owcpa_dec_fu_184_rm_d0;
wire   [10:0] grp_owcpa_dec_fu_184_ciphertext_address0;
wire    grp_owcpa_dec_fu_184_ciphertext_ce0;
wire   [10:0] grp_owcpa_dec_fu_184_ciphertext_address1;
wire    grp_owcpa_dec_fu_184_ciphertext_ce1;
wire   [10:0] grp_owcpa_dec_fu_184_secretkey_address0;
wire    grp_owcpa_dec_fu_184_secretkey_ce0;
wire   [10:0] grp_owcpa_dec_fu_184_secretkey_address1;
wire    grp_owcpa_dec_fu_184_secretkey_ce1;
reg   [5:0] i_reg_132;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
reg   [10:0] i_1_reg_144;
wire    ap_CS_fsm_state8;
reg   [5:0] i_i_reg_156;
wire    ap_CS_fsm_state11;
reg    grp_sha3_256_fu_167_ap_start_reg;
reg    grp_sha3_256_1_fu_175_ap_start_reg;
wire    ap_CS_fsm_state3;
reg    grp_owcpa_dec_fu_184_ap_start_reg;
wire   [63:0] tmp_s_fu_220_p1;
wire   [63:0] tmp_94_fu_225_p1;
wire   [63:0] tmp_95_fu_242_p1;
wire   [63:0] cmp_0_sum_cast_fu_253_p1;
wire   [63:0] i_i_cast1_fu_265_p1;
wire   [7:0] tmp_150_i_fu_294_p2;
wire   [9:0] i_cast4_cast_fu_194_p1;
wire   [9:0] tmp_fu_210_p2;
wire  signed [10:0] tmp_cast5_fu_216_p1;
wire   [10:0] cmp_0_sum_fu_247_p2;
wire   [7:0] tmp_i_fu_283_p2;
wire   [7:0] tmp_i_66_fu_289_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_sha3_256_fu_167_ap_start_reg = 1'b0;
#0 grp_sha3_256_1_fu_175_ap_start_reg = 1'b0;
#0 grp_owcpa_dec_fu_184_ap_start_reg = 1'b0;
end

crypto_kem_dec_rm #(
    .DataWidth( 8 ),
    .AddressRange( 328 ),
    .AddressWidth( 9 ))
rm_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rm_address0),
    .ce0(rm_ce0),
    .we0(rm_we0),
    .d0(rm_d0),
    .q0(rm_q0)
);

crypto_kem_dec_buf #(
    .DataWidth( 8 ),
    .AddressRange( 1262 ),
    .AddressWidth( 11 ))
buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_address0),
    .ce0(buf_ce0),
    .we0(buf_we0),
    .d0(buf_d0),
    .q0(buf_q0)
);

sha3_256 grp_sha3_256_fu_167(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sha3_256_fu_167_ap_start),
    .ap_done(grp_sha3_256_fu_167_ap_done),
    .ap_idle(grp_sha3_256_fu_167_ap_idle),
    .ap_ready(grp_sha3_256_fu_167_ap_ready),
    .output_r_address0(grp_sha3_256_fu_167_output_r_address0),
    .output_r_ce0(grp_sha3_256_fu_167_output_r_ce0),
    .output_r_we0(grp_sha3_256_fu_167_output_r_we0),
    .output_r_d0(grp_sha3_256_fu_167_output_r_d0),
    .input_r_address0(grp_sha3_256_fu_167_input_r_address0),
    .input_r_ce0(grp_sha3_256_fu_167_input_r_ce0),
    .input_r_q0(buf_q0)
);

sha3_256_1 grp_sha3_256_1_fu_175(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sha3_256_1_fu_175_ap_start),
    .ap_done(grp_sha3_256_1_fu_175_ap_done),
    .ap_idle(grp_sha3_256_1_fu_175_ap_idle),
    .ap_ready(grp_sha3_256_1_fu_175_ap_ready),
    .output_r_address0(grp_sha3_256_1_fu_175_output_r_address0),
    .output_r_ce0(grp_sha3_256_1_fu_175_output_r_ce0),
    .output_r_we0(grp_sha3_256_1_fu_175_output_r_we0),
    .output_r_d0(grp_sha3_256_1_fu_175_output_r_d0),
    .input_r_address0(grp_sha3_256_1_fu_175_input_r_address0),
    .input_r_ce0(grp_sha3_256_1_fu_175_input_r_ce0),
    .input_r_q0(rm_q0)
);

owcpa_dec grp_owcpa_dec_fu_184(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_owcpa_dec_fu_184_ap_start),
    .ap_done(grp_owcpa_dec_fu_184_ap_done),
    .ap_idle(grp_owcpa_dec_fu_184_ap_idle),
    .ap_ready(grp_owcpa_dec_fu_184_ap_ready),
    .rm_address0(grp_owcpa_dec_fu_184_rm_address0),
    .rm_ce0(grp_owcpa_dec_fu_184_rm_ce0),
    .rm_we0(grp_owcpa_dec_fu_184_rm_we0),
    .rm_d0(grp_owcpa_dec_fu_184_rm_d0),
    .ciphertext_address0(grp_owcpa_dec_fu_184_ciphertext_address0),
    .ciphertext_ce0(grp_owcpa_dec_fu_184_ciphertext_ce0),
    .ciphertext_q0(c_q0),
    .ciphertext_address1(grp_owcpa_dec_fu_184_ciphertext_address1),
    .ciphertext_ce1(grp_owcpa_dec_fu_184_ciphertext_ce1),
    .ciphertext_q1(c_q1),
    .secretkey_address0(grp_owcpa_dec_fu_184_secretkey_address0),
    .secretkey_ce0(grp_owcpa_dec_fu_184_secretkey_ce0),
    .secretkey_q0(sk_q0),
    .secretkey_address1(grp_owcpa_dec_fu_184_secretkey_address1),
    .secretkey_ce1(grp_owcpa_dec_fu_184_secretkey_ce1),
    .secretkey_q1(sk_q1),
    .ap_return(grp_owcpa_dec_fu_184_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_owcpa_dec_fu_184_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_owcpa_dec_fu_184_ap_start_reg <= 1'b1;
        end else if ((grp_owcpa_dec_fu_184_ap_ready == 1'b1)) begin
            grp_owcpa_dec_fu_184_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sha3_256_1_fu_175_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_sha3_256_1_fu_175_ap_start_reg <= 1'b1;
        end else if ((grp_sha3_256_1_fu_175_ap_ready == 1'b1)) begin
            grp_sha3_256_1_fu_175_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sha3_256_fu_167_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            grp_sha3_256_fu_167_ap_start_reg <= 1'b1;
        end else if ((grp_sha3_256_fu_167_ap_ready == 1'b1)) begin
            grp_sha3_256_fu_167_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_1_reg_144 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_1_reg_144 <= i_34_reg_322;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_i_reg_156 <= i_35_reg_340;
    end else if (((1'b1 == ap_CS_fsm_state9) & (grp_sha3_256_fu_167_ap_done == 1'b1))) begin
        i_i_reg_156 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_132 <= i_33_reg_309;
    end else if (((1'b1 == ap_CS_fsm_state4) & (grp_sha3_256_1_fu_175_ap_done == 1'b1))) begin
        i_reg_132 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (grp_sha3_256_fu_167_ap_done == 1'b1))) begin
        b_assign_reg_332 <= b_assign_fu_258_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_owcpa_dec_fu_184_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        fail_reg_301 <= grp_owcpa_dec_fu_184_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_33_reg_309 <= i_33_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_34_reg_322 <= i_34_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_35_reg_340 <= i_35_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        k_addr_reg_350 <= i_i_cast1_fu_265_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_i_fu_271_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_i_fu_271_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buf_address0 = cmp_0_sum_cast_fu_253_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buf_address0 = tmp_94_fu_225_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        buf_address0 = grp_sha3_256_fu_167_input_r_address0;
    end else begin
        buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        buf_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        buf_ce0 = grp_sha3_256_fu_167_input_r_ce0;
    end else begin
        buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buf_d0 = c_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buf_d0 = sk_q0;
    end else begin
        buf_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        buf_we0 = 1'b1;
    end else begin
        buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_address0 = tmp_95_fu_242_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c_address0 = grp_owcpa_dec_fu_184_ciphertext_address0;
    end else begin
        c_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c_ce0 = grp_owcpa_dec_fu_184_ciphertext_ce0;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_ce1 = grp_owcpa_dec_fu_184_ciphertext_ce1;
    end else begin
        c_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        k_address0 = k_addr_reg_350;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        k_address0 = i_i_cast1_fu_265_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        k_address0 = grp_sha3_256_1_fu_175_output_r_address0;
    end else begin
        k_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        k_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        k_ce0 = grp_sha3_256_1_fu_175_output_r_ce0;
    end else begin
        k_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        k_d0 = tmp_150_i_fu_294_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        k_d0 = grp_sha3_256_1_fu_175_output_r_d0;
    end else begin
        k_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        k_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        k_we0 = grp_sha3_256_1_fu_175_output_r_we0;
    end else begin
        k_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        rm_address0 = i_i_cast1_fu_265_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rm_address0 = grp_owcpa_dec_fu_184_rm_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rm_address0 = grp_sha3_256_1_fu_175_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        rm_address0 = grp_sha3_256_fu_167_output_r_address0;
    end else begin
        rm_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        rm_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rm_ce0 = grp_owcpa_dec_fu_184_rm_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rm_ce0 = grp_sha3_256_1_fu_175_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        rm_ce0 = grp_sha3_256_fu_167_output_r_ce0;
    end else begin
        rm_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        rm_d0 = grp_owcpa_dec_fu_184_rm_d0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        rm_d0 = grp_sha3_256_fu_167_output_r_d0;
    end else begin
        rm_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        rm_we0 = grp_owcpa_dec_fu_184_rm_we0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        rm_we0 = grp_sha3_256_fu_167_output_r_we0;
    end else begin
        rm_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sk_address0 = tmp_s_fu_220_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sk_address0 = grp_owcpa_dec_fu_184_secretkey_address0;
    end else begin
        sk_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sk_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sk_ce0 = grp_owcpa_dec_fu_184_secretkey_ce0;
    end else begin
        sk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sk_ce1 = grp_owcpa_dec_fu_184_secretkey_ce1;
    end else begin
        sk_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_owcpa_dec_fu_184_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_sha3_256_1_fu_175_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond1_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (grp_sha3_256_fu_167_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (exitcond_i_fu_271_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = 32'd0;

assign b_assign_fu_258_p3 = ((fail_reg_301[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign c_address1 = grp_owcpa_dec_fu_184_ciphertext_address1;

assign cmp_0_sum_cast_fu_253_p1 = cmp_0_sum_fu_247_p2;

assign cmp_0_sum_fu_247_p2 = (i_1_reg_144 + 11'd32);

assign exitcond1_fu_198_p2 = ((i_reg_132 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond_fu_230_p2 = ((i_1_reg_144 == 11'd1230) ? 1'b1 : 1'b0);

assign exitcond_i_fu_271_p2 = ((i_i_reg_156 == 6'd32) ? 1'b1 : 1'b0);

assign grp_owcpa_dec_fu_184_ap_start = grp_owcpa_dec_fu_184_ap_start_reg;

assign grp_sha3_256_1_fu_175_ap_start = grp_sha3_256_1_fu_175_ap_start_reg;

assign grp_sha3_256_fu_167_ap_start = grp_sha3_256_fu_167_ap_start_reg;

assign i_33_fu_204_p2 = (i_reg_132 + 6'd1);

assign i_34_fu_236_p2 = (i_1_reg_144 + 11'd1);

assign i_35_fu_277_p2 = (i_i_reg_156 + 6'd1);

assign i_cast4_cast_fu_194_p1 = i_reg_132;

assign i_i_cast1_fu_265_p1 = i_i_reg_156;

assign sk_address1 = grp_owcpa_dec_fu_184_secretkey_address1;

assign tmp_150_i_fu_294_p2 = (tmp_i_66_fu_289_p2 ^ k_q0);

assign tmp_94_fu_225_p1 = i_reg_132;

assign tmp_95_fu_242_p1 = i_1_reg_144;

assign tmp_cast5_fu_216_p1 = $signed(tmp_fu_210_p2);

assign tmp_fu_210_p2 = ($signed(i_cast4_cast_fu_194_p1) + $signed(10'd534));

assign tmp_i_66_fu_289_p2 = (tmp_i_fu_283_p2 & b_assign_reg_332);

assign tmp_i_fu_283_p2 = (rm_q0 ^ k_q0);

assign tmp_s_fu_220_p1 = $unsigned(tmp_cast5_fu_216_p1);

endmodule //crypto_kem_dec
