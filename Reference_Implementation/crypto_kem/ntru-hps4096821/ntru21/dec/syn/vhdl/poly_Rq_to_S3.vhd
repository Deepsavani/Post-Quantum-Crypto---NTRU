-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity poly_Rq_to_S3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce0 : OUT STD_LOGIC;
    r_coeffs_we0 : OUT STD_LOGIC;
    r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce1 : OUT STD_LOGIC;
    r_coeffs_we1 : OUT STD_LOGIC;
    r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    r_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a_coeffs_ce0 : OUT STD_LOGIC;
    a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of poly_Rq_to_S3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_334 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001100110100";
    constant ap_const_lv10_335 : STD_LOGIC_VECTOR (9 downto 0) := "1100110101";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv16_3000 : STD_LOGIC_VECTOR (15 downto 0) := "0011000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_8_fu_153_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_8_reg_749 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_159_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_754 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_coeffs_addr_reg_764 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_53_reg_770 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal fold2_i_cast_fu_349_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal fold2_i_cast_reg_775 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_9_fu_436_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_9_reg_783 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal r_coeffs_addr_9_reg_788 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_123_i8_cast_reg_794 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal fold1_i9_cast_fu_631_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal fold1_i9_cast_reg_799 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_38_reg_805 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_125 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_reg_136 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_58_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_fu_188_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_130_i_fu_423_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_54_fu_164_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_55_fu_174_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_56_fu_182_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_50_fu_199_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_59_fu_195_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_cast_32_fu_213_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_cast_fu_209_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_fu_223_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_52_fu_229_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_60_fu_253_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_243_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal fold_i_cast_fu_271_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_122_i_cast_fu_277_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_121_i_cast_fu_239_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_4_fu_281_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_61_fu_257_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_19_fu_261_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_51_fu_217_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_303_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_20_fu_297_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal fold1_i_cast_fu_313_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_124_i_cast_fu_319_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_123_i_cast_fu_287_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_5_fu_323_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_22_fu_339_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_126_i_cast_fu_358_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_125_i_cast_fu_355_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_6_fu_361_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_fu_367_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_62_fu_373_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_cast_fu_381_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_127_i_fu_389_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal not_tmp_17_i_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_128_i_cast_cast_fu_405_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_129_i_fu_413_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_127_i_cast_fu_395_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_129_i_cast_fu_419_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_68_fu_453_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_71_fu_473_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_72_fu_485_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_447_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_fu_457_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_69_fu_465_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_assign_1_fu_501_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_64_fu_513_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_assign_1_cast_fu_507_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i1_cast_fu_523_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i2_cast_fu_527_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_7_fu_537_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_66_fu_543_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_29_fu_477_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_70_fu_469_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_30_fu_489_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_73_fu_497_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_32_fu_557_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_33_fu_563_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal fold_i5_cast_fu_589_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_121_i4_cast_fu_553_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_122_i6_cast_fu_595_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_8_fu_599_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_35_fu_583_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_34_fu_573_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_65_fu_531_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_fu_615_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_37_fu_621_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_124_i1_cast_fu_647_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_9_fu_650_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_67_fu_655_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal fold2_i1_cast_fu_669_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_125_i1_cast_fu_665_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_126_i1_cast_fu_673_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_10_fu_677_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_1_fu_683_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_74_fu_689_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_5_cast_fu_697_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_127_i1_fu_705_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal not_tmp_17_i1_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_128_i1_cast_cast_fu_721_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_129_i1_fu_729_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_127_i1_cast_fu_711_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_129_i1_cast_fu_735_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_1_reg_136 <= i_9_reg_783;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_1_reg_136 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_125 <= i_8_reg_749;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_125 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                fold1_i9_cast_reg_799 <= fold1_i9_cast_fu_631_p2;
                tmp_123_i8_cast_reg_794 <= r_8_fu_599_p2(5 downto 2);
                tmp_38_reg_805 <= r_8_fu_599_p2(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                fold2_i_cast_reg_775 <= fold2_i_cast_fu_349_p2;
                tmp_53_reg_770 <= r_5_fu_323_p2(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_8_reg_749 <= i_8_fu_153_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_9_reg_783 <= i_9_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_430_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                r_coeffs_addr_9_reg_788 <= tmp_58_fu_442_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_147_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_s_reg_754(9 downto 0) <= tmp_s_fu_159_p1(9 downto 0);
            end if;
        end if;
    end process;
    tmp_s_reg_754(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_147_p2, ap_CS_fsm_state6, exitcond_fu_430_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_147_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((exitcond_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    a_assign_1_cast_fu_507_p2 <= std_logic_vector(unsigned(tmp_26_fu_457_p3) + unsigned(tmp_69_fu_465_p1));
    a_assign_1_fu_501_p2 <= std_logic_vector(unsigned(r_coeffs_q0) + unsigned(tmp_63_fu_447_p2));
    a_coeffs_address0 <= tmp_s_fu_159_p1(10 - 1 downto 0);

    a_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_coeffs_ce0 <= ap_const_logic_1;
        else 
            a_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, exitcond_fu_430_p2)
    begin
        if ((((exitcond_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, exitcond_fu_430_p2)
    begin
        if (((exitcond_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_5_cast_fu_697_p3 <= 
        ap_const_lv3_7 when (tmp_74_fu_689_p3(0) = '1') else 
        ap_const_lv3_0;
    c_cast_fu_381_p3 <= 
        ap_const_lv3_7 when (tmp_62_fu_373_p3(0) = '1') else 
        ap_const_lv3_0;
    exitcond1_fu_147_p2 <= "1" when (i_reg_125 = ap_const_lv10_335) else "0";
    exitcond_fu_430_p2 <= "1" when (i_1_reg_136 = ap_const_lv10_335) else "0";
    fold1_i9_cast_fu_631_p2 <= std_logic_vector(unsigned(tmp_36_fu_615_p2) + unsigned(tmp_37_fu_621_p4));
    fold1_i_cast_fu_313_p2 <= std_logic_vector(unsigned(tmp_21_fu_303_p4) + unsigned(tmp_20_fu_297_p2));
    fold2_i1_cast_fu_669_p2 <= std_logic_vector(unsigned(tmp_38_reg_805) + unsigned(fold1_i9_cast_reg_799));
    fold2_i_cast_fu_349_p2 <= std_logic_vector(unsigned(fold1_i_cast_fu_313_p2) + unsigned(tmp_22_fu_339_p4));
    fold_i5_cast_fu_589_p2 <= std_logic_vector(unsigned(tmp_32_fu_557_p2) + unsigned(tmp_33_fu_563_p4));
    fold_i_cast_fu_271_p2 <= std_logic_vector(unsigned(tmp_60_fu_253_p1) + unsigned(tmp_fu_243_p4));
    i_8_fu_153_p2 <= std_logic_vector(unsigned(i_reg_125) + unsigned(ap_const_lv10_1));
    i_9_fu_436_p2 <= std_logic_vector(unsigned(i_1_reg_136) + unsigned(ap_const_lv10_1));
    not_tmp_17_i1_fu_715_p2 <= (tmp_74_fu_689_p3 xor ap_const_lv1_1);
    not_tmp_17_i_fu_399_p2 <= (tmp_62_fu_373_p3 xor ap_const_lv1_1);
    r_10_fu_677_p2 <= std_logic_vector(unsigned(tmp_125_i1_cast_fu_665_p1) + unsigned(tmp_126_i1_cast_fu_673_p1));
    r_4_fu_281_p2 <= std_logic_vector(unsigned(tmp_122_i_cast_fu_277_p1) + unsigned(tmp_121_i_cast_fu_239_p1));
    r_5_fu_323_p2 <= std_logic_vector(unsigned(tmp_124_i_cast_fu_319_p1) + unsigned(tmp_123_i_cast_fu_287_p4));
    r_6_fu_361_p2 <= std_logic_vector(unsigned(tmp_126_i_cast_fu_358_p1) + unsigned(tmp_125_i_cast_fu_355_p1));
    r_7_fu_537_p2 <= std_logic_vector(unsigned(tmp_i1_cast_fu_523_p1) + unsigned(tmp_i2_cast_fu_527_p1));
    r_8_fu_599_p2 <= std_logic_vector(unsigned(tmp_121_i4_cast_fu_553_p1) + unsigned(tmp_122_i6_cast_fu_595_p1));
    r_9_fu_650_p2 <= std_logic_vector(unsigned(tmp_123_i8_cast_reg_794) + unsigned(tmp_124_i1_cast_fu_647_p1));
    r_coeffs_addr_reg_764 <= ap_const_lv64_334(10 - 1 downto 0);

    r_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, tmp_s_reg_754, r_coeffs_addr_reg_764, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state5, tmp_58_fu_442_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_address0 <= tmp_58_fu_442_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_address0 <= r_coeffs_addr_reg_764;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_coeffs_address0 <= tmp_s_reg_754(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r_coeffs_address0 <= ap_const_lv64_334(10 - 1 downto 0);
        else 
            r_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_address1_assign_proc : process(ap_CS_fsm_state6, r_coeffs_addr_9_reg_788, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_coeffs_address1 <= r_coeffs_addr_9_reg_788;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_address1 <= ap_const_lv64_334(10 - 1 downto 0);
        else 
            r_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            r_coeffs_ce0 <= ap_const_logic_1;
        else 
            r_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            r_coeffs_ce1 <= ap_const_logic_1;
        else 
            r_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, tmp_57_fu_188_p2, tmp_130_i_fu_423_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_d0 <= tmp_130_i_fu_423_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_coeffs_d0 <= tmp_57_fu_188_p2;
        else 
            r_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    r_coeffs_d1 <= (tmp_129_i1_cast_fu_735_p1 xor tmp_127_i1_cast_fu_711_p1);

    r_coeffs_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            r_coeffs_we0 <= ap_const_logic_1;
        else 
            r_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_we1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_coeffs_we1 <= ap_const_logic_1;
        else 
            r_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_223_p2 <= std_logic_vector(unsigned(tmp_i_cast_32_fu_213_p1) + unsigned(tmp_i_cast_fu_209_p1));
    t_1_fu_683_p2 <= std_logic_vector(signed(ap_const_lv3_5) + signed(r_10_fu_677_p2));
    t_fu_367_p2 <= std_logic_vector(signed(ap_const_lv3_5) + signed(r_6_fu_361_p2));
    tmp_121_i4_cast_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_fu_543_p4),6));
    tmp_121_i_cast_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_229_p4),6));
    tmp_122_i6_cast_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold_i5_cast_fu_589_p2),6));
    tmp_122_i_cast_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold_i_cast_fu_271_p2),6));
    tmp_123_i_cast_fu_287_p4 <= r_4_fu_281_p2(5 downto 2);
    tmp_124_i1_cast_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold1_i9_cast_reg_799),4));
    tmp_124_i_cast_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold1_i_cast_fu_313_p2),4));
    tmp_125_i1_cast_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_fu_655_p4),3));
    tmp_125_i_cast_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_reg_770),3));
    tmp_126_i1_cast_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold2_i1_cast_fu_669_p2),3));
    tmp_126_i_cast_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold2_i_cast_reg_775),3));
    tmp_127_i1_cast_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_i1_fu_705_p2),16));
    tmp_127_i1_fu_705_p2 <= (r_10_fu_677_p2 and c_5_cast_fu_697_p3);
    tmp_127_i_cast_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_i_fu_389_p2),16));
    tmp_127_i_fu_389_p2 <= (r_6_fu_361_p2 and c_cast_fu_381_p3);
    tmp_128_i1_cast_cast_fu_721_p3 <= 
        ap_const_lv3_7 when (not_tmp_17_i1_fu_715_p2(0) = '1') else 
        ap_const_lv3_0;
    tmp_128_i_cast_cast_fu_405_p3 <= 
        ap_const_lv3_7 when (not_tmp_17_i_fu_399_p2(0) = '1') else 
        ap_const_lv3_0;
        tmp_129_i1_cast_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_129_i1_fu_729_p2),16));

    tmp_129_i1_fu_729_p2 <= (tmp_128_i1_cast_cast_fu_721_p3 and t_1_fu_683_p2);
        tmp_129_i_cast_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_129_i_fu_413_p2),16));

    tmp_129_i_fu_413_p2 <= (tmp_128_i_cast_cast_fu_405_p3 and t_fu_367_p2);
    tmp_130_i_fu_423_p2 <= (tmp_129_i_cast_fu_419_p1 xor tmp_127_i_cast_fu_395_p1);
    tmp_19_fu_261_p4 <= r_coeffs_q0(9 downto 8);
    tmp_20_fu_297_p2 <= std_logic_vector(unsigned(tmp_61_fu_257_p1) + unsigned(tmp_19_fu_261_p4));
    tmp_21_fu_303_p4 <= tmp_51_fu_217_p2(5 downto 4);
    tmp_22_fu_339_p4 <= r_4_fu_281_p2(3 downto 2);
    tmp_26_fu_457_p3 <= (tmp_68_fu_453_p1 & ap_const_lv1_0);
    tmp_29_fu_477_p3 <= (tmp_71_fu_473_p1 & ap_const_lv1_0);
    tmp_30_fu_489_p3 <= (tmp_72_fu_485_p1 & ap_const_lv1_0);
    tmp_32_fu_557_p2 <= std_logic_vector(unsigned(tmp_29_fu_477_p3) + unsigned(tmp_70_fu_469_p1));
    tmp_33_fu_563_p4 <= a_assign_1_fu_501_p2(11 downto 8);
    tmp_34_fu_573_p4 <= a_assign_1_fu_501_p2(9 downto 8);
    tmp_35_fu_583_p2 <= std_logic_vector(unsigned(tmp_30_fu_489_p3) + unsigned(tmp_73_fu_497_p1));
    tmp_36_fu_615_p2 <= std_logic_vector(unsigned(tmp_35_fu_583_p2) + unsigned(tmp_34_fu_573_p4));
    tmp_37_fu_621_p4 <= tmp_65_fu_531_p2(5 downto 4);
    tmp_50_fu_199_p4 <= r_coeffs_q0(15 downto 8);
    tmp_51_fu_217_p2 <= std_logic_vector(unsigned(tmp_50_fu_199_p4) + unsigned(tmp_59_fu_195_p1));
    tmp_52_fu_229_p4 <= r_fu_223_p2(8 downto 4);
    tmp_54_fu_164_p4 <= a_coeffs_q0(14 downto 11);
    tmp_55_fu_174_p3 <= (tmp_54_fu_164_p4 & ap_const_lv12_0);
    tmp_56_fu_182_p2 <= (tmp_55_fu_174_p3 xor ap_const_lv16_3000);
    tmp_57_fu_188_p2 <= std_logic_vector(unsigned(tmp_56_fu_182_p2) + unsigned(a_coeffs_q0));
    tmp_58_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_136),64));
    tmp_59_fu_195_p1 <= r_coeffs_q0(8 - 1 downto 0);
    tmp_60_fu_253_p1 <= r_coeffs_q0(4 - 1 downto 0);
    tmp_61_fu_257_p1 <= r_coeffs_q0(2 - 1 downto 0);
    tmp_62_fu_373_p3 <= t_fu_367_p2(2 downto 2);
    tmp_63_fu_447_p2 <= std_logic_vector(shift_left(unsigned(r_coeffs_q1),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_64_fu_513_p4 <= a_assign_1_fu_501_p2(15 downto 8);
    tmp_65_fu_531_p2 <= std_logic_vector(unsigned(a_assign_1_cast_fu_507_p2) + unsigned(tmp_64_fu_513_p4));
    tmp_66_fu_543_p4 <= r_7_fu_537_p2(8 downto 4);
    tmp_67_fu_655_p4 <= r_9_fu_650_p2(3 downto 2);
    tmp_68_fu_453_p1 <= r_coeffs_q1(7 - 1 downto 0);
    tmp_69_fu_465_p1 <= r_coeffs_q0(8 - 1 downto 0);
    tmp_70_fu_469_p1 <= r_coeffs_q0(4 - 1 downto 0);
    tmp_71_fu_473_p1 <= r_coeffs_q1(3 - 1 downto 0);
    tmp_72_fu_485_p1 <= r_coeffs_q1(1 - 1 downto 0);
    tmp_73_fu_497_p1 <= r_coeffs_q0(2 - 1 downto 0);
    tmp_74_fu_689_p3 <= t_1_fu_683_p2(2 downto 2);
    tmp_fu_243_p4 <= r_coeffs_q0(11 downto 8);
    tmp_i1_cast_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_fu_513_p4),9));
    tmp_i2_cast_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_assign_1_cast_fu_507_p2),9));
    tmp_i_cast_32_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_195_p1),9));
    tmp_i_cast_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_199_p4),9));
    tmp_s_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_125),64));
end behav;
