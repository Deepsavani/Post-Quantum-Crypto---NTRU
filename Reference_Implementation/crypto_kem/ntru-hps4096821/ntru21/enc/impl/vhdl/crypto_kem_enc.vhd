-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_kem_enc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    c_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_we0 : OUT STD_LOGIC;
    c_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    c_ce1 : OUT STD_LOGIC;
    c_we1 : OUT STD_LOGIC;
    c_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    k_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    k_ce0 : OUT STD_LOGIC;
    k_we0 : OUT STD_LOGIC;
    k_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pk_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pk_ce0 : OUT STD_LOGIC;
    pk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pk_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pk_ce1 : OUT STD_LOGIC;
    pk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    DRBG_ctx_V_ce0 : OUT STD_LOGIC;
    DRBG_ctx_V_we0 : OUT STD_LOGIC;
    DRBG_ctx_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    DRBG_ctx_V_ce1 : OUT STD_LOGIC;
    DRBG_ctx_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    DRBG_ctx_Key_ce0 : OUT STD_LOGIC;
    DRBG_ctx_Key_we0 : OUT STD_LOGIC;
    DRBG_ctx_Key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    DRBG_ctx_Key_ce1 : OUT STD_LOGIC;
    DRBG_ctx_Key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_reseed_counter_i : IN STD_LOGIC_VECTOR (31 downto 0);
    DRBG_ctx_reseed_counter_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    DRBG_ctx_reseed_counter_o_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of crypto_kem_enc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "crypto_kem_enc,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tfbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.122000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=2,HLS_SYN_FF=9096,HLS_SYN_LUT=46258,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv10_A4 : STD_LOGIC_VECTOR (9 downto 0) := "0010100100";
    constant ap_const_lv64_334 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001100110100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_334 : STD_LOGIC_VECTOR (9 downto 0) := "1100110100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_197_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_390 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_i_i_i_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_i_reg_395 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_i_i_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_5_fu_320_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_5_reg_405 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_coeffs_ce0 : STD_LOGIC;
    signal r_coeffs_we0 : STD_LOGIC;
    signal r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_coeffs_ce1 : STD_LOGIC;
    signal r_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal m_coeffs_ce0 : STD_LOGIC;
    signal m_coeffs_we0 : STD_LOGIC;
    signal m_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_coeffs_ce1 : STD_LOGIC;
    signal m_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal rm_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal rm_ce0 : STD_LOGIC;
    signal rm_we0 : STD_LOGIC;
    signal rm_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rm_seed_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rm_seed_ce0 : STD_LOGIC;
    signal rm_seed_we0 : STD_LOGIC;
    signal rm_seed_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rm_seed_ce1 : STD_LOGIC;
    signal rm_seed_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha3_256_fu_142_ap_start : STD_LOGIC;
    signal grp_sha3_256_fu_142_ap_done : STD_LOGIC;
    signal grp_sha3_256_fu_142_ap_idle : STD_LOGIC;
    signal grp_sha3_256_fu_142_ap_ready : STD_LOGIC;
    signal grp_sha3_256_fu_142_output_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sha3_256_fu_142_output_r_ce0 : STD_LOGIC;
    signal grp_sha3_256_fu_142_output_r_we0 : STD_LOGIC;
    signal grp_sha3_256_fu_142_output_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha3_256_fu_142_input_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_sha3_256_fu_142_input_r_ce0 : STD_LOGIC;
    signal grp_randombytes_fu_151_ap_start : STD_LOGIC;
    signal grp_randombytes_fu_151_ap_done : STD_LOGIC;
    signal grp_randombytes_fu_151_ap_idle : STD_LOGIC;
    signal grp_randombytes_fu_151_ap_ready : STD_LOGIC;
    signal grp_randombytes_fu_151_x_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_randombytes_fu_151_x_ce0 : STD_LOGIC;
    signal grp_randombytes_fu_151_x_we0 : STD_LOGIC;
    signal grp_randombytes_fu_151_x_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_randombytes_fu_151_DRBG_ctx_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_randombytes_fu_151_DRBG_ctx_V_ce0 : STD_LOGIC;
    signal grp_randombytes_fu_151_DRBG_ctx_V_we0 : STD_LOGIC;
    signal grp_randombytes_fu_151_DRBG_ctx_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_randombytes_fu_151_DRBG_ctx_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_randombytes_fu_151_DRBG_ctx_V_ce1 : STD_LOGIC;
    signal grp_randombytes_fu_151_DRBG_ctx_Key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_randombytes_fu_151_DRBG_ctx_Key_ce0 : STD_LOGIC;
    signal grp_randombytes_fu_151_DRBG_ctx_Key_we0 : STD_LOGIC;
    signal grp_randombytes_fu_151_DRBG_ctx_Key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_randombytes_fu_151_DRBG_ctx_Key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_randombytes_fu_151_DRBG_ctx_Key_ce1 : STD_LOGIC;
    signal grp_randombytes_fu_151_DRBG_ctx_reseed_counter_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_randombytes_fu_151_DRBG_ctx_reseed_counter_o_ap_vld : STD_LOGIC;
    signal grp_sample_fixed_type_fu_167_ap_start : STD_LOGIC;
    signal grp_sample_fixed_type_fu_167_ap_done : STD_LOGIC;
    signal grp_sample_fixed_type_fu_167_ap_idle : STD_LOGIC;
    signal grp_sample_fixed_type_fu_167_ap_ready : STD_LOGIC;
    signal grp_sample_fixed_type_fu_167_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_sample_fixed_type_fu_167_r_coeffs_ce0 : STD_LOGIC;
    signal grp_sample_fixed_type_fu_167_r_coeffs_we0 : STD_LOGIC;
    signal grp_sample_fixed_type_fu_167_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_fixed_type_fu_167_u_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_sample_fixed_type_fu_167_u_ce0 : STD_LOGIC;
    signal grp_sample_fixed_type_fu_167_u_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_sample_fixed_type_fu_167_u_ce1 : STD_LOGIC;
    signal grp_owcpa_enc_fu_173_ap_start : STD_LOGIC;
    signal grp_owcpa_enc_fu_173_ap_done : STD_LOGIC;
    signal grp_owcpa_enc_fu_173_ap_idle : STD_LOGIC;
    signal grp_owcpa_enc_fu_173_ap_ready : STD_LOGIC;
    signal grp_owcpa_enc_fu_173_c_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_owcpa_enc_fu_173_c_ce0 : STD_LOGIC;
    signal grp_owcpa_enc_fu_173_c_we0 : STD_LOGIC;
    signal grp_owcpa_enc_fu_173_c_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_owcpa_enc_fu_173_c_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_owcpa_enc_fu_173_c_ce1 : STD_LOGIC;
    signal grp_owcpa_enc_fu_173_c_we1 : STD_LOGIC;
    signal grp_owcpa_enc_fu_173_c_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_owcpa_enc_fu_173_rm_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_owcpa_enc_fu_173_rm_ce0 : STD_LOGIC;
    signal grp_owcpa_enc_fu_173_pk_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_owcpa_enc_fu_173_pk_ce0 : STD_LOGIC;
    signal grp_owcpa_enc_fu_173_pk_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_owcpa_enc_fu_173_pk_ce1 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_182_ap_start : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_182_ap_done : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_182_ap_idle : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_182_ap_ready : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_182_msg_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_S3_tobytes_fu_182_msg_ce0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_182_msg_we0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_182_msg_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_S3_tobytes_fu_182_msg_offset : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_tobytes_fu_182_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_tobytes_fu_182_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_182_a_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_tobytes_fu_182_a_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_tobytes_fu_182_a_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_182_a_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_i_i_i_reg_131 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_sha3_256_fu_142_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_randombytes_fu_151_ap_start_reg : STD_LOGIC := '0';
    signal grp_sample_fixed_type_fu_167_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_owcpa_enc_fu_173_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_poly_S3_tobytes_fu_182_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_203_i_i_i_i_fu_380_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_32_fu_212_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_208_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_195_i_i_i_i_cast_fu_226_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_194_i_i_i_i_cast_fu_222_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_236_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_34_fu_242_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_43_fu_260_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_117_fu_256_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal fold1_i_i_i_i_cast_fu_270_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_197_i_i_i_i_cast_fu_276_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_196_i_i_i_i_cast_fu_252_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_4_fu_280_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_35_fu_286_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_33_fu_230_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_44_fu_300_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal fold2_i_i_i_i_cast_fu_310_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_199_i_i_i_i_cast_fu_316_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_198_i_i_i_i_cast_fu_296_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_fu_326_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_118_fu_331_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_12_cast_fu_339_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_200_i_i_i_i_fu_347_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal not_tmp_9_i_i_i_i_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_201_i_i_i_i_cast_fu_362_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_202_i_i_i_i_fu_370_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_200_i_i_i_i_cast_fu_352_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_202_i_i_i_i_cast_fu_376_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state7_on_subcall_done : BOOLEAN;

    component sha3_256 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component randombytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_we0 : OUT STD_LOGIC;
        x_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        DRBG_ctx_V_ce0 : OUT STD_LOGIC;
        DRBG_ctx_V_we0 : OUT STD_LOGIC;
        DRBG_ctx_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        DRBG_ctx_V_ce1 : OUT STD_LOGIC;
        DRBG_ctx_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        DRBG_ctx_Key_ce0 : OUT STD_LOGIC;
        DRBG_ctx_Key_we0 : OUT STD_LOGIC;
        DRBG_ctx_Key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        DRBG_ctx_Key_ce1 : OUT STD_LOGIC;
        DRBG_ctx_Key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_reseed_counter_i : IN STD_LOGIC_VECTOR (31 downto 0);
        DRBG_ctx_reseed_counter_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        DRBG_ctx_reseed_counter_o_ap_vld : OUT STD_LOGIC );
    end component;


    component sample_fixed_type IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        u_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        u_ce0 : OUT STD_LOGIC;
        u_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        u_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        u_ce1 : OUT STD_LOGIC;
        u_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component owcpa_enc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        c_ce0 : OUT STD_LOGIC;
        c_we0 : OUT STD_LOGIC;
        c_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        c_ce1 : OUT STD_LOGIC;
        c_we1 : OUT STD_LOGIC;
        c_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rm_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        rm_ce0 : OUT STD_LOGIC;
        rm_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        pk_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        pk_ce0 : OUT STD_LOGIC;
        pk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        pk_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        pk_ce1 : OUT STD_LOGIC;
        pk_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component poly_S3_tobytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        msg_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        msg_ce0 : OUT STD_LOGIC;
        msg_we0 : OUT STD_LOGIC;
        msg_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        msg_offset : IN STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce1 : OUT STD_LOGIC;
        a_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_enc_x3_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component crypto_kem_enc_rm IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_kem_enc_rm_seed IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    r_coeffs_U : component owcpa_enc_x3_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 821,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => r_coeffs_address0,
        ce0 => r_coeffs_ce0,
        we0 => r_coeffs_we0,
        d0 => r_coeffs_d0,
        q0 => r_coeffs_q0,
        address1 => grp_poly_S3_tobytes_fu_182_a_coeffs_address1,
        ce1 => r_coeffs_ce1,
        q1 => r_coeffs_q1);

    m_coeffs_U : component owcpa_enc_x3_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 821,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => m_coeffs_address0,
        ce0 => m_coeffs_ce0,
        we0 => m_coeffs_we0,
        d0 => grp_sample_fixed_type_fu_167_r_coeffs_d0,
        q0 => m_coeffs_q0,
        address1 => grp_poly_S3_tobytes_fu_182_a_coeffs_address1,
        ce1 => m_coeffs_ce1,
        q1 => m_coeffs_q1);

    rm_U : component crypto_kem_enc_rm
    generic map (
        DataWidth => 8,
        AddressRange => 328,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rm_address0,
        ce0 => rm_ce0,
        we0 => rm_we0,
        d0 => grp_poly_S3_tobytes_fu_182_msg_d0,
        q0 => rm_q0);

    rm_seed_U : component crypto_kem_enc_rm_seed
    generic map (
        DataWidth => 8,
        AddressRange => 3895,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rm_seed_address0,
        ce0 => rm_seed_ce0,
        we0 => rm_seed_we0,
        d0 => grp_randombytes_fu_151_x_d0,
        q0 => rm_seed_q0,
        address1 => grp_sample_fixed_type_fu_167_u_address1,
        ce1 => rm_seed_ce1,
        q1 => rm_seed_q1);

    grp_sha3_256_fu_142 : component sha3_256
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha3_256_fu_142_ap_start,
        ap_done => grp_sha3_256_fu_142_ap_done,
        ap_idle => grp_sha3_256_fu_142_ap_idle,
        ap_ready => grp_sha3_256_fu_142_ap_ready,
        output_r_address0 => grp_sha3_256_fu_142_output_r_address0,
        output_r_ce0 => grp_sha3_256_fu_142_output_r_ce0,
        output_r_we0 => grp_sha3_256_fu_142_output_r_we0,
        output_r_d0 => grp_sha3_256_fu_142_output_r_d0,
        input_r_address0 => grp_sha3_256_fu_142_input_r_address0,
        input_r_ce0 => grp_sha3_256_fu_142_input_r_ce0,
        input_r_q0 => rm_q0);

    grp_randombytes_fu_151 : component randombytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_randombytes_fu_151_ap_start,
        ap_done => grp_randombytes_fu_151_ap_done,
        ap_idle => grp_randombytes_fu_151_ap_idle,
        ap_ready => grp_randombytes_fu_151_ap_ready,
        x_address0 => grp_randombytes_fu_151_x_address0,
        x_ce0 => grp_randombytes_fu_151_x_ce0,
        x_we0 => grp_randombytes_fu_151_x_we0,
        x_d0 => grp_randombytes_fu_151_x_d0,
        DRBG_ctx_V_address0 => grp_randombytes_fu_151_DRBG_ctx_V_address0,
        DRBG_ctx_V_ce0 => grp_randombytes_fu_151_DRBG_ctx_V_ce0,
        DRBG_ctx_V_we0 => grp_randombytes_fu_151_DRBG_ctx_V_we0,
        DRBG_ctx_V_d0 => grp_randombytes_fu_151_DRBG_ctx_V_d0,
        DRBG_ctx_V_q0 => DRBG_ctx_V_q0,
        DRBG_ctx_V_address1 => grp_randombytes_fu_151_DRBG_ctx_V_address1,
        DRBG_ctx_V_ce1 => grp_randombytes_fu_151_DRBG_ctx_V_ce1,
        DRBG_ctx_V_q1 => DRBG_ctx_V_q1,
        DRBG_ctx_Key_address0 => grp_randombytes_fu_151_DRBG_ctx_Key_address0,
        DRBG_ctx_Key_ce0 => grp_randombytes_fu_151_DRBG_ctx_Key_ce0,
        DRBG_ctx_Key_we0 => grp_randombytes_fu_151_DRBG_ctx_Key_we0,
        DRBG_ctx_Key_d0 => grp_randombytes_fu_151_DRBG_ctx_Key_d0,
        DRBG_ctx_Key_q0 => DRBG_ctx_Key_q0,
        DRBG_ctx_Key_address1 => grp_randombytes_fu_151_DRBG_ctx_Key_address1,
        DRBG_ctx_Key_ce1 => grp_randombytes_fu_151_DRBG_ctx_Key_ce1,
        DRBG_ctx_Key_q1 => DRBG_ctx_Key_q1,
        DRBG_ctx_reseed_counter_i => DRBG_ctx_reseed_counter_i,
        DRBG_ctx_reseed_counter_o => grp_randombytes_fu_151_DRBG_ctx_reseed_counter_o,
        DRBG_ctx_reseed_counter_o_ap_vld => grp_randombytes_fu_151_DRBG_ctx_reseed_counter_o_ap_vld);

    grp_sample_fixed_type_fu_167 : component sample_fixed_type
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sample_fixed_type_fu_167_ap_start,
        ap_done => grp_sample_fixed_type_fu_167_ap_done,
        ap_idle => grp_sample_fixed_type_fu_167_ap_idle,
        ap_ready => grp_sample_fixed_type_fu_167_ap_ready,
        r_coeffs_address0 => grp_sample_fixed_type_fu_167_r_coeffs_address0,
        r_coeffs_ce0 => grp_sample_fixed_type_fu_167_r_coeffs_ce0,
        r_coeffs_we0 => grp_sample_fixed_type_fu_167_r_coeffs_we0,
        r_coeffs_d0 => grp_sample_fixed_type_fu_167_r_coeffs_d0,
        u_address0 => grp_sample_fixed_type_fu_167_u_address0,
        u_ce0 => grp_sample_fixed_type_fu_167_u_ce0,
        u_q0 => rm_seed_q0,
        u_address1 => grp_sample_fixed_type_fu_167_u_address1,
        u_ce1 => grp_sample_fixed_type_fu_167_u_ce1,
        u_q1 => rm_seed_q1);

    grp_owcpa_enc_fu_173 : component owcpa_enc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_owcpa_enc_fu_173_ap_start,
        ap_done => grp_owcpa_enc_fu_173_ap_done,
        ap_idle => grp_owcpa_enc_fu_173_ap_idle,
        ap_ready => grp_owcpa_enc_fu_173_ap_ready,
        c_address0 => grp_owcpa_enc_fu_173_c_address0,
        c_ce0 => grp_owcpa_enc_fu_173_c_ce0,
        c_we0 => grp_owcpa_enc_fu_173_c_we0,
        c_d0 => grp_owcpa_enc_fu_173_c_d0,
        c_address1 => grp_owcpa_enc_fu_173_c_address1,
        c_ce1 => grp_owcpa_enc_fu_173_c_ce1,
        c_we1 => grp_owcpa_enc_fu_173_c_we1,
        c_d1 => grp_owcpa_enc_fu_173_c_d1,
        rm_address0 => grp_owcpa_enc_fu_173_rm_address0,
        rm_ce0 => grp_owcpa_enc_fu_173_rm_ce0,
        rm_q0 => rm_q0,
        pk_address0 => grp_owcpa_enc_fu_173_pk_address0,
        pk_ce0 => grp_owcpa_enc_fu_173_pk_ce0,
        pk_q0 => pk_q0,
        pk_address1 => grp_owcpa_enc_fu_173_pk_address1,
        pk_ce1 => grp_owcpa_enc_fu_173_pk_ce1,
        pk_q1 => pk_q1);

    grp_poly_S3_tobytes_fu_182 : component poly_S3_tobytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_S3_tobytes_fu_182_ap_start,
        ap_done => grp_poly_S3_tobytes_fu_182_ap_done,
        ap_idle => grp_poly_S3_tobytes_fu_182_ap_idle,
        ap_ready => grp_poly_S3_tobytes_fu_182_ap_ready,
        msg_address0 => grp_poly_S3_tobytes_fu_182_msg_address0,
        msg_ce0 => grp_poly_S3_tobytes_fu_182_msg_ce0,
        msg_we0 => grp_poly_S3_tobytes_fu_182_msg_we0,
        msg_d0 => grp_poly_S3_tobytes_fu_182_msg_d0,
        msg_offset => grp_poly_S3_tobytes_fu_182_msg_offset,
        a_coeffs_address0 => grp_poly_S3_tobytes_fu_182_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_S3_tobytes_fu_182_a_coeffs_ce0,
        a_coeffs_q0 => grp_poly_S3_tobytes_fu_182_a_coeffs_q0,
        a_coeffs_address1 => grp_poly_S3_tobytes_fu_182_a_coeffs_address1,
        a_coeffs_ce1 => grp_poly_S3_tobytes_fu_182_a_coeffs_ce1,
        a_coeffs_q1 => grp_poly_S3_tobytes_fu_182_a_coeffs_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_owcpa_enc_fu_173_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_owcpa_enc_fu_173_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_owcpa_enc_fu_173_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_owcpa_enc_fu_173_ap_ready = ap_const_logic_1)) then 
                    grp_owcpa_enc_fu_173_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_S3_tobytes_fu_182_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_S3_tobytes_fu_182_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    grp_poly_S3_tobytes_fu_182_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_S3_tobytes_fu_182_ap_ready = ap_const_logic_1)) then 
                    grp_poly_S3_tobytes_fu_182_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_randombytes_fu_151_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_randombytes_fu_151_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_randombytes_fu_151_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_randombytes_fu_151_ap_ready = ap_const_logic_1)) then 
                    grp_randombytes_fu_151_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sample_fixed_type_fu_167_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sample_fixed_type_fu_167_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_sample_fixed_type_fu_167_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sample_fixed_type_fu_167_ap_ready = ap_const_logic_1)) then 
                    grp_sample_fixed_type_fu_167_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha3_256_fu_142_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha3_256_fu_142_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_sha3_256_fu_142_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha3_256_fu_142_ap_ready = ap_const_logic_1)) then 
                    grp_sha3_256_fu_142_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i_i_i_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_i_i_i_reg_131 <= i_reg_390;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_randombytes_fu_151_ap_done = ap_const_logic_1))) then 
                i_i_i_i_reg_131 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_390 <= i_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                r_5_reg_405 <= r_5_fu_320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_i_fu_191_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_i_i_i_reg_395(9 downto 0) <= tmp_i_i_i_fu_203_p1(9 downto 0);
            end if;
        end if;
    end process;
    tmp_i_i_i_reg_395(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond_i_i_i_fu_191_p2, grp_sha3_256_fu_142_ap_done, grp_randombytes_fu_151_ap_done, grp_owcpa_enc_fu_173_ap_done, grp_poly_S3_tobytes_fu_182_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state9, ap_block_state7_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_randombytes_fu_151_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_i_i_i_fu_191_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_boolean_0 = ap_block_state7_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_poly_S3_tobytes_fu_182_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_sha3_256_fu_142_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_owcpa_enc_fu_173_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    DRBG_ctx_Key_address0 <= grp_randombytes_fu_151_DRBG_ctx_Key_address0;
    DRBG_ctx_Key_address1 <= grp_randombytes_fu_151_DRBG_ctx_Key_address1;
    DRBG_ctx_Key_ce0 <= grp_randombytes_fu_151_DRBG_ctx_Key_ce0;
    DRBG_ctx_Key_ce1 <= grp_randombytes_fu_151_DRBG_ctx_Key_ce1;
    DRBG_ctx_Key_d0 <= grp_randombytes_fu_151_DRBG_ctx_Key_d0;
    DRBG_ctx_Key_we0 <= grp_randombytes_fu_151_DRBG_ctx_Key_we0;
    DRBG_ctx_V_address0 <= grp_randombytes_fu_151_DRBG_ctx_V_address0;
    DRBG_ctx_V_address1 <= grp_randombytes_fu_151_DRBG_ctx_V_address1;
    DRBG_ctx_V_ce0 <= grp_randombytes_fu_151_DRBG_ctx_V_ce0;
    DRBG_ctx_V_ce1 <= grp_randombytes_fu_151_DRBG_ctx_V_ce1;
    DRBG_ctx_V_d0 <= grp_randombytes_fu_151_DRBG_ctx_V_d0;
    DRBG_ctx_V_we0 <= grp_randombytes_fu_151_DRBG_ctx_V_we0;

    DRBG_ctx_reseed_counter_o_assign_proc : process(DRBG_ctx_reseed_counter_i, grp_randombytes_fu_151_DRBG_ctx_reseed_counter_o, grp_randombytes_fu_151_DRBG_ctx_reseed_counter_o_ap_vld, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_randombytes_fu_151_DRBG_ctx_reseed_counter_o_ap_vld = ap_const_logic_1))) then 
            DRBG_ctx_reseed_counter_o <= grp_randombytes_fu_151_DRBG_ctx_reseed_counter_o;
        else 
            DRBG_ctx_reseed_counter_o <= DRBG_ctx_reseed_counter_i;
        end if; 
    end process;

    DRBG_ctx_reseed_counter_o_ap_vld <= grp_randombytes_fu_151_DRBG_ctx_reseed_counter_o_ap_vld;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state7_on_subcall_done_assign_proc : process(grp_sample_fixed_type_fu_167_ap_done, grp_poly_S3_tobytes_fu_182_ap_done)
    begin
                ap_block_state7_on_subcall_done <= ((grp_poly_S3_tobytes_fu_182_ap_done = ap_const_logic_0) or (grp_sample_fixed_type_fu_167_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(grp_owcpa_enc_fu_173_ap_done, ap_CS_fsm_state13)
    begin
        if (((grp_owcpa_enc_fu_173_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_owcpa_enc_fu_173_ap_done, ap_CS_fsm_state13)
    begin
        if (((grp_owcpa_enc_fu_173_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;
    c_12_cast_fu_339_p3 <= 
        ap_const_lv3_7 when (tmp_118_fu_331_p3(0) = '1') else 
        ap_const_lv3_0;
    c_address0 <= grp_owcpa_enc_fu_173_c_address0;
    c_address1 <= grp_owcpa_enc_fu_173_c_address1;
    c_ce0 <= grp_owcpa_enc_fu_173_c_ce0;
    c_ce1 <= grp_owcpa_enc_fu_173_c_ce1;
    c_d0 <= grp_owcpa_enc_fu_173_c_d0;
    c_d1 <= grp_owcpa_enc_fu_173_c_d1;
    c_we0 <= grp_owcpa_enc_fu_173_c_we0;
    c_we1 <= grp_owcpa_enc_fu_173_c_we1;
    exitcond_i_i_i_fu_191_p2 <= "1" when (i_i_i_i_reg_131 = ap_const_lv10_334) else "0";
    fold1_i_i_i_i_cast_fu_270_p2 <= std_logic_vector(unsigned(tmp_43_fu_260_p4) + unsigned(tmp_117_fu_256_p1));
    fold2_i_i_i_i_cast_fu_310_p2 <= std_logic_vector(unsigned(fold1_i_i_i_i_cast_fu_270_p2) + unsigned(tmp_44_fu_300_p4));
    grp_owcpa_enc_fu_173_ap_start <= grp_owcpa_enc_fu_173_ap_start_reg;

    grp_poly_S3_tobytes_fu_182_a_coeffs_q0_assign_proc : process(r_coeffs_q0, m_coeffs_q0, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_poly_S3_tobytes_fu_182_a_coeffs_q0 <= m_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_poly_S3_tobytes_fu_182_a_coeffs_q0 <= r_coeffs_q0;
        else 
            grp_poly_S3_tobytes_fu_182_a_coeffs_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_S3_tobytes_fu_182_a_coeffs_q1_assign_proc : process(r_coeffs_q1, m_coeffs_q1, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_poly_S3_tobytes_fu_182_a_coeffs_q1 <= m_coeffs_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_poly_S3_tobytes_fu_182_a_coeffs_q1 <= r_coeffs_q1;
        else 
            grp_poly_S3_tobytes_fu_182_a_coeffs_q1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_poly_S3_tobytes_fu_182_ap_start <= grp_poly_S3_tobytes_fu_182_ap_start_reg;

    grp_poly_S3_tobytes_fu_182_msg_offset_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_poly_S3_tobytes_fu_182_msg_offset <= ap_const_lv10_A4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_poly_S3_tobytes_fu_182_msg_offset <= ap_const_lv10_0;
        else 
            grp_poly_S3_tobytes_fu_182_msg_offset <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_randombytes_fu_151_ap_start <= grp_randombytes_fu_151_ap_start_reg;
    grp_sample_fixed_type_fu_167_ap_start <= grp_sample_fixed_type_fu_167_ap_start_reg;
    grp_sha3_256_fu_142_ap_start <= grp_sha3_256_fu_142_ap_start_reg;
    i_fu_197_p2 <= std_logic_vector(unsigned(i_i_i_i_reg_131) + unsigned(ap_const_lv10_1));
    k_address0 <= grp_sha3_256_fu_142_output_r_address0;
    k_ce0 <= grp_sha3_256_fu_142_output_r_ce0;
    k_d0 <= grp_sha3_256_fu_142_output_r_d0;
    k_we0 <= grp_sha3_256_fu_142_output_r_we0;

    m_coeffs_address0_assign_proc : process(grp_sample_fixed_type_fu_167_r_coeffs_address0, grp_poly_S3_tobytes_fu_182_a_coeffs_address0, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            m_coeffs_address0 <= grp_poly_S3_tobytes_fu_182_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            m_coeffs_address0 <= grp_sample_fixed_type_fu_167_r_coeffs_address0;
        else 
            m_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    m_coeffs_ce0_assign_proc : process(grp_sample_fixed_type_fu_167_r_coeffs_ce0, grp_poly_S3_tobytes_fu_182_a_coeffs_ce0, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            m_coeffs_ce0 <= grp_poly_S3_tobytes_fu_182_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            m_coeffs_ce0 <= grp_sample_fixed_type_fu_167_r_coeffs_ce0;
        else 
            m_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_coeffs_ce1_assign_proc : process(grp_poly_S3_tobytes_fu_182_a_coeffs_ce1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            m_coeffs_ce1 <= grp_poly_S3_tobytes_fu_182_a_coeffs_ce1;
        else 
            m_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    m_coeffs_we0_assign_proc : process(grp_sample_fixed_type_fu_167_r_coeffs_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            m_coeffs_we0 <= grp_sample_fixed_type_fu_167_r_coeffs_we0;
        else 
            m_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    not_tmp_9_i_i_i_i_fu_356_p2 <= (tmp_118_fu_331_p3 xor ap_const_lv1_1);
    pk_address0 <= grp_owcpa_enc_fu_173_pk_address0;
    pk_address1 <= grp_owcpa_enc_fu_173_pk_address1;
    pk_ce0 <= grp_owcpa_enc_fu_173_pk_ce0;
    pk_ce1 <= grp_owcpa_enc_fu_173_pk_ce1;
    r_4_fu_280_p2 <= std_logic_vector(unsigned(tmp_197_i_i_i_i_cast_fu_276_p1) + unsigned(tmp_196_i_i_i_i_cast_fu_252_p1));
    r_5_fu_320_p2 <= std_logic_vector(unsigned(tmp_199_i_i_i_i_cast_fu_316_p1) + unsigned(tmp_198_i_i_i_i_cast_fu_296_p1));

    r_coeffs_address0_assign_proc : process(ap_CS_fsm_state3, tmp_i_i_i_reg_395, grp_poly_S3_tobytes_fu_182_a_coeffs_address0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_address0 <= tmp_i_i_i_reg_395(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_coeffs_address0 <= ap_const_lv64_334(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_coeffs_address0 <= grp_poly_S3_tobytes_fu_182_a_coeffs_address0;
        else 
            r_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3, grp_poly_S3_tobytes_fu_182_a_coeffs_ce0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_coeffs_ce0 <= grp_poly_S3_tobytes_fu_182_a_coeffs_ce0;
        else 
            r_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_ce1_assign_proc : process(grp_poly_S3_tobytes_fu_182_a_coeffs_ce1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_coeffs_ce1 <= grp_poly_S3_tobytes_fu_182_a_coeffs_ce1;
        else 
            r_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, tmp_203_i_i_i_i_fu_380_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_d0 <= tmp_203_i_i_i_i_fu_380_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_coeffs_d0 <= ap_const_lv16_0;
        else 
            r_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_we0_assign_proc : process(ap_CS_fsm_state3, exitcond_i_i_i_fu_191_p2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((exitcond_i_i_i_fu_191_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            r_coeffs_we0 <= ap_const_logic_1;
        else 
            r_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_236_p2 <= std_logic_vector(unsigned(tmp_195_i_i_i_i_cast_fu_226_p1) + unsigned(tmp_194_i_i_i_i_cast_fu_222_p1));

    rm_address0_assign_proc : process(grp_sha3_256_fu_142_input_r_address0, grp_owcpa_enc_fu_173_rm_address0, grp_poly_S3_tobytes_fu_182_msg_address0, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            rm_address0 <= grp_poly_S3_tobytes_fu_182_msg_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            rm_address0 <= grp_owcpa_enc_fu_173_rm_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            rm_address0 <= grp_sha3_256_fu_142_input_r_address0;
        else 
            rm_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    rm_ce0_assign_proc : process(grp_sha3_256_fu_142_input_r_ce0, grp_owcpa_enc_fu_173_rm_ce0, grp_poly_S3_tobytes_fu_182_msg_ce0, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            rm_ce0 <= grp_poly_S3_tobytes_fu_182_msg_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            rm_ce0 <= grp_owcpa_enc_fu_173_rm_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            rm_ce0 <= grp_sha3_256_fu_142_input_r_ce0;
        else 
            rm_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rm_seed_address0_assign_proc : process(ap_CS_fsm_state3, tmp_i_i_i_fu_203_p1, grp_randombytes_fu_151_x_address0, grp_sample_fixed_type_fu_167_u_address0, ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rm_seed_address0 <= tmp_i_i_i_fu_203_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rm_seed_address0 <= grp_sample_fixed_type_fu_167_u_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rm_seed_address0 <= grp_randombytes_fu_151_x_address0;
        else 
            rm_seed_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    rm_seed_ce0_assign_proc : process(ap_CS_fsm_state3, grp_randombytes_fu_151_x_ce0, grp_sample_fixed_type_fu_167_u_ce0, ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rm_seed_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rm_seed_ce0 <= grp_sample_fixed_type_fu_167_u_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rm_seed_ce0 <= grp_randombytes_fu_151_x_ce0;
        else 
            rm_seed_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rm_seed_ce1_assign_proc : process(grp_sample_fixed_type_fu_167_u_ce1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            rm_seed_ce1 <= grp_sample_fixed_type_fu_167_u_ce1;
        else 
            rm_seed_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rm_seed_we0_assign_proc : process(grp_randombytes_fu_151_x_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rm_seed_we0 <= grp_randombytes_fu_151_x_we0;
        else 
            rm_seed_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rm_we0_assign_proc : process(grp_poly_S3_tobytes_fu_182_msg_we0, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            rm_we0 <= grp_poly_S3_tobytes_fu_182_msg_we0;
        else 
            rm_we0 <= ap_const_logic_0;
        end if; 
    end process;

    t_fu_326_p2 <= std_logic_vector(signed(ap_const_lv3_5) + signed(r_5_reg_405));
    tmp_117_fu_256_p1 <= rm_seed_q0(2 - 1 downto 0);
    tmp_118_fu_331_p3 <= t_fu_326_p2(2 downto 2);
    tmp_194_i_i_i_i_cast_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_212_p4),5));
    tmp_195_i_i_i_i_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_208_p1),5));
    tmp_196_i_i_i_i_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_242_p4),4));
    tmp_197_i_i_i_i_cast_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold1_i_i_i_i_cast_fu_270_p2),4));
    tmp_198_i_i_i_i_cast_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_286_p4),3));
    tmp_199_i_i_i_i_cast_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold2_i_i_i_i_cast_fu_310_p2),3));
    tmp_200_i_i_i_i_cast_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_200_i_i_i_i_fu_347_p2),16));
    tmp_200_i_i_i_i_fu_347_p2 <= (r_5_reg_405 and c_12_cast_fu_339_p3);
    tmp_201_i_i_i_i_cast_fu_362_p3 <= 
        ap_const_lv3_7 when (not_tmp_9_i_i_i_i_fu_356_p2(0) = '1') else 
        ap_const_lv3_0;
        tmp_202_i_i_i_i_cast_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_202_i_i_i_i_fu_370_p2),16));

    tmp_202_i_i_i_i_fu_370_p2 <= (tmp_201_i_i_i_i_cast_fu_362_p3 and t_fu_326_p2);
    tmp_203_i_i_i_i_fu_380_p2 <= (tmp_202_i_i_i_i_cast_fu_376_p1 xor tmp_200_i_i_i_i_cast_fu_352_p1);
    tmp_32_fu_212_p4 <= rm_seed_q0(7 downto 4);
    tmp_33_fu_230_p2 <= std_logic_vector(unsigned(tmp_32_fu_212_p4) + unsigned(tmp_fu_208_p1));
    tmp_34_fu_242_p4 <= r_fu_236_p2(4 downto 2);
    tmp_35_fu_286_p4 <= r_4_fu_280_p2(3 downto 2);
    tmp_43_fu_260_p4 <= rm_seed_q0(5 downto 4);
    tmp_44_fu_300_p4 <= tmp_33_fu_230_p2(3 downto 2);
    tmp_fu_208_p1 <= rm_seed_q0(4 - 1 downto 0);
    tmp_i_i_i_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i_i_reg_131),64));
end behav;
