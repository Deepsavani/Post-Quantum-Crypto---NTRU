-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity owcpa_enc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    c_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_we0 : OUT STD_LOGIC;
    c_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    c_ce1 : OUT STD_LOGIC;
    c_we1 : OUT STD_LOGIC;
    c_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rm_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    rm_ce0 : OUT STD_LOGIC;
    rm_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pk_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pk_ce0 : OUT STD_LOGIC;
    pk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pk_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pk_ce1 : OUT STD_LOGIC;
    pk_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of owcpa_enc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv10_A4 : STD_LOGIC_VECTOR (9 downto 0) := "0010100100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv10_335 : STD_LOGIC_VECTOR (9 downto 0) := "1100110101";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv9_19A : STD_LOGIC_VECTOR (8 downto 0) := "110011010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_15_fu_282_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_15_reg_595 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal m_coeffs_addr_reg_600 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_16_fu_344_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_16_reg_608 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_i6_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i6_reg_613 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i5_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_17_fu_361_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_17_reg_626 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal liftm_coeffs_addr_1_reg_631 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i_i_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_18_fu_423_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_18_reg_639 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ct_coeffs_addr_reg_644 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_19_fu_464_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_19_reg_657 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal exitcond_i_i9_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_109_i_i_fu_495_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_109_i_i_reg_667 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_120_i_i_reg_679 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal x1_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x1_coeffs_ce0 : STD_LOGIC;
    signal x1_coeffs_we0 : STD_LOGIC;
    signal x1_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_ce1 : STD_LOGIC;
    signal x1_coeffs_we1 : STD_LOGIC;
    signal x1_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x2_coeffs_ce0 : STD_LOGIC;
    signal x2_coeffs_we0 : STD_LOGIC;
    signal x2_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_ce1 : STD_LOGIC;
    signal x2_coeffs_we1 : STD_LOGIC;
    signal x3_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x3_coeffs_ce0 : STD_LOGIC;
    signal x3_coeffs_we0 : STD_LOGIC;
    signal x3_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal x3_coeffs_ce1 : STD_LOGIC;
    signal x3_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_frombytes_fu_250_ap_start : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_250_ap_done : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_250_ap_idle : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_250_ap_ready : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_250_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_frombytes_fu_250_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_250_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_250_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_frombytes_fu_250_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_frombytes_fu_250_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_250_r_coeffs_we1 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_250_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_frombytes_fu_250_msg_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_S3_frombytes_fu_250_msg_ce0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_250_msg_offset : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_261_ap_start : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_261_ap_done : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_261_ap_idle : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_261_ap_ready : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_261_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_261_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_261_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_261_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_mul_fu_261_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_261_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_261_b_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_261_b_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_sum_zero_fro_fu_268_ap_start : STD_LOGIC;
    signal grp_poly_Rq_sum_zero_fro_fu_268_ap_done : STD_LOGIC;
    signal grp_poly_Rq_sum_zero_fro_fu_268_ap_idle : STD_LOGIC;
    signal grp_poly_Rq_sum_zero_fro_fu_268_ap_ready : STD_LOGIC;
    signal grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_we1 : STD_LOGIC;
    signal grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_sum_zero_fro_fu_268_a_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_Rq_sum_zero_fro_fu_268_a_ce0 : STD_LOGIC;
    signal grp_poly_Rq_sum_zero_fro_fu_268_a_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_Rq_sum_zero_fro_fu_268_a_ce1 : STD_LOGIC;
    signal i_i_reg_195 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_i4_reg_206 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_i_i_reg_217 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_reg_228 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_i_i8_reg_239 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_poly_S3_frombytes_fu_250_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_poly_Rq_mul_fu_261_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_poly_Rq_sum_zero_fro_fu_268_ap_start_reg : STD_LOGIC := '0';
    signal tmp_i_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i1_39_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_i_i_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_110_i_i_fu_520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_118_i_i_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_122_i_i_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_107_i_fu_329_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_107_i_i_fu_408_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_161_cast_fu_449_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_80_fu_512_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_293_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_76_fu_309_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_105_i_cast_fu_303_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_31_fu_319_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_30_fu_313_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_32_fu_372_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_77_fu_388_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_105_i_i_cast_fu_382_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_35_fu_398_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_34_fu_392_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_79_fu_439_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_78_fu_435_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_fu_443_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i1_fu_470_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_i_i_fu_483_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_i_i_cast_fu_491_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_i_i8_cast2_fu_454_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_111_i_i_fu_501_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_109_i_i_cast_fu_517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_fu_525_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_115_i_i_fu_529_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_i_i_fu_537_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_117_i_i_fu_554_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_117_i_i_cast_fu_559_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_121_i_i_fu_578_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_121_i_i_cast_fu_583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component poly_S3_frombytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        msg_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        msg_ce0 : OUT STD_LOGIC;
        msg_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        msg_offset : IN STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component poly_Rq_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        b_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        b_coeffs_ce0 : OUT STD_LOGIC;
        b_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_Rq_sum_zero_fro IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component owcpa_enc_x1_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_enc_x2_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_enc_x3_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    x1_coeffs_U : component owcpa_enc_x1_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 821,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x1_coeffs_address0,
        ce0 => x1_coeffs_ce0,
        we0 => x1_coeffs_we0,
        d0 => x1_coeffs_d0,
        q0 => x1_coeffs_q0,
        address1 => grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_address1,
        ce1 => x1_coeffs_ce1,
        we1 => x1_coeffs_we1,
        d1 => grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_d1,
        q1 => x1_coeffs_q1);

    x2_coeffs_U : component owcpa_enc_x2_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 821,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x2_coeffs_address0,
        ce0 => x2_coeffs_ce0,
        we0 => x2_coeffs_we0,
        d0 => x2_coeffs_d0,
        q0 => x2_coeffs_q0,
        address1 => grp_poly_S3_frombytes_fu_250_r_coeffs_address1,
        ce1 => x2_coeffs_ce1,
        we1 => x2_coeffs_we1,
        d1 => grp_poly_S3_frombytes_fu_250_r_coeffs_d1);

    x3_coeffs_U : component owcpa_enc_x3_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 821,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x3_coeffs_address0,
        ce0 => x3_coeffs_ce0,
        we0 => x3_coeffs_we0,
        d0 => x3_coeffs_d0,
        q0 => x3_coeffs_q0,
        address1 => x3_coeffs_address1,
        ce1 => x3_coeffs_ce1,
        q1 => x3_coeffs_q1);

    grp_poly_S3_frombytes_fu_250 : component poly_S3_frombytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_S3_frombytes_fu_250_ap_start,
        ap_done => grp_poly_S3_frombytes_fu_250_ap_done,
        ap_idle => grp_poly_S3_frombytes_fu_250_ap_idle,
        ap_ready => grp_poly_S3_frombytes_fu_250_ap_ready,
        r_coeffs_address0 => grp_poly_S3_frombytes_fu_250_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_S3_frombytes_fu_250_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_S3_frombytes_fu_250_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_S3_frombytes_fu_250_r_coeffs_d0,
        r_coeffs_address1 => grp_poly_S3_frombytes_fu_250_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_S3_frombytes_fu_250_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_S3_frombytes_fu_250_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_S3_frombytes_fu_250_r_coeffs_d1,
        msg_address0 => grp_poly_S3_frombytes_fu_250_msg_address0,
        msg_ce0 => grp_poly_S3_frombytes_fu_250_msg_ce0,
        msg_q0 => rm_q0,
        msg_offset => grp_poly_S3_frombytes_fu_250_msg_offset);

    grp_poly_Rq_mul_fu_261 : component poly_Rq_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Rq_mul_fu_261_ap_start,
        ap_done => grp_poly_Rq_mul_fu_261_ap_done,
        ap_idle => grp_poly_Rq_mul_fu_261_ap_idle,
        ap_ready => grp_poly_Rq_mul_fu_261_ap_ready,
        r_coeffs_address0 => grp_poly_Rq_mul_fu_261_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_Rq_mul_fu_261_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_Rq_mul_fu_261_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_Rq_mul_fu_261_r_coeffs_d0,
        r_coeffs_q0 => x3_coeffs_q0,
        a_coeffs_address0 => grp_poly_Rq_mul_fu_261_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_Rq_mul_fu_261_a_coeffs_ce0,
        a_coeffs_q0 => x2_coeffs_q0,
        b_coeffs_address0 => grp_poly_Rq_mul_fu_261_b_coeffs_address0,
        b_coeffs_ce0 => grp_poly_Rq_mul_fu_261_b_coeffs_ce0,
        b_coeffs_q0 => x1_coeffs_q0);

    grp_poly_Rq_sum_zero_fro_fu_268 : component poly_Rq_sum_zero_fro
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Rq_sum_zero_fro_fu_268_ap_start,
        ap_done => grp_poly_Rq_sum_zero_fro_fu_268_ap_done,
        ap_idle => grp_poly_Rq_sum_zero_fro_fu_268_ap_idle,
        ap_ready => grp_poly_Rq_sum_zero_fro_fu_268_ap_ready,
        r_coeffs_address0 => grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_d0,
        r_coeffs_q0 => x1_coeffs_q0,
        r_coeffs_address1 => grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_d1,
        r_coeffs_q1 => x1_coeffs_q1,
        a_address0 => grp_poly_Rq_sum_zero_fro_fu_268_a_address0,
        a_ce0 => grp_poly_Rq_sum_zero_fro_fu_268_a_ce0,
        a_q0 => pk_q0,
        a_address1 => grp_poly_Rq_sum_zero_fro_fu_268_a_address1,
        a_ce1 => grp_poly_Rq_sum_zero_fro_fu_268_a_ce1,
        a_q1 => pk_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_poly_Rq_mul_fu_261_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Rq_mul_fu_261_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond_i_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_poly_Rq_mul_fu_261_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Rq_mul_fu_261_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Rq_mul_fu_261_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_Rq_sum_zero_fro_fu_268_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Rq_sum_zero_fro_fu_268_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_poly_Rq_sum_zero_fro_fu_268_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Rq_sum_zero_fro_fu_268_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Rq_sum_zero_fro_fu_268_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_S3_frombytes_fu_250_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_S3_frombytes_fu_250_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_poly_S3_frombytes_fu_250_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_S3_frombytes_fu_250_ap_ready = ap_const_logic_1)) then 
                    grp_poly_S3_frombytes_fu_250_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i4_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_i4_reg_206 <= i_16_reg_608;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_poly_S3_frombytes_fu_250_ap_done = ap_const_logic_1))) then 
                i_i4_reg_206 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i_i8_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_417_p2 = ap_const_lv1_1))) then 
                i_i_i8_reg_239 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_i_i8_reg_239 <= i_19_reg_657;
            end if; 
        end if;
    end process;

    i_i_i_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i5_fu_338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_i_i_reg_217 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_i_i_reg_217 <= i_17_reg_626;
            end if; 
        end if;
    end process;

    i_i_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_i_reg_195 <= i_15_reg_595;
            elsif (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_i_reg_195 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_fu_355_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_reg_228 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_reg_228 <= i_18_reg_639;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_417_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                ct_coeffs_addr_reg_644 <= tmp_fu_429_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_15_reg_595 <= i_15_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_16_reg_608 <= i_16_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_17_reg_626 <= i_17_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_18_reg_639 <= i_18_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_19_reg_657 <= i_19_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_fu_355_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                liftm_coeffs_addr_1_reg_631 <= tmp_i_i_fu_367_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                m_coeffs_addr_reg_600 <= tmp_i_fu_288_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i9_fu_458_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                tmp_109_i_i_reg_667 <= tmp_109_i_i_fu_495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_120_i_i_reg_679 <= x3_coeffs_q1(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i5_fu_338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    tmp_i6_reg_613(9 downto 0) <= tmp_i6_fu_350_p1(9 downto 0);
            end if;
        end if;
    end process;
    tmp_i6_reg_613(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond_i_fu_276_p2, ap_CS_fsm_state8, exitcond_i5_fu_338_p2, ap_CS_fsm_state10, exitcond_i_i_fu_355_p2, ap_CS_fsm_state12, exitcond_fu_417_p2, ap_CS_fsm_state14, exitcond_i_i9_fu_458_p2, grp_poly_S3_frombytes_fu_250_ap_done, grp_poly_Rq_mul_fu_261_ap_done, ap_CS_fsm_state2, ap_block_state2_on_subcall_done, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_i_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((grp_poly_Rq_mul_fu_261_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_poly_S3_frombytes_fu_250_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((exitcond_i5_fu_338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((exitcond_i_i_fu_355_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_417_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_i_i9_fu_458_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state2_on_subcall_done_assign_proc : process(grp_poly_S3_frombytes_fu_250_ap_done, grp_poly_Rq_sum_zero_fro_fu_268_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((grp_poly_Rq_sum_zero_fro_fu_268_ap_done = ap_const_logic_0) or (grp_poly_S3_frombytes_fu_250_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14, exitcond_i_i9_fu_458_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_i_i9_fu_458_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14, exitcond_i_i9_fu_458_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_i_i9_fu_458_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    c_address0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, tmp_110_i_i_fu_520_p1, tmp_122_i_i_fu_587_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            c_address0 <= tmp_122_i_i_fu_587_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            c_address0 <= tmp_110_i_i_fu_520_p1(11 - 1 downto 0);
        else 
            c_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    c_address1 <= tmp_118_i_i_fu_563_p1(11 - 1 downto 0);

    c_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_ce1_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            c_ce1 <= ap_const_logic_1;
        else 
            c_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    c_d0_assign_proc : process(tmp_120_i_i_reg_679, ap_CS_fsm_state15, ap_CS_fsm_state16, tmp_80_fu_512_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            c_d0 <= tmp_120_i_i_reg_679;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            c_d0 <= tmp_80_fu_512_p1;
        else 
            c_d0 <= "XXXXXXXX";
        end if; 
    end process;

    c_d1 <= (tmp_5_i_i_fu_537_p4 or tmp_115_i_i_fu_529_p3);

    c_we0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_we1_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            c_we1 <= ap_const_logic_1;
        else 
            c_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_417_p2 <= "1" when (i_reg_228 = ap_const_lv10_335) else "0";
    exitcond_i5_fu_338_p2 <= "1" when (i_i4_reg_206 = ap_const_lv10_335) else "0";
    exitcond_i_fu_276_p2 <= "1" when (i_i_reg_195 = ap_const_lv10_335) else "0";
    exitcond_i_i9_fu_458_p2 <= "1" when (i_i_i8_reg_239 = ap_const_lv9_19A) else "0";
    exitcond_i_i_fu_355_p2 <= "1" when (i_i_i_reg_217 = ap_const_lv10_335) else "0";
    grp_poly_Rq_mul_fu_261_ap_start <= grp_poly_Rq_mul_fu_261_ap_start_reg;
    grp_poly_Rq_sum_zero_fro_fu_268_ap_start <= grp_poly_Rq_sum_zero_fro_fu_268_ap_start_reg;
    grp_poly_S3_frombytes_fu_250_ap_start <= grp_poly_S3_frombytes_fu_250_ap_start_reg;

    grp_poly_S3_frombytes_fu_250_msg_offset_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_poly_S3_frombytes_fu_250_msg_offset <= ap_const_lv10_A4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_poly_S3_frombytes_fu_250_msg_offset <= ap_const_lv10_0;
        else 
            grp_poly_S3_frombytes_fu_250_msg_offset <= "XXXXXXXXXX";
        end if; 
    end process;

    i_15_fu_282_p2 <= std_logic_vector(unsigned(i_i_reg_195) + unsigned(ap_const_lv10_1));
    i_16_fu_344_p2 <= std_logic_vector(unsigned(i_i4_reg_206) + unsigned(ap_const_lv10_1));
    i_17_fu_361_p2 <= std_logic_vector(unsigned(i_i_i_reg_217) + unsigned(ap_const_lv10_1));
    i_18_fu_423_p2 <= std_logic_vector(unsigned(i_reg_228) + unsigned(ap_const_lv10_1));
    i_19_fu_464_p2 <= std_logic_vector(unsigned(i_i_i8_reg_239) + unsigned(ap_const_lv9_1));
    i_i_i8_cast2_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i8_reg_239),12));
    p_shl_i_i_cast_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_i_fu_483_p3),12));
    p_shl_i_i_fu_483_p3 <= (i_i_i8_reg_239 & ap_const_lv2_0);
    pk_address0 <= grp_poly_Rq_sum_zero_fro_fu_268_a_address0;
    pk_address1 <= grp_poly_Rq_sum_zero_fro_fu_268_a_address1;
    pk_ce0 <= grp_poly_Rq_sum_zero_fro_fu_268_a_ce0;
    pk_ce1 <= grp_poly_Rq_sum_zero_fro_fu_268_a_ce1;
    rm_address0 <= grp_poly_S3_frombytes_fu_250_msg_address0;

    rm_ce0_assign_proc : process(grp_poly_S3_frombytes_fu_250_msg_ce0, ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            rm_ce0 <= grp_poly_S3_frombytes_fu_250_msg_ce0;
        else 
            rm_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_105_i_cast_fu_303_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(tmp_28_fu_293_p4));
    tmp_105_i_i_cast_fu_382_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(tmp_32_fu_372_p4));
    tmp_107_i_fu_329_p3 <= (tmp_31_fu_319_p4 & tmp_30_fu_313_p2);
    tmp_107_i_i_fu_408_p3 <= (tmp_35_fu_398_p4 & tmp_34_fu_392_p2);
        tmp_109_i_i_cast_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_109_i_i_reg_667),32));

    tmp_109_i_i_fu_495_p2 <= std_logic_vector(unsigned(p_shl_i_i_cast_fu_491_p1) - unsigned(i_i_i8_cast2_fu_454_p1));
    tmp_110_i_i_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_109_i_i_cast_fu_517_p1),64));
    tmp_111_i_i_fu_501_p2 <= (tmp_i_i1_fu_470_p3 or ap_const_lv10_1);
    tmp_113_i_i_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_111_i_i_fu_501_p2),64));
    tmp_115_i_i_fu_529_p3 <= (tmp_81_fu_525_p1 & ap_const_lv4_0);
        tmp_117_i_i_cast_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_117_i_i_fu_554_p2),32));

    tmp_117_i_i_fu_554_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) + unsigned(tmp_109_i_i_reg_667));
    tmp_118_i_i_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_117_i_i_cast_fu_559_p1),64));
        tmp_121_i_i_cast_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_121_i_i_fu_578_p2),32));

    tmp_121_i_i_fu_578_p2 <= std_logic_vector(unsigned(ap_const_lv12_2) + unsigned(tmp_109_i_i_reg_667));
    tmp_122_i_i_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_121_i_i_cast_fu_583_p1),64));
    tmp_161_cast_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_cast_fu_443_p2),16));
    tmp_28_fu_293_p4 <= x2_coeffs_q0(12 downto 1);
    tmp_30_fu_313_p2 <= (tmp_76_fu_309_p1 or tmp_105_i_cast_fu_303_p2);
    tmp_31_fu_319_p4 <= x2_coeffs_q0(15 downto 12);
    tmp_32_fu_372_p4 <= x1_coeffs_q0(12 downto 1);
    tmp_34_fu_392_p2 <= (tmp_77_fu_388_p1 or tmp_105_i_i_cast_fu_382_p2);
    tmp_35_fu_398_p4 <= x1_coeffs_q0(15 downto 12);
    tmp_5_i_i_fu_537_p4 <= x3_coeffs_q0(15 downto 8);
    tmp_76_fu_309_p1 <= x2_coeffs_q0(12 - 1 downto 0);
    tmp_77_fu_388_p1 <= x1_coeffs_q0(12 - 1 downto 0);
    tmp_78_fu_435_p1 <= x1_coeffs_q0(12 - 1 downto 0);
    tmp_79_fu_439_p1 <= x3_coeffs_q0(12 - 1 downto 0);
    tmp_80_fu_512_p1 <= x3_coeffs_q0(8 - 1 downto 0);
    tmp_81_fu_525_p1 <= x3_coeffs_q1(4 - 1 downto 0);
    tmp_cast_fu_443_p2 <= std_logic_vector(unsigned(tmp_79_fu_439_p1) + unsigned(tmp_78_fu_435_p1));
    tmp_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_228),64));
    tmp_i6_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i4_reg_206),64));
    tmp_i_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_195),64));
    tmp_i_i1_39_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i1_fu_470_p3),64));
    tmp_i_i1_fu_470_p3 <= (i_i_i8_reg_239 & ap_const_lv1_0);
    tmp_i_i_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i_reg_217),64));

    x1_coeffs_address0_assign_proc : process(tmp_i6_reg_613, ap_CS_fsm_state10, liftm_coeffs_addr_1_reg_631, ap_CS_fsm_state12, grp_poly_Rq_mul_fu_261_b_coeffs_address0, grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_address0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state5, tmp_i_i_fu_367_p1, tmp_fu_429_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x1_coeffs_address0 <= tmp_fu_429_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x1_coeffs_address0 <= liftm_coeffs_addr_1_reg_631;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x1_coeffs_address0 <= tmp_i_i_fu_367_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x1_coeffs_address0 <= tmp_i6_reg_613(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_address0 <= grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x1_coeffs_address0 <= grp_poly_Rq_mul_fu_261_b_coeffs_address0;
        else 
            x1_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state12, grp_poly_Rq_mul_fu_261_b_coeffs_ce0, grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_ce0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            x1_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_ce0 <= grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x1_coeffs_ce0 <= grp_poly_Rq_mul_fu_261_b_coeffs_ce0;
        else 
            x1_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_ce1_assign_proc : process(grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_ce1 <= grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_ce1;
        else 
            x1_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_d0_assign_proc : process(x2_coeffs_q0, grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_d0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state11, tmp_107_i_i_fu_408_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x1_coeffs_d0 <= tmp_107_i_i_fu_408_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x1_coeffs_d0 <= x2_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_d0 <= grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_d0;
        else 
            x1_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_we0_assign_proc : process(grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_we0, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            x1_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_we0 <= grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_we0;
        else 
            x1_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_we1_assign_proc : process(grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_we1 <= grp_poly_Rq_sum_zero_fro_fu_268_r_coeffs_we1;
        else 
            x1_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_address0_assign_proc : process(ap_CS_fsm_state3, m_coeffs_addr_reg_600, exitcond_i_fu_276_p2, ap_CS_fsm_state8, tmp_i6_fu_350_p1, grp_poly_S3_frombytes_fu_250_r_coeffs_address0, grp_poly_Rq_mul_fu_261_a_coeffs_address0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state5, tmp_i_fu_288_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x2_coeffs_address0 <= tmp_i6_fu_350_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x2_coeffs_address0 <= m_coeffs_addr_reg_600;
        elsif (((exitcond_i_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            x2_coeffs_address0 <= tmp_i_fu_288_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x2_coeffs_address0 <= grp_poly_Rq_mul_fu_261_a_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x2_coeffs_address0 <= grp_poly_S3_frombytes_fu_250_r_coeffs_address0;
        else 
            x2_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3, exitcond_i_fu_276_p2, ap_CS_fsm_state8, grp_poly_S3_frombytes_fu_250_r_coeffs_ce0, grp_poly_Rq_mul_fu_261_a_coeffs_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((exitcond_i_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            x2_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x2_coeffs_ce0 <= grp_poly_Rq_mul_fu_261_a_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x2_coeffs_ce0 <= grp_poly_S3_frombytes_fu_250_r_coeffs_ce0;
        else 
            x2_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_ce1_assign_proc : process(grp_poly_S3_frombytes_fu_250_r_coeffs_ce1, ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x2_coeffs_ce1 <= grp_poly_S3_frombytes_fu_250_r_coeffs_ce1;
        else 
            x2_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_d0_assign_proc : process(grp_poly_S3_frombytes_fu_250_r_coeffs_d0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, tmp_107_i_fu_329_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x2_coeffs_d0 <= tmp_107_i_fu_329_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x2_coeffs_d0 <= grp_poly_S3_frombytes_fu_250_r_coeffs_d0;
        else 
            x2_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_we0_assign_proc : process(grp_poly_S3_frombytes_fu_250_r_coeffs_we0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x2_coeffs_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x2_coeffs_we0 <= grp_poly_S3_frombytes_fu_250_r_coeffs_we0;
        else 
            x2_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_we1_assign_proc : process(grp_poly_S3_frombytes_fu_250_r_coeffs_we1, ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x2_coeffs_we1 <= grp_poly_S3_frombytes_fu_250_r_coeffs_we1;
        else 
            x2_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_address0_assign_proc : process(ap_CS_fsm_state12, ct_coeffs_addr_reg_644, ap_CS_fsm_state14, grp_poly_Rq_mul_fu_261_r_coeffs_address0, ap_CS_fsm_state13, ap_CS_fsm_state5, tmp_fu_429_p1, tmp_i_i1_39_fu_478_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            x3_coeffs_address0 <= tmp_i_i1_39_fu_478_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_address0 <= ct_coeffs_addr_reg_644;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x3_coeffs_address0 <= tmp_fu_429_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x3_coeffs_address0 <= grp_poly_Rq_mul_fu_261_r_coeffs_address0;
        else 
            x3_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    x3_coeffs_address1 <= tmp_113_i_i_fu_507_p1(10 - 1 downto 0);

    x3_coeffs_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state14, grp_poly_Rq_mul_fu_261_r_coeffs_ce0, ap_CS_fsm_state13, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            x3_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x3_coeffs_ce0 <= grp_poly_Rq_mul_fu_261_r_coeffs_ce0;
        else 
            x3_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_ce1_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            x3_coeffs_ce1 <= ap_const_logic_1;
        else 
            x3_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_d0_assign_proc : process(grp_poly_Rq_mul_fu_261_r_coeffs_d0, ap_CS_fsm_state13, ap_CS_fsm_state5, tmp_161_cast_fu_449_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_d0 <= tmp_161_cast_fu_449_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x3_coeffs_d0 <= grp_poly_Rq_mul_fu_261_r_coeffs_d0;
        else 
            x3_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_we0_assign_proc : process(grp_poly_Rq_mul_fu_261_r_coeffs_we0, ap_CS_fsm_state13, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x3_coeffs_we0 <= grp_poly_Rq_mul_fu_261_r_coeffs_we0;
        else 
            x3_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
