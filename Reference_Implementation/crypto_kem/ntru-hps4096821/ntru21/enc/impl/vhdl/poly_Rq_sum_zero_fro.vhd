-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity poly_Rq_sum_zero_fro is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce0 : OUT STD_LOGIC;
    r_coeffs_we0 : OUT STD_LOGIC;
    r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce1 : OUT STD_LOGIC;
    r_coeffs_we1 : OUT STD_LOGIC;
    r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    r_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of poly_Rq_sum_zero_fro is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_334 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001100110100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv9_19A : STD_LOGIC_VECTOR (8 downto 0) := "110011010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_334 : STD_LOGIC_VECTOR (9 downto 0) := "1100110100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_11_fu_170_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_11_reg_346 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_i_fu_188_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_reg_351 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_i_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_coeffs_addr_reg_366 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_127_i_fu_235_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_127_i_reg_372 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_129_i_reg_377 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_12_fu_300_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_12_reg_390 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_fu_337_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_i_reg_126 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_reg_138 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_149 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i_31_fu_198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_124_i_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_128_i_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_131_i_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_136_i_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_126_i_fu_230_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_134_i_cast_fu_279_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_145_cast_fu_317_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_i_fu_176_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_i_cast_fu_184_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_i_cast3_fu_160_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_cast_fu_194_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_123_i_fu_203_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_123_i_cast_fu_209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_fu_218_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_i_fu_222_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_130_i_fu_258_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_130_i_cast_fu_263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_134_i_fu_272_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_135_i_fu_284_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_fu_311_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_74_fu_326_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_73_fu_322_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_i_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_i_reg_126 <= i_11_reg_346;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_i_reg_126 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_149 <= i_12_reg_390;
            elsif (((exitcond_i_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_149 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    tmp_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                tmp_reg_138 <= phitmp_fu_337_p2;
            elsif (((exitcond_i_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                tmp_reg_138 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_11_reg_346 <= i_11_fu_170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_12_reg_390 <= i_12_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_127_i_reg_372(9 downto 1) <= tmp_127_i_fu_235_p3(9 downto 1);
                tmp_129_i_reg_377 <= a_q1(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_164_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_i_reg_351 <= tmp_i_fu_188_p2;
            end if;
        end if;
    end process;
    tmp_127_i_reg_372(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_i_fu_164_p2, ap_CS_fsm_state5, exitcond_fu_294_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_i_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                if (((exitcond_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_i_31_fu_198_p1, tmp_131_i_fu_267_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_address0 <= tmp_131_i_fu_267_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_address0 <= tmp_i_31_fu_198_p1(11 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    a_address1 <= tmp_124_i_fu_213_p1(11 - 1 downto 0);

    a_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, exitcond_fu_294_p2)
    begin
        if ((((exitcond_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, exitcond_fu_294_p2)
    begin
        if (((exitcond_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_294_p2 <= "1" when (i_reg_149 = ap_const_lv10_334) else "0";
    exitcond_i_fu_164_p2 <= "1" when (i_i_reg_126 = ap_const_lv9_19A) else "0";
    i_11_fu_170_p2 <= std_logic_vector(unsigned(i_i_reg_126) + unsigned(ap_const_lv9_1));
    i_12_fu_300_p2 <= std_logic_vector(unsigned(i_reg_149) + unsigned(ap_const_lv10_1));
    i_i_cast3_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_126),12));
    p_shl_i_cast_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_fu_176_p3),12));
    p_shl_i_fu_176_p3 <= (i_i_reg_126 & ap_const_lv2_0);
    phitmp_fu_337_p2 <= std_logic_vector(unsigned(tmp_74_fu_326_p1) + unsigned(tmp_73_fu_322_p1));
    r_coeffs_addr_reg_366 <= ap_const_lv64_334(10 - 1 downto 0);

    r_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, r_coeffs_addr_reg_366, ap_CS_fsm_state3, ap_CS_fsm_state5, exitcond_fu_294_p2, ap_CS_fsm_state4, tmp_128_i_fu_243_p1, tmp_136_i_fu_289_p1, tmp_s_fu_306_p1)
    begin
        if (((exitcond_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_coeffs_address0 <= r_coeffs_addr_reg_366;
        elsif (((exitcond_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_coeffs_address0 <= tmp_s_fu_306_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_address0 <= tmp_136_i_fu_289_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_coeffs_address0 <= tmp_128_i_fu_243_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r_coeffs_address0 <= ap_const_lv64_334(10 - 1 downto 0);
        else 
            r_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    r_coeffs_address1 <= ap_const_lv64_334(10 - 1 downto 0);

    r_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, exitcond_fu_294_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((exitcond_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((exitcond_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            r_coeffs_ce0 <= ap_const_logic_1;
        else 
            r_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_coeffs_ce1 <= ap_const_logic_1;
        else 
            r_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, exitcond_fu_294_p2, ap_CS_fsm_state4, tmp_126_i_fu_230_p1, tmp_134_i_cast_fu_279_p1, tmp_145_cast_fu_317_p1)
    begin
        if (((exitcond_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_coeffs_d0 <= tmp_145_cast_fu_317_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_d0 <= tmp_134_i_cast_fu_279_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_coeffs_d0 <= tmp_126_i_fu_230_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r_coeffs_d0 <= ap_const_lv16_0;
        else 
            r_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    r_coeffs_d1 <= std_logic_vector(unsigned(r_coeffs_q1) + unsigned(r_coeffs_q0));

    r_coeffs_we0_assign_proc : process(ap_CS_fsm_state2, exitcond_i_fu_164_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, exitcond_fu_294_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((exitcond_fu_294_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((exitcond_i_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            r_coeffs_we0 <= ap_const_logic_1;
        else 
            r_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_we1_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_we1 <= ap_const_logic_1;
        else 
            r_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

        tmp_123_i_cast_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_123_i_fu_203_p2),32));

    tmp_123_i_fu_203_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) + unsigned(tmp_i_fu_188_p2));
    tmp_124_i_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_123_i_cast_fu_209_p1),64));
    tmp_126_i_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_i_fu_222_p3),16));
    tmp_127_i_fu_235_p3 <= (i_i_reg_126 & ap_const_lv1_0);
    tmp_128_i_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_i_fu_235_p3),64));
        tmp_130_i_cast_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_130_i_fu_258_p2),32));

    tmp_130_i_fu_258_p2 <= std_logic_vector(unsigned(ap_const_lv12_2) + unsigned(tmp_i_reg_351));
    tmp_131_i_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_130_i_cast_fu_263_p1),64));
    tmp_134_i_cast_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_134_i_fu_272_p3),16));
    tmp_134_i_fu_272_p3 <= (a_q0 & tmp_129_i_reg_377);
    tmp_135_i_fu_284_p2 <= (tmp_127_i_reg_372 or ap_const_lv10_1);
    tmp_136_i_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_135_i_fu_284_p2),64));
    tmp_145_cast_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_cast_fu_311_p2),16));
    tmp_72_fu_218_p1 <= a_q1(4 - 1 downto 0);
    tmp_73_fu_322_p1 <= r_coeffs_q1(12 - 1 downto 0);
    tmp_74_fu_326_p1 <= r_coeffs_q0(12 - 1 downto 0);
    tmp_7_i_fu_222_p3 <= (tmp_72_fu_218_p1 & a_q0);
    tmp_cast_fu_311_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(tmp_reg_138));
    tmp_i_31_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_cast_fu_194_p1),64));
        tmp_i_cast_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_fu_188_p2),32));

    tmp_i_fu_188_p2 <= std_logic_vector(unsigned(p_shl_i_cast_fu_184_p1) - unsigned(i_i_cast3_fu_160_p1));
    tmp_s_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_149),64));
end behav;
