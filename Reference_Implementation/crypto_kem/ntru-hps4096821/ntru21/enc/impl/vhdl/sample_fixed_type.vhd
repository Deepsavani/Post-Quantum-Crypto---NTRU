-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sample_fixed_type is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce0 : OUT STD_LOGIC;
    r_coeffs_we0 : OUT STD_LOGIC;
    r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    u_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    u_ce0 : OUT STD_LOGIC;
    u_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    u_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    u_ce1 : OUT STD_LOGIC;
    u_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sample_fixed_type is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_334 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001100110100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_CD : STD_LOGIC_VECTOR (7 downto 0) := "11001101";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv13_334 : STD_LOGIC_VECTOR (12 downto 0) := "0001100110100";
    constant ap_const_lv13_335 : STD_LOGIC_VECTOR (12 downto 0) := "0001100110101";
    constant ap_const_lv13_336 : STD_LOGIC_VECTOR (12 downto 0) := "0001100110110";
    constant ap_const_lv13_337 : STD_LOGIC_VECTOR (12 downto 0) := "0001100110111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_338 : STD_LOGIC_VECTOR (12 downto 0) := "0001100111000";
    constant ap_const_lv13_339 : STD_LOGIC_VECTOR (12 downto 0) := "0001100111001";
    constant ap_const_lv13_33A : STD_LOGIC_VECTOR (12 downto 0) := "0001100111010";
    constant ap_const_lv13_33B : STD_LOGIC_VECTOR (12 downto 0) := "0001100111011";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv13_33C : STD_LOGIC_VECTOR (12 downto 0) := "0001100111100";
    constant ap_const_lv13_33D : STD_LOGIC_VECTOR (12 downto 0) := "0001100111101";
    constant ap_const_lv13_33E : STD_LOGIC_VECTOR (12 downto 0) := "0001100111110";
    constant ap_const_lv13_33F : STD_LOGIC_VECTOR (12 downto 0) := "0001100111111";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv13_340 : STD_LOGIC_VECTOR (12 downto 0) := "0001101000000";
    constant ap_const_lv13_341 : STD_LOGIC_VECTOR (12 downto 0) := "0001101000001";
    constant ap_const_lv13_342 : STD_LOGIC_VECTOR (12 downto 0) := "0001101000010";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_1FE : STD_LOGIC_VECTOR (8 downto 0) := "111111110";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_334 : STD_LOGIC_VECTOR (9 downto 0) := "1100110100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_372 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_376 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_4_fu_390_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_4_reg_807 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_408_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_reg_812 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond3_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_475_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_reg_849 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_2_reg_856 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_reg_881 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_12_reg_906 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_5_fu_736_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_5_reg_929 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal s_addr_4_reg_934 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond2_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_5_reg_942 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exitcond1_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_765_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_6_reg_947 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_7_fu_784_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_7_reg_955 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_21_fu_790_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_reg_960 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_ce0 : STD_LOGIC;
    signal s_we0 : STD_LOGIC;
    signal s_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_ce1 : STD_LOGIC;
    signal s_we1 : STD_LOGIC;
    signal s_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sort_fu_367_ap_start : STD_LOGIC;
    signal grp_crypto_sort_fu_367_ap_done : STD_LOGIC;
    signal grp_crypto_sort_fu_367_ap_idle : STD_LOGIC;
    signal grp_crypto_sort_fu_367_ap_ready : STD_LOGIC;
    signal grp_crypto_sort_fu_367_array_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_crypto_sort_fu_367_array_r_ce0 : STD_LOGIC;
    signal grp_crypto_sort_fu_367_array_r_we0 : STD_LOGIC;
    signal grp_crypto_sort_fu_367_array_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sort_fu_367_array_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_crypto_sort_fu_367_array_r_ce1 : STD_LOGIC;
    signal grp_crypto_sort_fu_367_array_r_we1 : STD_LOGIC;
    signal grp_crypto_sort_fu_367_array_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_322 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_1_reg_334 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_2_reg_345 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_3_reg_356 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_crypto_sort_fu_367_ap_start_reg : STD_LOGIC := '0';
    signal sum_cast_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum6_cast_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum8_cast_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_cast_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum3_cast_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_cast_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum5_cast_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum7_cast_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum9_cast_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum10_cast_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum11_cast_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum12_cast_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum13_cast_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum14_cast_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_742_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_760_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_460_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_542_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_622_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_713_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_747_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_771_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_92_cast_fu_799_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_fu_396_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_cast_fu_404_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_cast1_fu_380_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum_fu_414_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum2_fu_425_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum6_fu_436_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum8_fu_446_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_10_fu_456_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum1_fu_498_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum3_fu_508_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum4_fu_518_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum5_fu_528_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_24_fu_538_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_558_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum7_fu_578_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum9_fu_588_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum10_fu_598_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum11_fu_608_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_25_fu_618_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_638_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum12_fu_658_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum13_fu_668_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum14_fu_678_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_13_fu_688_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp9_fu_701_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_cast_fu_697_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_720_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_26_fu_795_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component crypto_sort IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        array_r_ce0 : OUT STD_LOGIC;
        array_r_we0 : OUT STD_LOGIC;
        array_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        array_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        array_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        array_r_ce1 : OUT STD_LOGIC;
        array_r_we1 : OUT STD_LOGIC;
        array_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        array_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sample_fixed_type_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    s_U : component sample_fixed_type_s
    generic map (
        DataWidth => 32,
        AddressRange => 820,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => s_address0,
        ce0 => s_ce0,
        we0 => s_we0,
        d0 => s_d0,
        q0 => s_q0,
        address1 => grp_crypto_sort_fu_367_array_r_address1,
        ce1 => s_ce1,
        we1 => s_we1,
        d1 => grp_crypto_sort_fu_367_array_r_d1,
        q1 => s_q1);

    grp_crypto_sort_fu_367 : component crypto_sort
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_crypto_sort_fu_367_ap_start,
        ap_done => grp_crypto_sort_fu_367_ap_done,
        ap_idle => grp_crypto_sort_fu_367_ap_idle,
        ap_ready => grp_crypto_sort_fu_367_ap_ready,
        array_r_address0 => grp_crypto_sort_fu_367_array_r_address0,
        array_r_ce0 => grp_crypto_sort_fu_367_array_r_ce0,
        array_r_we0 => grp_crypto_sort_fu_367_array_r_we0,
        array_r_d0 => grp_crypto_sort_fu_367_array_r_d0,
        array_r_q0 => s_q0,
        array_r_address1 => grp_crypto_sort_fu_367_array_r_address1,
        array_r_ce1 => grp_crypto_sort_fu_367_array_r_ce1,
        array_r_we1 => grp_crypto_sort_fu_367_array_r_we1,
        array_r_d1 => grp_crypto_sort_fu_367_array_r_d1,
        array_r_q1 => s_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_crypto_sort_fu_367_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_crypto_sort_fu_367_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond1_fu_754_p2 = ap_const_lv1_1))) then 
                    grp_crypto_sort_fu_367_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_crypto_sort_fu_367_ap_ready = ap_const_logic_1)) then 
                    grp_crypto_sort_fu_367_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_384_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_334 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_1_reg_334 <= i_5_reg_929;
            end if; 
        end if;
    end process;

    i_2_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond2_fu_730_p2 = ap_const_lv1_1))) then 
                i_2_reg_345 <= ap_const_lv9_FF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_2_reg_345 <= i_6_reg_947;
            end if; 
        end if;
    end process;

    i_3_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_3_reg_356 <= i_7_reg_955;
            elsif (((grp_crypto_sort_fu_367_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i_3_reg_356 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_reg_322 <= i_4_reg_807;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_322 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_4_reg_807 <= i_4_fu_390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_5_reg_929 <= i_5_fu_736_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_754_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                i_6_reg_947 <= i_6_fu_765_p2;
                    s_addr_5_reg_942(8 downto 0) <= tmp_19_fu_760_p1(10 - 1 downto 0)(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_7_reg_955 <= i_7_fu_784_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_372 <= u_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_376 <= u_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_730_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    s_addr_4_reg_934(7 downto 0) <= tmp_17_fu_742_p1(10 - 1 downto 0)(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_12_reg_906 <= u_q1(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_778_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    tmp_21_reg_960(9 downto 0) <= tmp_21_fu_790_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_2_reg_856 <= u_q1(7 downto 6);
                    tmp_5_reg_849(9 downto 2) <= tmp_5_fu_475_p3(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_9_reg_881 <= u_q1(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_384_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_reg_812 <= tmp_fu_408_p2;
            end if;
        end if;
    end process;
    tmp_5_reg_849(1 downto 0) <= "00";
    s_addr_4_reg_934(9 downto 8) <= "00";
    s_addr_5_reg_942(9) <= '0';
    tmp_21_reg_960(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_384_p2, ap_CS_fsm_state11, exitcond2_fu_730_p2, ap_CS_fsm_state13, exitcond1_fu_754_p2, ap_CS_fsm_state16, exitcond_fu_778_p2, grp_crypto_sort_fu_367_ap_done, ap_CS_fsm_state15)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_384_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond2_fu_730_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond1_fu_754_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state15 => 
                if (((grp_crypto_sort_fu_367_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_778_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16, exitcond_fu_778_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_778_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16, exitcond_fu_778_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_778_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_754_p2 <= "1" when (i_2_reg_345 = ap_const_lv9_1FE) else "0";
    exitcond2_fu_730_p2 <= "1" when (i_1_reg_334 = ap_const_lv8_FF) else "0";
    exitcond3_fu_384_p2 <= "1" when (i_reg_322 = ap_const_lv8_CD) else "0";
    exitcond_fu_778_p2 <= "1" when (i_3_reg_356 = ap_const_lv10_334) else "0";
    grp_crypto_sort_fu_367_ap_start <= grp_crypto_sort_fu_367_ap_start_reg;
    i_4_fu_390_p2 <= std_logic_vector(unsigned(i_reg_322) + unsigned(ap_const_lv8_1));
    i_5_fu_736_p2 <= std_logic_vector(unsigned(i_1_reg_334) + unsigned(ap_const_lv8_1));
    i_6_fu_765_p2 <= std_logic_vector(unsigned(i_2_reg_345) + unsigned(ap_const_lv9_1));
    i_7_fu_784_p2 <= std_logic_vector(unsigned(i_3_reg_356) + unsigned(ap_const_lv10_1));
    i_cast1_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_322),13));
    p_shl_cast_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_396_p3),13));
    p_shl_fu_396_p3 <= (i_reg_322 & ap_const_lv4_0);

    r_coeffs_address0_assign_proc : process(ap_CS_fsm_state16, tmp_21_reg_960, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_coeffs_address0 <= tmp_21_reg_960(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            r_coeffs_address0 <= ap_const_lv64_334(10 - 1 downto 0);
        else 
            r_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            r_coeffs_ce0 <= ap_const_logic_1;
        else 
            r_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_d0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state17, tmp_92_cast_fu_799_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_coeffs_d0 <= tmp_92_cast_fu_799_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            r_coeffs_d0 <= ap_const_lv16_0;
        else 
            r_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_we0_assign_proc : process(ap_CS_fsm_state16, exitcond_fu_778_p2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_778_p2 = ap_const_lv1_1)))) then 
            r_coeffs_we0 <= ap_const_logic_1;
        else 
            r_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state11, s_addr_4_reg_934, s_addr_5_reg_942, ap_CS_fsm_state13, exitcond1_fu_754_p2, ap_CS_fsm_state16, tmp_21_fu_790_p1, grp_crypto_sort_fu_367_array_r_address0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state15, tmp_6_fu_483_p1, tmp_8_fu_563_p1, tmp_11_fu_643_p1, tmp_16_fu_725_p1, tmp_17_fu_742_p1, tmp_19_fu_760_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            s_address0 <= tmp_21_fu_790_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            s_address0 <= s_addr_5_reg_942;
        elsif (((exitcond1_fu_754_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            s_address0 <= tmp_19_fu_760_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            s_address0 <= s_addr_4_reg_934;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            s_address0 <= tmp_17_fu_742_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            s_address0 <= tmp_16_fu_725_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_address0 <= tmp_11_fu_643_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            s_address0 <= tmp_8_fu_563_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_address0 <= tmp_6_fu_483_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            s_address0 <= grp_crypto_sort_fu_367_array_r_address0;
        else 
            s_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    s_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state13, exitcond1_fu_754_p2, ap_CS_fsm_state16, grp_crypto_sort_fu_367_array_r_ce0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((exitcond1_fu_754_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            s_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            s_ce0 <= grp_crypto_sort_fu_367_array_r_ce0;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(grp_crypto_sort_fu_367_array_r_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            s_ce1 <= grp_crypto_sort_fu_367_array_r_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, grp_crypto_sort_fu_367_array_r_d0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state15, tmp_4_fu_460_p6, tmp_3_fu_542_p7, tmp_s_fu_622_p7, tmp_14_fu_713_p2, tmp_18_fu_747_p2, tmp_20_fu_771_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            s_d0 <= tmp_20_fu_771_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            s_d0 <= tmp_18_fu_747_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            s_d0 <= tmp_14_fu_713_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_d0 <= tmp_s_fu_622_p7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            s_d0 <= tmp_3_fu_542_p7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_d0 <= tmp_4_fu_460_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            s_d0 <= grp_crypto_sort_fu_367_array_r_d0;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, grp_crypto_sort_fu_367_array_r_we0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            s_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            s_we0 <= grp_crypto_sort_fu_367_array_r_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(grp_crypto_sort_fu_367_array_r_we1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            s_we1 <= grp_crypto_sort_fu_367_array_r_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sum10_cast_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum10_fu_598_p2),64));
    sum10_fu_598_p2 <= std_logic_vector(unsigned(ap_const_lv13_33E) + unsigned(tmp_reg_812));
    sum11_cast_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum11_fu_608_p2),64));
    sum11_fu_608_p2 <= std_logic_vector(unsigned(ap_const_lv13_33F) + unsigned(tmp_reg_812));
    sum12_cast_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum12_fu_658_p2),64));
    sum12_fu_658_p2 <= std_logic_vector(unsigned(ap_const_lv13_340) + unsigned(tmp_reg_812));
    sum13_cast_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum13_fu_668_p2),64));
    sum13_fu_668_p2 <= std_logic_vector(unsigned(ap_const_lv13_341) + unsigned(tmp_reg_812));
    sum14_cast_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum14_fu_678_p2),64));
    sum14_fu_678_p2 <= std_logic_vector(unsigned(ap_const_lv13_342) + unsigned(tmp_reg_812));
    sum1_cast_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_498_p2),64));
    sum1_fu_498_p2 <= std_logic_vector(unsigned(ap_const_lv13_338) + unsigned(tmp_reg_812));
    sum2_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_425_p2),64));
    sum2_fu_425_p2 <= std_logic_vector(unsigned(ap_const_lv13_335) + unsigned(tmp_fu_408_p2));
    sum3_cast_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_fu_508_p2),64));
    sum3_fu_508_p2 <= std_logic_vector(unsigned(ap_const_lv13_339) + unsigned(tmp_reg_812));
    sum4_cast_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_fu_518_p2),64));
    sum4_fu_518_p2 <= std_logic_vector(unsigned(ap_const_lv13_33A) + unsigned(tmp_reg_812));
    sum5_cast_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_fu_528_p2),64));
    sum5_fu_528_p2 <= std_logic_vector(unsigned(ap_const_lv13_33B) + unsigned(tmp_reg_812));
    sum6_cast_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum6_fu_436_p2),64));
    sum6_fu_436_p2 <= std_logic_vector(unsigned(ap_const_lv13_336) + unsigned(tmp_reg_812));
    sum7_cast_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum7_fu_578_p2),64));
    sum7_fu_578_p2 <= std_logic_vector(unsigned(ap_const_lv13_33C) + unsigned(tmp_reg_812));
    sum8_cast_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum8_fu_446_p2),64));
    sum8_fu_446_p2 <= std_logic_vector(unsigned(ap_const_lv13_337) + unsigned(tmp_reg_812));
    sum9_cast_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum9_fu_588_p2),64));
    sum9_fu_588_p2 <= std_logic_vector(unsigned(ap_const_lv13_33D) + unsigned(tmp_reg_812));
    sum_cast_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_414_p2),64));
    sum_fu_414_p2 <= std_logic_vector(unsigned(ap_const_lv13_334) + unsigned(tmp_fu_408_p2));
    tmp9_fu_701_p5 <= (((u_q0 & ap_const_lv1_0) & u_q1) & ap_const_lv15_0);
    tmp_10_fu_456_p1 <= u_q1(6 - 1 downto 0);
    tmp_11_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_638_p2),64));
    tmp_13_fu_688_p4 <= ((reg_372 & tmp_12_reg_906) & ap_const_lv2_0);
    tmp_14_fu_713_p2 <= std_logic_vector(unsigned(tmp9_fu_701_p5) + unsigned(tmp_73_cast_fu_697_p1));
    tmp_15_fu_720_p2 <= (tmp_5_reg_849 or ap_const_lv10_3);
    tmp_16_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_720_p2),64));
    tmp_17_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_334),64));
    tmp_18_fu_747_p2 <= (s_q0 or ap_const_lv32_1);
    tmp_19_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_345),64));
    tmp_1_fu_638_p2 <= (tmp_5_reg_849 or ap_const_lv10_2);
    tmp_20_fu_771_p2 <= (s_q0 or ap_const_lv32_2);
    tmp_21_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_356),64));
    tmp_24_fu_538_p1 <= u_q1(4 - 1 downto 0);
    tmp_25_fu_618_p1 <= u_q1(2 - 1 downto 0);
    tmp_26_fu_795_p1 <= s_q0(2 - 1 downto 0);
    tmp_3_fu_542_p7 <= (((((tmp_24_fu_538_p1 & u_q0) & reg_376) & reg_372) & tmp_2_reg_856) & ap_const_lv2_0);
    tmp_4_fu_460_p6 <= ((((tmp_10_fu_456_p1 & u_q0) & reg_376) & reg_372) & ap_const_lv2_0);
    tmp_5_fu_475_p3 <= (i_reg_322 & ap_const_lv2_0);
    tmp_6_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_475_p3),64));
    tmp_73_cast_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_688_p4),32));
    tmp_7_fu_558_p2 <= (tmp_5_reg_849 or ap_const_lv10_1);
    tmp_8_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_558_p2),64));
    tmp_92_cast_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_795_p1),16));
    tmp_fu_408_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_404_p1) - unsigned(i_cast1_fu_380_p1));
    tmp_s_fu_622_p7 <= (((((tmp_25_fu_618_p1 & u_q0) & reg_376) & reg_372) & tmp_9_reg_881) & ap_const_lv2_0);

    u_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, sum_cast_fu_420_p1, sum6_cast_fu_441_p1, sum1_cast_fu_503_p1, sum4_cast_fu_523_p1, sum7_cast_fu_583_p1, sum10_cast_fu_603_p1, sum12_cast_fu_663_p1, sum14_cast_fu_683_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            u_address0 <= sum14_cast_fu_683_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            u_address0 <= sum12_cast_fu_663_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            u_address0 <= sum10_cast_fu_603_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            u_address0 <= sum7_cast_fu_583_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            u_address0 <= sum4_cast_fu_523_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            u_address0 <= sum1_cast_fu_503_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            u_address0 <= sum6_cast_fu_441_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            u_address0 <= sum_cast_fu_420_p1(12 - 1 downto 0);
        else 
            u_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    u_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, sum2_cast_fu_431_p1, sum8_cast_fu_451_p1, sum3_cast_fu_513_p1, sum5_cast_fu_533_p1, sum9_cast_fu_593_p1, sum11_cast_fu_613_p1, sum13_cast_fu_673_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            u_address1 <= sum13_cast_fu_673_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            u_address1 <= sum11_cast_fu_613_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            u_address1 <= sum9_cast_fu_593_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            u_address1 <= sum5_cast_fu_533_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            u_address1 <= sum3_cast_fu_513_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            u_address1 <= sum8_cast_fu_451_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            u_address1 <= sum2_cast_fu_431_p1(12 - 1 downto 0);
        else 
            u_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    u_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            u_ce0 <= ap_const_logic_1;
        else 
            u_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    u_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            u_ce1 <= ap_const_logic_1;
        else 
            u_ce1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
