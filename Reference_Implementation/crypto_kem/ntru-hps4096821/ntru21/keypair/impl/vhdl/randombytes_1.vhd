-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity randombytes_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_we0 : OUT STD_LOGIC;
    x_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    DRBG_ctx_V_ce0 : OUT STD_LOGIC;
    DRBG_ctx_V_we0 : OUT STD_LOGIC;
    DRBG_ctx_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    DRBG_ctx_V_ce1 : OUT STD_LOGIC;
    DRBG_ctx_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    DRBG_ctx_Key_ce0 : OUT STD_LOGIC;
    DRBG_ctx_Key_we0 : OUT STD_LOGIC;
    DRBG_ctx_Key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    DRBG_ctx_Key_ce1 : OUT STD_LOGIC;
    DRBG_ctx_Key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_reseed_coun_i : IN STD_LOGIC_VECTOR (31 downto 0);
    DRBG_ctx_reseed_coun_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    DRBG_ctx_reseed_coun_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of randombytes_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_FFFFFFFFFFFFFFF0 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111110000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv12_616 : STD_LOGIC_VECTOR (11 downto 0) := "011000010110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_0_load_reg_405 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal DRBG_ctx_V_addr_reg_418 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_27_fu_224_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_243_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_24_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_431 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_AES256_ECB_1_fu_185_ap_ready : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_185_ap_done : STD_LOGIC;
    signal tmp_30_fu_271_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_30_reg_435 : STD_LOGIC_VECTOR (11 downto 0);
    signal loop_1_fu_281_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_1_reg_444 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_2_fu_323_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal loop_2_reg_457 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_32_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal block_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal block_ce0 : STD_LOGIC;
    signal block_we0 : STD_LOGIC;
    signal block_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal block_ce1 : STD_LOGIC;
    signal block_we1 : STD_LOGIC;
    signal grp_AES256_CTR_DRBG_Upda_fu_173_ap_start : STD_LOGIC;
    signal grp_AES256_CTR_DRBG_Upda_fu_173_ap_done : STD_LOGIC;
    signal grp_AES256_CTR_DRBG_Upda_fu_173_ap_idle : STD_LOGIC;
    signal grp_AES256_CTR_DRBG_Upda_fu_173_ap_ready : STD_LOGIC;
    signal grp_AES256_CTR_DRBG_Upda_fu_173_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES256_CTR_DRBG_Upda_fu_173_V_ce0 : STD_LOGIC;
    signal grp_AES256_CTR_DRBG_Upda_fu_173_V_we0 : STD_LOGIC;
    signal grp_AES256_CTR_DRBG_Upda_fu_173_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES256_CTR_DRBG_Upda_fu_173_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES256_CTR_DRBG_Upda_fu_173_V_ce1 : STD_LOGIC;
    signal grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_ce0 : STD_LOGIC;
    signal grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_we0 : STD_LOGIC;
    signal grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_ce1 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_185_ap_start : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_185_ap_idle : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_185_key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_AES256_ECB_1_fu_185_key_ce0 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_185_key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_AES256_ECB_1_fu_185_key_ce1 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_185_ctr_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES256_ECB_1_fu_185_ctr_ce0 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_185_ctr_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES256_ECB_1_fu_185_ctr_ce1 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_185_buffer_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES256_ECB_1_fu_185_buffer_r_ce0 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_185_buffer_r_we0 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_185_buffer_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES256_ECB_1_fu_185_buffer_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES256_ECB_1_fu_185_buffer_r_ce1 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_185_buffer_r_we1 : STD_LOGIC;
    signal grp_AES256_ECB_1_fu_185_buffer_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_137 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_reg_149 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal loop1_reg_161 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_AES256_CTR_DRBG_Upda_fu_173_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_AES256_ECB_1_fu_185_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_23_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_fu_70 : STD_LOGIC_VECTOR (63 downto 0);
    signal xlen_assign_fu_298_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_8_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_249_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_256_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_25_fu_334_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_102_cast_fu_338_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum_fu_343_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_26_fu_354_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_104_cast_fu_358_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum2_fu_363_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component AES256_CTR_DRBG_Upda IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V_ce0 : OUT STD_LOGIC;
        V_we0 : OUT STD_LOGIC;
        V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        V_ce1 : OUT STD_LOGIC;
        V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        DRBG_ctx_Key_ce0 : OUT STD_LOGIC;
        DRBG_ctx_Key_we0 : OUT STD_LOGIC;
        DRBG_ctx_Key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        DRBG_ctx_Key_ce1 : OUT STD_LOGIC;
        DRBG_ctx_Key_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES256_ECB_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        key_ce0 : OUT STD_LOGIC;
        key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        key_ce1 : OUT STD_LOGIC;
        key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctr_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ctr_ce0 : OUT STD_LOGIC;
        ctr_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ctr_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ctr_ce1 : OUT STD_LOGIC;
        ctr_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_r_ce1 : OUT STD_LOGIC;
        buffer_r_we1 : OUT STD_LOGIC;
        buffer_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component randombytes_block IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    block_U : component randombytes_block
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => block_address0,
        ce0 => block_ce0,
        we0 => block_we0,
        d0 => grp_AES256_ECB_1_fu_185_buffer_r_d0,
        q0 => block_q0,
        address1 => grp_AES256_ECB_1_fu_185_buffer_r_address1,
        ce1 => block_ce1,
        we1 => block_we1,
        d1 => grp_AES256_ECB_1_fu_185_buffer_r_d1);

    grp_AES256_CTR_DRBG_Upda_fu_173 : component AES256_CTR_DRBG_Upda
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AES256_CTR_DRBG_Upda_fu_173_ap_start,
        ap_done => grp_AES256_CTR_DRBG_Upda_fu_173_ap_done,
        ap_idle => grp_AES256_CTR_DRBG_Upda_fu_173_ap_idle,
        ap_ready => grp_AES256_CTR_DRBG_Upda_fu_173_ap_ready,
        V_address0 => grp_AES256_CTR_DRBG_Upda_fu_173_V_address0,
        V_ce0 => grp_AES256_CTR_DRBG_Upda_fu_173_V_ce0,
        V_we0 => grp_AES256_CTR_DRBG_Upda_fu_173_V_we0,
        V_d0 => grp_AES256_CTR_DRBG_Upda_fu_173_V_d0,
        V_q0 => DRBG_ctx_V_q0,
        V_address1 => grp_AES256_CTR_DRBG_Upda_fu_173_V_address1,
        V_ce1 => grp_AES256_CTR_DRBG_Upda_fu_173_V_ce1,
        V_q1 => DRBG_ctx_V_q1,
        DRBG_ctx_Key_address0 => grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_address0,
        DRBG_ctx_Key_ce0 => grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_ce0,
        DRBG_ctx_Key_we0 => grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_we0,
        DRBG_ctx_Key_d0 => grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_d0,
        DRBG_ctx_Key_q0 => DRBG_ctx_Key_q0,
        DRBG_ctx_Key_address1 => grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_address1,
        DRBG_ctx_Key_ce1 => grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_ce1,
        DRBG_ctx_Key_q1 => DRBG_ctx_Key_q1);

    grp_AES256_ECB_1_fu_185 : component AES256_ECB_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AES256_ECB_1_fu_185_ap_start,
        ap_done => grp_AES256_ECB_1_fu_185_ap_done,
        ap_idle => grp_AES256_ECB_1_fu_185_ap_idle,
        ap_ready => grp_AES256_ECB_1_fu_185_ap_ready,
        key_address0 => grp_AES256_ECB_1_fu_185_key_address0,
        key_ce0 => grp_AES256_ECB_1_fu_185_key_ce0,
        key_q0 => DRBG_ctx_Key_q0,
        key_address1 => grp_AES256_ECB_1_fu_185_key_address1,
        key_ce1 => grp_AES256_ECB_1_fu_185_key_ce1,
        key_q1 => DRBG_ctx_Key_q1,
        ctr_address0 => grp_AES256_ECB_1_fu_185_ctr_address0,
        ctr_ce0 => grp_AES256_ECB_1_fu_185_ctr_ce0,
        ctr_q0 => DRBG_ctx_V_q0,
        ctr_address1 => grp_AES256_ECB_1_fu_185_ctr_address1,
        ctr_ce1 => grp_AES256_ECB_1_fu_185_ctr_ce1,
        ctr_q1 => DRBG_ctx_V_q1,
        buffer_r_address0 => grp_AES256_ECB_1_fu_185_buffer_r_address0,
        buffer_r_ce0 => grp_AES256_ECB_1_fu_185_buffer_r_ce0,
        buffer_r_we0 => grp_AES256_ECB_1_fu_185_buffer_r_we0,
        buffer_r_d0 => grp_AES256_ECB_1_fu_185_buffer_r_d0,
        buffer_r_address1 => grp_AES256_ECB_1_fu_185_buffer_r_address1,
        buffer_r_ce1 => grp_AES256_ECB_1_fu_185_buffer_r_ce1,
        buffer_r_we1 => grp_AES256_ECB_1_fu_185_buffer_r_we1,
        buffer_r_d1 => grp_AES256_ECB_1_fu_185_buffer_r_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_AES256_CTR_DRBG_Upda_fu_173_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AES256_CTR_DRBG_Upda_fu_173_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_fu_214_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_AES256_CTR_DRBG_Upda_fu_173_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AES256_CTR_DRBG_Upda_fu_173_ap_ready = ap_const_logic_1)) then 
                    grp_AES256_CTR_DRBG_Upda_fu_173_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_AES256_ECB_1_fu_185_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AES256_ECB_1_fu_185_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_AES256_ECB_1_fu_185_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AES256_ECB_1_fu_185_ap_ready = ap_const_logic_1)) then 
                    grp_AES256_ECB_1_fu_185_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_275_p2 = ap_const_lv1_1) and (icmp_reg_431 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_fu_74 <= i_8_fu_292_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_74 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_137 <= ap_const_lv5_F;
            elsif (((tmp_24_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_137 <= j_1_fu_243_p2;
            end if; 
        end if;
    end process;

    loop1_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_AES256_ECB_1_fu_185_ap_done = ap_const_logic_1) and (icmp_fu_265_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                loop1_reg_161 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                loop1_reg_161 <= loop_2_reg_457;
            end if; 
        end if;
    end process;

    loop_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_AES256_ECB_1_fu_185_ap_done = ap_const_logic_1) and (icmp_fu_265_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                loop_reg_149 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                loop_reg_149 <= loop_1_reg_444;
            end if; 
        end if;
    end process;

    p_0_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_reg_431 = ap_const_lv1_1) and (tmp_32_fu_318_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_0_fu_70 <= ap_const_lv64_0;
            elsif (((exitcond_fu_275_p2 = ap_const_lv1_1) and (icmp_reg_431 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                p_0_fu_70 <= xlen_assign_fu_298_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0_fu_70 <= ap_const_lv64_20;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_27_fu_224_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                DRBG_ctx_V_addr_reg_418 <= tmp_23_fu_232_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_AES256_ECB_1_fu_185_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                icmp_reg_431 <= icmp_fu_265_p2;
                tmp_30_reg_435 <= tmp_30_fu_271_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_reg_431 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                loop_1_reg_444 <= loop_1_fu_281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_reg_431 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                loop_2_reg_457 <= loop_2_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                p_0_load_reg_405 <= p_0_fu_70;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_27_fu_224_p3, ap_CS_fsm_state4, tmp_24_fu_237_p2, icmp_reg_431, ap_CS_fsm_state6, grp_AES256_ECB_1_fu_185_ap_done, ap_CS_fsm_state7, exitcond_fu_275_p2, tmp_32_fu_318_p2, grp_AES256_CTR_DRBG_Upda_fu_173_ap_done, tmp_fu_214_p2, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_27_fu_224_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_24_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_AES256_ECB_1_fu_185_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (((icmp_reg_431 = ap_const_lv1_1) and (tmp_32_fu_318_p2 = ap_const_lv1_0)) or ((exitcond_fu_275_p2 = ap_const_lv1_1) and (icmp_reg_431 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((icmp_reg_431 = ap_const_lv1_1) and (tmp_32_fu_318_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_AES256_CTR_DRBG_Upda_fu_173_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    DRBG_ctx_Key_address0_assign_proc : process(ap_CS_fsm_state6, grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_address0, grp_AES256_ECB_1_fu_185_key_address0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_Key_address0 <= grp_AES256_ECB_1_fu_185_key_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_Key_address0 <= grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_address0;
        else 
            DRBG_ctx_Key_address0 <= "XXXXX";
        end if; 
    end process;


    DRBG_ctx_Key_address1_assign_proc : process(ap_CS_fsm_state6, grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_address1, grp_AES256_ECB_1_fu_185_key_address1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_Key_address1 <= grp_AES256_ECB_1_fu_185_key_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_Key_address1 <= grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_address1;
        else 
            DRBG_ctx_Key_address1 <= "XXXXX";
        end if; 
    end process;


    DRBG_ctx_Key_ce0_assign_proc : process(ap_CS_fsm_state6, grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_ce0, grp_AES256_ECB_1_fu_185_key_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_Key_ce0 <= grp_AES256_ECB_1_fu_185_key_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_Key_ce0 <= grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_ce0;
        else 
            DRBG_ctx_Key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_Key_ce1_assign_proc : process(ap_CS_fsm_state6, grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_ce1, grp_AES256_ECB_1_fu_185_key_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_Key_ce1 <= grp_AES256_ECB_1_fu_185_key_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_Key_ce1 <= grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_ce1;
        else 
            DRBG_ctx_Key_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    DRBG_ctx_Key_d0 <= grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_d0;

    DRBG_ctx_Key_we0_assign_proc : process(grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_Key_we0 <= grp_AES256_CTR_DRBG_Upda_fu_173_DRBG_ctx_Key_we0;
        else 
            DRBG_ctx_Key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_V_address0_assign_proc : process(DRBG_ctx_V_addr_reg_418, ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_24_fu_237_p2, ap_CS_fsm_state6, grp_AES256_CTR_DRBG_Upda_fu_173_V_address0, grp_AES256_ECB_1_fu_185_ctr_address0, ap_CS_fsm_state10, tmp_23_fu_232_p1)
    begin
        if ((((tmp_24_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((tmp_24_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            DRBG_ctx_V_address0 <= DRBG_ctx_V_addr_reg_418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            DRBG_ctx_V_address0 <= tmp_23_fu_232_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_V_address0 <= grp_AES256_ECB_1_fu_185_ctr_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_V_address0 <= grp_AES256_CTR_DRBG_Upda_fu_173_V_address0;
        else 
            DRBG_ctx_V_address0 <= "XXXX";
        end if; 
    end process;


    DRBG_ctx_V_address1_assign_proc : process(ap_CS_fsm_state6, grp_AES256_CTR_DRBG_Upda_fu_173_V_address1, grp_AES256_ECB_1_fu_185_ctr_address1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_V_address1 <= grp_AES256_ECB_1_fu_185_ctr_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_V_address1 <= grp_AES256_CTR_DRBG_Upda_fu_173_V_address1;
        else 
            DRBG_ctx_V_address1 <= "XXXX";
        end if; 
    end process;


    DRBG_ctx_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_24_fu_237_p2, ap_CS_fsm_state6, grp_AES256_CTR_DRBG_Upda_fu_173_V_ce0, grp_AES256_ECB_1_fu_185_ctr_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_24_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((tmp_24_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            DRBG_ctx_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_V_ce0 <= grp_AES256_ECB_1_fu_185_ctr_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_V_ce0 <= grp_AES256_CTR_DRBG_Upda_fu_173_V_ce0;
        else 
            DRBG_ctx_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_V_ce1_assign_proc : process(ap_CS_fsm_state6, grp_AES256_CTR_DRBG_Upda_fu_173_V_ce1, grp_AES256_ECB_1_fu_185_ctr_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_V_ce1 <= grp_AES256_ECB_1_fu_185_ctr_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_V_ce1 <= grp_AES256_CTR_DRBG_Upda_fu_173_V_ce1;
        else 
            DRBG_ctx_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_V_d0_assign_proc : process(ap_CS_fsm_state4, tmp_24_fu_237_p2, grp_AES256_CTR_DRBG_Upda_fu_173_V_d0, ap_CS_fsm_state10, tmp_28_fu_249_p2)
    begin
        if (((tmp_24_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DRBG_ctx_V_d0 <= tmp_28_fu_249_p2;
        elsif (((tmp_24_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            DRBG_ctx_V_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_V_d0 <= grp_AES256_CTR_DRBG_Upda_fu_173_V_d0;
        else 
            DRBG_ctx_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    DRBG_ctx_V_we0_assign_proc : process(ap_CS_fsm_state4, tmp_24_fu_237_p2, grp_AES256_CTR_DRBG_Upda_fu_173_V_we0, ap_CS_fsm_state10)
    begin
        if ((((tmp_24_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((tmp_24_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            DRBG_ctx_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            DRBG_ctx_V_we0 <= grp_AES256_CTR_DRBG_Upda_fu_173_V_we0;
        else 
            DRBG_ctx_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_reseed_coun_o_assign_proc : process(DRBG_ctx_reseed_coun_i, grp_AES256_CTR_DRBG_Upda_fu_173_ap_done, ap_CS_fsm_state10, tmp_s_fu_378_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_AES256_CTR_DRBG_Upda_fu_173_ap_done = ap_const_logic_1))) then 
            DRBG_ctx_reseed_coun_o <= tmp_s_fu_378_p2;
        else 
            DRBG_ctx_reseed_coun_o <= DRBG_ctx_reseed_coun_i;
        end if; 
    end process;


    DRBG_ctx_reseed_coun_o_ap_vld_assign_proc : process(grp_AES256_CTR_DRBG_Upda_fu_173_ap_done, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_AES256_CTR_DRBG_Upda_fu_173_ap_done = ap_const_logic_1))) then 
            DRBG_ctx_reseed_coun_o_ap_vld <= ap_const_logic_1;
        else 
            DRBG_ctx_reseed_coun_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_AES256_CTR_DRBG_Upda_fu_173_ap_done, ap_CS_fsm_state10)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_AES256_CTR_DRBG_Upda_fu_173_ap_done = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_AES256_CTR_DRBG_Upda_fu_173_ap_done, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_AES256_CTR_DRBG_Upda_fu_173_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    block_address0_assign_proc : process(icmp_reg_431, ap_CS_fsm_state6, ap_CS_fsm_state7, exitcond_fu_275_p2, tmp_32_fu_318_p2, grp_AES256_ECB_1_fu_185_buffer_r_address0, tmp_33_fu_287_p1, tmp_31_fu_313_p1)
    begin
        if (((icmp_reg_431 = ap_const_lv1_1) and (tmp_32_fu_318_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            block_address0 <= tmp_31_fu_313_p1(4 - 1 downto 0);
        elsif (((icmp_reg_431 = ap_const_lv1_0) and (exitcond_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            block_address0 <= tmp_33_fu_287_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_address0 <= grp_AES256_ECB_1_fu_185_buffer_r_address0;
        else 
            block_address0 <= "XXXX";
        end if; 
    end process;


    block_ce0_assign_proc : process(icmp_reg_431, ap_CS_fsm_state6, ap_CS_fsm_state7, exitcond_fu_275_p2, tmp_32_fu_318_p2, grp_AES256_ECB_1_fu_185_buffer_r_ce0)
    begin
        if ((((icmp_reg_431 = ap_const_lv1_1) and (tmp_32_fu_318_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_reg_431 = ap_const_lv1_0) and (exitcond_fu_275_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            block_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_ce0 <= grp_AES256_ECB_1_fu_185_buffer_r_ce0;
        else 
            block_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    block_ce1_assign_proc : process(ap_CS_fsm_state6, grp_AES256_ECB_1_fu_185_buffer_r_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_ce1 <= grp_AES256_ECB_1_fu_185_buffer_r_ce1;
        else 
            block_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    block_we0_assign_proc : process(ap_CS_fsm_state6, grp_AES256_ECB_1_fu_185_buffer_r_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_we0 <= grp_AES256_ECB_1_fu_185_buffer_r_we0;
        else 
            block_we0 <= ap_const_logic_0;
        end if; 
    end process;


    block_we1_assign_proc : process(ap_CS_fsm_state6, grp_AES256_ECB_1_fu_185_buffer_r_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            block_we1 <= grp_AES256_ECB_1_fu_185_buffer_r_we1;
        else 
            block_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_275_p2 <= "1" when (loop_reg_149 = ap_const_lv5_10) else "0";
    grp_AES256_CTR_DRBG_Upda_fu_173_ap_start <= grp_AES256_CTR_DRBG_Upda_fu_173_ap_start_reg;
    grp_AES256_ECB_1_fu_185_ap_start <= grp_AES256_ECB_1_fu_185_ap_start_reg;
    i_8_fu_292_p2 <= std_logic_vector(unsigned(i_fu_74) + unsigned(ap_const_lv32_10));
    icmp_fu_265_p2 <= "1" when (tmp_29_fu_256_p4 = ap_const_lv60_0) else "0";
    j_1_fu_243_p2 <= std_logic_vector(signed(j_reg_137) + signed(ap_const_lv5_1F));
        j_cast_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_reg_137),32));

    loop_1_fu_281_p2 <= std_logic_vector(unsigned(loop_reg_149) + unsigned(ap_const_lv5_1));
    loop_2_fu_323_p2 <= std_logic_vector(unsigned(loop1_reg_161) + unsigned(ap_const_lv4_1));
        sum2_cast_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum2_fu_363_p2),64));

    sum2_fu_363_p2 <= std_logic_vector(unsigned(tmp_104_cast_fu_358_p2) + unsigned(ap_const_lv12_616));
        sum_cast_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_fu_343_p2),64));

    sum_fu_343_p2 <= std_logic_vector(unsigned(tmp_102_cast_fu_338_p2) + unsigned(ap_const_lv12_616));
    tmp_102_cast_fu_338_p2 <= std_logic_vector(unsigned(tmp_30_reg_435) + unsigned(tmp_25_fu_334_p1));
    tmp_104_cast_fu_358_p2 <= std_logic_vector(unsigned(tmp_26_fu_354_p1) + unsigned(tmp_30_reg_435));
    tmp_23_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_cast_fu_220_p1),64));
    tmp_24_fu_237_p2 <= "1" when (DRBG_ctx_V_q0 = ap_const_lv8_FF) else "0";
    tmp_25_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_reg_149),12));
    tmp_26_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop1_reg_161),12));
    tmp_27_fu_224_p3 <= j_reg_137(4 downto 4);
    tmp_28_fu_249_p2 <= std_logic_vector(unsigned(DRBG_ctx_V_q0) + unsigned(ap_const_lv8_1));
    tmp_29_fu_256_p4 <= p_0_load_reg_405(63 downto 4);
    tmp_30_fu_271_p1 <= i_fu_74(12 - 1 downto 0);
    tmp_31_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop1_reg_161),64));
    tmp_32_fu_318_p2 <= "1" when (unsigned(tmp_31_fu_313_p1) < unsigned(p_0_load_reg_405)) else "0";
    tmp_33_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_reg_149),64));
    tmp_fu_214_p2 <= "1" when (p_0_fu_70 = ap_const_lv64_0) else "0";
    tmp_s_fu_378_p2 <= std_logic_vector(unsigned(DRBG_ctx_reseed_coun_i) + unsigned(ap_const_lv32_1));

    x_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, sum_cast_fu_349_p1, sum2_cast_fu_369_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x_address0 <= sum2_cast_fu_369_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_address0 <= sum_cast_fu_349_p1(11 - 1 downto 0);
        else 
            x_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    x_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_d0 <= block_q0;

    x_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            x_we0 <= ap_const_logic_1;
        else 
            x_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xlen_assign_fu_298_p2 <= std_logic_vector(unsigned(p_0_load_reg_405) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFF0));
end behav;
