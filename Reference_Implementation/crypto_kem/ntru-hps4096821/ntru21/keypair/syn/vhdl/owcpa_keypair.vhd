-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity owcpa_keypair is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pk_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pk_ce0 : OUT STD_LOGIC;
    pk_we0 : OUT STD_LOGIC;
    pk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pk_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pk_ce1 : OUT STD_LOGIC;
    pk_we1 : OUT STD_LOGIC;
    pk_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sk_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    sk_ce0 : OUT STD_LOGIC;
    sk_we0 : OUT STD_LOGIC;
    sk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sk_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    sk_ce1 : OUT STD_LOGIC;
    sk_we1 : OUT STD_LOGIC;
    sk_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    seed_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    seed_ce0 : OUT STD_LOGIC;
    seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    seed_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    seed_ce1 : OUT STD_LOGIC;
    seed_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of owcpa_keypair is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (60 downto 0) := "0000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (60 downto 0) := "0000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (60 downto 0) := "0000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (60 downto 0) := "0000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (60 downto 0) := "0000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (60 downto 0) := "0000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (60 downto 0) := "0001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (60 downto 0) := "0010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (60 downto 0) := "0100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (60 downto 0) := "1000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv10_A4 : STD_LOGIC_VECTOR (9 downto 0) := "0010100100";
    constant ap_const_lv64_334 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001100110100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv10_334 : STD_LOGIC_VECTOR (9 downto 0) := "1100110100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_335 : STD_LOGIC_VECTOR (9 downto 0) := "1100110101";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv9_19A : STD_LOGIC_VECTOR (8 downto 0) := "110011010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv12_148 : STD_LOGIC_VECTOR (11 downto 0) := "000101001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_149 : STD_LOGIC_VECTOR (11 downto 0) := "000101001001";
    constant ap_const_lv12_14A : STD_LOGIC_VECTOR (11 downto 0) := "000101001010";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_562 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal i_33_fu_574_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_33_reg_1240 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_i_i_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_reg_1245 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_i_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_2_fu_697_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_2_reg_1255 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_34_fu_770_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_34_reg_1264 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal f_coeffs_addr_2_reg_1269 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_35_fu_832_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_35_reg_1277 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal h_coeffs_addr_reg_1282 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i6_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_36_fu_894_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_36_reg_1290 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_s_fu_900_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_1295 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_37_fu_932_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_37_reg_1308 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_i4_fu_938_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i4_reg_1313 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_i_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_38_fu_964_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_38_reg_1326 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_191_i_fu_970_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_191_i_reg_1331 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i7_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_coeffs_addr_reg_1341 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_poly_Rq_mul_fu_518_ap_ready : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_518_ap_done : STD_LOGIC;
    signal i_39_fu_981_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_39_reg_1354 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal h_coeffs_addr_4_reg_1359 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i2_fu_975_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_40_fu_1017_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_40_reg_1368 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal exitcond_i3_fu_1011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_120_i_fu_1048_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_120_i_reg_1378 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_41_fu_1129_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_41_reg_1393 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal exitcond_i_i1_fu_1123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_132_i_i_fu_1160_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_132_i_i_reg_1403 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal b_coeffs_ce0 : STD_LOGIC;
    signal b_coeffs_we0 : STD_LOGIC;
    signal b_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_coeffs_ce0 : STD_LOGIC;
    signal c_coeffs_we0 : STD_LOGIC;
    signal c_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_coeffs_ce0 : STD_LOGIC;
    signal s_coeffs_we0 : STD_LOGIC;
    signal s_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ai2_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal ai2_coeffs_ce0 : STD_LOGIC;
    signal ai2_coeffs_we0 : STD_LOGIC_VECTOR (1 downto 0);
    signal ai2_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x1_coeffs_ce0 : STD_LOGIC;
    signal x1_coeffs_we0 : STD_LOGIC;
    signal x1_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_ce1 : STD_LOGIC;
    signal x1_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x2_coeffs_ce0 : STD_LOGIC;
    signal x2_coeffs_we0 : STD_LOGIC_VECTOR (1 downto 0);
    signal x2_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal x2_coeffs_ce1 : STD_LOGIC;
    signal x2_coeffs_we1 : STD_LOGIC_VECTOR (1 downto 0);
    signal x2_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x3_coeffs_ce0 : STD_LOGIC;
    signal x3_coeffs_we0 : STD_LOGIC;
    signal x3_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal x3_coeffs_ce1 : STD_LOGIC;
    signal x3_coeffs_we1 : STD_LOGIC;
    signal x3_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x4_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x4_coeffs_ce0 : STD_LOGIC;
    signal x4_coeffs_we0 : STD_LOGIC;
    signal x4_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x4_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x5_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x5_coeffs_ce0 : STD_LOGIC;
    signal x5_coeffs_we0 : STD_LOGIC;
    signal x5_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_fixed_type_fu_499_ap_start : STD_LOGIC;
    signal grp_sample_fixed_type_fu_499_ap_done : STD_LOGIC;
    signal grp_sample_fixed_type_fu_499_ap_idle : STD_LOGIC;
    signal grp_sample_fixed_type_fu_499_ap_ready : STD_LOGIC;
    signal grp_sample_fixed_type_fu_499_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_sample_fixed_type_fu_499_r_coeffs_ce0 : STD_LOGIC;
    signal grp_sample_fixed_type_fu_499_r_coeffs_we0 : STD_LOGIC;
    signal grp_sample_fixed_type_fu_499_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_fixed_type_fu_499_u_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_sample_fixed_type_fu_499_u_ce0 : STD_LOGIC;
    signal grp_sample_fixed_type_fu_499_u_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_sample_fixed_type_fu_499_u_ce1 : STD_LOGIC;
    signal grp_poly_S3_inv_fu_506_ap_start : STD_LOGIC;
    signal grp_poly_S3_inv_fu_506_ap_done : STD_LOGIC;
    signal grp_poly_S3_inv_fu_506_ap_idle : STD_LOGIC;
    signal grp_poly_S3_inv_fu_506_ap_ready : STD_LOGIC;
    signal grp_poly_S3_inv_fu_506_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_inv_fu_506_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_inv_fu_506_r_coeffs_we0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_poly_S3_inv_fu_506_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_inv_fu_506_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_inv_fu_506_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_S3_inv_fu_506_r_coeffs_we1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_poly_S3_inv_fu_506_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_inv_fu_506_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_inv_fu_506_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_R2_inv_fu_512_ap_start : STD_LOGIC;
    signal grp_poly_R2_inv_fu_512_ap_done : STD_LOGIC;
    signal grp_poly_R2_inv_fu_512_ap_idle : STD_LOGIC;
    signal grp_poly_R2_inv_fu_512_ap_ready : STD_LOGIC;
    signal grp_poly_R2_inv_fu_512_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_R2_inv_fu_512_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_R2_inv_fu_512_r_coeffs_we0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_poly_R2_inv_fu_512_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_R2_inv_fu_512_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_R2_inv_fu_512_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_518_ap_start : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_518_ap_idle : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_518_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_518_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_518_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_518_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_mul_fu_518_r_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_mul_fu_518_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_518_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_518_a_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_mul_fu_518_b_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_518_b_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_518_b_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_tobytes_fu_525_ap_start : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_525_ap_done : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_525_ap_idle : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_525_ap_ready : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_525_msg_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_S3_tobytes_fu_525_msg_ce0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_525_msg_we0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_525_msg_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_S3_tobytes_fu_525_msg_offset : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_tobytes_fu_525_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_tobytes_fu_525_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_525_a_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_tobytes_fu_525_a_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_tobytes_fu_525_a_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_525_a_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_i_i_reg_400 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_i_reg_411 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_i5_reg_422 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_reg_433 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_i1_reg_444 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal i_1_i_reg_455 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_i2_reg_466 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal i_i3_reg_477 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal i_i_i1_reg_488 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal grp_sample_fixed_type_fu_499_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_poly_S3_inv_fu_506_ap_start_reg : STD_LOGIC := '0';
    signal grp_poly_R2_inv_fu_512_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_poly_Rq_mul_fu_518_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal grp_poly_S3_tobytes_fu_525_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_i_fu_776_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i7_fu_838_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_fu_987_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i5_fu_1031_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_123_i_fu_1060_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i_cast_fu_1075_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_i_cast_fu_1104_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_i_cast_fu_1114_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_78_fu_1143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_136_i_i_fu_1172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_i_i_fu_1185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_141_i_i_fu_1218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_145_i_i_fu_1232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_287_i_i_i_fu_757_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_118_i_fu_817_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_118_i1_fu_879_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_235_cast_fu_921_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_535_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_210_fu_1065_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_212_fu_1177_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_589_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_585_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_279_i_i_i_cast_fu_603_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_278_i_i_i_cast_fu_599_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_613_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_fu_619_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_39_fu_637_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_202_fu_633_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal fold1_i_i_i_cast_fu_647_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_281_i_i_i_cast_fu_653_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_280_i_i_i_cast_fu_629_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_1_fu_657_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_27_fu_663_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_25_fu_607_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_40_fu_677_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal fold2_i_i_i_cast_fu_687_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_283_i_i_i_cast_fu_693_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_282_i_i_i_cast_fu_673_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_fu_703_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_203_fu_708_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_cast_fu_716_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_284_i_i_i_fu_724_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal not_tmp_28_i_i_i_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_285_i_i_i_cast_c_fu_739_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_286_i_i_i_fu_747_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_284_i_i_i_cast_fu_729_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_286_i_i_i_cast_fu_753_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_44_fu_781_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_204_fu_797_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_116_i_cast_fu_791_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_47_fu_807_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_46_fu_801_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_48_fu_843_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_205_fu_859_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_116_i1_cast_fu_853_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_51_fu_869_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_50_fu_863_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_206_fu_905_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_131_fu_911_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_207_fu_917_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_208_fu_943_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i6_cast_fu_947_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i4_75_fu_992_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_209_fu_998_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i3_fu_1023_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_i_fu_1036_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_i_cast_fu_1044_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_i3_cast1_fu_1007_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_122_i_fu_1054_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_i_fu_1070_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_211_fu_1080_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_125_i_fu_1084_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_542_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum2_i_fu_1099_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum4_i_fu_1109_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i1_fu_1135_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_i_i_fu_1148_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_i_i_cast_fu_1156_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_i_i1_cast9_fu_1119_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_134_i_i_fu_1166_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_132_i_i_cast_fu_1182_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_213_fu_1190_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_138_i_i_fu_1194_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_140_i_i_fu_1209_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_140_i_i_cast_fu_1214_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_144_i_i_fu_1223_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_144_i_i_cast_fu_1228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_block_state6_on_subcall_done : BOOLEAN;

    component sample_fixed_type IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        u_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        u_ce0 : OUT STD_LOGIC;
        u_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        u_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        u_ce1 : OUT STD_LOGIC;
        u_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component poly_S3_inv IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_R2_inv IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_Rq_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        b_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        b_coeffs_ce0 : OUT STD_LOGIC;
        b_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_S3_tobytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        msg_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msg_ce0 : OUT STD_LOGIC;
        msg_we0 : OUT STD_LOGIC;
        msg_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        msg_offset : IN STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce1 : OUT STD_LOGIC;
        a_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_S3_inv_b_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_keypair_ai2_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (1 downto 0);
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_keypair_x1_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_keypair_x2_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (1 downto 0);
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC_VECTOR (1 downto 0);
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_keypair_x3_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    b_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 821,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_coeffs_address0,
        ce0 => b_coeffs_ce0,
        we0 => b_coeffs_we0,
        d0 => b_coeffs_d0,
        q0 => b_coeffs_q0);

    c_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 821,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_coeffs_address0,
        ce0 => c_coeffs_ce0,
        we0 => c_coeffs_we0,
        d0 => c_coeffs_d0,
        q0 => c_coeffs_q0);

    s_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 821,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => s_coeffs_address0,
        ce0 => s_coeffs_ce0,
        we0 => s_coeffs_we0,
        d0 => grp_poly_Rq_mul_fu_518_r_coeffs_d0,
        q0 => s_coeffs_q0);

    ai2_coeffs_U : component owcpa_keypair_ai2_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 821,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ai2_coeffs_address0,
        ce0 => ai2_coeffs_ce0,
        we0 => ai2_coeffs_we0,
        d0 => grp_poly_R2_inv_fu_512_r_coeffs_d0,
        q0 => ai2_coeffs_q0);

    x1_coeffs_U : component owcpa_keypair_x1_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 821,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x1_coeffs_address0,
        ce0 => x1_coeffs_ce0,
        we0 => x1_coeffs_we0,
        d0 => x1_coeffs_d0,
        q0 => x1_coeffs_q0,
        address1 => grp_poly_S3_tobytes_fu_525_a_coeffs_address1,
        ce1 => x1_coeffs_ce1,
        q1 => x1_coeffs_q1);

    x2_coeffs_U : component owcpa_keypair_x2_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 821,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x2_coeffs_address0,
        ce0 => x2_coeffs_ce0,
        we0 => x2_coeffs_we0,
        d0 => x2_coeffs_d0,
        q0 => x2_coeffs_q0,
        address1 => x2_coeffs_address1,
        ce1 => x2_coeffs_ce1,
        we1 => x2_coeffs_we1,
        d1 => grp_poly_S3_inv_fu_506_r_coeffs_d1,
        q1 => x2_coeffs_q1);

    x3_coeffs_U : component owcpa_keypair_x3_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 821,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x3_coeffs_address0,
        ce0 => x3_coeffs_ce0,
        we0 => x3_coeffs_we0,
        d0 => x3_coeffs_d0,
        q0 => x3_coeffs_q0,
        address1 => x3_coeffs_address1,
        ce1 => x3_coeffs_ce1,
        we1 => x3_coeffs_we1,
        d1 => x3_coeffs_d1,
        q1 => x3_coeffs_q1);

    x4_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 821,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x4_coeffs_address0,
        ce0 => x4_coeffs_ce0,
        we0 => x4_coeffs_we0,
        d0 => x4_coeffs_d0,
        q0 => x4_coeffs_q0);

    x5_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 821,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x5_coeffs_address0,
        ce0 => x5_coeffs_ce0,
        we0 => x5_coeffs_we0,
        d0 => grp_poly_Rq_mul_fu_518_r_coeffs_d0,
        q0 => x5_coeffs_q0);

    grp_sample_fixed_type_fu_499 : component sample_fixed_type
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sample_fixed_type_fu_499_ap_start,
        ap_done => grp_sample_fixed_type_fu_499_ap_done,
        ap_idle => grp_sample_fixed_type_fu_499_ap_idle,
        ap_ready => grp_sample_fixed_type_fu_499_ap_ready,
        r_coeffs_address0 => grp_sample_fixed_type_fu_499_r_coeffs_address0,
        r_coeffs_ce0 => grp_sample_fixed_type_fu_499_r_coeffs_ce0,
        r_coeffs_we0 => grp_sample_fixed_type_fu_499_r_coeffs_we0,
        r_coeffs_d0 => grp_sample_fixed_type_fu_499_r_coeffs_d0,
        u_address0 => grp_sample_fixed_type_fu_499_u_address0,
        u_ce0 => grp_sample_fixed_type_fu_499_u_ce0,
        u_q0 => seed_q0,
        u_address1 => grp_sample_fixed_type_fu_499_u_address1,
        u_ce1 => grp_sample_fixed_type_fu_499_u_ce1,
        u_q1 => seed_q1);

    grp_poly_S3_inv_fu_506 : component poly_S3_inv
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_S3_inv_fu_506_ap_start,
        ap_done => grp_poly_S3_inv_fu_506_ap_done,
        ap_idle => grp_poly_S3_inv_fu_506_ap_idle,
        ap_ready => grp_poly_S3_inv_fu_506_ap_ready,
        r_coeffs_address0 => grp_poly_S3_inv_fu_506_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_S3_inv_fu_506_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_S3_inv_fu_506_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_S3_inv_fu_506_r_coeffs_d0,
        r_coeffs_q0 => x2_coeffs_q0,
        r_coeffs_address1 => grp_poly_S3_inv_fu_506_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_S3_inv_fu_506_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_S3_inv_fu_506_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_S3_inv_fu_506_r_coeffs_d1,
        r_coeffs_q1 => x2_coeffs_q1,
        a_coeffs_address0 => grp_poly_S3_inv_fu_506_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_S3_inv_fu_506_a_coeffs_ce0,
        a_coeffs_q0 => x1_coeffs_q0);

    grp_poly_R2_inv_fu_512 : component poly_R2_inv
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_R2_inv_fu_512_ap_start,
        ap_done => grp_poly_R2_inv_fu_512_ap_done,
        ap_idle => grp_poly_R2_inv_fu_512_ap_idle,
        ap_ready => grp_poly_R2_inv_fu_512_ap_ready,
        r_coeffs_address0 => grp_poly_R2_inv_fu_512_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_R2_inv_fu_512_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_R2_inv_fu_512_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_R2_inv_fu_512_r_coeffs_d0,
        r_coeffs_q0 => ai2_coeffs_q0,
        a_coeffs_address0 => grp_poly_R2_inv_fu_512_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_R2_inv_fu_512_a_coeffs_ce0,
        a_coeffs_q0 => x3_coeffs_q0);

    grp_poly_Rq_mul_fu_518 : component poly_Rq_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Rq_mul_fu_518_ap_start,
        ap_done => grp_poly_Rq_mul_fu_518_ap_done,
        ap_idle => grp_poly_Rq_mul_fu_518_ap_idle,
        ap_ready => grp_poly_Rq_mul_fu_518_ap_ready,
        r_coeffs_address0 => grp_poly_Rq_mul_fu_518_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_Rq_mul_fu_518_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_Rq_mul_fu_518_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_Rq_mul_fu_518_r_coeffs_d0,
        r_coeffs_q0 => grp_poly_Rq_mul_fu_518_r_coeffs_q0,
        a_coeffs_address0 => grp_poly_Rq_mul_fu_518_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_Rq_mul_fu_518_a_coeffs_ce0,
        a_coeffs_q0 => grp_poly_Rq_mul_fu_518_a_coeffs_q0,
        b_coeffs_address0 => grp_poly_Rq_mul_fu_518_b_coeffs_address0,
        b_coeffs_ce0 => grp_poly_Rq_mul_fu_518_b_coeffs_ce0,
        b_coeffs_q0 => grp_poly_Rq_mul_fu_518_b_coeffs_q0);

    grp_poly_S3_tobytes_fu_525 : component poly_S3_tobytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_S3_tobytes_fu_525_ap_start,
        ap_done => grp_poly_S3_tobytes_fu_525_ap_done,
        ap_idle => grp_poly_S3_tobytes_fu_525_ap_idle,
        ap_ready => grp_poly_S3_tobytes_fu_525_ap_ready,
        msg_address0 => grp_poly_S3_tobytes_fu_525_msg_address0,
        msg_ce0 => grp_poly_S3_tobytes_fu_525_msg_ce0,
        msg_we0 => grp_poly_S3_tobytes_fu_525_msg_we0,
        msg_d0 => grp_poly_S3_tobytes_fu_525_msg_d0,
        msg_offset => grp_poly_S3_tobytes_fu_525_msg_offset,
        a_coeffs_address0 => grp_poly_S3_tobytes_fu_525_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_S3_tobytes_fu_525_a_coeffs_ce0,
        a_coeffs_q0 => grp_poly_S3_tobytes_fu_525_a_coeffs_q0,
        a_coeffs_address1 => grp_poly_S3_tobytes_fu_525_a_coeffs_address1,
        a_coeffs_ce1 => grp_poly_S3_tobytes_fu_525_a_coeffs_ce1,
        a_coeffs_q1 => grp_poly_S3_tobytes_fu_525_a_coeffs_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_poly_R2_inv_fu_512_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_R2_inv_fu_512_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    grp_poly_R2_inv_fu_512_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_R2_inv_fu_512_ap_ready = ap_const_logic_1)) then 
                    grp_poly_R2_inv_fu_512_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_Rq_mul_fu_518_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Rq_mul_fu_518_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((exitcond_i3_fu_1011_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((exitcond_i7_fu_958_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond_fu_888_p2 = ap_const_lv1_1)))) then 
                    grp_poly_Rq_mul_fu_518_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Rq_mul_fu_518_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Rq_mul_fu_518_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_S3_inv_fu_506_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_S3_inv_fu_506_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_poly_S3_inv_fu_506_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_S3_inv_fu_506_ap_ready = ap_const_logic_1)) then 
                    grp_poly_S3_inv_fu_506_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_S3_tobytes_fu_525_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_S3_tobytes_fu_525_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    grp_poly_S3_tobytes_fu_525_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_S3_tobytes_fu_525_ap_ready = ap_const_logic_1)) then 
                    grp_poly_S3_tobytes_fu_525_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sample_fixed_type_fu_499_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sample_fixed_type_fu_499_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_sample_fixed_type_fu_499_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sample_fixed_type_fu_499_ap_ready = ap_const_logic_1)) then 
                    grp_sample_fixed_type_fu_499_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_i_reg_455_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond1_i_fu_926_p2 = ap_const_lv1_1))) then 
                i_1_i_reg_455 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_1_i_reg_455 <= i_38_reg_1326;
            end if; 
        end if;
    end process;

    i_i1_reg_444_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_i1_reg_444 <= i_37_reg_1308;
            elsif (((grp_poly_R2_inv_fu_512_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                i_i1_reg_444 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i2_reg_466_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                i_i2_reg_466 <= i_39_reg_1354;
            elsif (((grp_poly_Rq_mul_fu_518_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                i_i2_reg_466 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i3_reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i2_fu_975_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                i_i3_reg_477 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                i_i3_reg_477 <= i_40_reg_1368;
            end if; 
        end if;
    end process;

    i_i5_reg_422_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_i_fu_764_p2 = ap_const_lv1_1))) then 
                i_i5_reg_422 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_i5_reg_422 <= i_35_reg_1277;
            end if; 
        end if;
    end process;

    i_i_i1_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                i_i_i1_reg_488 <= i_41_reg_1393;
            elsif (((grp_poly_Rq_mul_fu_518_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                i_i_i1_reg_488 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_i_i_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_i_i_reg_400 <= i_33_reg_1240;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_i_reg_400 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_i_reg_411 <= i_34_reg_1264;
            elsif (((grp_poly_S3_tobytes_fu_525_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_i_reg_411 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_reg_433_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_i6_fu_826_p2 = ap_const_lv1_1))) then 
                i_reg_433 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_reg_433 <= i_36_reg_1290;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_i_fu_764_p2 = ap_const_lv1_0))) then
                f_coeffs_addr_2_reg_1269 <= tmp_i_fu_776_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state51) and (exitcond_i2_fu_975_p2 = ap_const_lv1_0))) then
                h_coeffs_addr_4_reg_1359 <= tmp_i2_fu_987_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_i6_fu_826_p2 = ap_const_lv1_0))) then
                h_coeffs_addr_reg_1282 <= tmp_i7_fu_838_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_33_reg_1240 <= i_33_fu_574_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_34_reg_1264 <= i_34_fu_770_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_35_reg_1277 <= i_35_fu_832_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_36_reg_1290 <= i_36_fu_894_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                i_37_reg_1308 <= i_37_fu_932_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                i_38_reg_1326 <= i_38_fu_964_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                i_39_reg_1354 <= i_39_fu_981_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                i_40_reg_1368 <= i_40_fu_1017_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                i_41_reg_1393 <= i_41_fu_1129_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                r_2_reg_1255 <= r_2_fu_697_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state54))) then
                reg_562 <= x3_coeffs_q0(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond_i3_fu_1011_p2 = ap_const_lv1_0))) then
                tmp_120_i_reg_1378 <= tmp_120_i_fu_1048_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state59) and (exitcond_i_i1_fu_1123_p2 = ap_const_lv1_0))) then
                tmp_132_i_i_reg_1403 <= tmp_132_i_i_fu_1160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond_i7_fu_958_p2 = ap_const_lv1_0))) then
                    tmp_191_i_reg_1331(9 downto 0) <= tmp_191_i_fu_970_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond1_i_fu_926_p2 = ap_const_lv1_0))) then
                    tmp_i4_reg_1313(9 downto 0) <= tmp_i4_fu_938_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_i_fu_568_p2 = ap_const_lv1_0))) then
                    tmp_i_i_reg_1245(9 downto 0) <= tmp_i_i_fu_580_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond_fu_888_p2 = ap_const_lv1_0))) then
                    tmp_s_reg_1295(9 downto 0) <= tmp_s_fu_900_p1(9 downto 0);
            end if;
        end if;
    end process;
    tmp_i_i_reg_1245(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    tmp_s_reg_1295(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    tmp_i4_reg_1313(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    tmp_191_i_reg_1331(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_i_i_fu_568_p2, ap_CS_fsm_state11, exitcond_i_fu_764_p2, ap_CS_fsm_state13, exitcond_i6_fu_826_p2, ap_CS_fsm_state15, exitcond_fu_888_p2, ap_CS_fsm_state20, exitcond1_i_fu_926_p2, ap_CS_fsm_state22, exitcond_i7_fu_958_p2, ap_CS_fsm_state50, grp_poly_Rq_mul_fu_518_ap_done, ap_CS_fsm_state51, exitcond_i2_fu_975_p2, ap_CS_fsm_state53, exitcond_i3_fu_1011_p2, ap_CS_fsm_state59, exitcond_i_i1_fu_1123_p2, grp_poly_R2_inv_fu_512_ap_done, grp_poly_S3_tobytes_fu_525_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state19, ap_CS_fsm_state58, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state56, ap_CS_fsm_state8, ap_block_state6_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_i_fu_568_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_poly_S3_tobytes_fu_525_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_poly_S3_tobytes_fu_525_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_i_fu_764_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_i6_fu_826_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond_fu_888_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state17 => 
                if (((grp_poly_Rq_mul_fu_518_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_poly_R2_inv_fu_512_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond1_i_fu_926_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state22 => 
                if (((exitcond_i7_fu_958_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state24 => 
                if (((grp_poly_Rq_mul_fu_518_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((grp_poly_Rq_mul_fu_518_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((grp_poly_Rq_mul_fu_518_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((grp_poly_Rq_mul_fu_518_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((grp_poly_Rq_mul_fu_518_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((grp_poly_Rq_mul_fu_518_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((grp_poly_Rq_mul_fu_518_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((grp_poly_Rq_mul_fu_518_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((grp_poly_Rq_mul_fu_518_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((grp_poly_Rq_mul_fu_518_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((exitcond_i2_fu_975_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state53 => 
                if (((exitcond_i3_fu_1011_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state56 => 
                if (((grp_poly_Rq_mul_fu_518_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((grp_poly_Rq_mul_fu_518_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                if (((exitcond_i_i1_fu_1123_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ai2_coeffs_address0_assign_proc : process(ap_CS_fsm_state22, tmp_191_i_fu_970_p1, grp_poly_R2_inv_fu_512_r_coeffs_address0, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ai2_coeffs_address0 <= tmp_191_i_fu_970_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ai2_coeffs_address0 <= grp_poly_R2_inv_fu_512_r_coeffs_address0;
        else 
            ai2_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    ai2_coeffs_ce0_assign_proc : process(ap_CS_fsm_state22, grp_poly_R2_inv_fu_512_r_coeffs_ce0, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ai2_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ai2_coeffs_ce0 <= grp_poly_R2_inv_fu_512_r_coeffs_ce0;
        else 
            ai2_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ai2_coeffs_we0_assign_proc : process(grp_poly_R2_inv_fu_512_r_coeffs_we0, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ai2_coeffs_we0 <= grp_poly_R2_inv_fu_512_r_coeffs_we0;
        else 
            ai2_coeffs_we0 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state6_on_subcall_done_assign_proc : process(grp_sample_fixed_type_fu_499_ap_done, grp_poly_S3_inv_fu_506_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((grp_poly_S3_inv_fu_506_ap_done = ap_const_logic_0) or (grp_sample_fixed_type_fu_499_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state59, exitcond_i_i1_fu_1123_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond_i_i1_fu_1123_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state59, exitcond_i_i1_fu_1123_p2)
    begin
        if (((exitcond_i_i1_fu_1123_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_coeffs_address0_assign_proc : process(tmp_i4_reg_1313, grp_poly_Rq_mul_fu_518_b_coeffs_address0, ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            b_coeffs_address0 <= tmp_i4_reg_1313(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            b_coeffs_address0 <= grp_poly_Rq_mul_fu_518_b_coeffs_address0;
        else 
            b_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    b_coeffs_ce0_assign_proc : process(grp_poly_Rq_mul_fu_518_b_coeffs_ce0, ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            b_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            b_coeffs_ce0 <= grp_poly_Rq_mul_fu_518_b_coeffs_ce0;
        else 
            b_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_coeffs_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i6_cast_fu_947_p2),16));

    b_coeffs_we0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            b_coeffs_we0 <= ap_const_logic_1;
        else 
            b_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    c_cast_fu_716_p3 <= 
        ap_const_lv3_7 when (tmp_203_fu_708_p3(0) = '1') else 
        ap_const_lv3_0;
    c_coeffs_addr_reg_1341 <= ap_const_lv64_0(10 - 1 downto 0);

    c_coeffs_address0_assign_proc : process(c_coeffs_addr_reg_1341, ap_CS_fsm_state25, grp_poly_Rq_mul_fu_518_r_coeffs_address0, grp_poly_Rq_mul_fu_518_a_coeffs_address0, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state46, ap_CS_fsm_state26, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            c_coeffs_address0 <= c_coeffs_addr_reg_1341;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            c_coeffs_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            c_coeffs_address0 <= grp_poly_Rq_mul_fu_518_a_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            c_coeffs_address0 <= grp_poly_Rq_mul_fu_518_r_coeffs_address0;
        else 
            c_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    c_coeffs_ce0_assign_proc : process(ap_CS_fsm_state25, grp_poly_Rq_mul_fu_518_r_coeffs_ce0, grp_poly_Rq_mul_fu_518_a_coeffs_ce0, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state46, ap_CS_fsm_state26, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            c_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            c_coeffs_ce0 <= grp_poly_Rq_mul_fu_518_a_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            c_coeffs_ce0 <= grp_poly_Rq_mul_fu_518_r_coeffs_ce0;
        else 
            c_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_coeffs_d0_assign_proc : process(grp_poly_Rq_mul_fu_518_r_coeffs_d0, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state42, ap_CS_fsm_state26, grp_fu_535_p2, ap_CS_fsm_state32, ap_CS_fsm_state38, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            c_coeffs_d0 <= grp_fu_535_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            c_coeffs_d0 <= grp_poly_Rq_mul_fu_518_r_coeffs_d0;
        else 
            c_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c_coeffs_we0_assign_proc : process(grp_poly_Rq_mul_fu_518_r_coeffs_we0, ap_CS_fsm_state24, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state42, ap_CS_fsm_state26, ap_CS_fsm_state32, ap_CS_fsm_state38, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            c_coeffs_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            c_coeffs_we0 <= grp_poly_Rq_mul_fu_518_r_coeffs_we0;
        else 
            c_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i_fu_926_p2 <= "1" when (i_i1_reg_444 = ap_const_lv10_335) else "0";
    exitcond_fu_888_p2 <= "1" when (i_reg_433 = ap_const_lv10_335) else "0";
    exitcond_i2_fu_975_p2 <= "1" when (i_i2_reg_466 = ap_const_lv10_335) else "0";
    exitcond_i3_fu_1011_p2 <= "1" when (i_i3_reg_477 = ap_const_lv9_19A) else "0";
    exitcond_i6_fu_826_p2 <= "1" when (i_i5_reg_422 = ap_const_lv10_335) else "0";
    exitcond_i7_fu_958_p2 <= "1" when (i_1_i_reg_455 = ap_const_lv10_335) else "0";
    exitcond_i_fu_764_p2 <= "1" when (i_i_reg_411 = ap_const_lv10_335) else "0";
    exitcond_i_i1_fu_1123_p2 <= "1" when (i_i_i1_reg_488 = ap_const_lv9_19A) else "0";
    exitcond_i_i_fu_568_p2 <= "1" when (i_i_i_reg_400 = ap_const_lv10_334) else "0";
    fold1_i_i_i_cast_fu_647_p2 <= std_logic_vector(unsigned(tmp_39_fu_637_p4) + unsigned(tmp_202_fu_633_p1));
    fold2_i_i_i_cast_fu_687_p2 <= std_logic_vector(unsigned(fold1_i_i_i_cast_fu_647_p2) + unsigned(tmp_40_fu_677_p4));
    grp_fu_535_p2 <= std_logic_vector(unsigned(c_coeffs_q0) + unsigned(ap_const_lv16_2));
    grp_fu_542_p4 <= x3_coeffs_q1(15 downto 8);
    grp_poly_R2_inv_fu_512_ap_start <= grp_poly_R2_inv_fu_512_ap_start_reg;

    grp_poly_Rq_mul_fu_518_a_coeffs_q0_assign_proc : process(ap_CS_fsm_state50, c_coeffs_q0, s_coeffs_q0, x2_coeffs_q0, x4_coeffs_q0, x5_coeffs_q0, ap_CS_fsm_state58, ap_CS_fsm_state17, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            grp_poly_Rq_mul_fu_518_a_coeffs_q0 <= x5_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_poly_Rq_mul_fu_518_a_coeffs_q0 <= s_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_poly_Rq_mul_fu_518_a_coeffs_q0 <= c_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_poly_Rq_mul_fu_518_a_coeffs_q0 <= x4_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_poly_Rq_mul_fu_518_a_coeffs_q0 <= x2_coeffs_q0;
        else 
            grp_poly_Rq_mul_fu_518_a_coeffs_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_poly_Rq_mul_fu_518_ap_start <= grp_poly_Rq_mul_fu_518_ap_start_reg;

    grp_poly_Rq_mul_fu_518_b_coeffs_q0_assign_proc : process(ap_CS_fsm_state50, b_coeffs_q0, s_coeffs_q0, x1_coeffs_q0, x2_coeffs_q0, x4_coeffs_q0, ap_CS_fsm_state58, ap_CS_fsm_state17, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            grp_poly_Rq_mul_fu_518_b_coeffs_q0 <= x2_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_poly_Rq_mul_fu_518_b_coeffs_q0 <= s_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_poly_Rq_mul_fu_518_b_coeffs_q0 <= x4_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_poly_Rq_mul_fu_518_b_coeffs_q0 <= b_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            grp_poly_Rq_mul_fu_518_b_coeffs_q0 <= x1_coeffs_q0;
        else 
            grp_poly_Rq_mul_fu_518_b_coeffs_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_Rq_mul_fu_518_r_coeffs_q0_assign_proc : process(ap_CS_fsm_state50, c_coeffs_q0, s_coeffs_q0, x3_coeffs_q0, x4_coeffs_q0, x5_coeffs_q0, ap_CS_fsm_state58, ap_CS_fsm_state17, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            grp_poly_Rq_mul_fu_518_r_coeffs_q0 <= x5_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_poly_Rq_mul_fu_518_r_coeffs_q0 <= x4_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_poly_Rq_mul_fu_518_r_coeffs_q0 <= s_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_poly_Rq_mul_fu_518_r_coeffs_q0 <= c_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            grp_poly_Rq_mul_fu_518_r_coeffs_q0 <= x3_coeffs_q0;
        else 
            grp_poly_Rq_mul_fu_518_r_coeffs_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_poly_S3_inv_fu_506_ap_start <= grp_poly_S3_inv_fu_506_ap_start_reg;

    grp_poly_S3_tobytes_fu_525_a_coeffs_q0_assign_proc : process(x1_coeffs_q0, x2_coeffs_q0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_poly_S3_tobytes_fu_525_a_coeffs_q0 <= x2_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_poly_S3_tobytes_fu_525_a_coeffs_q0 <= x1_coeffs_q0;
        else 
            grp_poly_S3_tobytes_fu_525_a_coeffs_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_S3_tobytes_fu_525_a_coeffs_q1_assign_proc : process(x1_coeffs_q1, x2_coeffs_q1, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_poly_S3_tobytes_fu_525_a_coeffs_q1 <= x2_coeffs_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_poly_S3_tobytes_fu_525_a_coeffs_q1 <= x1_coeffs_q1;
        else 
            grp_poly_S3_tobytes_fu_525_a_coeffs_q1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_poly_S3_tobytes_fu_525_ap_start <= grp_poly_S3_tobytes_fu_525_ap_start_reg;

    grp_poly_S3_tobytes_fu_525_msg_offset_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_poly_S3_tobytes_fu_525_msg_offset <= ap_const_lv10_A4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_poly_S3_tobytes_fu_525_msg_offset <= ap_const_lv10_0;
        else 
            grp_poly_S3_tobytes_fu_525_msg_offset <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_sample_fixed_type_fu_499_ap_start <= grp_sample_fixed_type_fu_499_ap_start_reg;
    i_33_fu_574_p2 <= std_logic_vector(unsigned(i_i_i_reg_400) + unsigned(ap_const_lv10_1));
    i_34_fu_770_p2 <= std_logic_vector(unsigned(i_i_reg_411) + unsigned(ap_const_lv10_1));
    i_35_fu_832_p2 <= std_logic_vector(unsigned(i_i5_reg_422) + unsigned(ap_const_lv10_1));
    i_36_fu_894_p2 <= std_logic_vector(unsigned(i_reg_433) + unsigned(ap_const_lv10_1));
    i_37_fu_932_p2 <= std_logic_vector(unsigned(i_i1_reg_444) + unsigned(ap_const_lv10_1));
    i_38_fu_964_p2 <= std_logic_vector(unsigned(i_1_i_reg_455) + unsigned(ap_const_lv10_1));
    i_39_fu_981_p2 <= std_logic_vector(unsigned(i_i2_reg_466) + unsigned(ap_const_lv10_1));
    i_40_fu_1017_p2 <= std_logic_vector(unsigned(i_i3_reg_477) + unsigned(ap_const_lv9_1));
    i_41_fu_1129_p2 <= std_logic_vector(unsigned(i_i_i1_reg_488) + unsigned(ap_const_lv9_1));
    i_i3_cast1_fu_1007_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i3_reg_477),12));
    i_i_i1_cast9_fu_1119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i1_reg_488),12));
    not_tmp_28_i_i_i_fu_733_p2 <= (tmp_203_fu_708_p3 xor ap_const_lv1_1);
    p_shl_i_cast_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_fu_1036_p3),12));
    p_shl_i_fu_1036_p3 <= (i_i3_reg_477 & ap_const_lv2_0);
    p_shl_i_i_cast_fu_1156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_i_fu_1148_p3),12));
    p_shl_i_i_fu_1148_p3 <= (i_i_i1_reg_488 & ap_const_lv2_0);

    pk_address0_assign_proc : process(ap_CS_fsm_state60, ap_CS_fsm_state61, tmp_133_i_i_fu_1185_p1, tmp_145_i_i_fu_1232_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            pk_address0 <= tmp_145_i_i_fu_1232_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            pk_address0 <= tmp_133_i_i_fu_1185_p1(11 - 1 downto 0);
        else 
            pk_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    pk_address1 <= tmp_141_i_i_fu_1218_p1(11 - 1 downto 0);

    pk_ce0_assign_proc : process(ap_CS_fsm_state60, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            pk_ce0 <= ap_const_logic_1;
        else 
            pk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_ce1_assign_proc : process(ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            pk_ce1 <= ap_const_logic_1;
        else 
            pk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pk_d0_assign_proc : process(reg_562, ap_CS_fsm_state60, ap_CS_fsm_state61, tmp_212_fu_1177_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            pk_d0 <= reg_562;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            pk_d0 <= tmp_212_fu_1177_p1;
        else 
            pk_d0 <= "XXXXXXXX";
        end if; 
    end process;

    pk_d1 <= (tmp_138_i_i_fu_1194_p3 or grp_fu_542_p4);

    pk_we0_assign_proc : process(ap_CS_fsm_state60, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            pk_we0 <= ap_const_logic_1;
        else 
            pk_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_we1_assign_proc : process(ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            pk_we1 <= ap_const_logic_1;
        else 
            pk_we1 <= ap_const_logic_0;
        end if; 
    end process;

    r_1_fu_657_p2 <= std_logic_vector(unsigned(tmp_281_i_i_i_cast_fu_653_p1) + unsigned(tmp_280_i_i_i_cast_fu_629_p1));
    r_2_fu_697_p2 <= std_logic_vector(unsigned(tmp_283_i_i_i_cast_fu_693_p1) + unsigned(tmp_282_i_i_i_cast_fu_673_p1));
    r_fu_613_p2 <= std_logic_vector(unsigned(tmp_279_i_i_i_cast_fu_603_p1) + unsigned(tmp_278_i_i_i_cast_fu_599_p1));

    s_coeffs_address0_assign_proc : process(grp_poly_Rq_mul_fu_518_r_coeffs_address0, grp_poly_Rq_mul_fu_518_a_coeffs_address0, grp_poly_Rq_mul_fu_518_b_coeffs_address0, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            s_coeffs_address0 <= grp_poly_Rq_mul_fu_518_b_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            s_coeffs_address0 <= grp_poly_Rq_mul_fu_518_a_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            s_coeffs_address0 <= grp_poly_Rq_mul_fu_518_r_coeffs_address0;
        else 
            s_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    s_coeffs_ce0_assign_proc : process(grp_poly_Rq_mul_fu_518_r_coeffs_ce0, grp_poly_Rq_mul_fu_518_a_coeffs_ce0, grp_poly_Rq_mul_fu_518_b_coeffs_ce0, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            s_coeffs_ce0 <= grp_poly_Rq_mul_fu_518_b_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            s_coeffs_ce0 <= grp_poly_Rq_mul_fu_518_a_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            s_coeffs_ce0 <= grp_poly_Rq_mul_fu_518_r_coeffs_ce0;
        else 
            s_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_coeffs_we0_assign_proc : process(grp_poly_Rq_mul_fu_518_r_coeffs_we0, ap_CS_fsm_state28, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            s_coeffs_we0 <= grp_poly_Rq_mul_fu_518_r_coeffs_we0;
        else 
            s_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_address0_assign_proc : process(ap_CS_fsm_state2, tmp_i_i_fu_580_p1, grp_sample_fixed_type_fu_499_u_address0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seed_address0 <= tmp_i_i_fu_580_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            seed_address0 <= grp_sample_fixed_type_fu_499_u_address0;
        else 
            seed_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    seed_address1 <= grp_sample_fixed_type_fu_499_u_address1;

    seed_ce0_assign_proc : process(ap_CS_fsm_state2, grp_sample_fixed_type_fu_499_u_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seed_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            seed_ce0 <= grp_sample_fixed_type_fu_499_u_ce0;
        else 
            seed_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_ce1_assign_proc : process(grp_sample_fixed_type_fu_499_u_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            seed_ce1 <= grp_sample_fixed_type_fu_499_u_ce1;
        else 
            seed_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sk_address0_assign_proc : process(ap_CS_fsm_state54, grp_poly_S3_tobytes_fu_525_msg_address0, ap_CS_fsm_state10, ap_CS_fsm_state55, ap_CS_fsm_state8, sum_i_cast_fu_1075_p1, sum4_i_cast_fu_1114_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            sk_address0 <= sum4_i_cast_fu_1114_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            sk_address0 <= sum_i_cast_fu_1075_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            sk_address0 <= grp_poly_S3_tobytes_fu_525_msg_address0;
        else 
            sk_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    sk_address1 <= sum2_i_cast_fu_1104_p1(11 - 1 downto 0);

    sk_ce0_assign_proc : process(ap_CS_fsm_state54, grp_poly_S3_tobytes_fu_525_msg_ce0, ap_CS_fsm_state10, ap_CS_fsm_state55, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            sk_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            sk_ce0 <= grp_poly_S3_tobytes_fu_525_msg_ce0;
        else 
            sk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_ce1_assign_proc : process(ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            sk_ce1 <= ap_const_logic_1;
        else 
            sk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sk_d0_assign_proc : process(reg_562, ap_CS_fsm_state54, grp_poly_S3_tobytes_fu_525_msg_d0, ap_CS_fsm_state10, ap_CS_fsm_state55, ap_CS_fsm_state8, tmp_210_fu_1065_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            sk_d0 <= reg_562;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            sk_d0 <= tmp_210_fu_1065_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            sk_d0 <= grp_poly_S3_tobytes_fu_525_msg_d0;
        else 
            sk_d0 <= "XXXXXXXX";
        end if; 
    end process;

    sk_d1 <= (tmp_125_i_fu_1084_p3 or grp_fu_542_p4);

    sk_we0_assign_proc : process(ap_CS_fsm_state54, grp_poly_S3_tobytes_fu_525_msg_we0, ap_CS_fsm_state10, ap_CS_fsm_state55, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            sk_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            sk_we0 <= grp_poly_S3_tobytes_fu_525_msg_we0;
        else 
            sk_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_we1_assign_proc : process(ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            sk_we1 <= ap_const_logic_1;
        else 
            sk_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sum2_i_cast_fu_1104_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum2_i_fu_1099_p2),64));

    sum2_i_fu_1099_p2 <= std_logic_vector(unsigned(ap_const_lv12_149) + unsigned(tmp_120_i_reg_1378));
        sum4_i_cast_fu_1114_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum4_i_fu_1109_p2),64));

    sum4_i_fu_1109_p2 <= std_logic_vector(unsigned(ap_const_lv12_14A) + unsigned(tmp_120_i_reg_1378));
        sum_i_cast_fu_1075_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_i_fu_1070_p2),64));

    sum_i_fu_1070_p2 <= std_logic_vector(unsigned(ap_const_lv12_148) + unsigned(tmp_120_i_reg_1378));
    t_fu_703_p2 <= std_logic_vector(signed(ap_const_lv3_5) + signed(r_2_reg_1255));
    tmp_116_i1_cast_fu_853_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(tmp_48_fu_843_p4));
    tmp_116_i_cast_fu_791_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(tmp_44_fu_781_p4));
    tmp_118_i1_fu_879_p3 <= (tmp_51_fu_869_p4 & tmp_50_fu_863_p2);
    tmp_118_i_fu_817_p3 <= (tmp_47_fu_807_p4 & tmp_46_fu_801_p2);
    tmp_120_i_fu_1048_p2 <= std_logic_vector(unsigned(p_shl_i_cast_fu_1044_p1) - unsigned(i_i3_cast1_fu_1007_p1));
    tmp_122_i_fu_1054_p2 <= (tmp_i3_fu_1023_p3 or ap_const_lv10_1);
    tmp_123_i_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_122_i_fu_1054_p2),64));
    tmp_125_i_fu_1084_p3 <= (tmp_211_fu_1080_p1 & ap_const_lv4_0);
    tmp_131_fu_911_p2 <= std_logic_vector(unsigned(tmp_206_fu_905_p2) - unsigned(x3_coeffs_q0));
        tmp_132_i_i_cast_fu_1182_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_i_i_reg_1403),32));

    tmp_132_i_i_fu_1160_p2 <= std_logic_vector(unsigned(p_shl_i_i_cast_fu_1156_p1) - unsigned(i_i_i1_cast9_fu_1119_p1));
    tmp_133_i_i_fu_1185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_132_i_i_cast_fu_1182_p1),64));
    tmp_134_i_i_fu_1166_p2 <= (tmp_i_i1_fu_1135_p3 or ap_const_lv10_1);
    tmp_136_i_i_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_134_i_i_fu_1166_p2),64));
    tmp_138_i_i_fu_1194_p3 <= (tmp_213_fu_1190_p1 & ap_const_lv4_0);
        tmp_140_i_i_cast_fu_1214_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_140_i_i_fu_1209_p2),32));

    tmp_140_i_i_fu_1209_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) + unsigned(tmp_132_i_i_reg_1403));
    tmp_141_i_i_fu_1218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_140_i_i_cast_fu_1214_p1),64));
        tmp_144_i_i_cast_fu_1228_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_144_i_i_fu_1223_p2),32));

    tmp_144_i_i_fu_1223_p2 <= std_logic_vector(unsigned(ap_const_lv12_2) + unsigned(tmp_132_i_i_reg_1403));
    tmp_145_i_i_fu_1232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_144_i_i_cast_fu_1228_p1),64));
    tmp_191_i_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_i_reg_455),64));
    tmp_202_fu_633_p1 <= seed_q0(2 - 1 downto 0);
    tmp_203_fu_708_p3 <= t_fu_703_p2(2 downto 2);
    tmp_204_fu_797_p1 <= x1_coeffs_q0(12 - 1 downto 0);
    tmp_205_fu_859_p1 <= x3_coeffs_q0(12 - 1 downto 0);
    tmp_206_fu_905_p2 <= std_logic_vector(shift_left(unsigned(x3_coeffs_q0),to_integer(unsigned('0' & ap_const_lv16_2(16-1 downto 0)))));
    tmp_207_fu_917_p1 <= tmp_131_fu_911_p2(12 - 1 downto 0);
    tmp_208_fu_943_p1 <= x3_coeffs_q0(12 - 1 downto 0);
    tmp_209_fu_998_p1 <= tmp_i4_75_fu_992_p2(12 - 1 downto 0);
    tmp_210_fu_1065_p1 <= x3_coeffs_q1(8 - 1 downto 0);
    tmp_211_fu_1080_p1 <= x3_coeffs_q0(4 - 1 downto 0);
    tmp_212_fu_1177_p1 <= x3_coeffs_q1(8 - 1 downto 0);
    tmp_213_fu_1190_p1 <= x3_coeffs_q0(4 - 1 downto 0);
    tmp_235_cast_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_207_fu_917_p1),16));
    tmp_24_fu_589_p4 <= seed_q0(7 downto 4);
    tmp_25_fu_607_p2 <= std_logic_vector(unsigned(tmp_24_fu_589_p4) + unsigned(tmp_fu_585_p1));
    tmp_26_fu_619_p4 <= r_fu_613_p2(4 downto 2);
    tmp_278_i_i_i_cast_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_589_p4),5));
    tmp_279_i_i_i_cast_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_585_p1),5));
    tmp_27_fu_663_p4 <= r_1_fu_657_p2(3 downto 2);
    tmp_280_i_i_i_cast_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_619_p4),4));
    tmp_281_i_i_i_cast_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold1_i_i_i_cast_fu_647_p2),4));
    tmp_282_i_i_i_cast_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_663_p4),3));
    tmp_283_i_i_i_cast_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold2_i_i_i_cast_fu_687_p2),3));
    tmp_284_i_i_i_cast_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_284_i_i_i_fu_724_p2),16));
    tmp_284_i_i_i_fu_724_p2 <= (r_2_reg_1255 and c_cast_fu_716_p3);
    tmp_285_i_i_i_cast_c_fu_739_p3 <= 
        ap_const_lv3_7 when (not_tmp_28_i_i_i_fu_733_p2(0) = '1') else 
        ap_const_lv3_0;
        tmp_286_i_i_i_cast_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_286_i_i_i_fu_747_p2),16));

    tmp_286_i_i_i_fu_747_p2 <= (tmp_285_i_i_i_cast_c_fu_739_p3 and t_fu_703_p2);
    tmp_287_i_i_i_fu_757_p2 <= (tmp_286_i_i_i_cast_fu_753_p1 xor tmp_284_i_i_i_cast_fu_729_p1);
    tmp_39_fu_637_p4 <= seed_q0(5 downto 4);
    tmp_40_fu_677_p4 <= tmp_25_fu_607_p2(3 downto 2);
    tmp_44_fu_781_p4 <= x1_coeffs_q0(12 downto 1);
    tmp_46_fu_801_p2 <= (tmp_204_fu_797_p1 or tmp_116_i_cast_fu_791_p2);
    tmp_47_fu_807_p4 <= x1_coeffs_q0(15 downto 12);
    tmp_48_fu_843_p4 <= x3_coeffs_q0(12 downto 1);
    tmp_50_fu_863_p2 <= (tmp_205_fu_859_p1 or tmp_116_i1_cast_fu_853_p2);
    tmp_51_fu_869_p4 <= x3_coeffs_q0(15 downto 12);
    tmp_fu_585_p1 <= seed_q0(4 - 1 downto 0);
    tmp_i2_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i2_reg_466),64));
    tmp_i3_fu_1023_p3 <= (i_i3_reg_477 & ap_const_lv1_0);
    tmp_i4_75_fu_992_p2 <= std_logic_vector(unsigned(x3_coeffs_q0) - unsigned(x3_coeffs_q1));
    tmp_i4_fu_938_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_444),64));
    tmp_i5_fu_1031_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i3_fu_1023_p3),64));
    tmp_i6_cast_fu_947_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(tmp_208_fu_943_p1));
    tmp_i7_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i5_reg_422),64));
    tmp_i_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_411),64));
    tmp_i_i1_fu_1135_p3 <= (i_i_i1_reg_488 & ap_const_lv1_0);
    tmp_i_i_78_fu_1143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i1_fu_1135_p3),64));
    tmp_i_i_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i_reg_400),64));
    tmp_s_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_433),64));

    x1_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, tmp_i_i_reg_1245, ap_CS_fsm_state11, f_coeffs_addr_2_reg_1269, ap_CS_fsm_state50, grp_poly_S3_inv_fu_506_a_coeffs_address0, grp_poly_Rq_mul_fu_518_b_coeffs_address0, grp_poly_S3_tobytes_fu_525_a_coeffs_address0, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state48, ap_CS_fsm_state8, tmp_i_fu_776_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x1_coeffs_address0 <= f_coeffs_addr_2_reg_1269;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x1_coeffs_address0 <= tmp_i_fu_776_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x1_coeffs_address0 <= tmp_i_i_reg_1245(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_address0 <= ap_const_lv64_334(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x1_coeffs_address0 <= grp_poly_S3_tobytes_fu_525_a_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            x1_coeffs_address0 <= grp_poly_Rq_mul_fu_518_b_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x1_coeffs_address0 <= grp_poly_S3_inv_fu_506_a_coeffs_address0;
        else 
            x1_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state50, grp_poly_S3_inv_fu_506_a_coeffs_ce0, grp_poly_Rq_mul_fu_518_b_coeffs_ce0, grp_poly_S3_tobytes_fu_525_a_coeffs_ce0, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state48, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x1_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x1_coeffs_ce0 <= grp_poly_S3_tobytes_fu_525_a_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            x1_coeffs_ce0 <= grp_poly_Rq_mul_fu_518_b_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x1_coeffs_ce0 <= grp_poly_S3_inv_fu_506_a_coeffs_ce0;
        else 
            x1_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_ce1_assign_proc : process(grp_poly_S3_tobytes_fu_525_a_coeffs_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x1_coeffs_ce1 <= grp_poly_S3_tobytes_fu_525_a_coeffs_ce1;
        else 
            x1_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state12, tmp_287_i_i_i_fu_757_p2, tmp_118_i_fu_817_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x1_coeffs_d0 <= tmp_118_i_fu_817_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x1_coeffs_d0 <= tmp_287_i_i_i_fu_757_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_d0 <= ap_const_lv16_0;
        else 
            x1_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_we0_assign_proc : process(ap_CS_fsm_state2, exitcond_i_i_fu_568_p2, ap_CS_fsm_state4, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_i_fu_568_p2 = ap_const_lv1_1)))) then 
            x1_coeffs_we0 <= ap_const_logic_1;
        else 
            x1_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_address0_assign_proc : process(tmp_s_reg_1295, grp_poly_S3_inv_fu_506_r_coeffs_address0, grp_poly_Rq_mul_fu_518_a_coeffs_address0, grp_poly_Rq_mul_fu_518_b_coeffs_address0, grp_poly_S3_tobytes_fu_525_a_coeffs_address0, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state58, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            x2_coeffs_address0 <= tmp_s_reg_1295(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x2_coeffs_address0 <= grp_poly_S3_tobytes_fu_525_a_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            x2_coeffs_address0 <= grp_poly_Rq_mul_fu_518_b_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            x2_coeffs_address0 <= grp_poly_Rq_mul_fu_518_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_address0 <= grp_poly_S3_inv_fu_506_r_coeffs_address0;
        else 
            x2_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_address1_assign_proc : process(grp_poly_S3_inv_fu_506_r_coeffs_address1, grp_poly_S3_tobytes_fu_525_a_coeffs_address1, ap_CS_fsm_state10, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x2_coeffs_address1 <= grp_poly_S3_tobytes_fu_525_a_coeffs_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_address1 <= grp_poly_S3_inv_fu_506_r_coeffs_address1;
        else 
            x2_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_ce0_assign_proc : process(grp_poly_S3_inv_fu_506_r_coeffs_ce0, grp_poly_Rq_mul_fu_518_a_coeffs_ce0, grp_poly_Rq_mul_fu_518_b_coeffs_ce0, grp_poly_S3_tobytes_fu_525_a_coeffs_ce0, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state58, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            x2_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x2_coeffs_ce0 <= grp_poly_S3_tobytes_fu_525_a_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            x2_coeffs_ce0 <= grp_poly_Rq_mul_fu_518_b_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            x2_coeffs_ce0 <= grp_poly_Rq_mul_fu_518_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_ce0 <= grp_poly_S3_inv_fu_506_r_coeffs_ce0;
        else 
            x2_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_ce1_assign_proc : process(grp_poly_S3_inv_fu_506_r_coeffs_ce1, grp_poly_S3_tobytes_fu_525_a_coeffs_ce1, ap_CS_fsm_state10, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x2_coeffs_ce1 <= grp_poly_S3_tobytes_fu_525_a_coeffs_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_ce1 <= grp_poly_S3_inv_fu_506_r_coeffs_ce1;
        else 
            x2_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_d0_assign_proc : process(grp_poly_S3_inv_fu_506_r_coeffs_d0, ap_CS_fsm_state16, ap_CS_fsm_state6, tmp_235_cast_fu_921_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            x2_coeffs_d0 <= tmp_235_cast_fu_921_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_d0 <= grp_poly_S3_inv_fu_506_r_coeffs_d0;
        else 
            x2_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_we0_assign_proc : process(grp_poly_S3_inv_fu_506_r_coeffs_we0, ap_CS_fsm_state16, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            x2_coeffs_we0 <= ap_const_lv2_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_we0 <= grp_poly_S3_inv_fu_506_r_coeffs_we0;
        else 
            x2_coeffs_we0 <= ap_const_lv2_0;
        end if; 
    end process;


    x2_coeffs_we1_assign_proc : process(grp_poly_S3_inv_fu_506_r_coeffs_we1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_we1 <= grp_poly_S3_inv_fu_506_r_coeffs_we1;
        else 
            x2_coeffs_we1 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;


    x3_coeffs_address0_assign_proc : process(ap_CS_fsm_state13, h_coeffs_addr_reg_1282, ap_CS_fsm_state15, tmp_s_fu_900_p1, exitcond_fu_888_p2, ap_CS_fsm_state20, tmp_i4_fu_938_p1, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state59, grp_sample_fixed_type_fu_499_r_coeffs_address0, grp_poly_R2_inv_fu_512_a_coeffs_address0, grp_poly_Rq_mul_fu_518_r_coeffs_address0, ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state58, ap_CS_fsm_state6, ap_CS_fsm_state17, tmp_i7_fu_838_p1, tmp_i2_fu_987_p1, tmp_123_i_fu_1060_p1, tmp_136_i_i_fu_1172_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            x3_coeffs_address0 <= tmp_136_i_i_fu_1172_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            x3_coeffs_address0 <= tmp_123_i_fu_1060_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            x3_coeffs_address0 <= tmp_i2_fu_987_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            x3_coeffs_address0 <= tmp_i4_fu_938_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond_fu_888_p2 = ap_const_lv1_0))) then 
            x3_coeffs_address0 <= tmp_s_fu_900_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            x3_coeffs_address0 <= h_coeffs_addr_reg_1282;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_address0 <= tmp_i7_fu_838_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            x3_coeffs_address0 <= grp_poly_Rq_mul_fu_518_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            x3_coeffs_address0 <= grp_poly_R2_inv_fu_512_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x3_coeffs_address0 <= grp_sample_fixed_type_fu_499_r_coeffs_address0;
        else 
            x3_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_address1_assign_proc : process(ap_CS_fsm_state51, h_coeffs_addr_4_reg_1359, ap_CS_fsm_state53, ap_CS_fsm_state59, ap_CS_fsm_state52, tmp_i5_fu_1031_p1, tmp_i_i_78_fu_1143_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            x3_coeffs_address1 <= tmp_i_i_78_fu_1143_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            x3_coeffs_address1 <= tmp_i5_fu_1031_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            x3_coeffs_address1 <= h_coeffs_addr_4_reg_1359;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            x3_coeffs_address1 <= ap_const_lv64_334(10 - 1 downto 0);
        else 
            x3_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state15, exitcond_fu_888_p2, ap_CS_fsm_state20, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state59, grp_sample_fixed_type_fu_499_r_coeffs_ce0, grp_poly_R2_inv_fu_512_a_coeffs_ce0, grp_poly_Rq_mul_fu_518_r_coeffs_ce0, ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state58, ap_CS_fsm_state6, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond_fu_888_p2 = ap_const_lv1_0)))) then 
            x3_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            x3_coeffs_ce0 <= grp_poly_Rq_mul_fu_518_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            x3_coeffs_ce0 <= grp_poly_R2_inv_fu_512_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x3_coeffs_ce0 <= grp_sample_fixed_type_fu_499_r_coeffs_ce0;
        else 
            x3_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_ce1_assign_proc : process(ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state59, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            x3_coeffs_ce1 <= ap_const_logic_1;
        else 
            x3_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_d0_assign_proc : process(ap_CS_fsm_state50, grp_sample_fixed_type_fu_499_r_coeffs_d0, grp_poly_Rq_mul_fu_518_r_coeffs_d0, ap_CS_fsm_state14, ap_CS_fsm_state58, ap_CS_fsm_state6, ap_CS_fsm_state17, tmp_118_i1_fu_879_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            x3_coeffs_d0 <= tmp_118_i1_fu_879_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            x3_coeffs_d0 <= grp_poly_Rq_mul_fu_518_r_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x3_coeffs_d0 <= grp_sample_fixed_type_fu_499_r_coeffs_d0;
        else 
            x3_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    x3_coeffs_d1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_209_fu_998_p1),16));

    x3_coeffs_we0_assign_proc : process(ap_CS_fsm_state50, grp_sample_fixed_type_fu_499_r_coeffs_we0, grp_poly_Rq_mul_fu_518_r_coeffs_we0, ap_CS_fsm_state14, ap_CS_fsm_state58, ap_CS_fsm_state6, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            x3_coeffs_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            x3_coeffs_we0 <= grp_poly_Rq_mul_fu_518_r_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x3_coeffs_we0 <= grp_sample_fixed_type_fu_499_r_coeffs_we0;
        else 
            x3_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_we1_assign_proc : process(ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            x3_coeffs_we1 <= ap_const_logic_1;
        else 
            x3_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x4_coeffs_address0_assign_proc : process(tmp_191_i_reg_1331, grp_poly_Rq_mul_fu_518_r_coeffs_address0, grp_poly_Rq_mul_fu_518_a_coeffs_address0, grp_poly_Rq_mul_fu_518_b_coeffs_address0, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            x4_coeffs_address0 <= tmp_191_i_reg_1331(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            x4_coeffs_address0 <= grp_poly_Rq_mul_fu_518_b_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            x4_coeffs_address0 <= grp_poly_Rq_mul_fu_518_a_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            x4_coeffs_address0 <= grp_poly_Rq_mul_fu_518_r_coeffs_address0;
        else 
            x4_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x4_coeffs_ce0_assign_proc : process(grp_poly_Rq_mul_fu_518_r_coeffs_ce0, grp_poly_Rq_mul_fu_518_a_coeffs_ce0, grp_poly_Rq_mul_fu_518_b_coeffs_ce0, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            x4_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            x4_coeffs_ce0 <= grp_poly_Rq_mul_fu_518_b_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            x4_coeffs_ce0 <= grp_poly_Rq_mul_fu_518_a_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            x4_coeffs_ce0 <= grp_poly_Rq_mul_fu_518_r_coeffs_ce0;
        else 
            x4_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x4_coeffs_d0_assign_proc : process(ai2_coeffs_q0, grp_poly_Rq_mul_fu_518_r_coeffs_d0, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            x4_coeffs_d0 <= ai2_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            x4_coeffs_d0 <= grp_poly_Rq_mul_fu_518_r_coeffs_d0;
        else 
            x4_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x4_coeffs_we0_assign_proc : process(grp_poly_Rq_mul_fu_518_r_coeffs_we0, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            x4_coeffs_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            x4_coeffs_we0 <= grp_poly_Rq_mul_fu_518_r_coeffs_we0;
        else 
            x4_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x5_coeffs_address0_assign_proc : process(ap_CS_fsm_state50, grp_poly_Rq_mul_fu_518_r_coeffs_address0, grp_poly_Rq_mul_fu_518_a_coeffs_address0, ap_CS_fsm_state58, ap_CS_fsm_state48, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            x5_coeffs_address0 <= grp_poly_Rq_mul_fu_518_a_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            x5_coeffs_address0 <= grp_poly_Rq_mul_fu_518_r_coeffs_address0;
        else 
            x5_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x5_coeffs_ce0_assign_proc : process(ap_CS_fsm_state50, grp_poly_Rq_mul_fu_518_r_coeffs_ce0, grp_poly_Rq_mul_fu_518_a_coeffs_ce0, ap_CS_fsm_state58, ap_CS_fsm_state48, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            x5_coeffs_ce0 <= grp_poly_Rq_mul_fu_518_a_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            x5_coeffs_ce0 <= grp_poly_Rq_mul_fu_518_r_coeffs_ce0;
        else 
            x5_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x5_coeffs_we0_assign_proc : process(grp_poly_Rq_mul_fu_518_r_coeffs_we0, ap_CS_fsm_state48, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            x5_coeffs_we0 <= grp_poly_Rq_mul_fu_518_r_coeffs_we0;
        else 
            x5_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
