-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity owcpa_dec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rm_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    rm_ce0 : OUT STD_LOGIC;
    rm_we0 : OUT STD_LOGIC;
    rm_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ciphertext_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ciphertext_ce0 : OUT STD_LOGIC;
    ciphertext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ciphertext_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ciphertext_ce1 : OUT STD_LOGIC;
    ciphertext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    secretkey_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    secretkey_ce0 : OUT STD_LOGIC;
    secretkey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    secretkey_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    secretkey_ce1 : OUT STD_LOGIC;
    secretkey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of owcpa_dec is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv10_8C : STD_LOGIC_VECTOR (9 downto 0) := "0010001100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_8C : STD_LOGIC_VECTOR (8 downto 0) := "010001100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_2BC : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010111100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_2BC : STD_LOGIC_VECTOR (9 downto 0) := "1010111100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2BD : STD_LOGIC_VECTOR (9 downto 0) := "1010111101";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal b_coeffs_addr_reg_717 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_17_fu_358_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_17_reg_726 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_i_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_fu_395_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_18_fu_407_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_18_reg_744 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal liftm_coeffs_addr_reg_749 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i7_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_19_fu_469_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_19_reg_757 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal b_coeffs_addr_11_reg_762 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_poly_Rq_mul_fu_335_ap_ready : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_335_ap_done : STD_LOGIC;
    signal i_20_fu_502_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_20_reg_781 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal r_coeffs_addr_22_reg_786 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i1_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_21_fu_534_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_21_reg_794 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal exitcond_i2_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_2_fu_625_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_257_reg_809 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal i_22_fu_681_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_22_reg_816 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal r_coeffs_addr_24_reg_821 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i3_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x1_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x1_coeffs_ce0 : STD_LOGIC;
    signal x1_coeffs_we0 : STD_LOGIC;
    signal x1_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal x1_coeffs_ce1 : STD_LOGIC;
    signal x1_coeffs_we1 : STD_LOGIC;
    signal x1_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x2_coeffs_ce0 : STD_LOGIC;
    signal x2_coeffs_we0 : STD_LOGIC;
    signal x2_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal x2_coeffs_ce1 : STD_LOGIC;
    signal x2_coeffs_we1 : STD_LOGIC;
    signal x2_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x3_coeffs_ce0 : STD_LOGIC;
    signal x3_coeffs_we0 : STD_LOGIC;
    signal x3_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal x3_coeffs_ce1 : STD_LOGIC;
    signal x3_coeffs_we1 : STD_LOGIC;
    signal x3_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x4_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x4_coeffs_ce0 : STD_LOGIC;
    signal x4_coeffs_we0 : STD_LOGIC;
    signal x4_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x4_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x4_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal x4_coeffs_ce1 : STD_LOGIC;
    signal x4_coeffs_we1 : STD_LOGIC;
    signal x4_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_lift_fu_291_ap_start : STD_LOGIC;
    signal grp_poly_lift_fu_291_ap_done : STD_LOGIC;
    signal grp_poly_lift_fu_291_ap_idle : STD_LOGIC;
    signal grp_poly_lift_fu_291_ap_ready : STD_LOGIC;
    signal grp_poly_lift_fu_291_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_lift_fu_291_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_lift_fu_291_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_lift_fu_291_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_lift_fu_291_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_lift_fu_291_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_lift_fu_291_a_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_lift_fu_291_a_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_1_fu_297_ap_start : STD_LOGIC;
    signal grp_poly_Sq_frombytes_1_fu_297_ap_done : STD_LOGIC;
    signal grp_poly_Sq_frombytes_1_fu_297_ap_idle : STD_LOGIC;
    signal grp_poly_Sq_frombytes_1_fu_297_ap_ready : STD_LOGIC;
    signal grp_poly_Sq_frombytes_1_fu_297_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_frombytes_1_fu_297_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_1_fu_297_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_1_fu_297_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Sq_frombytes_1_fu_297_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_frombytes_1_fu_297_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_1_fu_297_r_coeffs_we1 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_1_fu_297_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Sq_frombytes_1_fu_297_a_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_Sq_frombytes_1_fu_297_a_ce0 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_1_fu_297_a_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_Sq_frombytes_1_fu_297_a_ce1 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_304_ap_start : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_304_ap_done : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_304_ap_idle : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_304_ap_ready : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_304_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_frombytes_fu_304_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_304_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_304_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Sq_frombytes_fu_304_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_frombytes_fu_304_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_304_r_coeffs_we1 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_304_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Sq_frombytes_fu_304_a_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_Sq_frombytes_fu_304_a_ce0 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_304_a_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_Sq_frombytes_fu_304_a_ce1 : STD_LOGIC;
    signal grp_poly_S3_mul_fu_312_ap_start : STD_LOGIC;
    signal grp_poly_S3_mul_fu_312_ap_done : STD_LOGIC;
    signal grp_poly_S3_mul_fu_312_ap_idle : STD_LOGIC;
    signal grp_poly_S3_mul_fu_312_ap_ready : STD_LOGIC;
    signal grp_poly_S3_mul_fu_312_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_mul_fu_312_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_mul_fu_312_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_S3_mul_fu_312_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_mul_fu_312_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_mul_fu_312_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_S3_mul_fu_312_r_coeffs_we1 : STD_LOGIC;
    signal grp_poly_S3_mul_fu_312_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_mul_fu_312_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_mul_fu_312_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_mul_fu_312_b_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_mul_fu_312_b_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_319_ap_start : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_319_ap_done : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_319_ap_idle : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_319_ap_ready : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_319_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_frombytes_fu_319_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_319_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_319_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_frombytes_fu_319_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_frombytes_fu_319_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_319_r_coeffs_we1 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_319_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_frombytes_fu_319_msg_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_S3_frombytes_fu_319_msg_ce0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_319_msg_offset : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_to_S3_fu_329_ap_start : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_329_ap_done : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_329_ap_idle : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_329_ap_ready : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_329_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_to_S3_fu_329_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_329_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_329_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_to_S3_fu_329_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_to_S3_fu_329_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_329_r_coeffs_we1 : STD_LOGIC;
    signal grp_poly_Rq_to_S3_fu_329_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_to_S3_fu_329_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_to_S3_fu_329_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_335_ap_start : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_335_ap_idle : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_335_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_335_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_335_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_335_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_mul_fu_335_r_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_mul_fu_335_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_335_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_335_b_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_335_b_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_335_b_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_tobytes_fu_342_ap_start : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_342_ap_done : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_342_ap_idle : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_342_ap_ready : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_342_msg_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_S3_tobytes_fu_342_msg_ce0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_342_msg_we0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_342_msg_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_S3_tobytes_fu_342_msg_offset : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_S3_tobytes_fu_342_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_tobytes_fu_342_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_342_a_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_tobytes_fu_342_a_coeffs_ce1 : STD_LOGIC;
    signal tmp_i_reg_202 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_i_reg_213 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_i6_reg_224 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_reg_235 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal i_i1_reg_246 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal i_i2_reg_257 : STD_LOGIC_VECTOR (9 downto 0);
    signal t_i_reg_268 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_i3_reg_280 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_poly_lift_fu_291_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_poly_Sq_frombytes_1_fu_297_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_poly_Sq_frombytes_fu_304_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_poly_S3_mul_fu_312_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_poly_S3_frombytes_fu_319_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_poly_Rq_to_S3_fu_329_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_poly_Rq_mul_fu_335_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_poly_S3_tobytes_fu_342_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_233_i_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i8_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_255_i_fu_540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_44_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_232_i_cast_fu_375_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_234_i_fu_388_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_243_cast_fu_491_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_i_fu_454_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_40_i_cast_fu_523_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_i_cast_fu_712_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_cast_fu_369_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_252_fu_384_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_251_fu_380_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_236_fu_418_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_253_fu_434_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_37_i_cast_fu_428_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_239_fu_444_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_238_fu_438_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_s_fu_481_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_254_fu_487_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i2_fu_513_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_255_fu_519_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_258_fu_545_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_259_fu_549_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_242_fu_559_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_259_i_fu_565_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_243_fu_571_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_257_i_cast_fu_553_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_244_fu_585_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_260_fu_577_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_261_fu_605_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp1_fu_595_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_246_fu_615_p4 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_245_fu_609_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_256_fu_633_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_81_i_fu_643_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_80_i_fu_637_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_fu_653_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_fu_661_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_262_fu_702_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_247_fu_692_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_i_cast_fu_706_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);

    component poly_lift IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce1 : OUT STD_LOGIC;
        a_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_Sq_frombytes_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component poly_Sq_frombytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component poly_S3_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        b_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        b_coeffs_ce0 : OUT STD_LOGIC;
        b_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_S3_frombytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        msg_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msg_ce0 : OUT STD_LOGIC;
        msg_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        msg_offset : IN STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component poly_Rq_to_S3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_Rq_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        b_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        b_coeffs_ce0 : OUT STD_LOGIC;
        b_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_S3_tobytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        msg_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        msg_ce0 : OUT STD_LOGIC;
        msg_we0 : OUT STD_LOGIC;
        msg_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        msg_offset : IN STD_LOGIC_VECTOR (8 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce1 : OUT STD_LOGIC;
        a_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_lift_b_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_dec_x3_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    x1_coeffs_U : component poly_lift_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 701,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x1_coeffs_address0,
        ce0 => x1_coeffs_ce0,
        we0 => x1_coeffs_we0,
        d0 => x1_coeffs_d0,
        q0 => x1_coeffs_q0,
        address1 => x1_coeffs_address1,
        ce1 => x1_coeffs_ce1,
        we1 => x1_coeffs_we1,
        d1 => x1_coeffs_d1,
        q1 => x1_coeffs_q1);

    x2_coeffs_U : component poly_lift_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 701,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x2_coeffs_address0,
        ce0 => x2_coeffs_ce0,
        we0 => x2_coeffs_we0,
        d0 => x2_coeffs_d0,
        q0 => x2_coeffs_q0,
        address1 => x2_coeffs_address1,
        ce1 => x2_coeffs_ce1,
        we1 => x2_coeffs_we1,
        d1 => x2_coeffs_d1,
        q1 => x2_coeffs_q1);

    x3_coeffs_U : component owcpa_dec_x3_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 701,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x3_coeffs_address0,
        ce0 => x3_coeffs_ce0,
        we0 => x3_coeffs_we0,
        d0 => x3_coeffs_d0,
        q0 => x3_coeffs_q0,
        address1 => x3_coeffs_address1,
        ce1 => x3_coeffs_ce1,
        we1 => x3_coeffs_we1,
        d1 => x3_coeffs_d1);

    x4_coeffs_U : component poly_lift_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 701,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x4_coeffs_address0,
        ce0 => x4_coeffs_ce0,
        we0 => x4_coeffs_we0,
        d0 => x4_coeffs_d0,
        q0 => x4_coeffs_q0,
        address1 => x4_coeffs_address1,
        ce1 => x4_coeffs_ce1,
        we1 => x4_coeffs_we1,
        d1 => grp_poly_S3_mul_fu_312_r_coeffs_d1,
        q1 => x4_coeffs_q1);

    grp_poly_lift_fu_291 : component poly_lift
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_lift_fu_291_ap_start,
        ap_done => grp_poly_lift_fu_291_ap_done,
        ap_idle => grp_poly_lift_fu_291_ap_idle,
        ap_ready => grp_poly_lift_fu_291_ap_ready,
        r_coeffs_address0 => grp_poly_lift_fu_291_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_lift_fu_291_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_lift_fu_291_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_lift_fu_291_r_coeffs_d0,
        a_coeffs_address0 => grp_poly_lift_fu_291_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_lift_fu_291_a_coeffs_ce0,
        a_coeffs_q0 => x4_coeffs_q0,
        a_coeffs_address1 => grp_poly_lift_fu_291_a_coeffs_address1,
        a_coeffs_ce1 => grp_poly_lift_fu_291_a_coeffs_ce1,
        a_coeffs_q1 => x4_coeffs_q1);

    grp_poly_Sq_frombytes_1_fu_297 : component poly_Sq_frombytes_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Sq_frombytes_1_fu_297_ap_start,
        ap_done => grp_poly_Sq_frombytes_1_fu_297_ap_done,
        ap_idle => grp_poly_Sq_frombytes_1_fu_297_ap_idle,
        ap_ready => grp_poly_Sq_frombytes_1_fu_297_ap_ready,
        r_coeffs_address0 => grp_poly_Sq_frombytes_1_fu_297_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_Sq_frombytes_1_fu_297_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_Sq_frombytes_1_fu_297_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_Sq_frombytes_1_fu_297_r_coeffs_d0,
        r_coeffs_address1 => grp_poly_Sq_frombytes_1_fu_297_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_Sq_frombytes_1_fu_297_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_Sq_frombytes_1_fu_297_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_Sq_frombytes_1_fu_297_r_coeffs_d1,
        a_address0 => grp_poly_Sq_frombytes_1_fu_297_a_address0,
        a_ce0 => grp_poly_Sq_frombytes_1_fu_297_a_ce0,
        a_q0 => secretkey_q0,
        a_address1 => grp_poly_Sq_frombytes_1_fu_297_a_address1,
        a_ce1 => grp_poly_Sq_frombytes_1_fu_297_a_ce1,
        a_q1 => secretkey_q1);

    grp_poly_Sq_frombytes_fu_304 : component poly_Sq_frombytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Sq_frombytes_fu_304_ap_start,
        ap_done => grp_poly_Sq_frombytes_fu_304_ap_done,
        ap_idle => grp_poly_Sq_frombytes_fu_304_ap_idle,
        ap_ready => grp_poly_Sq_frombytes_fu_304_ap_ready,
        r_coeffs_address0 => grp_poly_Sq_frombytes_fu_304_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_Sq_frombytes_fu_304_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_Sq_frombytes_fu_304_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_Sq_frombytes_fu_304_r_coeffs_d0,
        r_coeffs_address1 => grp_poly_Sq_frombytes_fu_304_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_Sq_frombytes_fu_304_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_Sq_frombytes_fu_304_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_Sq_frombytes_fu_304_r_coeffs_d1,
        a_address0 => grp_poly_Sq_frombytes_fu_304_a_address0,
        a_ce0 => grp_poly_Sq_frombytes_fu_304_a_ce0,
        a_q0 => ciphertext_q0,
        a_address1 => grp_poly_Sq_frombytes_fu_304_a_address1,
        a_ce1 => grp_poly_Sq_frombytes_fu_304_a_ce1,
        a_q1 => ciphertext_q1);

    grp_poly_S3_mul_fu_312 : component poly_S3_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_S3_mul_fu_312_ap_start,
        ap_done => grp_poly_S3_mul_fu_312_ap_done,
        ap_idle => grp_poly_S3_mul_fu_312_ap_idle,
        ap_ready => grp_poly_S3_mul_fu_312_ap_ready,
        r_coeffs_address0 => grp_poly_S3_mul_fu_312_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_S3_mul_fu_312_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_S3_mul_fu_312_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_S3_mul_fu_312_r_coeffs_d0,
        r_coeffs_q0 => x4_coeffs_q0,
        r_coeffs_address1 => grp_poly_S3_mul_fu_312_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_S3_mul_fu_312_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_S3_mul_fu_312_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_S3_mul_fu_312_r_coeffs_d1,
        r_coeffs_q1 => x4_coeffs_q1,
        a_coeffs_address0 => grp_poly_S3_mul_fu_312_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_S3_mul_fu_312_a_coeffs_ce0,
        a_coeffs_q0 => x2_coeffs_q0,
        b_coeffs_address0 => grp_poly_S3_mul_fu_312_b_coeffs_address0,
        b_coeffs_ce0 => grp_poly_S3_mul_fu_312_b_coeffs_ce0,
        b_coeffs_q0 => x3_coeffs_q0);

    grp_poly_S3_frombytes_fu_319 : component poly_S3_frombytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_S3_frombytes_fu_319_ap_start,
        ap_done => grp_poly_S3_frombytes_fu_319_ap_done,
        ap_idle => grp_poly_S3_frombytes_fu_319_ap_idle,
        ap_ready => grp_poly_S3_frombytes_fu_319_ap_ready,
        r_coeffs_address0 => grp_poly_S3_frombytes_fu_319_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_S3_frombytes_fu_319_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_S3_frombytes_fu_319_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_S3_frombytes_fu_319_r_coeffs_d0,
        r_coeffs_address1 => grp_poly_S3_frombytes_fu_319_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_S3_frombytes_fu_319_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_S3_frombytes_fu_319_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_S3_frombytes_fu_319_r_coeffs_d1,
        msg_address0 => grp_poly_S3_frombytes_fu_319_msg_address0,
        msg_ce0 => grp_poly_S3_frombytes_fu_319_msg_ce0,
        msg_q0 => secretkey_q0,
        msg_offset => grp_poly_S3_frombytes_fu_319_msg_offset);

    grp_poly_Rq_to_S3_fu_329 : component poly_Rq_to_S3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Rq_to_S3_fu_329_ap_start,
        ap_done => grp_poly_Rq_to_S3_fu_329_ap_done,
        ap_idle => grp_poly_Rq_to_S3_fu_329_ap_idle,
        ap_ready => grp_poly_Rq_to_S3_fu_329_ap_ready,
        r_coeffs_address0 => grp_poly_Rq_to_S3_fu_329_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_Rq_to_S3_fu_329_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_Rq_to_S3_fu_329_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_Rq_to_S3_fu_329_r_coeffs_d0,
        r_coeffs_q0 => x2_coeffs_q0,
        r_coeffs_address1 => grp_poly_Rq_to_S3_fu_329_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_Rq_to_S3_fu_329_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_Rq_to_S3_fu_329_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_Rq_to_S3_fu_329_r_coeffs_d1,
        r_coeffs_q1 => x2_coeffs_q1,
        a_coeffs_address0 => grp_poly_Rq_to_S3_fu_329_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_Rq_to_S3_fu_329_a_coeffs_ce0,
        a_coeffs_q0 => x3_coeffs_q0);

    grp_poly_Rq_mul_fu_335 : component poly_Rq_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Rq_mul_fu_335_ap_start,
        ap_done => grp_poly_Rq_mul_fu_335_ap_done,
        ap_idle => grp_poly_Rq_mul_fu_335_ap_idle,
        ap_ready => grp_poly_Rq_mul_fu_335_ap_ready,
        r_coeffs_address0 => grp_poly_Rq_mul_fu_335_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_Rq_mul_fu_335_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_Rq_mul_fu_335_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_Rq_mul_fu_335_r_coeffs_d0,
        r_coeffs_q0 => grp_poly_Rq_mul_fu_335_r_coeffs_q0,
        a_coeffs_address0 => grp_poly_Rq_mul_fu_335_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_Rq_mul_fu_335_a_coeffs_ce0,
        a_coeffs_q0 => x1_coeffs_q0,
        b_coeffs_address0 => grp_poly_Rq_mul_fu_335_b_coeffs_address0,
        b_coeffs_ce0 => grp_poly_Rq_mul_fu_335_b_coeffs_ce0,
        b_coeffs_q0 => grp_poly_Rq_mul_fu_335_b_coeffs_q0);

    grp_poly_S3_tobytes_fu_342 : component poly_S3_tobytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_S3_tobytes_fu_342_ap_start,
        ap_done => grp_poly_S3_tobytes_fu_342_ap_done,
        ap_idle => grp_poly_S3_tobytes_fu_342_ap_idle,
        ap_ready => grp_poly_S3_tobytes_fu_342_ap_ready,
        msg_address0 => grp_poly_S3_tobytes_fu_342_msg_address0,
        msg_ce0 => grp_poly_S3_tobytes_fu_342_msg_ce0,
        msg_we0 => grp_poly_S3_tobytes_fu_342_msg_we0,
        msg_d0 => grp_poly_S3_tobytes_fu_342_msg_d0,
        msg_offset => grp_poly_S3_tobytes_fu_342_msg_offset,
        a_coeffs_address0 => grp_poly_S3_tobytes_fu_342_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_S3_tobytes_fu_342_a_coeffs_ce0,
        a_coeffs_q0 => x4_coeffs_q0,
        a_coeffs_address1 => grp_poly_S3_tobytes_fu_342_a_coeffs_address1,
        a_coeffs_ce1 => grp_poly_S3_tobytes_fu_342_a_coeffs_ce1,
        a_coeffs_q1 => x4_coeffs_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_poly_Rq_mul_fu_335_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Rq_mul_fu_335_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_i7_fu_401_p2 = ap_const_lv1_1)))) then 
                    grp_poly_Rq_mul_fu_335_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Rq_mul_fu_335_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Rq_mul_fu_335_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_Rq_to_S3_fu_329_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Rq_to_S3_fu_329_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_poly_Rq_to_S3_fu_329_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Rq_to_S3_fu_329_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Rq_to_S3_fu_329_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_S3_frombytes_fu_319_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_S3_frombytes_fu_319_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((exitcond_i_fu_352_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    grp_poly_S3_frombytes_fu_319_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_S3_frombytes_fu_319_ap_ready = ap_const_logic_1)) then 
                    grp_poly_S3_frombytes_fu_319_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_S3_mul_fu_312_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_S3_mul_fu_312_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    grp_poly_S3_mul_fu_312_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_S3_mul_fu_312_ap_ready = ap_const_logic_1)) then 
                    grp_poly_S3_mul_fu_312_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_S3_tobytes_fu_342_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_S3_tobytes_fu_342_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (exitcond_i3_fu_675_p2 = ap_const_lv1_1)))) then 
                    grp_poly_S3_tobytes_fu_342_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_S3_tobytes_fu_342_ap_ready = ap_const_logic_1)) then 
                    grp_poly_S3_tobytes_fu_342_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_Sq_frombytes_1_fu_297_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Sq_frombytes_1_fu_297_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond_fu_463_p2 = ap_const_lv1_1))) then 
                    grp_poly_Sq_frombytes_1_fu_297_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Sq_frombytes_1_fu_297_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Sq_frombytes_1_fu_297_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_Sq_frombytes_fu_304_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Sq_frombytes_fu_304_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_poly_Sq_frombytes_fu_304_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Sq_frombytes_fu_304_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Sq_frombytes_fu_304_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_lift_fu_291_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_lift_fu_291_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    grp_poly_lift_fu_291_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_lift_fu_291_ap_ready = ap_const_logic_1)) then 
                    grp_poly_lift_fu_291_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i1_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                i_i1_reg_246 <= i_20_reg_781;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_poly_Rq_mul_fu_335_ap_done = ap_const_logic_1))) then 
                i_i1_reg_246 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i2_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond_i1_fu_496_p2 = ap_const_lv1_1))) then 
                i_i2_reg_257 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                i_i2_reg_257 <= i_21_reg_794;
            end if; 
        end if;
    end process;

    i_i3_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                i_i3_reg_280 <= i_22_reg_816;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                i_i3_reg_280 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i6_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_i6_reg_224 <= i_18_reg_744;
            elsif (((grp_poly_S3_frombytes_fu_319_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_i6_reg_224 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_i_reg_213 <= i_17_reg_726;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_i_reg_213 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_reg_235 <= i_19_reg_757;
            elsif (((grp_poly_lift_fu_291_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                i_reg_235 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    t_i_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond_i1_fu_496_p2 = ap_const_lv1_1))) then 
                t_i_reg_268 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                t_i_reg_268 <= t_2_fu_625_p3;
            end if; 
        end if;
    end process;

    tmp_i_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                tmp_i_reg_202 <= phitmp_fu_395_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                tmp_i_reg_202 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_463_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                b_coeffs_addr_11_reg_762 <= tmp_fu_475_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_17_reg_726 <= i_17_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_18_reg_744 <= i_18_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                i_19_reg_757 <= i_19_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                i_20_reg_781 <= i_20_fu_502_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                i_21_reg_794 <= i_21_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                i_22_reg_816 <= i_22_fu_681_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i7_fu_401_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                liftm_coeffs_addr_reg_749 <= tmp_i8_fu_413_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i1_fu_496_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                r_coeffs_addr_22_reg_786 <= tmp_i1_fu_508_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i3_fu_675_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                r_coeffs_addr_24_reg_821 <= tmp_i3_44_fu_687_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                tmp_257_reg_809 <= tmp_i3_fu_661_p2(63 downto 63);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, exitcond_i_fu_352_p2, ap_CS_fsm_state7, exitcond_i7_fu_401_p2, ap_CS_fsm_state20, exitcond_fu_463_p2, ap_CS_fsm_state24, grp_poly_Rq_mul_fu_335_ap_done, ap_CS_fsm_state25, exitcond_i1_fu_496_p2, ap_CS_fsm_state27, exitcond_i2_fu_528_p2, ap_CS_fsm_state30, exitcond_i3_fu_675_p2, grp_poly_lift_fu_291_ap_done, grp_poly_Sq_frombytes_1_fu_297_ap_done, grp_poly_Sq_frombytes_fu_304_ap_done, grp_poly_S3_mul_fu_312_ap_done, grp_poly_S3_frombytes_fu_319_ap_done, grp_poly_Rq_to_S3_fu_329_ap_done, grp_poly_S3_tobytes_fu_342_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state19, ap_CS_fsm_state22, ap_CS_fsm_state2, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state17, ap_CS_fsm_state32)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_poly_Sq_frombytes_fu_304_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((exitcond_i_fu_352_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((grp_poly_S3_frombytes_fu_319_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_i7_fu_401_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_poly_Rq_mul_fu_335_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_poly_Rq_to_S3_fu_329_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_poly_S3_frombytes_fu_319_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_poly_S3_mul_fu_312_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_poly_S3_tobytes_fu_342_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_poly_lift_fu_291_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond_fu_463_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state22 => 
                if (((grp_poly_Sq_frombytes_1_fu_297_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_poly_Rq_mul_fu_335_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond_i1_fu_496_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond_i2_fu_528_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (exitcond_i3_fu_675_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state32 => 
                if (((grp_poly_S3_tobytes_fu_342_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_poly_S3_tobytes_fu_342_ap_done, ap_CS_fsm_state32)
    begin
        if ((((grp_poly_S3_tobytes_fu_342_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_poly_S3_tobytes_fu_342_ap_done, ap_CS_fsm_state32)
    begin
        if (((grp_poly_S3_tobytes_fu_342_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= tmp_257_reg_809;
    b_coeffs_addr_reg_717 <= ap_const_lv64_2BC(10 - 1 downto 0);
    ciphertext_address0 <= grp_poly_Sq_frombytes_fu_304_a_address0;
    ciphertext_address1 <= grp_poly_Sq_frombytes_fu_304_a_address1;
    ciphertext_ce0 <= grp_poly_Sq_frombytes_fu_304_a_ce0;
    ciphertext_ce1 <= grp_poly_Sq_frombytes_fu_304_a_ce1;
    exitcond_fu_463_p2 <= "1" when (i_reg_235 = ap_const_lv10_2BD) else "0";
    exitcond_i1_fu_496_p2 <= "1" when (i_i1_reg_246 = ap_const_lv10_2BD) else "0";
    exitcond_i2_fu_528_p2 <= "1" when (i_i2_reg_257 = ap_const_lv10_2BD) else "0";
    exitcond_i3_fu_675_p2 <= "1" when (i_i3_reg_280 = ap_const_lv10_2BD) else "0";
    exitcond_i7_fu_401_p2 <= "1" when (i_i6_reg_224 = ap_const_lv10_2BD) else "0";
    exitcond_i_fu_352_p2 <= "1" when (i_i_reg_213 = ap_const_lv10_2BC) else "0";
    grp_poly_Rq_mul_fu_335_ap_start <= grp_poly_Rq_mul_fu_335_ap_start_reg;

    grp_poly_Rq_mul_fu_335_b_coeffs_q0_assign_proc : process(ap_CS_fsm_state24, x2_coeffs_q0, x3_coeffs_q0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_poly_Rq_mul_fu_335_b_coeffs_q0 <= x3_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_poly_Rq_mul_fu_335_b_coeffs_q0 <= x2_coeffs_q0;
        else 
            grp_poly_Rq_mul_fu_335_b_coeffs_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_Rq_mul_fu_335_r_coeffs_q0_assign_proc : process(ap_CS_fsm_state24, x3_coeffs_q0, x4_coeffs_q0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_poly_Rq_mul_fu_335_r_coeffs_q0 <= x4_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_poly_Rq_mul_fu_335_r_coeffs_q0 <= x3_coeffs_q0;
        else 
            grp_poly_Rq_mul_fu_335_r_coeffs_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_poly_Rq_to_S3_fu_329_ap_start <= grp_poly_Rq_to_S3_fu_329_ap_start_reg;
    grp_poly_S3_frombytes_fu_319_ap_start <= grp_poly_S3_frombytes_fu_319_ap_start_reg;

    grp_poly_S3_frombytes_fu_319_msg_offset_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_poly_S3_frombytes_fu_319_msg_offset <= ap_const_lv10_8C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_poly_S3_frombytes_fu_319_msg_offset <= ap_const_lv10_0;
        else 
            grp_poly_S3_frombytes_fu_319_msg_offset <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_poly_S3_mul_fu_312_ap_start <= grp_poly_S3_mul_fu_312_ap_start_reg;
    grp_poly_S3_tobytes_fu_342_ap_start <= grp_poly_S3_tobytes_fu_342_ap_start_reg;

    grp_poly_S3_tobytes_fu_342_msg_offset_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_poly_S3_tobytes_fu_342_msg_offset <= ap_const_lv9_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_poly_S3_tobytes_fu_342_msg_offset <= ap_const_lv9_8C;
        else 
            grp_poly_S3_tobytes_fu_342_msg_offset <= "XXXXXXXXX";
        end if; 
    end process;

    grp_poly_Sq_frombytes_1_fu_297_ap_start <= grp_poly_Sq_frombytes_1_fu_297_ap_start_reg;
    grp_poly_Sq_frombytes_fu_304_ap_start <= grp_poly_Sq_frombytes_fu_304_ap_start_reg;
    grp_poly_lift_fu_291_ap_start <= grp_poly_lift_fu_291_ap_start_reg;
    i_17_fu_358_p2 <= std_logic_vector(unsigned(i_i_reg_213) + unsigned(ap_const_lv10_1));
    i_18_fu_407_p2 <= std_logic_vector(unsigned(i_i6_reg_224) + unsigned(ap_const_lv10_1));
    i_19_fu_469_p2 <= std_logic_vector(unsigned(i_reg_235) + unsigned(ap_const_lv10_1));
    i_20_fu_502_p2 <= std_logic_vector(unsigned(i_i1_reg_246) + unsigned(ap_const_lv10_1));
    i_21_fu_534_p2 <= std_logic_vector(unsigned(i_i2_reg_257) + unsigned(ap_const_lv10_1));
    i_22_fu_681_p2 <= std_logic_vector(unsigned(i_i3_reg_280) + unsigned(ap_const_lv10_1));
    phitmp_fu_395_p2 <= std_logic_vector(unsigned(tmp_252_fu_384_p1) + unsigned(tmp_251_fu_380_p1));
    rm_address0 <= grp_poly_S3_tobytes_fu_342_msg_address0;

    rm_ce0_assign_proc : process(grp_poly_S3_tobytes_fu_342_msg_ce0, ap_CS_fsm_state17, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            rm_ce0 <= grp_poly_S3_tobytes_fu_342_msg_ce0;
        else 
            rm_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rm_d0 <= grp_poly_S3_tobytes_fu_342_msg_d0;

    rm_we0_assign_proc : process(grp_poly_S3_tobytes_fu_342_msg_we0, ap_CS_fsm_state17, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            rm_we0 <= grp_poly_S3_tobytes_fu_342_msg_we0;
        else 
            rm_we0 <= ap_const_logic_0;
        end if; 
    end process;


    secretkey_address0_assign_proc : process(grp_poly_Sq_frombytes_1_fu_297_a_address0, grp_poly_S3_frombytes_fu_319_msg_address0, ap_CS_fsm_state6, ap_CS_fsm_state22, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            secretkey_address0 <= grp_poly_S3_frombytes_fu_319_msg_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            secretkey_address0 <= grp_poly_Sq_frombytes_1_fu_297_a_address0;
        else 
            secretkey_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    secretkey_address1 <= grp_poly_Sq_frombytes_1_fu_297_a_address1;

    secretkey_ce0_assign_proc : process(grp_poly_Sq_frombytes_1_fu_297_a_ce0, grp_poly_S3_frombytes_fu_319_msg_ce0, ap_CS_fsm_state6, ap_CS_fsm_state22, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            secretkey_ce0 <= grp_poly_S3_frombytes_fu_319_msg_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            secretkey_ce0 <= grp_poly_Sq_frombytes_1_fu_297_a_ce0;
        else 
            secretkey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    secretkey_ce1_assign_proc : process(grp_poly_Sq_frombytes_1_fu_297_a_ce1, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            secretkey_ce1 <= grp_poly_Sq_frombytes_1_fu_297_a_ce1;
        else 
            secretkey_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    t_2_fu_625_p3 <= (tmp_246_fu_615_p4 & tmp_245_fu_609_p2);
    t_fu_653_p3 <= (tmp_81_i_fu_643_p4 & tmp_80_i_fu_637_p2);
    tmp1_fu_595_p4 <= ((tmp_244_fu_585_p4 & tmp_260_fu_577_p3) & ap_const_lv2_0);
    tmp_232_i_cast_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_cast_fu_369_p2),16));
    tmp_233_i_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_213),64));
    tmp_234_i_fu_388_p2 <= std_logic_vector(unsigned(x1_coeffs_q1) + unsigned(x1_coeffs_q0));
    tmp_236_fu_418_p4 <= x2_coeffs_q0(13 downto 1);
    tmp_238_fu_438_p2 <= (tmp_37_i_cast_fu_428_p2 or tmp_253_fu_434_p1);
    tmp_239_fu_444_p4 <= x2_coeffs_q0(15 downto 13);
    tmp_242_fu_559_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(tmp_259_fu_549_p1));
    tmp_243_cast_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_254_fu_487_p1),16));
    tmp_243_fu_571_p2 <= (tmp_259_i_fu_565_p2 or tmp_242_fu_559_p2);
    tmp_244_fu_585_p4 <= tmp_257_i_cast_fu_553_p2(12 downto 3);
    tmp_245_fu_609_p2 <= (tmp_261_fu_605_p1 or tmp1_fu_595_p4);
    tmp_246_fu_615_p4 <= t_i_reg_268(63 downto 13);
    tmp_247_fu_692_p4 <= x4_coeffs_q0(13 downto 12);
    tmp_251_fu_380_p1 <= x1_coeffs_q1(13 - 1 downto 0);
    tmp_252_fu_384_p1 <= x1_coeffs_q0(13 - 1 downto 0);
    tmp_253_fu_434_p1 <= x2_coeffs_q0(13 - 1 downto 0);
    tmp_254_fu_487_p1 <= tmp_s_fu_481_p2(13 - 1 downto 0);
    tmp_255_fu_519_p1 <= tmp_i2_fu_513_p2(13 - 1 downto 0);
    tmp_255_i_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i2_reg_257),64));
    tmp_256_fu_633_p1 <= t_i_reg_268(16 - 1 downto 0);
    tmp_257_i_cast_fu_553_p2 <= std_logic_vector(unsigned(ap_const_lv13_1) + unsigned(tmp_258_fu_545_p1));
    tmp_258_fu_545_p1 <= x4_coeffs_q1(13 - 1 downto 0);
    tmp_259_fu_549_p1 <= x4_coeffs_q1(3 - 1 downto 0);
    tmp_259_i_fu_565_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(tmp_259_fu_549_p1));
    tmp_260_fu_577_p3 <= tmp_243_fu_571_p2(2 downto 2);
    tmp_261_fu_605_p1 <= t_i_reg_268(13 - 1 downto 0);
    tmp_262_fu_702_p1 <= x4_coeffs_q0(2 - 1 downto 0);
    tmp_37_i_cast_fu_428_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(tmp_236_fu_418_p4));
    tmp_39_i_fu_454_p3 <= (tmp_239_fu_444_p4 & tmp_238_fu_438_p2);
    tmp_40_i_cast_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_255_fu_519_p1),16));
    tmp_7_i_cast_fu_706_p2 <= (tmp_262_fu_702_p1 xor tmp_247_fu_692_p4);
    tmp_80_i_fu_637_p2 <= (x4_coeffs_q1 or tmp_256_fu_633_p1);
    tmp_81_i_fu_643_p4 <= t_i_reg_268(63 downto 16);
    tmp_8_i_cast_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_i_cast_fu_706_p2),16));
    tmp_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_235),64));
    tmp_i1_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_246),64));
    tmp_i2_fu_513_p2 <= std_logic_vector(unsigned(x4_coeffs_q0) - unsigned(x4_coeffs_q1));
    tmp_i3_44_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i3_reg_280),64));
    tmp_i3_fu_661_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(t_fu_653_p3));
    tmp_i8_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i6_reg_224),64));
    tmp_i_cast_fu_369_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(tmp_i_reg_202));
    tmp_s_fu_481_p2 <= std_logic_vector(unsigned(x1_coeffs_q1) - unsigned(x2_coeffs_q0));

    x1_coeffs_address0_assign_proc : process(b_coeffs_addr_reg_717, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_i_fu_352_p2, b_coeffs_addr_11_reg_762, ap_CS_fsm_state24, grp_poly_Sq_frombytes_fu_304_r_coeffs_address0, grp_poly_Rq_mul_fu_335_a_coeffs_address0, ap_CS_fsm_state21, ap_CS_fsm_state2, ap_CS_fsm_state9, tmp_233_i_fu_364_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            x1_coeffs_address0 <= b_coeffs_addr_11_reg_762;
        elsif (((exitcond_i_fu_352_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x1_coeffs_address0 <= b_coeffs_addr_reg_717;
        elsif (((exitcond_i_fu_352_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x1_coeffs_address0 <= tmp_233_i_fu_364_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x1_coeffs_address0 <= ap_const_lv64_2BC(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            x1_coeffs_address0 <= grp_poly_Rq_mul_fu_335_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_address0 <= grp_poly_Sq_frombytes_fu_304_r_coeffs_address0;
        else 
            x1_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state20, grp_poly_Sq_frombytes_fu_304_r_coeffs_address1, ap_CS_fsm_state2, tmp_fu_475_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            x1_coeffs_address1 <= tmp_fu_475_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            x1_coeffs_address1 <= ap_const_lv64_2BC(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_address1 <= grp_poly_Sq_frombytes_fu_304_r_coeffs_address1;
        else 
            x1_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_i_fu_352_p2, ap_CS_fsm_state24, grp_poly_Sq_frombytes_fu_304_r_coeffs_ce0, grp_poly_Rq_mul_fu_335_a_coeffs_ce0, ap_CS_fsm_state21, ap_CS_fsm_state2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state21) or ((exitcond_i_fu_352_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((exitcond_i_fu_352_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            x1_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            x1_coeffs_ce0 <= grp_poly_Rq_mul_fu_335_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_ce0 <= grp_poly_Sq_frombytes_fu_304_r_coeffs_ce0;
        else 
            x1_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state20, grp_poly_Sq_frombytes_fu_304_r_coeffs_ce1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            x1_coeffs_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_ce1 <= grp_poly_Sq_frombytes_fu_304_r_coeffs_ce1;
        else 
            x1_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_i_fu_352_p2, grp_poly_Sq_frombytes_fu_304_r_coeffs_d0, ap_CS_fsm_state21, ap_CS_fsm_state2, tmp_232_i_cast_fu_375_p1, tmp_243_cast_fu_491_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            x1_coeffs_d0 <= tmp_243_cast_fu_491_p1;
        elsif (((exitcond_i_fu_352_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x1_coeffs_d0 <= tmp_232_i_cast_fu_375_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x1_coeffs_d0 <= ap_const_lv16_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_d0 <= grp_poly_Sq_frombytes_fu_304_r_coeffs_d0;
        else 
            x1_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_d1_assign_proc : process(ap_CS_fsm_state5, grp_poly_Sq_frombytes_fu_304_r_coeffs_d1, ap_CS_fsm_state2, tmp_234_i_fu_388_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x1_coeffs_d1 <= tmp_234_i_fu_388_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_d1 <= grp_poly_Sq_frombytes_fu_304_r_coeffs_d1;
        else 
            x1_coeffs_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_i_fu_352_p2, grp_poly_Sq_frombytes_fu_304_r_coeffs_we0, ap_CS_fsm_state21, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state21) or ((exitcond_i_fu_352_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            x1_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_we0 <= grp_poly_Sq_frombytes_fu_304_r_coeffs_we0;
        else 
            x1_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_we1_assign_proc : process(ap_CS_fsm_state5, grp_poly_Sq_frombytes_fu_304_r_coeffs_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x1_coeffs_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_we1 <= grp_poly_Sq_frombytes_fu_304_r_coeffs_we1;
        else 
            x1_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_address0_assign_proc : process(ap_CS_fsm_state7, liftm_coeffs_addr_reg_749, exitcond_i7_fu_401_p2, ap_CS_fsm_state20, grp_poly_lift_fu_291_r_coeffs_address0, grp_poly_S3_mul_fu_312_a_coeffs_address0, grp_poly_S3_frombytes_fu_319_r_coeffs_address0, grp_poly_Rq_to_S3_fu_329_r_coeffs_address0, grp_poly_Rq_mul_fu_335_b_coeffs_address0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state19, ap_CS_fsm_state15, ap_CS_fsm_state11, ap_CS_fsm_state9, tmp_i8_fu_413_p1, tmp_fu_475_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            x2_coeffs_address0 <= tmp_fu_475_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x2_coeffs_address0 <= liftm_coeffs_addr_reg_749;
        elsif (((exitcond_i7_fu_401_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            x2_coeffs_address0 <= tmp_i8_fu_413_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x2_coeffs_address0 <= grp_poly_Rq_mul_fu_335_b_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x2_coeffs_address0 <= grp_poly_Rq_to_S3_fu_329_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_address0 <= grp_poly_S3_frombytes_fu_319_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x2_coeffs_address0 <= grp_poly_S3_mul_fu_312_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            x2_coeffs_address0 <= grp_poly_lift_fu_291_r_coeffs_address0;
        else 
            x2_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_address1_assign_proc : process(grp_poly_S3_frombytes_fu_319_r_coeffs_address1, grp_poly_Rq_to_S3_fu_329_r_coeffs_address1, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x2_coeffs_address1 <= grp_poly_Rq_to_S3_fu_329_r_coeffs_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_address1 <= grp_poly_S3_frombytes_fu_319_r_coeffs_address1;
        else 
            x2_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_ce0_assign_proc : process(ap_CS_fsm_state7, exitcond_i7_fu_401_p2, ap_CS_fsm_state20, grp_poly_lift_fu_291_r_coeffs_ce0, grp_poly_S3_mul_fu_312_a_coeffs_ce0, grp_poly_S3_frombytes_fu_319_r_coeffs_ce0, grp_poly_Rq_to_S3_fu_329_r_coeffs_ce0, grp_poly_Rq_mul_fu_335_b_coeffs_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state19, ap_CS_fsm_state15, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((exitcond_i7_fu_401_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            x2_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x2_coeffs_ce0 <= grp_poly_Rq_mul_fu_335_b_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x2_coeffs_ce0 <= grp_poly_Rq_to_S3_fu_329_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_ce0 <= grp_poly_S3_frombytes_fu_319_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x2_coeffs_ce0 <= grp_poly_S3_mul_fu_312_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            x2_coeffs_ce0 <= grp_poly_lift_fu_291_r_coeffs_ce0;
        else 
            x2_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_ce1_assign_proc : process(grp_poly_S3_frombytes_fu_319_r_coeffs_ce1, grp_poly_Rq_to_S3_fu_329_r_coeffs_ce1, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x2_coeffs_ce1 <= grp_poly_Rq_to_S3_fu_329_r_coeffs_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_ce1 <= grp_poly_S3_frombytes_fu_319_r_coeffs_ce1;
        else 
            x2_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_d0_assign_proc : process(grp_poly_lift_fu_291_r_coeffs_d0, grp_poly_S3_frombytes_fu_319_r_coeffs_d0, grp_poly_Rq_to_S3_fu_329_r_coeffs_d0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state19, ap_CS_fsm_state11, tmp_39_i_fu_454_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x2_coeffs_d0 <= tmp_39_i_fu_454_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x2_coeffs_d0 <= grp_poly_Rq_to_S3_fu_329_r_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_d0 <= grp_poly_S3_frombytes_fu_319_r_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            x2_coeffs_d0 <= grp_poly_lift_fu_291_r_coeffs_d0;
        else 
            x2_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_d1_assign_proc : process(grp_poly_S3_frombytes_fu_319_r_coeffs_d1, grp_poly_Rq_to_S3_fu_329_r_coeffs_d1, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x2_coeffs_d1 <= grp_poly_Rq_to_S3_fu_329_r_coeffs_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_d1 <= grp_poly_S3_frombytes_fu_319_r_coeffs_d1;
        else 
            x2_coeffs_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_we0_assign_proc : process(grp_poly_lift_fu_291_r_coeffs_we0, grp_poly_S3_frombytes_fu_319_r_coeffs_we0, grp_poly_Rq_to_S3_fu_329_r_coeffs_we0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state19, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x2_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x2_coeffs_we0 <= grp_poly_Rq_to_S3_fu_329_r_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_we0 <= grp_poly_S3_frombytes_fu_319_r_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            x2_coeffs_we0 <= grp_poly_lift_fu_291_r_coeffs_we0;
        else 
            x2_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_we1_assign_proc : process(grp_poly_S3_frombytes_fu_319_r_coeffs_we1, grp_poly_Rq_to_S3_fu_329_r_coeffs_we1, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x2_coeffs_we1 <= grp_poly_Rq_to_S3_fu_329_r_coeffs_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x2_coeffs_we1 <= grp_poly_S3_frombytes_fu_319_r_coeffs_we1;
        else 
            x2_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_address0_assign_proc : process(ap_CS_fsm_state24, grp_poly_Sq_frombytes_1_fu_297_r_coeffs_address0, grp_poly_S3_mul_fu_312_b_coeffs_address0, grp_poly_S3_frombytes_fu_319_r_coeffs_address0, grp_poly_Rq_to_S3_fu_329_a_coeffs_address0, grp_poly_Rq_mul_fu_335_r_coeffs_address0, grp_poly_Rq_mul_fu_335_b_coeffs_address0, ap_CS_fsm_state22, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            x3_coeffs_address0 <= grp_poly_Rq_mul_fu_335_b_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_address0 <= grp_poly_Rq_mul_fu_335_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x3_coeffs_address0 <= grp_poly_Rq_to_S3_fu_329_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_address0 <= grp_poly_S3_frombytes_fu_319_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x3_coeffs_address0 <= grp_poly_S3_mul_fu_312_b_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            x3_coeffs_address0 <= grp_poly_Sq_frombytes_1_fu_297_r_coeffs_address0;
        else 
            x3_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_address1_assign_proc : process(grp_poly_Sq_frombytes_1_fu_297_r_coeffs_address1, grp_poly_S3_frombytes_fu_319_r_coeffs_address1, ap_CS_fsm_state22, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_address1 <= grp_poly_S3_frombytes_fu_319_r_coeffs_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            x3_coeffs_address1 <= grp_poly_Sq_frombytes_1_fu_297_r_coeffs_address1;
        else 
            x3_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_ce0_assign_proc : process(ap_CS_fsm_state24, grp_poly_Sq_frombytes_1_fu_297_r_coeffs_ce0, grp_poly_S3_mul_fu_312_b_coeffs_ce0, grp_poly_S3_frombytes_fu_319_r_coeffs_ce0, grp_poly_Rq_to_S3_fu_329_a_coeffs_ce0, grp_poly_Rq_mul_fu_335_r_coeffs_ce0, grp_poly_Rq_mul_fu_335_b_coeffs_ce0, ap_CS_fsm_state22, ap_CS_fsm_state15, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            x3_coeffs_ce0 <= grp_poly_Rq_mul_fu_335_b_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_ce0 <= grp_poly_Rq_mul_fu_335_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x3_coeffs_ce0 <= grp_poly_Rq_to_S3_fu_329_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_ce0 <= grp_poly_S3_frombytes_fu_319_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x3_coeffs_ce0 <= grp_poly_S3_mul_fu_312_b_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            x3_coeffs_ce0 <= grp_poly_Sq_frombytes_1_fu_297_r_coeffs_ce0;
        else 
            x3_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_ce1_assign_proc : process(grp_poly_Sq_frombytes_1_fu_297_r_coeffs_ce1, grp_poly_S3_frombytes_fu_319_r_coeffs_ce1, ap_CS_fsm_state22, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_ce1 <= grp_poly_S3_frombytes_fu_319_r_coeffs_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            x3_coeffs_ce1 <= grp_poly_Sq_frombytes_1_fu_297_r_coeffs_ce1;
        else 
            x3_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_d0_assign_proc : process(grp_poly_Sq_frombytes_1_fu_297_r_coeffs_d0, grp_poly_S3_frombytes_fu_319_r_coeffs_d0, grp_poly_Rq_mul_fu_335_r_coeffs_d0, ap_CS_fsm_state22, ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_d0 <= grp_poly_Rq_mul_fu_335_r_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_d0 <= grp_poly_S3_frombytes_fu_319_r_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            x3_coeffs_d0 <= grp_poly_Sq_frombytes_1_fu_297_r_coeffs_d0;
        else 
            x3_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_d1_assign_proc : process(grp_poly_Sq_frombytes_1_fu_297_r_coeffs_d1, grp_poly_S3_frombytes_fu_319_r_coeffs_d1, ap_CS_fsm_state22, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_d1 <= grp_poly_S3_frombytes_fu_319_r_coeffs_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            x3_coeffs_d1 <= grp_poly_Sq_frombytes_1_fu_297_r_coeffs_d1;
        else 
            x3_coeffs_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_we0_assign_proc : process(grp_poly_Sq_frombytes_1_fu_297_r_coeffs_we0, grp_poly_S3_frombytes_fu_319_r_coeffs_we0, grp_poly_Rq_mul_fu_335_r_coeffs_we0, ap_CS_fsm_state22, ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_we0 <= grp_poly_Rq_mul_fu_335_r_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_we0 <= grp_poly_S3_frombytes_fu_319_r_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            x3_coeffs_we0 <= grp_poly_Sq_frombytes_1_fu_297_r_coeffs_we0;
        else 
            x3_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_we1_assign_proc : process(grp_poly_Sq_frombytes_1_fu_297_r_coeffs_we1, grp_poly_S3_frombytes_fu_319_r_coeffs_we1, ap_CS_fsm_state22, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x3_coeffs_we1 <= grp_poly_S3_frombytes_fu_319_r_coeffs_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            x3_coeffs_we1 <= grp_poly_Sq_frombytes_1_fu_297_r_coeffs_we1;
        else 
            x3_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x4_coeffs_address0_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, r_coeffs_addr_22_reg_786, ap_CS_fsm_state30, r_coeffs_addr_24_reg_821, exitcond_i3_fu_675_p2, grp_poly_lift_fu_291_a_coeffs_address0, grp_poly_S3_mul_fu_312_r_coeffs_address0, grp_poly_Rq_mul_fu_335_r_coeffs_address0, grp_poly_S3_tobytes_fu_342_a_coeffs_address0, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state31, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state32, tmp_i1_fu_508_p1, tmp_i3_44_fu_687_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            x4_coeffs_address0 <= r_coeffs_addr_24_reg_821;
        elsif (((exitcond_i3_fu_675_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            x4_coeffs_address0 <= tmp_i3_44_fu_687_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            x4_coeffs_address0 <= r_coeffs_addr_22_reg_786;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            x4_coeffs_address0 <= tmp_i1_fu_508_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            x4_coeffs_address0 <= grp_poly_S3_tobytes_fu_342_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            x4_coeffs_address0 <= grp_poly_Rq_mul_fu_335_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x4_coeffs_address0 <= grp_poly_S3_mul_fu_312_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            x4_coeffs_address0 <= grp_poly_lift_fu_291_a_coeffs_address0;
        else 
            x4_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x4_coeffs_address1_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state27, exitcond_i2_fu_528_p2, grp_poly_lift_fu_291_a_coeffs_address1, grp_poly_S3_mul_fu_312_r_coeffs_address1, grp_poly_S3_tobytes_fu_342_a_coeffs_address1, ap_CS_fsm_state19, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state32, tmp_255_i_fu_540_p1)
    begin
        if (((exitcond_i2_fu_528_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            x4_coeffs_address1 <= tmp_255_i_fu_540_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond_i2_fu_528_p2 = ap_const_lv1_1)))) then 
            x4_coeffs_address1 <= ap_const_lv64_2BC(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            x4_coeffs_address1 <= grp_poly_S3_tobytes_fu_342_a_coeffs_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x4_coeffs_address1 <= grp_poly_S3_mul_fu_312_r_coeffs_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            x4_coeffs_address1 <= grp_poly_lift_fu_291_a_coeffs_address1;
        else 
            x4_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    x4_coeffs_ce0_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state30, exitcond_i3_fu_675_p2, grp_poly_lift_fu_291_a_coeffs_ce0, grp_poly_S3_mul_fu_312_r_coeffs_ce0, grp_poly_Rq_mul_fu_335_r_coeffs_ce0, grp_poly_S3_tobytes_fu_342_a_coeffs_ce0, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state31, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or ((exitcond_i3_fu_675_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            x4_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            x4_coeffs_ce0 <= grp_poly_S3_tobytes_fu_342_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            x4_coeffs_ce0 <= grp_poly_Rq_mul_fu_335_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x4_coeffs_ce0 <= grp_poly_S3_mul_fu_312_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            x4_coeffs_ce0 <= grp_poly_lift_fu_291_a_coeffs_ce0;
        else 
            x4_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x4_coeffs_ce1_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state27, exitcond_i2_fu_528_p2, grp_poly_lift_fu_291_a_coeffs_ce1, grp_poly_S3_mul_fu_312_r_coeffs_ce1, grp_poly_S3_tobytes_fu_342_a_coeffs_ce1, ap_CS_fsm_state19, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond_i2_fu_528_p2 = ap_const_lv1_1)) or ((exitcond_i2_fu_528_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then 
            x4_coeffs_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            x4_coeffs_ce1 <= grp_poly_S3_tobytes_fu_342_a_coeffs_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x4_coeffs_ce1 <= grp_poly_S3_mul_fu_312_r_coeffs_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            x4_coeffs_ce1 <= grp_poly_lift_fu_291_a_coeffs_ce1;
        else 
            x4_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x4_coeffs_d0_assign_proc : process(ap_CS_fsm_state24, grp_poly_S3_mul_fu_312_r_coeffs_d0, grp_poly_Rq_mul_fu_335_r_coeffs_d0, ap_CS_fsm_state26, ap_CS_fsm_state31, ap_CS_fsm_state15, tmp_40_i_cast_fu_523_p1, tmp_8_i_cast_fu_712_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            x4_coeffs_d0 <= tmp_8_i_cast_fu_712_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            x4_coeffs_d0 <= tmp_40_i_cast_fu_523_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            x4_coeffs_d0 <= grp_poly_Rq_mul_fu_335_r_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x4_coeffs_d0 <= grp_poly_S3_mul_fu_312_r_coeffs_d0;
        else 
            x4_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x4_coeffs_we0_assign_proc : process(ap_CS_fsm_state24, grp_poly_S3_mul_fu_312_r_coeffs_we0, grp_poly_Rq_mul_fu_335_r_coeffs_we0, ap_CS_fsm_state26, ap_CS_fsm_state31, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            x4_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            x4_coeffs_we0 <= grp_poly_Rq_mul_fu_335_r_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x4_coeffs_we0 <= grp_poly_S3_mul_fu_312_r_coeffs_we0;
        else 
            x4_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x4_coeffs_we1_assign_proc : process(grp_poly_S3_mul_fu_312_r_coeffs_we1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x4_coeffs_we1 <= grp_poly_S3_mul_fu_312_r_coeffs_we1;
        else 
            x4_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
