-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity poly_Sq_frombytes_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce0 : OUT STD_LOGIC;
    r_coeffs_we0 : OUT STD_LOGIC;
    r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce1 : OUT STD_LOGIC;
    r_coeffs_we1 : OUT STD_LOGIC;
    r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of poly_Sq_frombytes_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_587 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010110000111";
    constant ap_const_lv64_588 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010110001000";
    constant ap_const_lv64_589 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010110001001";
    constant ap_const_lv64_586 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010110000110";
    constant ap_const_lv64_2BB : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010111011";
    constant ap_const_lv64_2BA : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010111010";
    constant ap_const_lv64_584 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010110000100";
    constant ap_const_lv64_585 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010110000101";
    constant ap_const_lv64_2B9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010111001";
    constant ap_const_lv64_583 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010110000011";
    constant ap_const_lv64_2B8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010111000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv7_57 : STD_LOGIC_VECTOR (6 downto 0) := "1010111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv11_118 : STD_LOGIC_VECTOR (10 downto 0) := "00100011000";
    constant ap_const_lv11_119 : STD_LOGIC_VECTOR (10 downto 0) := "00100011001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_11A : STD_LOGIC_VECTOR (10 downto 0) := "00100011010";
    constant ap_const_lv11_11B : STD_LOGIC_VECTOR (10 downto 0) := "00100011011";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_11C : STD_LOGIC_VECTOR (10 downto 0) := "00100011100";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv11_11D : STD_LOGIC_VECTOR (10 downto 0) := "00100011101";
    constant ap_const_lv11_11E : STD_LOGIC_VECTOR (10 downto 0) := "00100011110";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv11_11F : STD_LOGIC_VECTOR (10 downto 0) := "00100011111";
    constant ap_const_lv11_120 : STD_LOGIC_VECTOR (10 downto 0) := "00100100000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv11_121 : STD_LOGIC_VECTOR (10 downto 0) := "00100100001";
    constant ap_const_lv11_122 : STD_LOGIC_VECTOR (10 downto 0) := "00100100010";
    constant ap_const_lv11_D : STD_LOGIC_VECTOR (10 downto 0) := "00000001101";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv11_123 : STD_LOGIC_VECTOR (10 downto 0) := "00100100011";
    constant ap_const_lv11_124 : STD_LOGIC_VECTOR (10 downto 0) := "00100100100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_479 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_s_fu_490_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_reg_1137 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_535_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_51_reg_1162 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_461_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_53_reg_1173 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_61_reg_1188 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_99_reg_1198 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_82_reg_1213 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_90_reg_1228 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal next_mul_fu_859_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul_reg_1243 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_97_reg_1248 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_1263 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_1008_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_66_reg_1278 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_70_fu_1076_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_70_reg_1293 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_74_fu_1118_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_74_reg_1303 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_437 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal phi_mul_reg_449 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_cast_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_fu_543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_cast_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum6_cast_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_fu_617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum8_cast_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_73_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_cast_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum3_cast_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_81_fu_738_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum5_cast_fu_759_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum7_cast_fu_770_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_89_fu_822_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum9_cast_fu_843_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum10_cast_fu_854_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_96_fu_886_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum11_cast_fu_907_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum12_cast_fu_918_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_104_fu_970_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_110_fu_1003_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_50_fu_530_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_83_cast_fu_607_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_92_cast_fu_654_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_106_cast_fu_728_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_120_cast_fu_812_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_129_cast_fu_876_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_143_cast_fu_960_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_151_cast_fu_993_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_47_cast_fu_1049_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_52_cast_fu_1071_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_60_cast_fu_1113_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_46_fu_1129_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_496_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum2_fu_507_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_76_fu_518_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_49_fu_522_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum4_fu_548_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum6_fu_559_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_71_fu_570_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_67_fu_585_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_54_fu_573_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_84_fu_581_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_68_fu_593_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_55_fu_599_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_56_fu_612_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum8_fu_632_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_92_fu_643_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_69_fu_647_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_72_fu_659_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum1_fu_669_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum3_fu_680_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_93_fu_691_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_77_fu_706_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_75_fu_694_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_107_fu_702_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_78_fu_714_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_79_fu_720_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_80_fu_733_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum5_fu_753_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum7_fu_764_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_94_fu_775_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_85_fu_790_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_83_fu_778_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_111_fu_786_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_fu_798_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_87_fu_804_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_88_fu_817_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum9_fu_837_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum10_fu_848_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_112_fu_865_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_91_fu_869_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_95_fu_881_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum11_fu_901_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum12_fu_912_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_108_fu_923_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_100_fu_938_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_98_fu_926_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_113_fu_934_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_101_fu_946_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_102_fu_952_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_103_fu_965_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_105_fu_975_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_106_fu_985_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_109_fu_998_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_59_fu_1012_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_fu_1027_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_36_fu_1015_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_63_fu_1023_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_58_fu_1035_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_37_fu_1041_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_38_fu_1054_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_42_fu_1064_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_62_fu_1080_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_64_fu_1092_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_44_fu_1084_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_65_fu_1100_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_45_fu_1106_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_40_fu_1122_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_reg_437 <= tmp_s_reg_1137;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_437 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                phi_mul_reg_449 <= next_mul_reg_1243;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_449 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    reg_479_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reg_479 <= a_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_479 <= a_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                next_mul_reg_1243 <= next_mul_fu_859_p2;
                tmp_97_reg_1248 <= a_q1(7 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_51_reg_1162(9 downto 3) <= tmp_51_fu_535_p3(9 downto 3);
                tmp_53_reg_1173 <= a_q1(7 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_61_reg_1188 <= a_q1(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_66_reg_1278 <= tmp_66_fu_1008_p1;
                tmp_reg_1263 <= a_q0(7 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_70_reg_1293 <= tmp_70_fu_1076_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_74_reg_1303 <= tmp_74_fu_1118_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_82_reg_1213 <= a_q0(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_90_reg_1228 <= a_q0(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_99_reg_1198 <= a_q0(7 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_s_reg_1137 <= tmp_s_fu_490_p2;
            end if;
        end if;
    end process;
    tmp_51_reg_1162(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_484_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state2, exitcond_fu_484_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, sum_cast_fu_502_p1, sum4_cast_fu_554_p1, sum8_cast_fu_638_p1, sum3_cast_fu_686_p1, sum7_cast_fu_770_p1, sum10_cast_fu_854_p1, sum12_cast_fu_918_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            a_address0 <= ap_const_lv64_585(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            a_address0 <= ap_const_lv64_586(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            a_address0 <= sum12_cast_fu_918_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_address0 <= sum10_cast_fu_854_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_address0 <= sum7_cast_fu_770_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address0 <= sum3_cast_fu_686_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_address0 <= sum8_cast_fu_638_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_address0 <= sum4_cast_fu_554_p1(11 - 1 downto 0);
        elsif (((exitcond_fu_484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_address0 <= ap_const_lv64_587(11 - 1 downto 0);
        elsif (((exitcond_fu_484_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_address0 <= sum_cast_fu_502_p1(11 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    a_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state2, exitcond_fu_484_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state12, sum2_cast_fu_513_p1, sum6_cast_fu_565_p1, sum1_cast_fu_675_p1, sum5_cast_fu_759_p1, sum9_cast_fu_843_p1, sum11_cast_fu_907_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            a_address1 <= ap_const_lv64_583(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            a_address1 <= ap_const_lv64_584(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            a_address1 <= ap_const_lv64_589(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            a_address1 <= sum11_cast_fu_907_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_address1 <= sum9_cast_fu_843_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_address1 <= sum5_cast_fu_759_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address1 <= sum1_cast_fu_675_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_address1 <= sum6_cast_fu_565_p1(11 - 1 downto 0);
        elsif (((exitcond_fu_484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_address1 <= ap_const_lv64_588(11 - 1 downto 0);
        elsif (((exitcond_fu_484_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_address1 <= sum2_cast_fu_513_p1(11 - 1 downto 0);
        else 
            a_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state2, exitcond_fu_484_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((exitcond_fu_484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((exitcond_fu_484_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state2, exitcond_fu_484_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((exitcond_fu_484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((exitcond_fu_484_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_484_p2 <= "1" when (i_reg_437 = ap_const_lv7_57) else "0";
    grp_fu_461_p4 <= a_q1(7 downto 5);
    next_mul_fu_859_p2 <= std_logic_vector(unsigned(ap_const_lv11_D) + unsigned(phi_mul_reg_449));

    r_coeffs_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state9, tmp_52_fu_543_p1, tmp_60_fu_617_p1, tmp_73_fu_664_p1, tmp_81_fu_738_p1, tmp_89_fu_822_p1, tmp_96_fu_886_p1, tmp_104_fu_970_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_coeffs_address0 <= ap_const_lv64_2BA(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_coeffs_address0 <= tmp_104_fu_970_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_coeffs_address0 <= tmp_96_fu_886_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_coeffs_address0 <= tmp_89_fu_822_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_address0 <= tmp_81_fu_738_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_address0 <= tmp_73_fu_664_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_address0 <= tmp_60_fu_617_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_coeffs_address0 <= tmp_52_fu_543_p1(10 - 1 downto 0);
        else 
            r_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_address1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9, tmp_110_fu_1003_p1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            r_coeffs_address1 <= ap_const_lv64_2B8(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            r_coeffs_address1 <= ap_const_lv64_2B9(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_coeffs_address1 <= ap_const_lv64_2BB(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_coeffs_address1 <= tmp_110_fu_1003_p1(10 - 1 downto 0);
        else 
            r_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            r_coeffs_ce0 <= ap_const_logic_1;
        else 
            r_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_ce1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            r_coeffs_ce1 <= ap_const_logic_1;
        else 
            r_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state9, tmp_50_fu_530_p1, tmp_83_cast_fu_607_p1, tmp_92_cast_fu_654_p1, tmp_106_cast_fu_728_p1, tmp_120_cast_fu_812_p1, tmp_129_cast_fu_876_p1, tmp_143_cast_fu_960_p1, tmp_52_cast_fu_1071_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_coeffs_d0 <= tmp_52_cast_fu_1071_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_coeffs_d0 <= tmp_143_cast_fu_960_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_coeffs_d0 <= tmp_129_cast_fu_876_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_coeffs_d0 <= tmp_120_cast_fu_812_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_d0 <= tmp_106_cast_fu_728_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_d0 <= tmp_92_cast_fu_654_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_d0 <= tmp_83_cast_fu_607_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_coeffs_d0 <= tmp_50_fu_530_p1;
        else 
            r_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_d1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9, ap_CS_fsm_state13, tmp_151_cast_fu_993_p1, tmp_47_cast_fu_1049_p1, tmp_60_cast_fu_1113_p1, tmp_46_fu_1129_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            r_coeffs_d1 <= tmp_46_fu_1129_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            r_coeffs_d1 <= tmp_60_cast_fu_1113_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_coeffs_d1 <= tmp_47_cast_fu_1049_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_coeffs_d1 <= tmp_151_cast_fu_993_p1;
        else 
            r_coeffs_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            r_coeffs_we0 <= ap_const_logic_1;
        else 
            r_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_we1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            r_coeffs_we1 <= ap_const_logic_1;
        else 
            r_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sum10_cast_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum10_fu_848_p2),64));
    sum10_fu_848_p2 <= std_logic_vector(unsigned(ap_const_lv11_122) + unsigned(phi_mul_reg_449));
    sum11_cast_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum11_fu_901_p2),64));
    sum11_fu_901_p2 <= std_logic_vector(unsigned(ap_const_lv11_123) + unsigned(phi_mul_reg_449));
    sum12_cast_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum12_fu_912_p2),64));
    sum12_fu_912_p2 <= std_logic_vector(unsigned(ap_const_lv11_124) + unsigned(phi_mul_reg_449));
    sum1_cast_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_669_p2),64));
    sum1_fu_669_p2 <= std_logic_vector(unsigned(ap_const_lv11_11D) + unsigned(phi_mul_reg_449));
    sum2_cast_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_507_p2),64));
    sum2_fu_507_p2 <= std_logic_vector(unsigned(ap_const_lv11_119) + unsigned(phi_mul_reg_449));
    sum3_cast_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_fu_680_p2),64));
    sum3_fu_680_p2 <= std_logic_vector(unsigned(ap_const_lv11_11E) + unsigned(phi_mul_reg_449));
    sum4_cast_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_fu_548_p2),64));
    sum4_fu_548_p2 <= std_logic_vector(unsigned(ap_const_lv11_11A) + unsigned(phi_mul_reg_449));
    sum5_cast_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_fu_753_p2),64));
    sum5_fu_753_p2 <= std_logic_vector(unsigned(ap_const_lv11_11F) + unsigned(phi_mul_reg_449));
    sum6_cast_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum6_fu_559_p2),64));
    sum6_fu_559_p2 <= std_logic_vector(unsigned(ap_const_lv11_11B) + unsigned(phi_mul_reg_449));
    sum7_cast_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum7_fu_764_p2),64));
    sum7_fu_764_p2 <= std_logic_vector(unsigned(ap_const_lv11_120) + unsigned(phi_mul_reg_449));
    sum8_cast_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum8_fu_632_p2),64));
    sum8_fu_632_p2 <= std_logic_vector(unsigned(ap_const_lv11_11C) + unsigned(phi_mul_reg_449));
    sum9_cast_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum9_fu_837_p2),64));
    sum9_fu_837_p2 <= std_logic_vector(unsigned(ap_const_lv11_121) + unsigned(phi_mul_reg_449));
    sum_cast_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_496_p2),64));
    sum_fu_496_p2 <= std_logic_vector(unsigned(ap_const_lv11_118) + unsigned(phi_mul_reg_449));
    tmp_100_fu_938_p3 <= (ap_const_lv2_0 & tmp_108_fu_923_p1);
    tmp_101_fu_946_p2 <= (tmp_98_fu_926_p3 or tmp_100_fu_938_p3);
    tmp_102_fu_952_p3 <= (tmp_113_fu_934_p1 & tmp_101_fu_946_p2);
    tmp_103_fu_965_p2 <= (tmp_51_reg_1162 or ap_const_lv10_6);
    tmp_104_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_103_fu_965_p2),64));
    tmp_105_fu_975_p4 <= a_q1(7 downto 3);
    tmp_106_cast_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_79_fu_720_p3),16));
    tmp_106_fu_985_p3 <= (a_q0 & tmp_105_fu_975_p4);
    tmp_107_fu_702_p1 <= a_q0(4 - 1 downto 0);
    tmp_108_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_97_reg_1248),8));
    tmp_109_fu_998_p2 <= (tmp_51_reg_1162 or ap_const_lv10_7);
    tmp_110_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_109_fu_998_p2),64));
    tmp_111_fu_786_p1 <= a_q0(1 - 1 downto 0);
    tmp_112_fu_865_p1 <= a_q1(6 - 1 downto 0);
    tmp_113_fu_934_p1 <= a_q1(3 - 1 downto 0);
    tmp_120_cast_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_87_fu_804_p3),16));
    tmp_129_cast_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_91_fu_869_p3),16));
    tmp_143_cast_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_102_fu_952_p3),16));
    tmp_151_cast_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_106_fu_985_p3),16));
    tmp_36_fu_1015_p3 <= (reg_479 & ap_const_lv1_0);
    tmp_37_fu_1041_p3 <= (tmp_63_fu_1023_p1 & tmp_58_fu_1035_p2);
    tmp_38_fu_1054_p4 <= a_q0(7 downto 2);
    tmp_40_fu_1122_p3 <= (tmp_74_reg_1303 & a_q1);
    tmp_42_fu_1064_p3 <= (tmp_66_reg_1278 & tmp_38_fu_1054_p4);
    tmp_44_fu_1084_p3 <= (a_q0 & ap_const_lv3_0);
    tmp_45_fu_1106_p3 <= (tmp_70_reg_1293 & tmp_65_fu_1100_p2);
    tmp_46_fu_1129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_1122_p3),16));
    tmp_47_cast_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_1041_p3),16));
    tmp_49_fu_522_p3 <= (tmp_76_fu_518_p1 & a_q0);
    tmp_50_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_522_p3),16));
    tmp_51_fu_535_p3 <= (i_reg_437 & ap_const_lv3_0);
    tmp_52_cast_fu_1071_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_1064_p3),16));
    tmp_52_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_535_p3),64));
    tmp_54_fu_573_p3 <= (a_q0 & ap_const_lv3_0);
    tmp_55_fu_599_p3 <= (tmp_84_fu_581_p1 & tmp_68_fu_593_p2);
    tmp_56_fu_612_p2 <= (tmp_51_reg_1162 or ap_const_lv10_1);
    tmp_57_fu_1027_p3 <= (ap_const_lv1_0 & tmp_59_fu_1012_p1);
    tmp_58_fu_1035_p2 <= (tmp_57_fu_1027_p3 or tmp_36_fu_1015_p3);
    tmp_59_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1263),8));
    tmp_60_cast_fu_1113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_fu_1106_p3),16));
    tmp_60_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_612_p2),64));
    tmp_62_fu_1080_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_461_p4),8));
    tmp_63_fu_1023_p1 <= a_q1(4 - 1 downto 0);
    tmp_64_fu_1092_p3 <= (ap_const_lv3_0 & tmp_62_fu_1080_p1);
    tmp_65_fu_1100_p2 <= (tmp_64_fu_1092_p3 or tmp_44_fu_1084_p3);
    tmp_66_fu_1008_p1 <= a_q0(7 - 1 downto 0);
    tmp_67_fu_585_p3 <= (ap_const_lv3_0 & tmp_71_fu_570_p1);
    tmp_68_fu_593_p2 <= (tmp_67_fu_585_p3 or tmp_54_fu_573_p3);
    tmp_69_fu_647_p3 <= (tmp_92_fu_643_p1 & tmp_61_reg_1188);
    tmp_70_fu_1076_p1 <= a_q0(2 - 1 downto 0);
    tmp_71_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_reg_1173),8));
    tmp_72_fu_659_p2 <= (tmp_51_reg_1162 or ap_const_lv10_2);
    tmp_73_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_72_fu_659_p2),64));
    tmp_74_fu_1118_p1 <= a_q1(5 - 1 downto 0);
    tmp_75_fu_694_p3 <= (a_q1 & ap_const_lv1_0);
    tmp_76_fu_518_p1 <= a_q1(5 - 1 downto 0);
    tmp_77_fu_706_p3 <= (ap_const_lv1_0 & tmp_93_fu_691_p1);
    tmp_78_fu_714_p2 <= (tmp_77_fu_706_p3 or tmp_75_fu_694_p3);
    tmp_79_fu_720_p3 <= (tmp_107_fu_702_p1 & tmp_78_fu_714_p2);
    tmp_80_fu_733_p2 <= (tmp_51_reg_1162 or ap_const_lv10_3);
    tmp_81_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_80_fu_733_p2),64));
    tmp_83_cast_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_599_p3),16));
    tmp_83_fu_778_p3 <= (a_q1 & ap_const_lv4_0);
    tmp_84_fu_581_p1 <= a_q1(2 - 1 downto 0);
    tmp_85_fu_790_p3 <= (ap_const_lv4_0 & tmp_94_fu_775_p1);
    tmp_86_fu_798_p2 <= (tmp_85_fu_790_p3 or tmp_83_fu_778_p3);
    tmp_87_fu_804_p3 <= (tmp_111_fu_786_p1 & tmp_86_fu_798_p2);
    tmp_88_fu_817_p2 <= (tmp_51_reg_1162 or ap_const_lv10_4);
    tmp_89_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_88_fu_817_p2),64));
    tmp_91_fu_869_p3 <= (tmp_112_fu_865_p1 & tmp_90_reg_1228);
    tmp_92_cast_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_fu_647_p3),16));
    tmp_92_fu_643_p1 <= a_q0(7 - 1 downto 0);
    tmp_93_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_99_reg_1198),8));
    tmp_94_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_82_reg_1213),8));
    tmp_95_fu_881_p2 <= (tmp_51_reg_1162 or ap_const_lv10_5);
    tmp_96_fu_886_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_95_fu_881_p2),64));
    tmp_98_fu_926_p3 <= (reg_479 & ap_const_lv2_0);
    tmp_s_fu_490_p2 <= std_logic_vector(unsigned(i_reg_437) + unsigned(ap_const_lv7_1));
end behav;
