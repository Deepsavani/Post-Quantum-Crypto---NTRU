// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mod3.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mod3::ap_const_logic_1 = sc_dt::Log_1;
const bool mod3::ap_const_boolean_1 = true;
const sc_lv<32> mod3::ap_const_lv32_4 = "100";
const sc_lv<32> mod3::ap_const_lv32_7 = "111";
const sc_lv<32> mod3::ap_const_lv32_2 = "10";
const sc_lv<32> mod3::ap_const_lv32_5 = "101";
const sc_lv<32> mod3::ap_const_lv32_3 = "11";
const sc_lv<3> mod3::ap_const_lv3_5 = "101";
const sc_lv<3> mod3::ap_const_lv3_7 = "111";
const sc_lv<3> mod3::ap_const_lv3_0 = "000";
const sc_lv<1> mod3::ap_const_lv1_1 = "1";
const sc_logic mod3::ap_const_logic_0 = sc_dt::Log_0;

mod3::mod3(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( tmp_250_cast_fu_184_p1 );
    sensitive << ( tmp_252_cast_fu_208_p1 );

    SC_METHOD(thread_c_cast_fu_170_p3);
    sensitive << ( tmp_264_fu_162_p3 );

    SC_METHOD(thread_fold1_cast_fu_100_p2);
    sensitive << ( tmp_s_fu_90_p4 );
    sensitive << ( tmp_263_fu_86_p1 );

    SC_METHOD(thread_fold2_cast_fu_140_p2);
    sensitive << ( fold1_cast_fu_100_p2 );
    sensitive << ( tmp_251_fu_130_p4 );

    SC_METHOD(thread_not_tmp_s_fu_188_p2);
    sensitive << ( tmp_264_fu_162_p3 );

    SC_METHOD(thread_r_1_fu_66_p2);
    sensitive << ( tmp_245_cast_fu_56_p1 );
    sensitive << ( tmp_244_cast_fu_48_p1 );

    SC_METHOD(thread_r_2_fu_110_p2);
    sensitive << ( tmp_247_cast_fu_106_p1 );
    sensitive << ( tmp_246_cast_fu_82_p1 );

    SC_METHOD(thread_r_3_fu_150_p2);
    sensitive << ( tmp_249_cast_fu_146_p1 );
    sensitive << ( tmp_248_cast_fu_126_p1 );

    SC_METHOD(thread_t_fu_156_p2);
    sensitive << ( r_3_fu_150_p2 );

    SC_METHOD(thread_tmp_243_fu_178_p2);
    sensitive << ( r_3_fu_150_p2 );
    sensitive << ( c_cast_fu_170_p3 );

    SC_METHOD(thread_tmp_244_cast_fu_48_p1);
    sensitive << ( tmp_248_fu_38_p4 );

    SC_METHOD(thread_tmp_244_fu_202_p2);
    sensitive << ( t_fu_156_p2 );
    sensitive << ( tmp_251_cast_cast_fu_194_p3 );

    SC_METHOD(thread_tmp_245_cast_fu_56_p1);
    sensitive << ( tmp_fu_52_p1 );

    SC_METHOD(thread_tmp_246_cast_fu_82_p1);
    sensitive << ( tmp_250_fu_72_p4 );

    SC_METHOD(thread_tmp_247_cast_fu_106_p1);
    sensitive << ( fold1_cast_fu_100_p2 );

    SC_METHOD(thread_tmp_248_cast_fu_126_p1);
    sensitive << ( tmp_252_fu_116_p4 );

    SC_METHOD(thread_tmp_248_fu_38_p4);
    sensitive << ( a );

    SC_METHOD(thread_tmp_249_cast_fu_146_p1);
    sensitive << ( fold2_cast_fu_140_p2 );

    SC_METHOD(thread_tmp_249_fu_60_p2);
    sensitive << ( tmp_248_fu_38_p4 );
    sensitive << ( tmp_fu_52_p1 );

    SC_METHOD(thread_tmp_250_cast_fu_184_p1);
    sensitive << ( tmp_243_fu_178_p2 );

    SC_METHOD(thread_tmp_250_fu_72_p4);
    sensitive << ( r_1_fu_66_p2 );

    SC_METHOD(thread_tmp_251_cast_cast_fu_194_p3);
    sensitive << ( not_tmp_s_fu_188_p2 );

    SC_METHOD(thread_tmp_251_fu_130_p4);
    sensitive << ( tmp_249_fu_60_p2 );

    SC_METHOD(thread_tmp_252_cast_fu_208_p1);
    sensitive << ( tmp_244_fu_202_p2 );

    SC_METHOD(thread_tmp_252_fu_116_p4);
    sensitive << ( r_2_fu_110_p2 );

    SC_METHOD(thread_tmp_263_fu_86_p1);
    sensitive << ( a );

    SC_METHOD(thread_tmp_264_fu_162_p3);
    sensitive << ( t_fu_156_p2 );

    SC_METHOD(thread_tmp_fu_52_p1);
    sensitive << ( a );

    SC_METHOD(thread_tmp_s_fu_90_p4);
    sensitive << ( a );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mod3_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_248_fu_38_p4, "tmp_248_fu_38_p4");
    sc_trace(mVcdFile, tmp_fu_52_p1, "tmp_fu_52_p1");
    sc_trace(mVcdFile, tmp_245_cast_fu_56_p1, "tmp_245_cast_fu_56_p1");
    sc_trace(mVcdFile, tmp_244_cast_fu_48_p1, "tmp_244_cast_fu_48_p1");
    sc_trace(mVcdFile, r_1_fu_66_p2, "r_1_fu_66_p2");
    sc_trace(mVcdFile, tmp_250_fu_72_p4, "tmp_250_fu_72_p4");
    sc_trace(mVcdFile, tmp_s_fu_90_p4, "tmp_s_fu_90_p4");
    sc_trace(mVcdFile, tmp_263_fu_86_p1, "tmp_263_fu_86_p1");
    sc_trace(mVcdFile, fold1_cast_fu_100_p2, "fold1_cast_fu_100_p2");
    sc_trace(mVcdFile, tmp_247_cast_fu_106_p1, "tmp_247_cast_fu_106_p1");
    sc_trace(mVcdFile, tmp_246_cast_fu_82_p1, "tmp_246_cast_fu_82_p1");
    sc_trace(mVcdFile, r_2_fu_110_p2, "r_2_fu_110_p2");
    sc_trace(mVcdFile, tmp_252_fu_116_p4, "tmp_252_fu_116_p4");
    sc_trace(mVcdFile, tmp_249_fu_60_p2, "tmp_249_fu_60_p2");
    sc_trace(mVcdFile, tmp_251_fu_130_p4, "tmp_251_fu_130_p4");
    sc_trace(mVcdFile, fold2_cast_fu_140_p2, "fold2_cast_fu_140_p2");
    sc_trace(mVcdFile, tmp_249_cast_fu_146_p1, "tmp_249_cast_fu_146_p1");
    sc_trace(mVcdFile, tmp_248_cast_fu_126_p1, "tmp_248_cast_fu_126_p1");
    sc_trace(mVcdFile, r_3_fu_150_p2, "r_3_fu_150_p2");
    sc_trace(mVcdFile, t_fu_156_p2, "t_fu_156_p2");
    sc_trace(mVcdFile, tmp_264_fu_162_p3, "tmp_264_fu_162_p3");
    sc_trace(mVcdFile, c_cast_fu_170_p3, "c_cast_fu_170_p3");
    sc_trace(mVcdFile, tmp_243_fu_178_p2, "tmp_243_fu_178_p2");
    sc_trace(mVcdFile, not_tmp_s_fu_188_p2, "not_tmp_s_fu_188_p2");
    sc_trace(mVcdFile, tmp_251_cast_cast_fu_194_p3, "tmp_251_cast_cast_fu_194_p3");
    sc_trace(mVcdFile, tmp_244_fu_202_p2, "tmp_244_fu_202_p2");
    sc_trace(mVcdFile, tmp_250_cast_fu_184_p1, "tmp_250_cast_fu_184_p1");
    sc_trace(mVcdFile, tmp_252_cast_fu_208_p1, "tmp_252_cast_fu_208_p1");
#endif

    }
}

mod3::~mod3() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void mod3::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void mod3::thread_ap_return() {
    ap_return = (tmp_250_cast_fu_184_p1.read() ^ tmp_252_cast_fu_208_p1.read());
}

void mod3::thread_c_cast_fu_170_p3() {
    c_cast_fu_170_p3 = (!tmp_264_fu_162_p3.read()[0].is_01())? sc_lv<3>(): ((tmp_264_fu_162_p3.read()[0].to_bool())? ap_const_lv3_7: ap_const_lv3_0);
}

void mod3::thread_fold1_cast_fu_100_p2() {
    fold1_cast_fu_100_p2 = (!tmp_s_fu_90_p4.read().is_01() || !tmp_263_fu_86_p1.read().is_01())? sc_lv<2>(): (sc_biguint<2>(tmp_s_fu_90_p4.read()) + sc_biguint<2>(tmp_263_fu_86_p1.read()));
}

void mod3::thread_fold2_cast_fu_140_p2() {
    fold2_cast_fu_140_p2 = (!fold1_cast_fu_100_p2.read().is_01() || !tmp_251_fu_130_p4.read().is_01())? sc_lv<2>(): (sc_biguint<2>(fold1_cast_fu_100_p2.read()) + sc_biguint<2>(tmp_251_fu_130_p4.read()));
}

void mod3::thread_not_tmp_s_fu_188_p2() {
    not_tmp_s_fu_188_p2 = (tmp_264_fu_162_p3.read() ^ ap_const_lv1_1);
}

void mod3::thread_r_1_fu_66_p2() {
    r_1_fu_66_p2 = (!tmp_245_cast_fu_56_p1.read().is_01() || !tmp_244_cast_fu_48_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_245_cast_fu_56_p1.read()) + sc_biguint<5>(tmp_244_cast_fu_48_p1.read()));
}

void mod3::thread_r_2_fu_110_p2() {
    r_2_fu_110_p2 = (!tmp_247_cast_fu_106_p1.read().is_01() || !tmp_246_cast_fu_82_p1.read().is_01())? sc_lv<4>(): (sc_biguint<4>(tmp_247_cast_fu_106_p1.read()) + sc_biguint<4>(tmp_246_cast_fu_82_p1.read()));
}

void mod3::thread_r_3_fu_150_p2() {
    r_3_fu_150_p2 = (!tmp_249_cast_fu_146_p1.read().is_01() || !tmp_248_cast_fu_126_p1.read().is_01())? sc_lv<3>(): (sc_biguint<3>(tmp_249_cast_fu_146_p1.read()) + sc_biguint<3>(tmp_248_cast_fu_126_p1.read()));
}

void mod3::thread_t_fu_156_p2() {
    t_fu_156_p2 = (!ap_const_lv3_5.is_01() || !r_3_fu_150_p2.read().is_01())? sc_lv<3>(): (sc_bigint<3>(ap_const_lv3_5) + sc_biguint<3>(r_3_fu_150_p2.read()));
}

void mod3::thread_tmp_243_fu_178_p2() {
    tmp_243_fu_178_p2 = (r_3_fu_150_p2.read() & c_cast_fu_170_p3.read());
}

void mod3::thread_tmp_244_cast_fu_48_p1() {
    tmp_244_cast_fu_48_p1 = esl_zext<5,4>(tmp_248_fu_38_p4.read());
}

void mod3::thread_tmp_244_fu_202_p2() {
    tmp_244_fu_202_p2 = (t_fu_156_p2.read() & tmp_251_cast_cast_fu_194_p3.read());
}

void mod3::thread_tmp_245_cast_fu_56_p1() {
    tmp_245_cast_fu_56_p1 = esl_zext<5,4>(tmp_fu_52_p1.read());
}

void mod3::thread_tmp_246_cast_fu_82_p1() {
    tmp_246_cast_fu_82_p1 = esl_zext<4,3>(tmp_250_fu_72_p4.read());
}

void mod3::thread_tmp_247_cast_fu_106_p1() {
    tmp_247_cast_fu_106_p1 = esl_zext<4,2>(fold1_cast_fu_100_p2.read());
}

void mod3::thread_tmp_248_cast_fu_126_p1() {
    tmp_248_cast_fu_126_p1 = esl_zext<3,2>(tmp_252_fu_116_p4.read());
}

void mod3::thread_tmp_248_fu_38_p4() {
    tmp_248_fu_38_p4 = a.read().range(7, 4);
}

void mod3::thread_tmp_249_cast_fu_146_p1() {
    tmp_249_cast_fu_146_p1 = esl_zext<3,2>(fold2_cast_fu_140_p2.read());
}

void mod3::thread_tmp_249_fu_60_p2() {
    tmp_249_fu_60_p2 = (!tmp_248_fu_38_p4.read().is_01() || !tmp_fu_52_p1.read().is_01())? sc_lv<4>(): (sc_biguint<4>(tmp_248_fu_38_p4.read()) + sc_biguint<4>(tmp_fu_52_p1.read()));
}

void mod3::thread_tmp_250_cast_fu_184_p1() {
    tmp_250_cast_fu_184_p1 = esl_zext<16,3>(tmp_243_fu_178_p2.read());
}

void mod3::thread_tmp_250_fu_72_p4() {
    tmp_250_fu_72_p4 = r_1_fu_66_p2.read().range(4, 2);
}

void mod3::thread_tmp_251_cast_cast_fu_194_p3() {
    tmp_251_cast_cast_fu_194_p3 = (!not_tmp_s_fu_188_p2.read()[0].is_01())? sc_lv<3>(): ((not_tmp_s_fu_188_p2.read()[0].to_bool())? ap_const_lv3_7: ap_const_lv3_0);
}

void mod3::thread_tmp_251_fu_130_p4() {
    tmp_251_fu_130_p4 = tmp_249_fu_60_p2.read().range(3, 2);
}

void mod3::thread_tmp_252_cast_fu_208_p1() {
    tmp_252_cast_fu_208_p1 = esl_sext<16,3>(tmp_244_fu_202_p2.read());
}

void mod3::thread_tmp_252_fu_116_p4() {
    tmp_252_fu_116_p4 = r_2_fu_110_p2.read().range(3, 2);
}

void mod3::thread_tmp_263_fu_86_p1() {
    tmp_263_fu_86_p1 = a.read().range(2-1, 0);
}

void mod3::thread_tmp_264_fu_162_p3() {
    tmp_264_fu_162_p3 = t_fu_156_p2.read().range(2, 2);
}

void mod3::thread_tmp_fu_52_p1() {
    tmp_fu_52_p1 = a.read().range(4-1, 0);
}

void mod3::thread_tmp_s_fu_90_p4() {
    tmp_s_fu_90_p4 = a.read().range(5, 4);
}

}

