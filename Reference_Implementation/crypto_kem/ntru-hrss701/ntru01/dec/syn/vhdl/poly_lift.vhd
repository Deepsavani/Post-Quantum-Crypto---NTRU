-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity poly_lift is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce0 : OUT STD_LOGIC;
    r_coeffs_we0 : OUT STD_LOGIC;
    r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a_coeffs_ce0 : OUT STD_LOGIC;
    a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a_coeffs_ce1 : OUT STD_LOGIC;
    a_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of poly_lift is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv10_2BC : STD_LOGIC_VECTOR (9 downto 0) := "1010111100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_2BC : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010111100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_2BD : STD_LOGIC_VECTOR (9 downto 0) := "1010111101";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv10_3FD : STD_LOGIC_VECTOR (9 downto 0) := "1111111101";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv10_3FE : STD_LOGIC_VECTOR (9 downto 0) := "1111111110";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal b_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_392 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal a_coeffs_load_reg_1028 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal a_coeffs_load_1_reg_1035 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_coeffs_addr_1_reg_1046 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_396_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_coeffs_addr_reg_1061 : STD_LOGIC_VECTOR (9 downto 0);
    signal b_coeffs_addr_2_reg_1067 : STD_LOGIC_VECTOR (9 downto 0);
    signal zj_cast9_fu_402_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zj_cast9_reg_1073 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zj_cast_fu_406_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zj_cast_reg_1078 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond2_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_421_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_4_reg_1091 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_982_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_1096 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_989_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_reg_1101 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_coeffs_load_3_reg_1106 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_385_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_reg_1113 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_coeffs_load_1_reg_1118 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_448_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_19_reg_1123 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_996_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_reg_1128 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_1005_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_reg_1133 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1012_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_reg_1138 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_reg_1147 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond1_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_28_fu_509_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_28_reg_1177 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_5_fu_513_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_5_reg_1182 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_32_fu_546_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_32_reg_1187 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_6_fu_558_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_6_reg_1195 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal b_coeffs_addr_6_reg_1200 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_263_i_cast_reg_1205 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal fold1_i_cast_fu_753_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal fold1_i_cast_reg_1210 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_48_reg_1216 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_7_fu_874_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_7_reg_1224 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal b_coeffs_addr_7_reg_1229 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_fu_936_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_8_reg_1238 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_i6_fu_930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_235_i_fu_947_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_235_i_reg_1248 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal b_coeffs_ce0 : STD_LOGIC;
    signal b_coeffs_we0 : STD_LOGIC;
    signal b_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal b_coeffs_ce1 : STD_LOGIC;
    signal b_coeffs_we1 : STD_LOGIC;
    signal b_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_288 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_1_reg_298 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_308 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_317 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_zj_phi_fu_332_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zj_reg_328 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_340 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_2_reg_352 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_i_reg_363 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_i5_reg_374 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_7_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_fu_880_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i7_fu_942_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_9_fu_459_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_9_fu_459_p2 : signal is "no";
    signal tmp_270_i_fu_861_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_i_fu_921_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_237_i_cast_fu_962_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_239_i_cast_fu_977_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_385_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_431_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_18_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_442_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_20_fu_476_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_23_fu_487_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_25_fu_498_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_34_fu_523_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_fu_527_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_29_fu_519_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_30_fu_532_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_31_fu_538_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_37_fu_575_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_49_fu_595_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_50_fu_607_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_569_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_fu_579_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_fu_587_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_assign_fu_623_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_53_fu_635_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_assign_cast_fu_629_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_cast_fu_645_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_cast_27_fu_649_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_fu_659_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_57_fu_665_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_39_fu_599_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_41_fu_591_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_40_fu_611_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_51_fu_619_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_42_fu_679_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_43_fu_685_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal fold_i_cast_fu_711_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_261_i_cast_fu_675_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_262_i_cast_fu_717_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_1_fu_721_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_45_fu_705_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_44_fu_695_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_56_fu_653_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_46_fu_737_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_47_fu_743_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_264_i_cast_fu_769_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_2_fu_772_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_58_fu_777_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal fold2_i_cast_fu_791_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_265_i_cast_fu_787_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_266_i_cast_fu_795_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_3_fu_799_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_fu_805_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_59_fu_811_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_cast_fu_819_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_267_i_fu_827_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal not_tmp_87_i_fu_837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_268_i_cast_cast_fu_843_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_269_i_fu_851_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_267_i_cast_fu_833_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_269_i_cast_fu_857_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_52_fu_885_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_60_fu_901_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_37_i_cast_fu_895_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_55_fu_911_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_54_fu_905_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_236_i_fu_952_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_62_fu_958_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_238_i_fu_967_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_61_fu_973_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_982_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_cast_fu_427_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_989_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_989_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_996_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1005_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1012_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1005_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_431_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component crypto_kem_dec_mac_muladd_16s_2ns_16ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component crypto_kem_dec_ama_addmuladd_2ns_3ns_16s_16ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component crypto_kem_dec_mac_muladd_2ns_16s_16ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_lift_b_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    b_coeffs_U : component poly_lift_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 701,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_coeffs_address0,
        ce0 => b_coeffs_ce0,
        we0 => b_coeffs_we0,
        d0 => b_coeffs_d0,
        q0 => b_coeffs_q0,
        address1 => b_coeffs_address1,
        ce1 => b_coeffs_ce1,
        we1 => b_coeffs_we1,
        d1 => b_coeffs_d1,
        q1 => b_coeffs_q1);

    crypto_kem_dec_mac_muladd_16s_2ns_16ns_16_1_1_U23 : component crypto_kem_dec_mac_muladd_16s_2ns_16ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 2,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => a_coeffs_load_reg_1028,
        din1 => grp_fu_982_p1,
        din2 => tmp_2_reg_308,
        dout => grp_fu_982_p3);

    crypto_kem_dec_mac_muladd_16s_2ns_16ns_16_1_1_U24 : component crypto_kem_dec_mac_muladd_16s_2ns_16ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 2,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => a_coeffs_load_1_reg_1035,
        din1 => grp_fu_989_p1,
        din2 => grp_fu_989_p2,
        dout => grp_fu_989_p3);

    crypto_kem_dec_ama_addmuladd_2ns_3ns_16s_16ns_16_1_1_U25 : component crypto_kem_dec_ama_addmuladd_2ns_3ns_16s_16ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 3,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_996_p0,
        din1 => ap_const_lv3_2,
        din2 => a_coeffs_load_3_reg_1106,
        din3 => reg_392,
        dout => grp_fu_996_p4);

    crypto_kem_dec_mac_muladd_2ns_16s_16ns_16_1_1_U26 : component crypto_kem_dec_mac_muladd_2ns_16s_16ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1005_p0,
        din1 => a_coeffs_load_3_reg_1106,
        din2 => b_coeffs_load_1_reg_1118,
        dout => grp_fu_1005_p3);

    crypto_kem_dec_mac_muladd_2ns_16s_16ns_16_1_1_U27 : component crypto_kem_dec_mac_muladd_2ns_16s_16ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1012_p0,
        din1 => a_coeffs_load_3_reg_1106,
        din2 => b_coeffs_q0,
        dout => grp_fu_1012_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_1_reg_340 <= i_5_reg_1182;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_1_reg_340 <= ap_const_lv10_3;
            end if; 
        end if;
    end process;

    i_2_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond1_fu_465_p2 = ap_const_lv1_1))) then 
                i_2_reg_352 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_2_reg_352 <= i_6_reg_1195;
            end if; 
        end if;
    end process;

    i_i5_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_i5_reg_374 <= i_8_reg_1238;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_i5_reg_374 <= ap_const_lv10_2BC;
            end if; 
        end if;
    end process;

    i_i_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_552_p2 = ap_const_lv1_1))) then 
                i_i_reg_363 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_i_reg_363 <= i_7_reg_1224;
            end if; 
        end if;
    end process;

    i_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_reg_317 <= i_4_reg_1091;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_317 <= ap_const_lv10_3;
            end if; 
        end if;
    end process;

    tmp_1_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                tmp_1_reg_298 <= tmp_17_reg_1138;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                tmp_1_reg_298 <= a_coeffs_q0;
            end if; 
        end if;
    end process;

    tmp_2_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                tmp_2_reg_308 <= tmp_15_reg_1133;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                tmp_2_reg_308 <= a_coeffs_load_1_reg_1035;
            end if; 
        end if;
    end process;

    tmp_s_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                tmp_s_reg_288 <= tmp_12_reg_1128;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                tmp_s_reg_288 <= tmp_fu_396_p2;
            end if; 
        end if;
    end process;

    zj_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                zj_reg_328 <= tmp_19_reg_1123;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                zj_reg_328 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                a_coeffs_load_1_reg_1035 <= a_coeffs_q1;
                a_coeffs_load_reg_1028 <= a_coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                a_coeffs_load_3_reg_1106 <= a_coeffs_q1;
                b_coeffs_load_1_reg_1118 <= b_coeffs_q0;
                tmp_13_reg_1113 <= grp_fu_385_p2;
                tmp_19_reg_1123 <= tmp_19_fu_448_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_552_p2 = ap_const_lv1_0))) then
                b_coeffs_addr_6_reg_1200 <= tmp_33_fu_564_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_i_fu_868_p2 = ap_const_lv1_0))) then
                b_coeffs_addr_7_reg_1229 <= tmp_i3_fu_880_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                fold1_i_cast_reg_1210 <= fold1_i_cast_fu_753_p2;
                tmp_263_i_cast_reg_1205 <= r_1_fu_721_p2(5 downto 2);
                tmp_48_reg_1216 <= r_1_fu_721_p2(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_410_p2 = ap_const_lv1_0))) then
                i_4_reg_1091 <= i_4_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_5_reg_1182 <= i_5_fu_513_p2;
                tmp_28_reg_1177 <= tmp_28_fu_509_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_6_reg_1195 <= i_6_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_7_reg_1224 <= i_7_fu_874_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (tmp_i6_fu_930_p2 = ap_const_lv1_0))) then
                i_8_reg_1238 <= i_8_fu_936_p2;
                    tmp_235_i_reg_1248(9 downto 0) <= tmp_235_i_fu_947_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_392 <= b_coeffs_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_410_p2 = ap_const_lv1_1))) then
                tmp1_reg_1101 <= grp_fu_989_p3;
                tmp_5_reg_1096 <= grp_fu_982_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_12_reg_1128 <= grp_fu_996_p4;
                tmp_15_reg_1133 <= grp_fu_1005_p3;
                tmp_17_reg_1138 <= grp_fu_1012_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond1_fu_465_p2 = ap_const_lv1_0))) then
                    tmp_22_reg_1147(9 downto 0) <= tmp_22_fu_471_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_32_reg_1187 <= tmp_32_fu_546_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    zj_cast9_reg_1073(1 downto 0) <= zj_cast9_fu_402_p1(1 downto 0);
                    zj_cast_reg_1078(1 downto 0) <= zj_cast_fu_406_p1(1 downto 0);
            end if;
        end if;
    end process;
    zj_cast9_reg_1073(2) <= '0';
    zj_cast_reg_1078(15 downto 2) <= "00000000000000";
    tmp_22_reg_1147(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    tmp_235_i_reg_1248(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, exitcond2_fu_410_p2, ap_CS_fsm_state9, exitcond1_fu_465_p2, ap_CS_fsm_state13, exitcond_fu_552_p2, ap_CS_fsm_state16, exitcond_i_fu_868_p2, ap_CS_fsm_state19, tmp_i6_fu_930_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_410_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond1_fu_465_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_552_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_i_fu_868_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (tmp_i6_fu_930_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_assign_cast_fu_629_p2 <= std_logic_vector(unsigned(tmp_36_fu_579_p3) + unsigned(tmp_38_fu_587_p1));
    a_assign_fu_623_p2 <= std_logic_vector(unsigned(b_coeffs_q0) + unsigned(tmp_35_fu_569_p2));

    a_coeffs_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_22_fu_471_p1, ap_CS_fsm_state9, ap_CS_fsm_state10, tmp_26_fu_504_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            a_coeffs_address0 <= tmp_26_fu_504_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            a_coeffs_address0 <= tmp_22_fu_471_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_coeffs_address0 <= ap_const_lv64_2(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            a_coeffs_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        else 
            a_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    a_coeffs_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state10, tmp_7_fu_416_p1, tmp_24_fu_493_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            a_coeffs_address1 <= tmp_24_fu_493_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_coeffs_address1 <= tmp_7_fu_416_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            a_coeffs_address1 <= ap_const_lv64_1(10 - 1 downto 0);
        else 
            a_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    a_coeffs_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            a_coeffs_ce0 <= ap_const_logic_1;
        else 
            a_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_coeffs_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            a_coeffs_ce1 <= ap_const_logic_1;
        else 
            a_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_zj_phi_fu_332_p4 <= zj_reg_328;

    ap_ready_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_coeffs_addr_1_reg_1046 <= ap_const_lv64_1(10 - 1 downto 0);
    b_coeffs_addr_2_reg_1067 <= ap_const_lv64_2(10 - 1 downto 0);
    b_coeffs_addr_reg_1061 <= ap_const_lv64_0(10 - 1 downto 0);

    b_coeffs_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, b_coeffs_addr_1_reg_1046, ap_CS_fsm_state3, b_coeffs_addr_reg_1061, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state13, b_coeffs_addr_6_reg_1200, b_coeffs_addr_7_reg_1229, ap_CS_fsm_state19, tmp_i6_fu_930_p2, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state17, tmp_21_fu_482_p1, tmp_33_fu_564_p1, tmp_i7_fu_942_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (tmp_i6_fu_930_p2 = ap_const_lv1_1))) then 
            b_coeffs_address0 <= b_coeffs_addr_reg_1061;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (tmp_i6_fu_930_p2 = ap_const_lv1_0))) then 
            b_coeffs_address0 <= tmp_i7_fu_942_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            b_coeffs_address0 <= b_coeffs_addr_7_reg_1229;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_coeffs_address0 <= b_coeffs_addr_6_reg_1200;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            b_coeffs_address0 <= tmp_33_fu_564_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            b_coeffs_address0 <= tmp_21_fu_482_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_coeffs_address0 <= ap_const_lv64_2(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            b_coeffs_address0 <= b_coeffs_addr_1_reg_1046;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_coeffs_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_coeffs_address0 <= ap_const_lv64_1(10 - 1 downto 0);
        else 
            b_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    b_coeffs_address1_assign_proc : process(ap_CS_fsm_state3, b_coeffs_addr_2_reg_1067, ap_CS_fsm_state4, exitcond2_fu_410_p2, ap_CS_fsm_state6, tmp_22_reg_1147, ap_CS_fsm_state13, ap_CS_fsm_state16, exitcond_i_fu_868_p2, ap_CS_fsm_state19, tmp_235_i_fu_947_p1, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state12, tmp_i3_fu_880_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            b_coeffs_address1 <= tmp_235_i_fu_947_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_i_fu_868_p2 = ap_const_lv1_0))) then 
            b_coeffs_address1 <= tmp_i3_fu_880_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_i_fu_868_p2 = ap_const_lv1_1)))) then 
            b_coeffs_address1 <= ap_const_lv64_2BC(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            b_coeffs_address1 <= tmp_22_reg_1147(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            b_coeffs_address1 <= b_coeffs_addr_2_reg_1067;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_410_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_410_p2 = ap_const_lv1_0)))) then 
            b_coeffs_address1 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_coeffs_address1 <= ap_const_lv64_2(10 - 1 downto 0);
        else 
            b_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    b_coeffs_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state19, tmp_i6_fu_930_p2, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (tmp_i6_fu_930_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (tmp_i6_fu_930_p2 = ap_const_lv1_0)))) then 
            b_coeffs_ce0 <= ap_const_logic_1;
        else 
            b_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_coeffs_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond2_fu_410_p2, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state16, exitcond_i_fu_868_p2, ap_CS_fsm_state19, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_i_fu_868_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_i_fu_868_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_410_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_410_p2 = ap_const_lv1_0)))) then 
            b_coeffs_ce1 <= ap_const_logic_1;
        else 
            b_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_coeffs_d0_assign_proc : process(a_coeffs_q1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_fu_396_p2, tmp_5_reg_1096, ap_CS_fsm_state6, grp_fu_1005_p3, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state17, tmp_270_i_fu_861_p2, tmp_39_i_fu_921_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            b_coeffs_d0 <= tmp_39_i_fu_921_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            b_coeffs_d0 <= tmp_270_i_fu_861_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            b_coeffs_d0 <= tmp_5_reg_1096;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            b_coeffs_d0 <= grp_fu_1005_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_coeffs_d0 <= tmp_fu_396_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_coeffs_d0 <= a_coeffs_q1;
        else 
            b_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    b_coeffs_d1_assign_proc : process(a_coeffs_q0, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond2_fu_410_p2, grp_fu_996_p4, ap_CS_fsm_state6, tmp_17_reg_1138, tmp_32_reg_1187, tmp_s_reg_288, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state12, tmp_9_fu_459_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            b_coeffs_d1 <= tmp_32_reg_1187;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            b_coeffs_d1 <= tmp_9_fu_459_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_coeffs_d1 <= tmp_17_reg_1138;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            b_coeffs_d1 <= grp_fu_996_p4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_410_p2 = ap_const_lv1_1))) then 
            b_coeffs_d1 <= tmp_s_reg_288;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_coeffs_d1 <= a_coeffs_q0;
        else 
            b_coeffs_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    b_coeffs_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            b_coeffs_we0 <= ap_const_logic_1;
        else 
            b_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_coeffs_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond2_fu_410_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_410_p2 = ap_const_lv1_1)))) then 
            b_coeffs_we1 <= ap_const_logic_1;
        else 
            b_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

    c_cast_fu_819_p3 <= 
        ap_const_lv3_7 when (tmp_59_fu_811_p3(0) = '1') else 
        ap_const_lv3_0;
    exitcond1_fu_465_p2 <= "1" when (i_1_reg_340 = ap_const_lv10_2BD) else "0";
    exitcond2_fu_410_p2 <= "1" when (i_reg_317 = ap_const_lv10_2BD) else "0";
    exitcond_fu_552_p2 <= "1" when (i_2_reg_352 = ap_const_lv10_2BD) else "0";
    exitcond_i_fu_868_p2 <= "1" when (i_i_reg_363 = ap_const_lv10_2BD) else "0";
    fold1_i_cast_fu_753_p2 <= std_logic_vector(unsigned(tmp_46_fu_737_p2) + unsigned(tmp_47_fu_743_p4));
    fold2_i_cast_fu_791_p2 <= std_logic_vector(unsigned(tmp_48_reg_1216) + unsigned(fold1_i_cast_reg_1210));
    fold_i_cast_fu_711_p2 <= std_logic_vector(unsigned(tmp_42_fu_679_p2) + unsigned(tmp_43_fu_685_p4));
    grp_fu_1005_p0 <= grp_fu_1005_p00(2 - 1 downto 0);
    grp_fu_1005_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_reg_1113),16));
    grp_fu_1012_p0 <= zj_cast_reg_1078(2 - 1 downto 0);

    grp_fu_385_p0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, ap_phi_mux_zj_phi_fu_332_p4, zj_reg_328)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_385_p0 <= zj_reg_328;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_385_p0 <= ap_phi_mux_zj_phi_fu_332_p4;
        else 
            grp_fu_385_p0 <= "XX";
        end if; 
    end process;

    grp_fu_385_p2 <= std_logic_vector(unsigned(grp_fu_385_p0) + unsigned(ap_const_lv2_1));
    grp_fu_982_p1 <= tmp_3_cast_fu_427_p1(2 - 1 downto 0);
    grp_fu_989_p1 <= tmp_3_cast_fu_427_p1(2 - 1 downto 0);
    grp_fu_989_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(a_coeffs_load_reg_1028) * signed('0' &tmp_6_fu_431_p1))), 16));
    grp_fu_996_p0 <= zj_cast9_reg_1073(2 - 1 downto 0);
    i_4_fu_421_p2 <= std_logic_vector(unsigned(i_reg_317) + unsigned(ap_const_lv10_1));
    i_5_fu_513_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(i_1_reg_340));
    i_6_fu_558_p2 <= std_logic_vector(unsigned(i_2_reg_352) + unsigned(ap_const_lv10_1));
    i_7_fu_874_p2 <= std_logic_vector(unsigned(i_i_reg_363) + unsigned(ap_const_lv10_1));
    i_8_fu_936_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(i_i5_reg_374));
    not_tmp_87_i_fu_837_p2 <= (tmp_59_fu_811_p3 xor ap_const_lv1_1);
    r_1_fu_721_p2 <= std_logic_vector(unsigned(tmp_261_i_cast_fu_675_p1) + unsigned(tmp_262_i_cast_fu_717_p1));
    r_2_fu_772_p2 <= std_logic_vector(unsigned(tmp_263_i_cast_reg_1205) + unsigned(tmp_264_i_cast_fu_769_p1));
    r_3_fu_799_p2 <= std_logic_vector(unsigned(tmp_265_i_cast_fu_787_p1) + unsigned(tmp_266_i_cast_fu_795_p1));

    r_coeffs_address0_assign_proc : process(tmp_235_i_reg_1248, ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            r_coeffs_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            r_coeffs_address0 <= tmp_235_i_reg_1248(10 - 1 downto 0);
        else 
            r_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            r_coeffs_ce0 <= ap_const_logic_1;
        else 
            r_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_d0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, tmp_237_i_cast_fu_962_p1, tmp_239_i_cast_fu_977_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            r_coeffs_d0 <= tmp_239_i_cast_fu_977_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            r_coeffs_d0 <= tmp_237_i_cast_fu_962_p1;
        else 
            r_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_we0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            r_coeffs_we0 <= ap_const_logic_1;
        else 
            r_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_659_p2 <= std_logic_vector(unsigned(tmp_i_cast_fu_645_p1) + unsigned(tmp_i_cast_27_fu_649_p1));
    t_fu_805_p2 <= std_logic_vector(signed(ap_const_lv3_5) + signed(r_3_fu_799_p2));
    tmp2_fu_527_p2 <= std_logic_vector(unsigned(tmp_28_reg_1177) + unsigned(tmp_34_fu_523_p1));
    tmp_18_fu_436_p2 <= "0" when (grp_fu_385_p2 = ap_const_lv2_3) else "1";
    tmp_19_fu_448_p3 <= 
        grp_fu_385_p2 when (tmp_18_fu_436_p2(0) = '1') else 
        tmp_27_fu_442_p2;
    tmp_20_fu_476_p2 <= std_logic_vector(signed(ap_const_lv10_3FD) + signed(i_1_reg_340));
    tmp_21_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_476_p2),64));
    tmp_22_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_340),64));
    tmp_235_i_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i5_reg_374),64));
    tmp_236_i_fu_952_p2 <= std_logic_vector(unsigned(b_coeffs_q0) - unsigned(b_coeffs_q1));
    tmp_237_i_cast_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_fu_958_p1),16));
    tmp_238_i_fu_967_p2 <= std_logic_vector(unsigned(reg_392) - unsigned(b_coeffs_q0));
    tmp_239_i_cast_fu_977_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_61_fu_973_p1),16));
    tmp_23_fu_487_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(i_1_reg_340));
    tmp_24_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_487_p2),64));
    tmp_25_fu_498_p2 <= std_logic_vector(signed(ap_const_lv10_3FE) + signed(i_1_reg_340));
    tmp_261_i_cast_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_665_p4),6));
    tmp_262_i_cast_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold_i_cast_fu_711_p2),6));
    tmp_264_i_cast_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold1_i_cast_reg_1210),4));
    tmp_265_i_cast_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_777_p4),3));
    tmp_266_i_cast_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold2_i_cast_fu_791_p2),3));
    tmp_267_i_cast_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_267_i_fu_827_p2),16));
    tmp_267_i_fu_827_p2 <= (r_3_fu_799_p2 and c_cast_fu_819_p3);
    tmp_268_i_cast_cast_fu_843_p3 <= 
        ap_const_lv3_7 when (not_tmp_87_i_fu_837_p2(0) = '1') else 
        ap_const_lv3_0;
        tmp_269_i_cast_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_269_i_fu_851_p2),16));

    tmp_269_i_fu_851_p2 <= (tmp_268_i_cast_cast_fu_843_p3 and t_fu_805_p2);
    tmp_26_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_498_p2),64));
    tmp_270_i_fu_861_p2 <= (tmp_269_i_cast_fu_857_p1 xor tmp_267_i_cast_fu_833_p1);
    tmp_27_fu_442_p2 <= (zj_reg_328 xor ap_const_lv2_2);
    tmp_28_fu_509_p1 <= a_coeffs_q0(15 - 1 downto 0);
    tmp_29_fu_519_p1 <= a_coeffs_q1(15 - 1 downto 0);
    tmp_30_fu_532_p2 <= std_logic_vector(unsigned(tmp2_fu_527_p2) + unsigned(tmp_29_fu_519_p1));
    tmp_31_fu_538_p3 <= (tmp_30_fu_532_p2 & ap_const_lv1_0);
    tmp_32_fu_546_p2 <= std_logic_vector(unsigned(b_coeffs_q0) + unsigned(tmp_31_fu_538_p3));
    tmp_33_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_352),64));
    tmp_34_fu_523_p1 <= a_coeffs_q0(15 - 1 downto 0);
    tmp_35_fu_569_p2 <= std_logic_vector(shift_left(unsigned(b_coeffs_q1),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_36_fu_579_p3 <= (tmp_37_fu_575_p1 & ap_const_lv1_0);
    tmp_37_fu_575_p1 <= b_coeffs_q1(7 - 1 downto 0);
    tmp_37_i_cast_fu_895_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(tmp_52_fu_885_p4));
    tmp_38_fu_587_p1 <= b_coeffs_q0(8 - 1 downto 0);
    tmp_39_fu_599_p3 <= (tmp_49_fu_595_p1 & ap_const_lv1_0);
    tmp_39_i_fu_921_p3 <= (tmp_55_fu_911_p4 & tmp_54_fu_905_p2);
    tmp_3_cast_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_385_p2),16));
    tmp_40_fu_611_p3 <= (tmp_50_fu_607_p1 & ap_const_lv1_0);
    tmp_41_fu_591_p1 <= b_coeffs_q0(4 - 1 downto 0);
    tmp_42_fu_679_p2 <= std_logic_vector(unsigned(tmp_39_fu_599_p3) + unsigned(tmp_41_fu_591_p1));
    tmp_43_fu_685_p4 <= a_assign_fu_623_p2(11 downto 8);
    tmp_44_fu_695_p4 <= a_assign_fu_623_p2(9 downto 8);
    tmp_45_fu_705_p2 <= std_logic_vector(unsigned(tmp_40_fu_611_p3) + unsigned(tmp_51_fu_619_p1));
    tmp_46_fu_737_p2 <= std_logic_vector(unsigned(tmp_45_fu_705_p2) + unsigned(tmp_44_fu_695_p4));
    tmp_47_fu_743_p4 <= tmp_56_fu_653_p2(5 downto 4);
    tmp_49_fu_595_p1 <= b_coeffs_q1(3 - 1 downto 0);
    tmp_50_fu_607_p1 <= b_coeffs_q1(1 - 1 downto 0);
    tmp_51_fu_619_p1 <= b_coeffs_q0(2 - 1 downto 0);
    tmp_52_fu_885_p4 <= b_coeffs_q1(13 downto 1);
    tmp_53_fu_635_p4 <= a_assign_fu_623_p2(15 downto 8);
    tmp_54_fu_905_p2 <= (tmp_60_fu_901_p1 or tmp_37_i_cast_fu_895_p2);
    tmp_55_fu_911_p4 <= b_coeffs_q1(15 downto 13);
    tmp_56_fu_653_p2 <= std_logic_vector(unsigned(a_assign_cast_fu_629_p2) + unsigned(tmp_53_fu_635_p4));
    tmp_57_fu_665_p4 <= r_fu_659_p2(8 downto 4);
    tmp_58_fu_777_p4 <= r_2_fu_772_p2(3 downto 2);
    tmp_59_fu_811_p3 <= t_fu_805_p2(2 downto 2);
    tmp_60_fu_901_p1 <= b_coeffs_q1(13 - 1 downto 0);
    tmp_61_fu_973_p1 <= tmp_238_i_fu_967_p2(13 - 1 downto 0);
    tmp_62_fu_958_p1 <= tmp_236_i_fu_952_p2(13 - 1 downto 0);
    tmp_6_fu_431_p1 <= tmp_6_fu_431_p10(2 - 1 downto 0);
    tmp_6_fu_431_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zj_reg_328),16));
    tmp_7_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_317),64));
    tmp_9_fu_459_p2 <= std_logic_vector(signed(tmp1_reg_1101) + signed(tmp_1_reg_298));
    tmp_fu_396_p2 <= std_logic_vector(unsigned(a_coeffs_q0) + unsigned(a_coeffs_load_reg_1028));
    tmp_i3_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_363),64));
    tmp_i6_fu_930_p2 <= "1" when (i_i5_reg_374 = ap_const_lv10_0) else "0";
    tmp_i7_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_fu_936_p2),64));
    tmp_i_cast_27_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_assign_cast_fu_629_p2),9));
    tmp_i_cast_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_635_p4),9));
    zj_cast9_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zj_reg_328),3));
    zj_cast_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zj_reg_328),16));
end behav;
