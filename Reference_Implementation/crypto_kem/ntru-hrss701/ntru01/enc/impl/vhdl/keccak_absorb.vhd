-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keccak_absorb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_we0 : OUT STD_LOGIC;
    s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce1 : OUT STD_LOGIC;
    s_we1 : OUT STD_LOGIC;
    s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    m_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    m_ce0 : OUT STD_LOGIC;
    m_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of keccak_absorb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_118 : STD_LOGIC_VECTOR (8 downto 0) := "100011000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_87 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_88 : STD_LOGIC_VECTOR (8 downto 0) := "010001000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_178 : STD_LOGIC_VECTOR (8 downto 0) := "101111000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_88 : STD_LOGIC_VECTOR (7 downto 0) := "10001000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_16_fu_316_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_cast_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast_reg_592 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_5_fu_338_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_reg_600 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_306_cast_fu_352_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_306_cast_reg_605 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond4_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next_fu_356_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvars_iv_next_reg_610 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_19_fu_372_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_19_reg_618 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_i_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_1_reg_628 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_420_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_rec_fu_433_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_297_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_297_ap_done : STD_LOGIC;
    signal i_18_fu_450_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_3_cast6_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast6_reg_651 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_249_fu_466_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_249_reg_659 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_cast5_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast5_reg_675 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_20_fu_502_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_20_reg_683 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_251_fu_508_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_251_reg_688 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_526_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_6_reg_696 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_i1_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_2_reg_706 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_6_fu_568_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal t_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_ce1 : STD_LOGIC;
    signal t_we1 : STD_LOGIC;
    signal t_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakF1600_StatePer_fu_297_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_297_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_297_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_297_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_297_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_297_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_297_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_297_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_297_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_297_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_170 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_17_reg_181 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_01_rec_reg_193 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_205 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_s_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_i_reg_216 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_i_reg_228 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_240 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond3_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_reg_251 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_4_reg_262 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal r_i1_reg_273 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_i1_reg_285 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_KeccakF1600_StatePer_fu_297_ap_start_reg : STD_LOGIC := '0';
    signal i_cast_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i_cast_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast8_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum9_cast_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i1_cast_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_250_fu_426_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_252_fu_574_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_247_fu_344_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_i_cast_fu_362_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_378_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_i_fu_384_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_253_fu_398_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_318_i_fu_402_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_41_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_318_i_cast_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_319_i_fu_414_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_fu_472_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_i1_cast3_fu_516_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_i1_fu_532_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_254_fu_546_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_320_i_fu_550_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i1_46_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_320_i_cast_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_321_i_fu_562_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component KeccakF1600_StatePer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keccak_absorb_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    t_U : component keccak_absorb_t
    generic map (
        DataWidth => 8,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0,
        address1 => t_address1,
        ce1 => t_ce1,
        we1 => t_we1,
        d1 => t_d1,
        q1 => t_q1);

    grp_KeccakF1600_StatePer_fu_297 : component KeccakF1600_StatePer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_fu_297_ap_start,
        ap_done => grp_KeccakF1600_StatePer_fu_297_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_fu_297_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_fu_297_ap_ready,
        state_address0 => grp_KeccakF1600_StatePer_fu_297_state_address0,
        state_ce0 => grp_KeccakF1600_StatePer_fu_297_state_ce0,
        state_we0 => grp_KeccakF1600_StatePer_fu_297_state_we0,
        state_d0 => grp_KeccakF1600_StatePer_fu_297_state_d0,
        state_q0 => s_q0,
        state_address1 => grp_KeccakF1600_StatePer_fu_297_state_address1,
        state_ce1 => grp_KeccakF1600_StatePer_fu_297_state_ce1,
        state_we1 => grp_KeccakF1600_StatePer_fu_297_state_we1,
        state_d1 => grp_KeccakF1600_StatePer_fu_297_state_d1,
        state_q1 => s_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_fu_297_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_fu_297_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond4_fu_332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_KeccakF1600_StatePer_fu_297_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_fu_297_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_fu_297_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_17_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_310_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_17_reg_181 <= ap_const_lv9_118;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_fu_297_ap_done = ap_const_logic_1))) then 
                i_17_reg_181 <= indvars_iv_next_reg_610;
            end if; 
        end if;
    end process;

    i_1_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_1_reg_205 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_1_reg_205 <= i_5_reg_600;
            end if; 
        end if;
    end process;

    i_2_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_322_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_2_reg_240 <= ap_const_lv8_0;
            elsif (((exitcond3_fu_444_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_2_reg_240 <= i_18_fu_450_p2;
            end if; 
        end if;
    end process;

    i_3_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_444_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_3_reg_251 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_3_reg_251 <= tmp_249_reg_659;
            end if; 
        end if;
    end process;

    i_4_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_4_reg_262 <= i_20_reg_683;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_4_reg_262 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_i1_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_i1_reg_285 <= i_6_reg_696;
            elsif (((exitcond_fu_496_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_i1_reg_285 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_i_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_i_reg_228 <= i_19_reg_618;
            elsif (((exitcond4_fu_332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_i_reg_228 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_310_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_170 <= i_16_fu_316_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_170 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_01_rec_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_310_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_01_rec_reg_193 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_fu_297_ap_done = ap_const_logic_1))) then 
                p_01_rec_reg_193 <= p_rec_fu_433_p2;
            end if; 
        end if;
    end process;

    r_i1_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                r_i1_reg_273 <= r_6_fu_568_p2;
            elsif (((exitcond_fu_496_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                r_i1_reg_273 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    r_i_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                r_i_reg_216 <= r_fu_420_p2;
            elsif (((exitcond4_fu_332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                r_i_reg_216 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_19_reg_618 <= i_19_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    i_1_cast_reg_592(4 downto 0) <= i_1_cast_fu_328_p1(4 downto 0);
                i_5_reg_600 <= i_5_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_20_reg_683 <= i_20_fu_502_p2;
                    i_4_cast5_reg_675(4 downto 0) <= i_4_cast5_fu_492_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    i_3_cast6_reg_651(3 downto 0) <= i_3_cast6_fu_456_p1(3 downto 0);
                tmp_249_reg_659 <= tmp_249_fu_466_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_6_reg_696 <= i_6_fu_526_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                indvars_iv_next_reg_610 <= indvars_iv_next_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_366_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                s_addr_1_reg_628 <= i_1_cast_reg_592(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i1_fu_520_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                s_addr_2_reg_706 <= i_4_cast5_reg_675(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_496_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    tmp_251_reg_688(7 downto 3) <= tmp_251_fu_508_p3(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_306_cast_reg_605(7 downto 3) <= tmp_306_cast_fu_352_p1(7 downto 3);
            end if;
        end if;
    end process;
    i_1_cast_reg_592(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_306_cast_reg_605(2 downto 0) <= "000";
    tmp_306_cast_reg_605(8) <= '0';
    i_3_cast6_reg_651(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_4_cast5_reg_675(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_251_reg_688(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, exitcond4_fu_332_p2, ap_CS_fsm_state5, tmp_i_fu_366_p2, ap_CS_fsm_state8, grp_KeccakF1600_StatePer_fu_297_ap_done, ap_CS_fsm_state9, ap_CS_fsm_state10, exitcond2_fu_460_p2, ap_CS_fsm_state13, exitcond_fu_496_p2, ap_CS_fsm_state14, tmp_i1_fu_520_p2, tmp_fu_310_p2, ap_CS_fsm_state3, tmp_s_fu_322_p2, exitcond3_fu_444_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_310_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_s_fu_322_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond4_fu_332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state5 => 
                if (((tmp_i_fu_366_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_fu_297_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((exitcond3_fu_444_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((exitcond2_fu_460_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((exitcond_fu_496_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((tmp_i1_fu_520_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13, exitcond_fu_496_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond_fu_496_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13, exitcond_fu_496_p2)
    begin
        if (((exitcond_fu_496_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_460_p2 <= "1" when (i_3_reg_251 = ap_const_lv4_8) else "0";
    exitcond3_fu_444_p2 <= "1" when (i_2_reg_240 = ap_const_lv8_88) else "0";
    exitcond4_fu_332_p2 <= "1" when (i_1_reg_205 = ap_const_lv5_11) else "0";
    exitcond_fu_496_p2 <= "1" when (i_4_reg_262 = ap_const_lv5_11) else "0";
    grp_KeccakF1600_StatePer_fu_297_ap_start <= grp_KeccakF1600_StatePer_fu_297_ap_start_reg;
    i_16_fu_316_p2 <= std_logic_vector(unsigned(i_reg_170) + unsigned(ap_const_lv5_1));
    i_18_fu_450_p2 <= std_logic_vector(unsigned(i_2_reg_240) + unsigned(ap_const_lv8_1));
    i_19_fu_372_p2 <= std_logic_vector(unsigned(i_i_reg_228) + unsigned(ap_const_lv4_1));
    i_1_cast_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_205),64));
    i_20_fu_502_p2 <= std_logic_vector(unsigned(i_4_reg_262) + unsigned(ap_const_lv5_1));
    i_2_cast8_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_240),64));
    i_3_cast6_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_251),64));
    i_4_cast5_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_262),64));
    i_5_fu_338_p2 <= std_logic_vector(unsigned(i_1_reg_205) + unsigned(ap_const_lv5_1));
    i_6_fu_526_p2 <= std_logic_vector(unsigned(i_i1_reg_285) + unsigned(ap_const_lv4_1));
    i_cast_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_170),64));
    i_i1_cast3_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_285),8));
    i_i_cast_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_228),9));
    indvars_iv_next_fu_356_p2 <= std_logic_vector(unsigned(i_17_reg_181) + unsigned(ap_const_lv9_178));

    m_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state10, sum_i_cast_fu_389_p1, sum9_cast_fu_480_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            m_address0 <= sum9_cast_fu_480_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            m_address0 <= sum_i_cast_fu_389_p1(9 - 1 downto 0);
        else 
            m_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    m_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_ce0 <= ap_const_logic_1;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_rec_fu_433_p2 <= std_logic_vector(unsigned(p_01_rec_reg_193) + unsigned(ap_const_lv9_88));
    r_6_fu_568_p2 <= (tmp_321_i_fu_562_p2 or r_i1_reg_273);
    r_fu_420_p2 <= (tmp_319_i_fu_414_p2 or r_i_reg_216);

    s_address0_assign_proc : process(ap_CS_fsm_state2, i_1_cast_reg_592, ap_CS_fsm_state5, s_addr_1_reg_628, ap_CS_fsm_state8, i_4_cast5_reg_675, ap_CS_fsm_state14, s_addr_2_reg_706, grp_KeccakF1600_StatePer_fu_297_state_address0, ap_CS_fsm_state7, ap_CS_fsm_state16, i_cast_fu_305_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            s_address0 <= s_addr_2_reg_706;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            s_address0 <= i_4_cast5_reg_675(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_address0 <= s_addr_1_reg_628;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_address0 <= i_1_cast_reg_592(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_address0 <= i_cast_fu_305_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_address0 <= grp_KeccakF1600_StatePer_fu_297_state_address0;
        else 
            s_address0 <= "XXXXX";
        end if; 
    end process;

    s_address1 <= grp_KeccakF1600_StatePer_fu_297_state_address1;

    s_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state14, grp_KeccakF1600_StatePer_fu_297_state_ce0, ap_CS_fsm_state7, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            s_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_ce0 <= grp_KeccakF1600_StatePer_fu_297_state_ce0;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(ap_CS_fsm_state8, grp_KeccakF1600_StatePer_fu_297_state_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_ce1 <= grp_KeccakF1600_StatePer_fu_297_state_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_KeccakF1600_StatePer_fu_297_state_d0, ap_CS_fsm_state7, ap_CS_fsm_state16, tmp_250_fu_426_p2, tmp_252_fu_574_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            s_d0 <= tmp_252_fu_574_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_d0 <= tmp_250_fu_426_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_d0 <= grp_KeccakF1600_StatePer_fu_297_state_d0;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_d1 <= grp_KeccakF1600_StatePer_fu_297_state_d1;

    s_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_KeccakF1600_StatePer_fu_297_state_we0, tmp_fu_310_p2, ap_CS_fsm_state7, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_fu_310_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            s_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_we0 <= grp_KeccakF1600_StatePer_fu_297_state_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(ap_CS_fsm_state8, grp_KeccakF1600_StatePer_fu_297_state_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_we1 <= grp_KeccakF1600_StatePer_fu_297_state_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sum9_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_472_p3),64));
    sum_fu_472_p3 <= (ap_const_lv5_11 & i_3_reg_251);
    sum_i1_cast_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i1_fu_532_p2),64));
    sum_i1_fu_532_p2 <= std_logic_vector(unsigned(tmp_251_reg_688) + unsigned(i_i1_cast3_fu_516_p1));
    sum_i_cast_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_fu_384_p2),64));
    sum_i_fu_384_p2 <= std_logic_vector(unsigned(tmp_306_cast_reg_605) + unsigned(tmp1_fu_378_p2));

    t_address0_assign_proc : process(ap_CS_fsm_state9, i_3_cast6_reg_651, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, i_2_cast8_fu_439_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_address0 <= ap_const_lv64_8(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            t_address0 <= i_3_cast6_reg_651(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            t_address0 <= ap_const_lv64_87(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_address0 <= i_2_cast8_fu_439_p1(8 - 1 downto 0);
        else 
            t_address0 <= "XXXXXXXX";
        end if; 
    end process;


    t_address1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state12, sum_i1_cast_fu_537_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            t_address1 <= sum_i1_cast_fu_537_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_address1 <= ap_const_lv64_87(8 - 1 downto 0);
        else 
            t_address1 <= "XXXXXXXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_ce1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            t_ce1 <= ap_const_logic_1;
        else 
            t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(m_q0, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_d0 <= ap_const_lv8_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            t_d0 <= m_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_d0 <= ap_const_lv8_0;
        else 
            t_d0 <= "XXXXXXXX";
        end if; 
    end process;

    t_d1 <= (t_q0 or ap_const_lv8_80);

    t_we0_assign_proc : process(ap_CS_fsm_state9, exitcond3_fu_444_p2, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((exitcond3_fu_444_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_we1_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_we1 <= ap_const_logic_1;
        else 
            t_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_378_p2 <= std_logic_vector(unsigned(i_i_cast_fu_362_p1) + unsigned(p_01_rec_reg_193));
    tmp_247_fu_344_p3 <= (i_1_reg_205 & ap_const_lv3_0);
    tmp_249_fu_466_p2 <= std_logic_vector(unsigned(i_3_reg_251) + unsigned(ap_const_lv4_1));
    tmp_250_fu_426_p2 <= (s_q0 xor r_i_reg_216);
    tmp_251_fu_508_p3 <= (i_4_reg_262 & ap_const_lv3_0);
    tmp_252_fu_574_p2 <= (s_q0 xor r_i1_reg_273);
    tmp_253_fu_398_p1 <= i_i_reg_228(3 - 1 downto 0);
    tmp_254_fu_546_p1 <= i_i1_reg_285(3 - 1 downto 0);
    tmp_306_cast_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_247_fu_344_p3),9));
    tmp_318_i_cast_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_318_i_fu_402_p3),64));
    tmp_318_i_fu_402_p3 <= (tmp_253_fu_398_p1 & ap_const_lv3_0);
    tmp_319_i_fu_414_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_41_fu_394_p1),to_integer(unsigned('0' & tmp_318_i_cast_fu_410_p1(31-1 downto 0)))));
    tmp_320_i_cast_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_320_i_fu_550_p3),64));
    tmp_320_i_fu_550_p3 <= (tmp_254_fu_546_p1 & ap_const_lv3_0);
    tmp_321_i_fu_562_p2 <= std_logic_vector(shift_left(unsigned(tmp_i1_46_fu_542_p1),to_integer(unsigned('0' & tmp_320_i_cast_fu_558_p1(31-1 downto 0)))));
    tmp_fu_310_p2 <= "1" when (i_reg_170 = ap_const_lv5_19) else "0";
    tmp_i1_46_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_q1),64));
    tmp_i1_fu_520_p2 <= "1" when (i_i1_reg_285 = ap_const_lv4_8) else "0";
    tmp_i_41_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_q0),64));
    tmp_i_fu_366_p2 <= "1" when (i_i_reg_228 = ap_const_lv4_8) else "0";
    tmp_s_fu_322_p2 <= "1" when (unsigned(i_17_reg_181) < unsigned(ap_const_lv9_88)) else "0";
end behav;
