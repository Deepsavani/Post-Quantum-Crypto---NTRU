// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module poly_Sq_tobytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_address0,
        r_ce0,
        r_we0,
        r_d0,
        r_address1,
        r_ce1,
        r_we1,
        r_d1,
        a_coeffs_address0,
        a_coeffs_ce0,
        a_coeffs_q0
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] r_address0;
output   r_ce0;
output   r_we0;
output  [7:0] r_d0;
output  [10:0] r_address1;
output   r_ce1;
output   r_we1;
output  [7:0] r_d1;
output  [9:0] a_coeffs_address0;
output   a_coeffs_ce0;
input  [15:0] a_coeffs_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] r_address0;
reg r_ce0;
reg r_we0;
reg[7:0] r_d0;
reg[10:0] r_address1;
reg r_ce1;
reg r_we1;
reg[7:0] r_d1;
reg[9:0] a_coeffs_address0;
reg a_coeffs_ce0;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] next_mul_fu_568_p2;
reg   [10:0] next_mul_reg_1252;
wire    ap_CS_fsm_state2;
wire   [6:0] tmp_66_fu_580_p2;
reg   [6:0] tmp_66_reg_1260;
wire   [9:0] tmp_fu_586_p3;
reg   [9:0] tmp_reg_1265;
wire   [0:0] exitcond3_fu_574_p2;
wire   [3:0] j_3_fu_604_p2;
reg   [3:0] j_3_reg_1273;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond2_fu_598_p2;
reg   [7:0] tmp_55_reg_1283;
wire    ap_CS_fsm_state5;
reg   [4:0] tmp_70_reg_1288;
wire   [7:0] grp_fu_528_p4;
reg   [7:0] tmp_20_reg_1293;
wire    ap_CS_fsm_state6;
wire   [6:0] grp_fu_550_p4;
reg   [6:0] tmp_88_reg_1298;
wire    ap_CS_fsm_state7;
reg   [3:0] tmp_100_reg_1303;
wire    ap_CS_fsm_state8;
reg   [7:0] tmp_29_reg_1308;
wire    ap_CS_fsm_state9;
reg   [5:0] tmp_123_reg_1313;
wire    ap_CS_fsm_state10;
wire   [2:0] tmp_46_fu_1045_p2;
reg   [2:0] tmp_46_reg_1321;
wire    ap_CS_fsm_state12;
wire   [0:0] exitcond1_fu_1039_p2;
wire   [3:0] j_4_fu_1080_p2;
wire    ap_CS_fsm_state14;
wire   [0:0] exitcond_fu_1069_p2;
wire   [0:0] tmp_132_fu_1113_p1;
reg   [0:0] tmp_132_reg_1339;
wire    ap_CS_fsm_state15;
wire   [2:0] tmp_133_fu_1131_p1;
reg   [2:0] tmp_133_reg_1344;
wire    ap_CS_fsm_state16;
wire   [2:0] grp_fu_518_p4;
reg   [2:0] tmp_137_reg_1349;
wire   [2:0] tmp_138_fu_1177_p1;
reg   [2:0] tmp_138_reg_1354;
wire    ap_CS_fsm_state17;
reg   [2:0] t_address0;
reg    t_ce0;
reg    t_we0;
reg   [15:0] t_d0;
wire   [15:0] t_q0;
reg   [2:0] t_address1;
reg    t_ce1;
reg    t_we1;
wire   [15:0] t_q1;
reg   [6:0] i_reg_460;
wire    ap_CS_fsm_state11;
reg   [10:0] phi_mul_reg_471;
reg   [3:0] j_reg_483;
wire    ap_CS_fsm_state4;
reg   [2:0] j_1_reg_495;
wire    ap_CS_fsm_state13;
reg   [3:0] j_2_reg_507;
wire   [63:0] tmp_118_fu_615_p1;
wire   [63:0] tmp_119_fu_620_p1;
wire   [63:0] tmp_49_fu_630_p1;
wire   [63:0] tmp_53_fu_670_p1;
wire   [63:0] tmp_57_fu_701_p1;
wire   [63:0] tmp_62_fu_738_p1;
wire   [63:0] tmp_65_fu_767_p1;
wire   [63:0] tmp_69_fu_778_p1;
wire   [63:0] tmp_76_fu_815_p1;
wire   [63:0] tmp_83_fu_837_p1;
wire   [63:0] tmp_87_fu_894_p1;
wire   [63:0] tmp_94_fu_933_p1;
wire   [63:0] tmp_98_fu_955_p1;
wire   [63:0] tmp_105_fu_1012_p1;
wire   [63:0] tmp_114_fu_1034_p1;
wire   [63:0] tmp_s_fu_1059_p1;
wire   [63:0] tmp_45_fu_1064_p1;
wire   [63:0] tmp_122_fu_1075_p1;
wire    ap_CS_fsm_state18;
wire   [7:0] tmp_72_fu_625_p1;
wire   [7:0] tmp_51_fu_657_p2;
wire   [7:0] tmp_60_fu_723_p3;
wire   [7:0] tmp_63_fu_755_p2;
wire   [7:0] tmp_74_fu_800_p3;
wire   [7:0] tmp_85_fu_879_p3;
wire   [7:0] tmp_92_fu_921_p2;
wire   [7:0] tmp_103_fu_997_p3;
wire   [7:0] tmp_71_fu_1104_p3;
wire   [7:0] tmp_89_fu_1124_p2;
wire   [7:0] tmp_101_fu_1158_p3;
wire   [7:0] tmp_120_fu_1198_p2;
wire   [7:0] tmp_139_fu_1205_p1;
wire   [9:0] j_cast6_fu_594_p1;
wire   [9:0] tmp_117_fu_610_p2;
wire   [2:0] tmp_84_fu_645_p1;
wire   [7:0] tmp_15_fu_649_p3;
wire   [7:0] tmp_14_fu_635_p4;
wire   [10:0] tmp_52_fu_664_p2;
wire   [10:0] tmp_56_fu_695_p2;
wire   [2:0] tmp_90_fu_706_p1;
wire   [4:0] tmp_77_fu_710_p3;
wire   [4:0] tmp_78_fu_718_p2;
wire   [10:0] tmp_61_fu_732_p2;
wire   [0:0] tmp_99_fu_743_p1;
wire   [7:0] tmp_21_fu_747_p3;
wire   [10:0] tmp_64_fu_761_p2;
wire   [10:0] tmp_68_fu_772_p2;
wire   [2:0] tmp_102_fu_783_p1;
wire   [6:0] tmp_91_fu_787_p3;
wire   [0:0] grp_fu_560_p3;
wire   [6:0] tmp_95_fu_795_p2;
wire   [10:0] tmp_75_fu_809_p2;
wire   [10:0] tmp_82_fu_831_p2;
wire   [2:0] tmp_115_fu_852_p1;
wire   [3:0] tmp_106_fu_856_p3;
wire   [3:0] tmp_110_fu_869_p4;
wire   [3:0] tmp_109_fu_864_p2;
wire   [10:0] tmp_86_fu_888_p2;
wire   [1:0] tmp_116_fu_909_p1;
wire   [7:0] tmp_30_fu_913_p3;
wire   [10:0] tmp_93_fu_927_p2;
wire   [10:0] tmp_97_fu_949_p2;
wire   [2:0] tmp_121_fu_970_p1;
wire   [5:0] tmp_124_fu_974_p3;
wire   [1:0] tmp_126_fu_987_p4;
wire   [5:0] tmp_125_fu_982_p2;
wire   [10:0] tmp_104_fu_1006_p2;
wire   [10:0] tmp_113_fu_1028_p2;
wire   [9:0] tmp_32_fu_1051_p3;
wire   [2:0] tmp_127_fu_1086_p1;
wire   [6:0] tmp_129_fu_1090_p3;
wire   [6:0] tmp_130_fu_1098_p2;
wire   [7:0] tmp_79_fu_1117_p3;
wire   [4:0] tmp_135_fu_1145_p3;
wire   [4:0] tmp_134_fu_1135_p4;
wire   [4:0] tmp_136_fu_1152_p2;
wire   [7:0] tmp_12_fu_1188_p4;
wire   [7:0] tmp_108_fu_1181_p3;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

poly_Sq_tobytes_t #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
t_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(t_address0),
    .ce0(t_ce0),
    .we0(t_we0),
    .d0(t_d0),
    .q0(t_q0),
    .address1(t_address1),
    .ce1(t_ce1),
    .we1(t_we1),
    .d1(a_coeffs_q0),
    .q1(t_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_reg_460 <= tmp_66_reg_1260;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_460 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_1_reg_495 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        j_1_reg_495 <= tmp_46_reg_1321;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (exitcond1_fu_1039_p2 == 1'd1))) begin
        j_2_reg_507 <= 4'd4;
    end else if (((exitcond_fu_1069_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        j_2_reg_507 <= j_4_fu_1080_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_574_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_483 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_483 <= j_3_reg_1273;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        phi_mul_reg_471 <= next_mul_reg_1252;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_471 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_3_reg_1273 <= j_3_fu_604_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul_reg_1252 <= next_mul_fu_568_p2;
        tmp_66_reg_1260 <= tmp_66_fu_580_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_100_reg_1303 <= {{t_q1[15:12]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_123_reg_1313 <= {{t_q1[15:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_132_reg_1339 <= tmp_132_fu_1113_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_133_reg_1344 <= tmp_133_fu_1131_p1;
        tmp_137_reg_1349 <= {{t_q1[5:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_138_reg_1354 <= tmp_138_fu_1177_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_20_reg_1293 <= {{t_q1[13:6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_29_reg_1308 <= {{t_q0[14:7]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_46_reg_1321 <= tmp_46_fu_1045_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_55_reg_1283 <= {{t_q1[10:3]}};
        tmp_70_reg_1288 <= {{t_q1[15:11]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_88_reg_1298 <= {{t_q0[15:9]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_574_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_1265[9 : 3] <= tmp_fu_586_p3[9 : 3];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        a_coeffs_address0 = tmp_s_fu_1059_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_coeffs_address0 = tmp_118_fu_615_p1;
    end else begin
        a_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state12))) begin
        a_coeffs_ce0 = 1'b1;
    end else begin
        a_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        r_address0 = 64'd1132;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        r_address0 = 64'd1134;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        r_address0 = 64'd1136;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        r_address0 = tmp_114_fu_1034_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        r_address0 = tmp_98_fu_955_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        r_address0 = tmp_87_fu_894_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_address0 = tmp_76_fu_815_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_address0 = tmp_65_fu_767_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_address0 = tmp_57_fu_701_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_address0 = tmp_49_fu_630_p1;
    end else begin
        r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        r_address1 = 64'd1131;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        r_address1 = 64'd1133;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        r_address1 = 64'd1135;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        r_address1 = 64'd1137;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        r_address1 = tmp_105_fu_1012_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        r_address1 = tmp_94_fu_933_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_address1 = tmp_83_fu_837_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_address1 = tmp_69_fu_778_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_address1 = tmp_62_fu_738_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_address1 = tmp_53_fu_670_p1;
    end else begin
        r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        r_ce0 = 1'b1;
    end else begin
        r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        r_ce1 = 1'b1;
    end else begin
        r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        r_d0 = tmp_120_fu_1198_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        r_d0 = tmp_101_fu_1158_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        r_d0 = {{t_q0[8:1]}};
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        r_d0 = {{t_q0[12:5]}};
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        r_d0 = {{t_q1[9:2]}};
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        r_d0 = tmp_85_fu_879_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_d0 = tmp_74_fu_800_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_d0 = tmp_63_fu_755_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_d0 = tmp_55_reg_1283;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_d0 = tmp_72_fu_625_p1;
    end else begin
        r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        r_d1 = tmp_139_fu_1205_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        r_d1 = {{t_q0[10:3]}};
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        r_d1 = tmp_89_fu_1124_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        r_d1 = tmp_71_fu_1104_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        r_d1 = tmp_103_fu_997_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        r_d1 = tmp_92_fu_921_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_d1 = {{t_q1[11:4]}};
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_d1 = {{t_q0[8:1]}};
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_d1 = tmp_60_fu_723_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_d1 = tmp_51_fu_657_p2;
    end else begin
        r_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        r_we0 = 1'b1;
    end else begin
        r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        r_we1 = 1'b1;
    end else begin
        r_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        t_address0 = 64'd1;
    end else if (((exitcond_fu_1069_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        t_address0 = tmp_122_fu_1075_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        t_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        t_address0 = 64'd5;
    end else if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state14) & (exitcond_fu_1069_p2 == 1'd1)))) begin
        t_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        t_address0 = tmp_119_fu_620_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        t_address0 = 64'd0;
    end else begin
        t_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        t_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        t_address1 = tmp_45_fu_1064_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        t_address1 = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state7))) begin
        t_address1 = 64'd4;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state5))) begin
        t_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        t_address1 = 64'd1;
    end else begin
        t_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state14) & (exitcond_fu_1069_p2 == 1'd1)) | ((exitcond_fu_1069_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        t_ce0 = 1'b1;
    end else begin
        t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        t_ce1 = 1'b1;
    end else begin
        t_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_1069_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        t_d0 = 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        t_d0 = a_coeffs_q0;
    end else begin
        t_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((exitcond_fu_1069_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        t_we0 = 1'b1;
    end else begin
        t_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        t_we1 = 1'b1;
    end else begin
        t_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond2_fu_598_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (exitcond1_fu_1039_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state14 : begin
            if (((exitcond_fu_1069_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_1039_p2 = ((j_1_reg_495 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond2_fu_598_p2 = ((j_reg_483 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond3_fu_574_p2 = ((i_reg_460 == 7'd87) ? 1'b1 : 1'b0);

assign exitcond_fu_1069_p2 = ((j_2_reg_507 == 4'd8) ? 1'b1 : 1'b0);

assign grp_fu_518_p4 = {{t_q1[5:3]}};

assign grp_fu_528_p4 = {{t_q1[13:6]}};

assign grp_fu_550_p4 = {{t_q0[15:9]}};

assign grp_fu_560_p3 = t_q1[32'd3];

assign j_3_fu_604_p2 = (j_reg_483 + 4'd1);

assign j_4_fu_1080_p2 = (j_2_reg_507 + 4'd1);

assign j_cast6_fu_594_p1 = j_reg_483;

assign next_mul_fu_568_p2 = (phi_mul_reg_471 + 11'd13);

assign tmp_101_fu_1158_p3 = {{tmp_137_reg_1349}, {tmp_136_fu_1152_p2}};

assign tmp_102_fu_783_p1 = t_q1[2:0];

assign tmp_103_fu_997_p3 = {{tmp_126_fu_987_p4}, {tmp_125_fu_982_p2}};

assign tmp_104_fu_1006_p2 = (11'd11 + phi_mul_reg_471);

assign tmp_105_fu_1012_p1 = tmp_104_fu_1006_p2;

assign tmp_106_fu_856_p3 = {{tmp_115_fu_852_p1}, {1'd0}};

assign tmp_108_fu_1181_p3 = {{tmp_138_reg_1354}, {5'd0}};

assign tmp_109_fu_864_p2 = (tmp_106_fu_856_p3 | tmp_100_reg_1303);

assign tmp_110_fu_869_p4 = {{t_q0[6:3]}};

assign tmp_113_fu_1028_p2 = (11'd12 + phi_mul_reg_471);

assign tmp_114_fu_1034_p1 = tmp_113_fu_1028_p2;

assign tmp_115_fu_852_p1 = t_q0[2:0];

assign tmp_116_fu_909_p1 = t_q1[1:0];

assign tmp_117_fu_610_p2 = (tmp_reg_1265 + j_cast6_fu_594_p1);

assign tmp_118_fu_615_p1 = tmp_117_fu_610_p2;

assign tmp_119_fu_620_p1 = j_reg_483;

assign tmp_120_fu_1198_p2 = (tmp_12_fu_1188_p4 | tmp_108_fu_1181_p3);

assign tmp_121_fu_970_p1 = t_q0[2:0];

assign tmp_122_fu_1075_p1 = j_2_reg_507;

assign tmp_124_fu_974_p3 = {{tmp_121_fu_970_p1}, {3'd0}};

assign tmp_125_fu_982_p2 = (tmp_124_fu_974_p3 | tmp_123_reg_1313);

assign tmp_126_fu_987_p4 = {{t_q0[4:3]}};

assign tmp_127_fu_1086_p1 = t_q1[2:0];

assign tmp_129_fu_1090_p3 = {{tmp_127_fu_1086_p1}, {4'd0}};

assign tmp_12_fu_1188_p4 = {{t_q1[15:8]}};

assign tmp_130_fu_1098_p2 = (tmp_129_fu_1090_p3 | grp_fu_550_p4);

assign tmp_132_fu_1113_p1 = t_q0[0:0];

assign tmp_133_fu_1131_p1 = t_q1[2:0];

assign tmp_134_fu_1135_p4 = {{t_q0[15:11]}};

assign tmp_135_fu_1145_p3 = {{tmp_133_reg_1344}, {2'd0}};

assign tmp_136_fu_1152_p2 = (tmp_135_fu_1145_p3 | tmp_134_fu_1135_p4);

assign tmp_138_fu_1177_p1 = t_q0[2:0];

assign tmp_139_fu_1205_p1 = t_q1[7:0];

assign tmp_14_fu_635_p4 = {{t_q0[15:8]}};

assign tmp_15_fu_649_p3 = {{tmp_84_fu_645_p1}, {5'd0}};

assign tmp_21_fu_747_p3 = {{tmp_99_fu_743_p1}, {7'd0}};

assign tmp_30_fu_913_p3 = {{tmp_116_fu_909_p1}, {6'd0}};

assign tmp_32_fu_1051_p3 = {{7'd87}, {j_1_reg_495}};

assign tmp_45_fu_1064_p1 = j_1_reg_495;

assign tmp_46_fu_1045_p2 = (j_1_reg_495 + 3'd1);

assign tmp_49_fu_630_p1 = phi_mul_reg_471;

assign tmp_51_fu_657_p2 = (tmp_15_fu_649_p3 | tmp_14_fu_635_p4);

assign tmp_52_fu_664_p2 = (11'd1 + phi_mul_reg_471);

assign tmp_53_fu_670_p1 = tmp_52_fu_664_p2;

assign tmp_56_fu_695_p2 = (11'd2 + phi_mul_reg_471);

assign tmp_57_fu_701_p1 = tmp_56_fu_695_p2;

assign tmp_60_fu_723_p3 = {{grp_fu_518_p4}, {tmp_78_fu_718_p2}};

assign tmp_61_fu_732_p2 = (11'd3 + phi_mul_reg_471);

assign tmp_62_fu_738_p1 = tmp_61_fu_732_p2;

assign tmp_63_fu_755_p2 = (tmp_21_fu_747_p3 | tmp_20_reg_1293);

assign tmp_64_fu_761_p2 = (11'd4 + phi_mul_reg_471);

assign tmp_65_fu_767_p1 = tmp_64_fu_761_p2;

assign tmp_66_fu_580_p2 = (i_reg_460 + 7'd1);

assign tmp_68_fu_772_p2 = (11'd5 + phi_mul_reg_471);

assign tmp_69_fu_778_p1 = tmp_68_fu_772_p2;

assign tmp_71_fu_1104_p3 = {{grp_fu_560_p3}, {tmp_130_fu_1098_p2}};

assign tmp_72_fu_625_p1 = t_q0[7:0];

assign tmp_74_fu_800_p3 = {{grp_fu_560_p3}, {tmp_95_fu_795_p2}};

assign tmp_75_fu_809_p2 = (11'd6 + phi_mul_reg_471);

assign tmp_76_fu_815_p1 = tmp_75_fu_809_p2;

assign tmp_77_fu_710_p3 = {{tmp_90_fu_706_p1}, {2'd0}};

assign tmp_78_fu_718_p2 = (tmp_77_fu_710_p3 | tmp_70_reg_1288);

assign tmp_79_fu_1117_p3 = {{tmp_132_reg_1339}, {7'd0}};

assign tmp_82_fu_831_p2 = (11'd7 + phi_mul_reg_471);

assign tmp_83_fu_837_p1 = tmp_82_fu_831_p2;

assign tmp_84_fu_645_p1 = t_q1[2:0];

assign tmp_85_fu_879_p3 = {{tmp_110_fu_869_p4}, {tmp_109_fu_864_p2}};

assign tmp_86_fu_888_p2 = (11'd8 + phi_mul_reg_471);

assign tmp_87_fu_894_p1 = tmp_86_fu_888_p2;

assign tmp_89_fu_1124_p2 = (tmp_79_fu_1117_p3 | grp_fu_528_p4);

assign tmp_90_fu_706_p1 = t_q1[2:0];

assign tmp_91_fu_787_p3 = {{tmp_102_fu_783_p1}, {4'd0}};

assign tmp_92_fu_921_p2 = (tmp_30_fu_913_p3 | tmp_29_reg_1308);

assign tmp_93_fu_927_p2 = (11'd9 + phi_mul_reg_471);

assign tmp_94_fu_933_p1 = tmp_93_fu_927_p2;

assign tmp_95_fu_795_p2 = (tmp_91_fu_787_p3 | tmp_88_reg_1298);

assign tmp_97_fu_949_p2 = (11'd10 + phi_mul_reg_471);

assign tmp_98_fu_955_p1 = tmp_97_fu_949_p2;

assign tmp_99_fu_743_p1 = t_q0[0:0];

assign tmp_fu_586_p3 = {{i_reg_460}, {3'd0}};

assign tmp_s_fu_1059_p1 = tmp_32_fu_1051_p3;

always @ (posedge ap_clk) begin
    tmp_reg_1265[2:0] <= 3'b000;
end

endmodule //poly_Sq_tobytes
