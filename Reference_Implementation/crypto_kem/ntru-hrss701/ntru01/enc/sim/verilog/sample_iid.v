// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sample_iid (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_coeffs_address0,
        r_coeffs_ce0,
        r_coeffs_we0,
        r_coeffs_d0,
        uniformbytes_address0,
        uniformbytes_ce0,
        uniformbytes_q0,
        uniformbytes_offset
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] r_coeffs_address0;
output   r_coeffs_ce0;
output   r_coeffs_we0;
output  [15:0] r_coeffs_d0;
output  [10:0] uniformbytes_address0;
output   uniformbytes_ce0;
input  [7:0] uniformbytes_q0;
input  [11:0] uniformbytes_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] r_coeffs_address0;
reg r_coeffs_ce0;
reg r_coeffs_we0;
reg[15:0] r_coeffs_d0;
reg uniformbytes_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] tmp_6_fu_104_p1;
reg   [10:0] tmp_6_reg_318;
wire   [9:0] i_3_fu_114_p2;
reg   [9:0] i_3_reg_326;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_108_p2;
wire   [2:0] r_2_fu_246_p2;
reg   [2:0] r_2_reg_336;
wire    ap_CS_fsm_state3;
reg   [9:0] i_reg_92;
wire    ap_CS_fsm_state4;
wire   [63:0] sum_cast_fu_129_p1;
wire   [63:0] tmp_fu_252_p1;
wire   [15:0] tmp_317_i_fu_311_p2;
wire   [10:0] tmp_cast_fu_120_p1;
wire   [10:0] sum_fu_124_p2;
wire   [3:0] tmp_4_fu_138_p4;
wire   [3:0] tmp_9_fu_134_p1;
wire   [4:0] tmp_309_i_cast_fu_152_p1;
wire   [4:0] tmp_308_i_cast_fu_148_p1;
wire   [4:0] r_fu_162_p2;
wire   [2:0] tmp_7_fu_168_p4;
wire   [1:0] tmp_2_fu_186_p4;
wire   [1:0] tmp_10_fu_182_p1;
wire   [1:0] fold1_i_cast_fu_196_p2;
wire   [3:0] tmp_311_i_cast_fu_202_p1;
wire   [3:0] tmp_310_i_cast_fu_178_p1;
wire   [3:0] r_1_fu_206_p2;
wire   [1:0] tmp_8_fu_212_p4;
wire   [3:0] tmp_5_fu_156_p2;
wire   [1:0] tmp_3_fu_226_p4;
wire   [1:0] fold2_i_cast_fu_236_p2;
wire   [2:0] tmp_313_i_cast_fu_242_p1;
wire   [2:0] tmp_312_i_cast_fu_222_p1;
wire   [2:0] t_fu_257_p2;
wire   [0:0] tmp_11_fu_262_p3;
wire   [2:0] c_cast_fu_270_p3;
wire   [2:0] tmp_314_i_fu_278_p2;
wire   [0:0] not_tmp_37_i_fu_287_p2;
wire   [2:0] tmp_315_i_cast_cast_fu_293_p3;
wire   [2:0] tmp_316_i_fu_301_p2;
wire   [15:0] tmp_314_i_cast_fu_283_p1;
wire  signed [15:0] tmp_316_i_cast_fu_307_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_92 <= i_3_reg_326;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_92 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_326 <= i_3_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        r_2_reg_336 <= r_2_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_6_reg_318 <= tmp_6_fu_104_p1;
    end
end

always @ (*) begin
    if ((((exitcond_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_coeffs_address0 = tmp_fu_252_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        r_coeffs_address0 = 64'd700;
    end else begin
        r_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        r_coeffs_ce0 = 1'b1;
    end else begin
        r_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_coeffs_d0 = tmp_317_i_fu_311_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        r_coeffs_d0 = 16'd0;
    end else begin
        r_coeffs_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((exitcond_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        r_coeffs_we0 = 1'b1;
    end else begin
        r_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        uniformbytes_ce0 = 1'b1;
    end else begin
        uniformbytes_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_108_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign c_cast_fu_270_p3 = ((tmp_11_fu_262_p3[0:0] === 1'b1) ? 3'd7 : 3'd0);

assign exitcond_fu_108_p2 = ((i_reg_92 == 10'd700) ? 1'b1 : 1'b0);

assign fold1_i_cast_fu_196_p2 = (tmp_2_fu_186_p4 + tmp_10_fu_182_p1);

assign fold2_i_cast_fu_236_p2 = (fold1_i_cast_fu_196_p2 + tmp_3_fu_226_p4);

assign i_3_fu_114_p2 = (i_reg_92 + 10'd1);

assign not_tmp_37_i_fu_287_p2 = (tmp_11_fu_262_p3 ^ 1'd1);

assign r_1_fu_206_p2 = (tmp_311_i_cast_fu_202_p1 + tmp_310_i_cast_fu_178_p1);

assign r_2_fu_246_p2 = (tmp_313_i_cast_fu_242_p1 + tmp_312_i_cast_fu_222_p1);

assign r_fu_162_p2 = (tmp_309_i_cast_fu_152_p1 + tmp_308_i_cast_fu_148_p1);

assign sum_cast_fu_129_p1 = sum_fu_124_p2;

assign sum_fu_124_p2 = (tmp_6_reg_318 + tmp_cast_fu_120_p1);

assign t_fu_257_p2 = ($signed(3'd5) + $signed(r_2_reg_336));

assign tmp_10_fu_182_p1 = uniformbytes_q0[1:0];

assign tmp_11_fu_262_p3 = t_fu_257_p2[32'd2];

assign tmp_2_fu_186_p4 = {{uniformbytes_q0[5:4]}};

assign tmp_308_i_cast_fu_148_p1 = tmp_4_fu_138_p4;

assign tmp_309_i_cast_fu_152_p1 = tmp_9_fu_134_p1;

assign tmp_310_i_cast_fu_178_p1 = tmp_7_fu_168_p4;

assign tmp_311_i_cast_fu_202_p1 = fold1_i_cast_fu_196_p2;

assign tmp_312_i_cast_fu_222_p1 = tmp_8_fu_212_p4;

assign tmp_313_i_cast_fu_242_p1 = fold2_i_cast_fu_236_p2;

assign tmp_314_i_cast_fu_283_p1 = tmp_314_i_fu_278_p2;

assign tmp_314_i_fu_278_p2 = (r_2_reg_336 & c_cast_fu_270_p3);

assign tmp_315_i_cast_cast_fu_293_p3 = ((not_tmp_37_i_fu_287_p2[0:0] === 1'b1) ? 3'd7 : 3'd0);

assign tmp_316_i_cast_fu_307_p1 = $signed(tmp_316_i_fu_301_p2);

assign tmp_316_i_fu_301_p2 = (tmp_315_i_cast_cast_fu_293_p3 & t_fu_257_p2);

assign tmp_317_i_fu_311_p2 = (tmp_316_i_cast_fu_307_p1 ^ tmp_314_i_cast_fu_283_p1);

assign tmp_3_fu_226_p4 = {{tmp_5_fu_156_p2[3:2]}};

assign tmp_4_fu_138_p4 = {{uniformbytes_q0[7:4]}};

assign tmp_5_fu_156_p2 = (tmp_4_fu_138_p4 + tmp_9_fu_134_p1);

assign tmp_6_fu_104_p1 = uniformbytes_offset[10:0];

assign tmp_7_fu_168_p4 = {{r_fu_162_p2[4:2]}};

assign tmp_8_fu_212_p4 = {{r_1_fu_206_p2[3:2]}};

assign tmp_9_fu_134_p1 = uniformbytes_q0[3:0];

assign tmp_cast_fu_120_p1 = i_reg_92;

assign tmp_fu_252_p1 = i_reg_92;

assign uniformbytes_address0 = sum_cast_fu_129_p1;

endmodule //sample_iid
