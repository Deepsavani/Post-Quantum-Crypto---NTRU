// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "crypto_kem_enc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic crypto_kem_enc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic crypto_kem_enc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<12> crypto_kem_enc::ap_ST_fsm_state1 = "1";
const sc_lv<12> crypto_kem_enc::ap_ST_fsm_state2 = "10";
const sc_lv<12> crypto_kem_enc::ap_ST_fsm_state3 = "100";
const sc_lv<12> crypto_kem_enc::ap_ST_fsm_state4 = "1000";
const sc_lv<12> crypto_kem_enc::ap_ST_fsm_state5 = "10000";
const sc_lv<12> crypto_kem_enc::ap_ST_fsm_state6 = "100000";
const sc_lv<12> crypto_kem_enc::ap_ST_fsm_state7 = "1000000";
const sc_lv<12> crypto_kem_enc::ap_ST_fsm_state8 = "10000000";
const sc_lv<12> crypto_kem_enc::ap_ST_fsm_state9 = "100000000";
const sc_lv<12> crypto_kem_enc::ap_ST_fsm_state10 = "1000000000";
const sc_lv<12> crypto_kem_enc::ap_ST_fsm_state11 = "10000000000";
const sc_lv<12> crypto_kem_enc::ap_ST_fsm_state12 = "100000000000";
const sc_lv<32> crypto_kem_enc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> crypto_kem_enc::ap_const_lv32_8 = "1000";
const sc_lv<32> crypto_kem_enc::ap_const_lv32_9 = "1001";
const sc_lv<32> crypto_kem_enc::ap_const_lv32_1 = "1";
const sc_lv<32> crypto_kem_enc::ap_const_lv32_A = "1010";
const sc_lv<32> crypto_kem_enc::ap_const_lv32_B = "1011";
const sc_lv<32> crypto_kem_enc::ap_const_lv32_4 = "100";
const sc_lv<32> crypto_kem_enc::ap_const_lv32_6 = "110";
const sc_lv<32> crypto_kem_enc::ap_const_lv32_5 = "101";
const sc_lv<32> crypto_kem_enc::ap_const_lv32_7 = "111";
const sc_lv<10> crypto_kem_enc::ap_const_lv10_0 = "0000000000";
const sc_lv<10> crypto_kem_enc::ap_const_lv10_8C = "10001100";
const sc_lv<32> crypto_kem_enc::ap_const_lv32_2 = "10";
const sc_lv<32> crypto_kem_enc::ap_const_lv32_3 = "11";
const sc_lv<12> crypto_kem_enc::ap_const_lv12_0 = "000000000000";
const sc_lv<12> crypto_kem_enc::ap_const_lv12_2BC = "1010111100";
const bool crypto_kem_enc::ap_const_boolean_0 = false;
const bool crypto_kem_enc::ap_const_boolean_1 = true;

crypto_kem_enc::crypto_kem_enc(sc_module_name name) : sc_module(name), mVcdFile(0) {
    r_coeffs_U = new crypto_kem_enc_r_coeffs("r_coeffs_U");
    r_coeffs_U->clk(ap_clk);
    r_coeffs_U->reset(ap_rst);
    r_coeffs_U->address0(r_coeffs_address0);
    r_coeffs_U->ce0(r_coeffs_ce0);
    r_coeffs_U->we0(r_coeffs_we0);
    r_coeffs_U->d0(grp_sample_iid_fu_105_r_coeffs_d0);
    r_coeffs_U->q0(r_coeffs_q0);
    r_coeffs_U->address1(grp_poly_S3_tobytes_fu_96_a_coeffs_address1);
    r_coeffs_U->ce1(r_coeffs_ce1);
    r_coeffs_U->q1(r_coeffs_q1);
    m_coeffs_U = new crypto_kem_enc_r_coeffs("m_coeffs_U");
    m_coeffs_U->clk(ap_clk);
    m_coeffs_U->reset(ap_rst);
    m_coeffs_U->address0(m_coeffs_address0);
    m_coeffs_U->ce0(m_coeffs_ce0);
    m_coeffs_U->we0(m_coeffs_we0);
    m_coeffs_U->d0(grp_sample_iid_fu_105_r_coeffs_d0);
    m_coeffs_U->q0(m_coeffs_q0);
    m_coeffs_U->address1(grp_poly_S3_tobytes_fu_96_a_coeffs_address1);
    m_coeffs_U->ce1(m_coeffs_ce1);
    m_coeffs_U->q1(m_coeffs_q1);
    rm_U = new crypto_kem_enc_rm("rm_U");
    rm_U->clk(ap_clk);
    rm_U->reset(ap_rst);
    rm_U->address0(rm_address0);
    rm_U->ce0(rm_ce0);
    rm_U->we0(rm_we0);
    rm_U->d0(grp_poly_S3_tobytes_fu_96_msg_d0);
    rm_U->q0(rm_q0);
    rm_seed_U = new crypto_kem_enc_rm_seed("rm_seed_U");
    rm_seed_U->clk(ap_clk);
    rm_seed_U->reset(ap_rst);
    rm_seed_U->address0(rm_seed_address0);
    rm_seed_U->ce0(rm_seed_ce0);
    rm_seed_U->we0(rm_seed_we0);
    rm_seed_U->d0(grp_randombytes_fu_71_x_d0);
    rm_seed_U->q0(rm_seed_q0);
    grp_sha3_256_fu_62 = new sha3_256("grp_sha3_256_fu_62");
    grp_sha3_256_fu_62->ap_clk(ap_clk);
    grp_sha3_256_fu_62->ap_rst(ap_rst);
    grp_sha3_256_fu_62->ap_start(grp_sha3_256_fu_62_ap_start);
    grp_sha3_256_fu_62->ap_done(grp_sha3_256_fu_62_ap_done);
    grp_sha3_256_fu_62->ap_idle(grp_sha3_256_fu_62_ap_idle);
    grp_sha3_256_fu_62->ap_ready(grp_sha3_256_fu_62_ap_ready);
    grp_sha3_256_fu_62->output_r_address0(grp_sha3_256_fu_62_output_r_address0);
    grp_sha3_256_fu_62->output_r_ce0(grp_sha3_256_fu_62_output_r_ce0);
    grp_sha3_256_fu_62->output_r_we0(grp_sha3_256_fu_62_output_r_we0);
    grp_sha3_256_fu_62->output_r_d0(grp_sha3_256_fu_62_output_r_d0);
    grp_sha3_256_fu_62->input_r_address0(grp_sha3_256_fu_62_input_r_address0);
    grp_sha3_256_fu_62->input_r_ce0(grp_sha3_256_fu_62_input_r_ce0);
    grp_sha3_256_fu_62->input_r_q0(rm_q0);
    grp_randombytes_fu_71 = new randombytes("grp_randombytes_fu_71");
    grp_randombytes_fu_71->ap_clk(ap_clk);
    grp_randombytes_fu_71->ap_rst(ap_rst);
    grp_randombytes_fu_71->ap_start(grp_randombytes_fu_71_ap_start);
    grp_randombytes_fu_71->ap_done(grp_randombytes_fu_71_ap_done);
    grp_randombytes_fu_71->ap_idle(grp_randombytes_fu_71_ap_idle);
    grp_randombytes_fu_71->ap_ready(grp_randombytes_fu_71_ap_ready);
    grp_randombytes_fu_71->x_address0(grp_randombytes_fu_71_x_address0);
    grp_randombytes_fu_71->x_ce0(grp_randombytes_fu_71_x_ce0);
    grp_randombytes_fu_71->x_we0(grp_randombytes_fu_71_x_we0);
    grp_randombytes_fu_71->x_d0(grp_randombytes_fu_71_x_d0);
    grp_randombytes_fu_71->DRBG_ctx_V_address0(grp_randombytes_fu_71_DRBG_ctx_V_address0);
    grp_randombytes_fu_71->DRBG_ctx_V_ce0(grp_randombytes_fu_71_DRBG_ctx_V_ce0);
    grp_randombytes_fu_71->DRBG_ctx_V_we0(grp_randombytes_fu_71_DRBG_ctx_V_we0);
    grp_randombytes_fu_71->DRBG_ctx_V_d0(grp_randombytes_fu_71_DRBG_ctx_V_d0);
    grp_randombytes_fu_71->DRBG_ctx_V_q0(DRBG_ctx_V_q0);
    grp_randombytes_fu_71->DRBG_ctx_V_address1(grp_randombytes_fu_71_DRBG_ctx_V_address1);
    grp_randombytes_fu_71->DRBG_ctx_V_ce1(grp_randombytes_fu_71_DRBG_ctx_V_ce1);
    grp_randombytes_fu_71->DRBG_ctx_V_q1(DRBG_ctx_V_q1);
    grp_randombytes_fu_71->DRBG_ctx_Key_address0(grp_randombytes_fu_71_DRBG_ctx_Key_address0);
    grp_randombytes_fu_71->DRBG_ctx_Key_ce0(grp_randombytes_fu_71_DRBG_ctx_Key_ce0);
    grp_randombytes_fu_71->DRBG_ctx_Key_we0(grp_randombytes_fu_71_DRBG_ctx_Key_we0);
    grp_randombytes_fu_71->DRBG_ctx_Key_d0(grp_randombytes_fu_71_DRBG_ctx_Key_d0);
    grp_randombytes_fu_71->DRBG_ctx_Key_q0(DRBG_ctx_Key_q0);
    grp_randombytes_fu_71->DRBG_ctx_Key_address1(grp_randombytes_fu_71_DRBG_ctx_Key_address1);
    grp_randombytes_fu_71->DRBG_ctx_Key_ce1(grp_randombytes_fu_71_DRBG_ctx_Key_ce1);
    grp_randombytes_fu_71->DRBG_ctx_Key_q1(DRBG_ctx_Key_q1);
    grp_randombytes_fu_71->DRBG_ctx_reseed_counter_i(DRBG_ctx_reseed_counter_i);
    grp_randombytes_fu_71->DRBG_ctx_reseed_counter_o(grp_randombytes_fu_71_DRBG_ctx_reseed_counter_o);
    grp_randombytes_fu_71->DRBG_ctx_reseed_counter_o_ap_vld(grp_randombytes_fu_71_DRBG_ctx_reseed_counter_o_ap_vld);
    grp_owcpa_enc_fu_87 = new owcpa_enc("grp_owcpa_enc_fu_87");
    grp_owcpa_enc_fu_87->ap_clk(ap_clk);
    grp_owcpa_enc_fu_87->ap_rst(ap_rst);
    grp_owcpa_enc_fu_87->ap_start(grp_owcpa_enc_fu_87_ap_start);
    grp_owcpa_enc_fu_87->ap_done(grp_owcpa_enc_fu_87_ap_done);
    grp_owcpa_enc_fu_87->ap_idle(grp_owcpa_enc_fu_87_ap_idle);
    grp_owcpa_enc_fu_87->ap_ready(grp_owcpa_enc_fu_87_ap_ready);
    grp_owcpa_enc_fu_87->c_address0(grp_owcpa_enc_fu_87_c_address0);
    grp_owcpa_enc_fu_87->c_ce0(grp_owcpa_enc_fu_87_c_ce0);
    grp_owcpa_enc_fu_87->c_we0(grp_owcpa_enc_fu_87_c_we0);
    grp_owcpa_enc_fu_87->c_d0(grp_owcpa_enc_fu_87_c_d0);
    grp_owcpa_enc_fu_87->c_address1(grp_owcpa_enc_fu_87_c_address1);
    grp_owcpa_enc_fu_87->c_ce1(grp_owcpa_enc_fu_87_c_ce1);
    grp_owcpa_enc_fu_87->c_we1(grp_owcpa_enc_fu_87_c_we1);
    grp_owcpa_enc_fu_87->c_d1(grp_owcpa_enc_fu_87_c_d1);
    grp_owcpa_enc_fu_87->rm_address0(grp_owcpa_enc_fu_87_rm_address0);
    grp_owcpa_enc_fu_87->rm_ce0(grp_owcpa_enc_fu_87_rm_ce0);
    grp_owcpa_enc_fu_87->rm_q0(rm_q0);
    grp_owcpa_enc_fu_87->pk_address0(grp_owcpa_enc_fu_87_pk_address0);
    grp_owcpa_enc_fu_87->pk_ce0(grp_owcpa_enc_fu_87_pk_ce0);
    grp_owcpa_enc_fu_87->pk_q0(pk_q0);
    grp_owcpa_enc_fu_87->pk_address1(grp_owcpa_enc_fu_87_pk_address1);
    grp_owcpa_enc_fu_87->pk_ce1(grp_owcpa_enc_fu_87_pk_ce1);
    grp_owcpa_enc_fu_87->pk_q1(pk_q1);
    grp_poly_S3_tobytes_fu_96 = new poly_S3_tobytes("grp_poly_S3_tobytes_fu_96");
    grp_poly_S3_tobytes_fu_96->ap_clk(ap_clk);
    grp_poly_S3_tobytes_fu_96->ap_rst(ap_rst);
    grp_poly_S3_tobytes_fu_96->ap_start(grp_poly_S3_tobytes_fu_96_ap_start);
    grp_poly_S3_tobytes_fu_96->ap_done(grp_poly_S3_tobytes_fu_96_ap_done);
    grp_poly_S3_tobytes_fu_96->ap_idle(grp_poly_S3_tobytes_fu_96_ap_idle);
    grp_poly_S3_tobytes_fu_96->ap_ready(grp_poly_S3_tobytes_fu_96_ap_ready);
    grp_poly_S3_tobytes_fu_96->msg_address0(grp_poly_S3_tobytes_fu_96_msg_address0);
    grp_poly_S3_tobytes_fu_96->msg_ce0(grp_poly_S3_tobytes_fu_96_msg_ce0);
    grp_poly_S3_tobytes_fu_96->msg_we0(grp_poly_S3_tobytes_fu_96_msg_we0);
    grp_poly_S3_tobytes_fu_96->msg_d0(grp_poly_S3_tobytes_fu_96_msg_d0);
    grp_poly_S3_tobytes_fu_96->msg_offset(grp_poly_S3_tobytes_fu_96_msg_offset);
    grp_poly_S3_tobytes_fu_96->a_coeffs_address0(grp_poly_S3_tobytes_fu_96_a_coeffs_address0);
    grp_poly_S3_tobytes_fu_96->a_coeffs_ce0(grp_poly_S3_tobytes_fu_96_a_coeffs_ce0);
    grp_poly_S3_tobytes_fu_96->a_coeffs_q0(grp_poly_S3_tobytes_fu_96_a_coeffs_q0);
    grp_poly_S3_tobytes_fu_96->a_coeffs_address1(grp_poly_S3_tobytes_fu_96_a_coeffs_address1);
    grp_poly_S3_tobytes_fu_96->a_coeffs_ce1(grp_poly_S3_tobytes_fu_96_a_coeffs_ce1);
    grp_poly_S3_tobytes_fu_96->a_coeffs_q1(grp_poly_S3_tobytes_fu_96_a_coeffs_q1);
    grp_sample_iid_fu_105 = new sample_iid("grp_sample_iid_fu_105");
    grp_sample_iid_fu_105->ap_clk(ap_clk);
    grp_sample_iid_fu_105->ap_rst(ap_rst);
    grp_sample_iid_fu_105->ap_start(grp_sample_iid_fu_105_ap_start);
    grp_sample_iid_fu_105->ap_done(grp_sample_iid_fu_105_ap_done);
    grp_sample_iid_fu_105->ap_idle(grp_sample_iid_fu_105_ap_idle);
    grp_sample_iid_fu_105->ap_ready(grp_sample_iid_fu_105_ap_ready);
    grp_sample_iid_fu_105->r_coeffs_address0(grp_sample_iid_fu_105_r_coeffs_address0);
    grp_sample_iid_fu_105->r_coeffs_ce0(grp_sample_iid_fu_105_r_coeffs_ce0);
    grp_sample_iid_fu_105->r_coeffs_we0(grp_sample_iid_fu_105_r_coeffs_we0);
    grp_sample_iid_fu_105->r_coeffs_d0(grp_sample_iid_fu_105_r_coeffs_d0);
    grp_sample_iid_fu_105->uniformbytes_address0(grp_sample_iid_fu_105_uniformbytes_address0);
    grp_sample_iid_fu_105->uniformbytes_ce0(grp_sample_iid_fu_105_uniformbytes_ce0);
    grp_sample_iid_fu_105->uniformbytes_q0(rm_seed_q0);
    grp_sample_iid_fu_105->uniformbytes_offset(grp_sample_iid_fu_105_uniformbytes_offset);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_DRBG_ctx_Key_address0);
    sensitive << ( grp_randombytes_fu_71_DRBG_ctx_Key_address0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_Key_address1);
    sensitive << ( grp_randombytes_fu_71_DRBG_ctx_Key_address1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_Key_ce0);
    sensitive << ( grp_randombytes_fu_71_DRBG_ctx_Key_ce0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_Key_ce1);
    sensitive << ( grp_randombytes_fu_71_DRBG_ctx_Key_ce1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_Key_d0);
    sensitive << ( grp_randombytes_fu_71_DRBG_ctx_Key_d0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_Key_we0);
    sensitive << ( grp_randombytes_fu_71_DRBG_ctx_Key_we0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_V_address0);
    sensitive << ( grp_randombytes_fu_71_DRBG_ctx_V_address0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_V_address1);
    sensitive << ( grp_randombytes_fu_71_DRBG_ctx_V_address1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_V_ce0);
    sensitive << ( grp_randombytes_fu_71_DRBG_ctx_V_ce0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_V_ce1);
    sensitive << ( grp_randombytes_fu_71_DRBG_ctx_V_ce1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_V_d0);
    sensitive << ( grp_randombytes_fu_71_DRBG_ctx_V_d0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_V_we0);
    sensitive << ( grp_randombytes_fu_71_DRBG_ctx_V_we0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_reseed_counter_o);
    sensitive << ( DRBG_ctx_reseed_counter_i );
    sensitive << ( grp_randombytes_fu_71_DRBG_ctx_reseed_counter_o );
    sensitive << ( grp_randombytes_fu_71_DRBG_ctx_reseed_counter_o_ap_vld );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DRBG_ctx_reseed_counter_o_ap_vld);
    sensitive << ( grp_randombytes_fu_71_DRBG_ctx_reseed_counter_o_ap_vld );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state6_on_subcall_done);
    sensitive << ( grp_poly_S3_tobytes_fu_96_ap_done );
    sensitive << ( grp_sample_iid_fu_105_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_owcpa_enc_fu_87_ap_done );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_owcpa_enc_fu_87_ap_done );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_ap_return);
    sensitive << ( grp_owcpa_enc_fu_87_ap_done );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_c_address0);
    sensitive << ( grp_owcpa_enc_fu_87_c_address0 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_c_address1);
    sensitive << ( grp_owcpa_enc_fu_87_c_address1 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_c_ce0);
    sensitive << ( grp_owcpa_enc_fu_87_c_ce0 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_c_ce1);
    sensitive << ( grp_owcpa_enc_fu_87_c_ce1 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_c_d0);
    sensitive << ( grp_owcpa_enc_fu_87_c_d0 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_c_d1);
    sensitive << ( grp_owcpa_enc_fu_87_c_d1 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_c_we0);
    sensitive << ( grp_owcpa_enc_fu_87_c_we0 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_c_we1);
    sensitive << ( grp_owcpa_enc_fu_87_c_we1 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_grp_owcpa_enc_fu_87_ap_start);
    sensitive << ( grp_owcpa_enc_fu_87_ap_start_reg );

    SC_METHOD(thread_grp_poly_S3_tobytes_fu_96_a_coeffs_q0);
    sensitive << ( r_coeffs_q0 );
    sensitive << ( m_coeffs_q0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_poly_S3_tobytes_fu_96_a_coeffs_q1);
    sensitive << ( r_coeffs_q1 );
    sensitive << ( m_coeffs_q1 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_poly_S3_tobytes_fu_96_ap_start);
    sensitive << ( grp_poly_S3_tobytes_fu_96_ap_start_reg );

    SC_METHOD(thread_grp_poly_S3_tobytes_fu_96_msg_offset);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_randombytes_fu_71_ap_start);
    sensitive << ( grp_randombytes_fu_71_ap_start_reg );

    SC_METHOD(thread_grp_sample_iid_fu_105_ap_start);
    sensitive << ( grp_sample_iid_fu_105_ap_start_reg );

    SC_METHOD(thread_grp_sample_iid_fu_105_uniformbytes_offset);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_sha3_256_fu_62_ap_start);
    sensitive << ( grp_sha3_256_fu_62_ap_start_reg );

    SC_METHOD(thread_k_address0);
    sensitive << ( grp_sha3_256_fu_62_output_r_address0 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_k_ce0);
    sensitive << ( grp_sha3_256_fu_62_output_r_ce0 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_k_d0);
    sensitive << ( grp_sha3_256_fu_62_output_r_d0 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_k_we0);
    sensitive << ( grp_sha3_256_fu_62_output_r_we0 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_m_coeffs_address0);
    sensitive << ( grp_poly_S3_tobytes_fu_96_a_coeffs_address0 );
    sensitive << ( grp_sample_iid_fu_105_r_coeffs_address0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_m_coeffs_ce0);
    sensitive << ( grp_poly_S3_tobytes_fu_96_a_coeffs_ce0 );
    sensitive << ( grp_sample_iid_fu_105_r_coeffs_ce0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_m_coeffs_ce1);
    sensitive << ( grp_poly_S3_tobytes_fu_96_a_coeffs_ce1 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_m_coeffs_we0);
    sensitive << ( grp_sample_iid_fu_105_r_coeffs_we0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_pk_address0);
    sensitive << ( grp_owcpa_enc_fu_87_pk_address0 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_pk_address1);
    sensitive << ( grp_owcpa_enc_fu_87_pk_address1 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_pk_ce0);
    sensitive << ( grp_owcpa_enc_fu_87_pk_ce0 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_pk_ce1);
    sensitive << ( grp_owcpa_enc_fu_87_pk_ce1 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_r_coeffs_address0);
    sensitive << ( grp_poly_S3_tobytes_fu_96_a_coeffs_address0 );
    sensitive << ( grp_sample_iid_fu_105_r_coeffs_address0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_r_coeffs_ce0);
    sensitive << ( grp_poly_S3_tobytes_fu_96_a_coeffs_ce0 );
    sensitive << ( grp_sample_iid_fu_105_r_coeffs_ce0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_r_coeffs_ce1);
    sensitive << ( grp_poly_S3_tobytes_fu_96_a_coeffs_ce1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_r_coeffs_we0);
    sensitive << ( grp_sample_iid_fu_105_r_coeffs_we0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_rm_address0);
    sensitive << ( grp_sha3_256_fu_62_input_r_address0 );
    sensitive << ( grp_owcpa_enc_fu_87_rm_address0 );
    sensitive << ( grp_poly_S3_tobytes_fu_96_msg_address0 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_rm_ce0);
    sensitive << ( grp_sha3_256_fu_62_input_r_ce0 );
    sensitive << ( grp_owcpa_enc_fu_87_rm_ce0 );
    sensitive << ( grp_poly_S3_tobytes_fu_96_msg_ce0 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_rm_seed_address0);
    sensitive << ( grp_randombytes_fu_71_x_address0 );
    sensitive << ( grp_sample_iid_fu_105_uniformbytes_address0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_rm_seed_ce0);
    sensitive << ( grp_randombytes_fu_71_x_ce0 );
    sensitive << ( grp_sample_iid_fu_105_uniformbytes_ce0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_rm_seed_we0);
    sensitive << ( grp_randombytes_fu_71_x_we0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_rm_we0);
    sensitive << ( grp_poly_S3_tobytes_fu_96_msg_we0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_sha3_256_fu_62_ap_done );
    sensitive << ( grp_randombytes_fu_71_ap_done );
    sensitive << ( grp_owcpa_enc_fu_87_ap_done );
    sensitive << ( grp_poly_S3_tobytes_fu_96_ap_done );
    sensitive << ( grp_sample_iid_fu_105_ap_done );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_state6_on_subcall_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000000000001";
    grp_sha3_256_fu_62_ap_start_reg = SC_LOGIC_0;
    grp_randombytes_fu_71_ap_start_reg = SC_LOGIC_0;
    grp_owcpa_enc_fu_87_ap_start_reg = SC_LOGIC_0;
    grp_poly_S3_tobytes_fu_96_ap_start_reg = SC_LOGIC_0;
    grp_sample_iid_fu_105_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "crypto_kem_enc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, c_address0, "(port)c_address0");
    sc_trace(mVcdFile, c_ce0, "(port)c_ce0");
    sc_trace(mVcdFile, c_we0, "(port)c_we0");
    sc_trace(mVcdFile, c_d0, "(port)c_d0");
    sc_trace(mVcdFile, c_address1, "(port)c_address1");
    sc_trace(mVcdFile, c_ce1, "(port)c_ce1");
    sc_trace(mVcdFile, c_we1, "(port)c_we1");
    sc_trace(mVcdFile, c_d1, "(port)c_d1");
    sc_trace(mVcdFile, k_address0, "(port)k_address0");
    sc_trace(mVcdFile, k_ce0, "(port)k_ce0");
    sc_trace(mVcdFile, k_we0, "(port)k_we0");
    sc_trace(mVcdFile, k_d0, "(port)k_d0");
    sc_trace(mVcdFile, pk_address0, "(port)pk_address0");
    sc_trace(mVcdFile, pk_ce0, "(port)pk_ce0");
    sc_trace(mVcdFile, pk_q0, "(port)pk_q0");
    sc_trace(mVcdFile, pk_address1, "(port)pk_address1");
    sc_trace(mVcdFile, pk_ce1, "(port)pk_ce1");
    sc_trace(mVcdFile, pk_q1, "(port)pk_q1");
    sc_trace(mVcdFile, DRBG_ctx_V_address0, "(port)DRBG_ctx_V_address0");
    sc_trace(mVcdFile, DRBG_ctx_V_ce0, "(port)DRBG_ctx_V_ce0");
    sc_trace(mVcdFile, DRBG_ctx_V_we0, "(port)DRBG_ctx_V_we0");
    sc_trace(mVcdFile, DRBG_ctx_V_d0, "(port)DRBG_ctx_V_d0");
    sc_trace(mVcdFile, DRBG_ctx_V_q0, "(port)DRBG_ctx_V_q0");
    sc_trace(mVcdFile, DRBG_ctx_V_address1, "(port)DRBG_ctx_V_address1");
    sc_trace(mVcdFile, DRBG_ctx_V_ce1, "(port)DRBG_ctx_V_ce1");
    sc_trace(mVcdFile, DRBG_ctx_V_q1, "(port)DRBG_ctx_V_q1");
    sc_trace(mVcdFile, DRBG_ctx_Key_address0, "(port)DRBG_ctx_Key_address0");
    sc_trace(mVcdFile, DRBG_ctx_Key_ce0, "(port)DRBG_ctx_Key_ce0");
    sc_trace(mVcdFile, DRBG_ctx_Key_we0, "(port)DRBG_ctx_Key_we0");
    sc_trace(mVcdFile, DRBG_ctx_Key_d0, "(port)DRBG_ctx_Key_d0");
    sc_trace(mVcdFile, DRBG_ctx_Key_q0, "(port)DRBG_ctx_Key_q0");
    sc_trace(mVcdFile, DRBG_ctx_Key_address1, "(port)DRBG_ctx_Key_address1");
    sc_trace(mVcdFile, DRBG_ctx_Key_ce1, "(port)DRBG_ctx_Key_ce1");
    sc_trace(mVcdFile, DRBG_ctx_Key_q1, "(port)DRBG_ctx_Key_q1");
    sc_trace(mVcdFile, DRBG_ctx_reseed_counter_i, "(port)DRBG_ctx_reseed_counter_i");
    sc_trace(mVcdFile, DRBG_ctx_reseed_counter_o, "(port)DRBG_ctx_reseed_counter_o");
    sc_trace(mVcdFile, DRBG_ctx_reseed_counter_o_ap_vld, "(port)DRBG_ctx_reseed_counter_o_ap_vld");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, r_coeffs_address0, "r_coeffs_address0");
    sc_trace(mVcdFile, r_coeffs_ce0, "r_coeffs_ce0");
    sc_trace(mVcdFile, r_coeffs_we0, "r_coeffs_we0");
    sc_trace(mVcdFile, r_coeffs_q0, "r_coeffs_q0");
    sc_trace(mVcdFile, r_coeffs_ce1, "r_coeffs_ce1");
    sc_trace(mVcdFile, r_coeffs_q1, "r_coeffs_q1");
    sc_trace(mVcdFile, m_coeffs_address0, "m_coeffs_address0");
    sc_trace(mVcdFile, m_coeffs_ce0, "m_coeffs_ce0");
    sc_trace(mVcdFile, m_coeffs_we0, "m_coeffs_we0");
    sc_trace(mVcdFile, m_coeffs_q0, "m_coeffs_q0");
    sc_trace(mVcdFile, m_coeffs_ce1, "m_coeffs_ce1");
    sc_trace(mVcdFile, m_coeffs_q1, "m_coeffs_q1");
    sc_trace(mVcdFile, rm_address0, "rm_address0");
    sc_trace(mVcdFile, rm_ce0, "rm_ce0");
    sc_trace(mVcdFile, rm_we0, "rm_we0");
    sc_trace(mVcdFile, rm_q0, "rm_q0");
    sc_trace(mVcdFile, rm_seed_address0, "rm_seed_address0");
    sc_trace(mVcdFile, rm_seed_ce0, "rm_seed_ce0");
    sc_trace(mVcdFile, rm_seed_we0, "rm_seed_we0");
    sc_trace(mVcdFile, rm_seed_q0, "rm_seed_q0");
    sc_trace(mVcdFile, grp_sha3_256_fu_62_ap_start, "grp_sha3_256_fu_62_ap_start");
    sc_trace(mVcdFile, grp_sha3_256_fu_62_ap_done, "grp_sha3_256_fu_62_ap_done");
    sc_trace(mVcdFile, grp_sha3_256_fu_62_ap_idle, "grp_sha3_256_fu_62_ap_idle");
    sc_trace(mVcdFile, grp_sha3_256_fu_62_ap_ready, "grp_sha3_256_fu_62_ap_ready");
    sc_trace(mVcdFile, grp_sha3_256_fu_62_output_r_address0, "grp_sha3_256_fu_62_output_r_address0");
    sc_trace(mVcdFile, grp_sha3_256_fu_62_output_r_ce0, "grp_sha3_256_fu_62_output_r_ce0");
    sc_trace(mVcdFile, grp_sha3_256_fu_62_output_r_we0, "grp_sha3_256_fu_62_output_r_we0");
    sc_trace(mVcdFile, grp_sha3_256_fu_62_output_r_d0, "grp_sha3_256_fu_62_output_r_d0");
    sc_trace(mVcdFile, grp_sha3_256_fu_62_input_r_address0, "grp_sha3_256_fu_62_input_r_address0");
    sc_trace(mVcdFile, grp_sha3_256_fu_62_input_r_ce0, "grp_sha3_256_fu_62_input_r_ce0");
    sc_trace(mVcdFile, grp_randombytes_fu_71_ap_start, "grp_randombytes_fu_71_ap_start");
    sc_trace(mVcdFile, grp_randombytes_fu_71_ap_done, "grp_randombytes_fu_71_ap_done");
    sc_trace(mVcdFile, grp_randombytes_fu_71_ap_idle, "grp_randombytes_fu_71_ap_idle");
    sc_trace(mVcdFile, grp_randombytes_fu_71_ap_ready, "grp_randombytes_fu_71_ap_ready");
    sc_trace(mVcdFile, grp_randombytes_fu_71_x_address0, "grp_randombytes_fu_71_x_address0");
    sc_trace(mVcdFile, grp_randombytes_fu_71_x_ce0, "grp_randombytes_fu_71_x_ce0");
    sc_trace(mVcdFile, grp_randombytes_fu_71_x_we0, "grp_randombytes_fu_71_x_we0");
    sc_trace(mVcdFile, grp_randombytes_fu_71_x_d0, "grp_randombytes_fu_71_x_d0");
    sc_trace(mVcdFile, grp_randombytes_fu_71_DRBG_ctx_V_address0, "grp_randombytes_fu_71_DRBG_ctx_V_address0");
    sc_trace(mVcdFile, grp_randombytes_fu_71_DRBG_ctx_V_ce0, "grp_randombytes_fu_71_DRBG_ctx_V_ce0");
    sc_trace(mVcdFile, grp_randombytes_fu_71_DRBG_ctx_V_we0, "grp_randombytes_fu_71_DRBG_ctx_V_we0");
    sc_trace(mVcdFile, grp_randombytes_fu_71_DRBG_ctx_V_d0, "grp_randombytes_fu_71_DRBG_ctx_V_d0");
    sc_trace(mVcdFile, grp_randombytes_fu_71_DRBG_ctx_V_address1, "grp_randombytes_fu_71_DRBG_ctx_V_address1");
    sc_trace(mVcdFile, grp_randombytes_fu_71_DRBG_ctx_V_ce1, "grp_randombytes_fu_71_DRBG_ctx_V_ce1");
    sc_trace(mVcdFile, grp_randombytes_fu_71_DRBG_ctx_Key_address0, "grp_randombytes_fu_71_DRBG_ctx_Key_address0");
    sc_trace(mVcdFile, grp_randombytes_fu_71_DRBG_ctx_Key_ce0, "grp_randombytes_fu_71_DRBG_ctx_Key_ce0");
    sc_trace(mVcdFile, grp_randombytes_fu_71_DRBG_ctx_Key_we0, "grp_randombytes_fu_71_DRBG_ctx_Key_we0");
    sc_trace(mVcdFile, grp_randombytes_fu_71_DRBG_ctx_Key_d0, "grp_randombytes_fu_71_DRBG_ctx_Key_d0");
    sc_trace(mVcdFile, grp_randombytes_fu_71_DRBG_ctx_Key_address1, "grp_randombytes_fu_71_DRBG_ctx_Key_address1");
    sc_trace(mVcdFile, grp_randombytes_fu_71_DRBG_ctx_Key_ce1, "grp_randombytes_fu_71_DRBG_ctx_Key_ce1");
    sc_trace(mVcdFile, grp_randombytes_fu_71_DRBG_ctx_reseed_counter_o, "grp_randombytes_fu_71_DRBG_ctx_reseed_counter_o");
    sc_trace(mVcdFile, grp_randombytes_fu_71_DRBG_ctx_reseed_counter_o_ap_vld, "grp_randombytes_fu_71_DRBG_ctx_reseed_counter_o_ap_vld");
    sc_trace(mVcdFile, grp_owcpa_enc_fu_87_ap_start, "grp_owcpa_enc_fu_87_ap_start");
    sc_trace(mVcdFile, grp_owcpa_enc_fu_87_ap_done, "grp_owcpa_enc_fu_87_ap_done");
    sc_trace(mVcdFile, grp_owcpa_enc_fu_87_ap_idle, "grp_owcpa_enc_fu_87_ap_idle");
    sc_trace(mVcdFile, grp_owcpa_enc_fu_87_ap_ready, "grp_owcpa_enc_fu_87_ap_ready");
    sc_trace(mVcdFile, grp_owcpa_enc_fu_87_c_address0, "grp_owcpa_enc_fu_87_c_address0");
    sc_trace(mVcdFile, grp_owcpa_enc_fu_87_c_ce0, "grp_owcpa_enc_fu_87_c_ce0");
    sc_trace(mVcdFile, grp_owcpa_enc_fu_87_c_we0, "grp_owcpa_enc_fu_87_c_we0");
    sc_trace(mVcdFile, grp_owcpa_enc_fu_87_c_d0, "grp_owcpa_enc_fu_87_c_d0");
    sc_trace(mVcdFile, grp_owcpa_enc_fu_87_c_address1, "grp_owcpa_enc_fu_87_c_address1");
    sc_trace(mVcdFile, grp_owcpa_enc_fu_87_c_ce1, "grp_owcpa_enc_fu_87_c_ce1");
    sc_trace(mVcdFile, grp_owcpa_enc_fu_87_c_we1, "grp_owcpa_enc_fu_87_c_we1");
    sc_trace(mVcdFile, grp_owcpa_enc_fu_87_c_d1, "grp_owcpa_enc_fu_87_c_d1");
    sc_trace(mVcdFile, grp_owcpa_enc_fu_87_rm_address0, "grp_owcpa_enc_fu_87_rm_address0");
    sc_trace(mVcdFile, grp_owcpa_enc_fu_87_rm_ce0, "grp_owcpa_enc_fu_87_rm_ce0");
    sc_trace(mVcdFile, grp_owcpa_enc_fu_87_pk_address0, "grp_owcpa_enc_fu_87_pk_address0");
    sc_trace(mVcdFile, grp_owcpa_enc_fu_87_pk_ce0, "grp_owcpa_enc_fu_87_pk_ce0");
    sc_trace(mVcdFile, grp_owcpa_enc_fu_87_pk_address1, "grp_owcpa_enc_fu_87_pk_address1");
    sc_trace(mVcdFile, grp_owcpa_enc_fu_87_pk_ce1, "grp_owcpa_enc_fu_87_pk_ce1");
    sc_trace(mVcdFile, grp_poly_S3_tobytes_fu_96_ap_start, "grp_poly_S3_tobytes_fu_96_ap_start");
    sc_trace(mVcdFile, grp_poly_S3_tobytes_fu_96_ap_done, "grp_poly_S3_tobytes_fu_96_ap_done");
    sc_trace(mVcdFile, grp_poly_S3_tobytes_fu_96_ap_idle, "grp_poly_S3_tobytes_fu_96_ap_idle");
    sc_trace(mVcdFile, grp_poly_S3_tobytes_fu_96_ap_ready, "grp_poly_S3_tobytes_fu_96_ap_ready");
    sc_trace(mVcdFile, grp_poly_S3_tobytes_fu_96_msg_address0, "grp_poly_S3_tobytes_fu_96_msg_address0");
    sc_trace(mVcdFile, grp_poly_S3_tobytes_fu_96_msg_ce0, "grp_poly_S3_tobytes_fu_96_msg_ce0");
    sc_trace(mVcdFile, grp_poly_S3_tobytes_fu_96_msg_we0, "grp_poly_S3_tobytes_fu_96_msg_we0");
    sc_trace(mVcdFile, grp_poly_S3_tobytes_fu_96_msg_d0, "grp_poly_S3_tobytes_fu_96_msg_d0");
    sc_trace(mVcdFile, grp_poly_S3_tobytes_fu_96_msg_offset, "grp_poly_S3_tobytes_fu_96_msg_offset");
    sc_trace(mVcdFile, grp_poly_S3_tobytes_fu_96_a_coeffs_address0, "grp_poly_S3_tobytes_fu_96_a_coeffs_address0");
    sc_trace(mVcdFile, grp_poly_S3_tobytes_fu_96_a_coeffs_ce0, "grp_poly_S3_tobytes_fu_96_a_coeffs_ce0");
    sc_trace(mVcdFile, grp_poly_S3_tobytes_fu_96_a_coeffs_q0, "grp_poly_S3_tobytes_fu_96_a_coeffs_q0");
    sc_trace(mVcdFile, grp_poly_S3_tobytes_fu_96_a_coeffs_address1, "grp_poly_S3_tobytes_fu_96_a_coeffs_address1");
    sc_trace(mVcdFile, grp_poly_S3_tobytes_fu_96_a_coeffs_ce1, "grp_poly_S3_tobytes_fu_96_a_coeffs_ce1");
    sc_trace(mVcdFile, grp_poly_S3_tobytes_fu_96_a_coeffs_q1, "grp_poly_S3_tobytes_fu_96_a_coeffs_q1");
    sc_trace(mVcdFile, grp_sample_iid_fu_105_ap_start, "grp_sample_iid_fu_105_ap_start");
    sc_trace(mVcdFile, grp_sample_iid_fu_105_ap_done, "grp_sample_iid_fu_105_ap_done");
    sc_trace(mVcdFile, grp_sample_iid_fu_105_ap_idle, "grp_sample_iid_fu_105_ap_idle");
    sc_trace(mVcdFile, grp_sample_iid_fu_105_ap_ready, "grp_sample_iid_fu_105_ap_ready");
    sc_trace(mVcdFile, grp_sample_iid_fu_105_r_coeffs_address0, "grp_sample_iid_fu_105_r_coeffs_address0");
    sc_trace(mVcdFile, grp_sample_iid_fu_105_r_coeffs_ce0, "grp_sample_iid_fu_105_r_coeffs_ce0");
    sc_trace(mVcdFile, grp_sample_iid_fu_105_r_coeffs_we0, "grp_sample_iid_fu_105_r_coeffs_we0");
    sc_trace(mVcdFile, grp_sample_iid_fu_105_r_coeffs_d0, "grp_sample_iid_fu_105_r_coeffs_d0");
    sc_trace(mVcdFile, grp_sample_iid_fu_105_uniformbytes_address0, "grp_sample_iid_fu_105_uniformbytes_address0");
    sc_trace(mVcdFile, grp_sample_iid_fu_105_uniformbytes_ce0, "grp_sample_iid_fu_105_uniformbytes_ce0");
    sc_trace(mVcdFile, grp_sample_iid_fu_105_uniformbytes_offset, "grp_sample_iid_fu_105_uniformbytes_offset");
    sc_trace(mVcdFile, grp_sha3_256_fu_62_ap_start_reg, "grp_sha3_256_fu_62_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, grp_randombytes_fu_71_ap_start_reg, "grp_randombytes_fu_71_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_owcpa_enc_fu_87_ap_start_reg, "grp_owcpa_enc_fu_87_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, grp_poly_S3_tobytes_fu_96_ap_start_reg, "grp_poly_S3_tobytes_fu_96_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_sample_iid_fu_105_ap_start_reg, "grp_sample_iid_fu_105_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_state6_on_subcall_done, "ap_block_state6_on_subcall_done");
#endif

    }
    mHdltvinHandle.open("crypto_kem_enc.hdltvin.dat");
    mHdltvoutHandle.open("crypto_kem_enc.hdltvout.dat");
}

crypto_kem_enc::~crypto_kem_enc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete r_coeffs_U;
    delete m_coeffs_U;
    delete rm_U;
    delete rm_seed_U;
    delete grp_sha3_256_fu_62;
    delete grp_randombytes_fu_71;
    delete grp_owcpa_enc_fu_87;
    delete grp_poly_S3_tobytes_fu_96;
    delete grp_sample_iid_fu_105;
}

void crypto_kem_enc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_owcpa_enc_fu_87_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
            grp_owcpa_enc_fu_87_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_owcpa_enc_fu_87_ap_ready.read())) {
            grp_owcpa_enc_fu_87_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_poly_S3_tobytes_fu_96_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
            grp_poly_S3_tobytes_fu_96_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_poly_S3_tobytes_fu_96_ap_ready.read())) {
            grp_poly_S3_tobytes_fu_96_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_randombytes_fu_71_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            grp_randombytes_fu_71_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_randombytes_fu_71_ap_ready.read())) {
            grp_randombytes_fu_71_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_sample_iid_fu_105_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
            grp_sample_iid_fu_105_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sample_iid_fu_105_ap_ready.read())) {
            grp_sample_iid_fu_105_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_sha3_256_fu_62_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            grp_sha3_256_fu_62_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha3_256_fu_62_ap_ready.read())) {
            grp_sha3_256_fu_62_ap_start_reg = ap_const_logic_0;
        }
    }
}

void crypto_kem_enc::thread_DRBG_ctx_Key_address0() {
    DRBG_ctx_Key_address0 = grp_randombytes_fu_71_DRBG_ctx_Key_address0.read();
}

void crypto_kem_enc::thread_DRBG_ctx_Key_address1() {
    DRBG_ctx_Key_address1 = grp_randombytes_fu_71_DRBG_ctx_Key_address1.read();
}

void crypto_kem_enc::thread_DRBG_ctx_Key_ce0() {
    DRBG_ctx_Key_ce0 = grp_randombytes_fu_71_DRBG_ctx_Key_ce0.read();
}

void crypto_kem_enc::thread_DRBG_ctx_Key_ce1() {
    DRBG_ctx_Key_ce1 = grp_randombytes_fu_71_DRBG_ctx_Key_ce1.read();
}

void crypto_kem_enc::thread_DRBG_ctx_Key_d0() {
    DRBG_ctx_Key_d0 = grp_randombytes_fu_71_DRBG_ctx_Key_d0.read();
}

void crypto_kem_enc::thread_DRBG_ctx_Key_we0() {
    DRBG_ctx_Key_we0 = grp_randombytes_fu_71_DRBG_ctx_Key_we0.read();
}

void crypto_kem_enc::thread_DRBG_ctx_V_address0() {
    DRBG_ctx_V_address0 = grp_randombytes_fu_71_DRBG_ctx_V_address0.read();
}

void crypto_kem_enc::thread_DRBG_ctx_V_address1() {
    DRBG_ctx_V_address1 = grp_randombytes_fu_71_DRBG_ctx_V_address1.read();
}

void crypto_kem_enc::thread_DRBG_ctx_V_ce0() {
    DRBG_ctx_V_ce0 = grp_randombytes_fu_71_DRBG_ctx_V_ce0.read();
}

void crypto_kem_enc::thread_DRBG_ctx_V_ce1() {
    DRBG_ctx_V_ce1 = grp_randombytes_fu_71_DRBG_ctx_V_ce1.read();
}

void crypto_kem_enc::thread_DRBG_ctx_V_d0() {
    DRBG_ctx_V_d0 = grp_randombytes_fu_71_DRBG_ctx_V_d0.read();
}

void crypto_kem_enc::thread_DRBG_ctx_V_we0() {
    DRBG_ctx_V_we0 = grp_randombytes_fu_71_DRBG_ctx_V_we0.read();
}

void crypto_kem_enc::thread_DRBG_ctx_reseed_counter_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, grp_randombytes_fu_71_DRBG_ctx_reseed_counter_o_ap_vld.read()))) {
        DRBG_ctx_reseed_counter_o = grp_randombytes_fu_71_DRBG_ctx_reseed_counter_o.read();
    } else {
        DRBG_ctx_reseed_counter_o = DRBG_ctx_reseed_counter_i.read();
    }
}

void crypto_kem_enc::thread_DRBG_ctx_reseed_counter_o_ap_vld() {
    DRBG_ctx_reseed_counter_o_ap_vld = grp_randombytes_fu_71_DRBG_ctx_reseed_counter_o_ap_vld.read();
}

void crypto_kem_enc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void crypto_kem_enc::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void crypto_kem_enc::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void crypto_kem_enc::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void crypto_kem_enc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void crypto_kem_enc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void crypto_kem_enc::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void crypto_kem_enc::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void crypto_kem_enc::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void crypto_kem_enc::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void crypto_kem_enc::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void crypto_kem_enc::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void crypto_kem_enc::thread_ap_block_state6_on_subcall_done() {
    ap_block_state6_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_sample_iid_fu_105_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_poly_S3_tobytes_fu_96_ap_done.read()));
}

void crypto_kem_enc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(grp_owcpa_enc_fu_87_ap_done.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void crypto_kem_enc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void crypto_kem_enc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(grp_owcpa_enc_fu_87_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void crypto_kem_enc::thread_ap_return() {
    ap_return = ap_const_lv32_0;
}

void crypto_kem_enc::thread_c_address0() {
    c_address0 = grp_owcpa_enc_fu_87_c_address0.read();
}

void crypto_kem_enc::thread_c_address1() {
    c_address1 = grp_owcpa_enc_fu_87_c_address1.read();
}

void crypto_kem_enc::thread_c_ce0() {
    c_ce0 = grp_owcpa_enc_fu_87_c_ce0.read();
}

void crypto_kem_enc::thread_c_ce1() {
    c_ce1 = grp_owcpa_enc_fu_87_c_ce1.read();
}

void crypto_kem_enc::thread_c_d0() {
    c_d0 = grp_owcpa_enc_fu_87_c_d0.read();
}

void crypto_kem_enc::thread_c_d1() {
    c_d1 = grp_owcpa_enc_fu_87_c_d1.read();
}

void crypto_kem_enc::thread_c_we0() {
    c_we0 = grp_owcpa_enc_fu_87_c_we0.read();
}

void crypto_kem_enc::thread_c_we1() {
    c_we1 = grp_owcpa_enc_fu_87_c_we1.read();
}

void crypto_kem_enc::thread_grp_owcpa_enc_fu_87_ap_start() {
    grp_owcpa_enc_fu_87_ap_start = grp_owcpa_enc_fu_87_ap_start_reg.read();
}

void crypto_kem_enc::thread_grp_poly_S3_tobytes_fu_96_a_coeffs_q0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_poly_S3_tobytes_fu_96_a_coeffs_q0 = m_coeffs_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_poly_S3_tobytes_fu_96_a_coeffs_q0 = r_coeffs_q0.read();
    } else {
        grp_poly_S3_tobytes_fu_96_a_coeffs_q0 = "XXXXXXXXXXXXXXXX";
    }
}

void crypto_kem_enc::thread_grp_poly_S3_tobytes_fu_96_a_coeffs_q1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_poly_S3_tobytes_fu_96_a_coeffs_q1 = m_coeffs_q1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_poly_S3_tobytes_fu_96_a_coeffs_q1 = r_coeffs_q1.read();
    } else {
        grp_poly_S3_tobytes_fu_96_a_coeffs_q1 = "XXXXXXXXXXXXXXXX";
    }
}

void crypto_kem_enc::thread_grp_poly_S3_tobytes_fu_96_ap_start() {
    grp_poly_S3_tobytes_fu_96_ap_start = grp_poly_S3_tobytes_fu_96_ap_start_reg.read();
}

void crypto_kem_enc::thread_grp_poly_S3_tobytes_fu_96_msg_offset() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_poly_S3_tobytes_fu_96_msg_offset = ap_const_lv10_8C;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_poly_S3_tobytes_fu_96_msg_offset = ap_const_lv10_0;
    } else {
        grp_poly_S3_tobytes_fu_96_msg_offset =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void crypto_kem_enc::thread_grp_randombytes_fu_71_ap_start() {
    grp_randombytes_fu_71_ap_start = grp_randombytes_fu_71_ap_start_reg.read();
}

void crypto_kem_enc::thread_grp_sample_iid_fu_105_ap_start() {
    grp_sample_iid_fu_105_ap_start = grp_sample_iid_fu_105_ap_start_reg.read();
}

void crypto_kem_enc::thread_grp_sample_iid_fu_105_uniformbytes_offset() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_sample_iid_fu_105_uniformbytes_offset = ap_const_lv12_2BC;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_sample_iid_fu_105_uniformbytes_offset = ap_const_lv12_0;
    } else {
        grp_sample_iid_fu_105_uniformbytes_offset =  (sc_lv<12>) ("XXXXXXXXXXXX");
    }
}

void crypto_kem_enc::thread_grp_sha3_256_fu_62_ap_start() {
    grp_sha3_256_fu_62_ap_start = grp_sha3_256_fu_62_ap_start_reg.read();
}

void crypto_kem_enc::thread_k_address0() {
    k_address0 = grp_sha3_256_fu_62_output_r_address0.read();
}

void crypto_kem_enc::thread_k_ce0() {
    k_ce0 = grp_sha3_256_fu_62_output_r_ce0.read();
}

void crypto_kem_enc::thread_k_d0() {
    k_d0 = grp_sha3_256_fu_62_output_r_d0.read();
}

void crypto_kem_enc::thread_k_we0() {
    k_we0 = grp_sha3_256_fu_62_output_r_we0.read();
}

void crypto_kem_enc::thread_m_coeffs_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        m_coeffs_address0 = grp_sample_iid_fu_105_r_coeffs_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        m_coeffs_address0 = grp_poly_S3_tobytes_fu_96_a_coeffs_address0.read();
    } else {
        m_coeffs_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void crypto_kem_enc::thread_m_coeffs_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        m_coeffs_ce0 = grp_sample_iid_fu_105_r_coeffs_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        m_coeffs_ce0 = grp_poly_S3_tobytes_fu_96_a_coeffs_ce0.read();
    } else {
        m_coeffs_ce0 = ap_const_logic_0;
    }
}

void crypto_kem_enc::thread_m_coeffs_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        m_coeffs_ce1 = grp_poly_S3_tobytes_fu_96_a_coeffs_ce1.read();
    } else {
        m_coeffs_ce1 = ap_const_logic_0;
    }
}

void crypto_kem_enc::thread_m_coeffs_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        m_coeffs_we0 = grp_sample_iid_fu_105_r_coeffs_we0.read();
    } else {
        m_coeffs_we0 = ap_const_logic_0;
    }
}

void crypto_kem_enc::thread_pk_address0() {
    pk_address0 = grp_owcpa_enc_fu_87_pk_address0.read();
}

void crypto_kem_enc::thread_pk_address1() {
    pk_address1 = grp_owcpa_enc_fu_87_pk_address1.read();
}

void crypto_kem_enc::thread_pk_ce0() {
    pk_ce0 = grp_owcpa_enc_fu_87_pk_ce0.read();
}

void crypto_kem_enc::thread_pk_ce1() {
    pk_ce1 = grp_owcpa_enc_fu_87_pk_ce1.read();
}

void crypto_kem_enc::thread_r_coeffs_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        r_coeffs_address0 = grp_sample_iid_fu_105_r_coeffs_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        r_coeffs_address0 = grp_poly_S3_tobytes_fu_96_a_coeffs_address0.read();
    } else {
        r_coeffs_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void crypto_kem_enc::thread_r_coeffs_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        r_coeffs_ce0 = grp_sample_iid_fu_105_r_coeffs_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        r_coeffs_ce0 = grp_poly_S3_tobytes_fu_96_a_coeffs_ce0.read();
    } else {
        r_coeffs_ce0 = ap_const_logic_0;
    }
}

void crypto_kem_enc::thread_r_coeffs_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        r_coeffs_ce1 = grp_poly_S3_tobytes_fu_96_a_coeffs_ce1.read();
    } else {
        r_coeffs_ce1 = ap_const_logic_0;
    }
}

void crypto_kem_enc::thread_r_coeffs_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        r_coeffs_we0 = grp_sample_iid_fu_105_r_coeffs_we0.read();
    } else {
        r_coeffs_we0 = ap_const_logic_0;
    }
}

void crypto_kem_enc::thread_rm_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        rm_address0 = grp_poly_S3_tobytes_fu_96_msg_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        rm_address0 = grp_owcpa_enc_fu_87_rm_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        rm_address0 = grp_sha3_256_fu_62_input_r_address0.read();
    } else {
        rm_address0 =  (sc_lv<9>) ("XXXXXXXXX");
    }
}

void crypto_kem_enc::thread_rm_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        rm_ce0 = grp_poly_S3_tobytes_fu_96_msg_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        rm_ce0 = grp_owcpa_enc_fu_87_rm_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        rm_ce0 = grp_sha3_256_fu_62_input_r_ce0.read();
    } else {
        rm_ce0 = ap_const_logic_0;
    }
}

void crypto_kem_enc::thread_rm_seed_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        rm_seed_address0 = grp_sample_iid_fu_105_uniformbytes_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        rm_seed_address0 = grp_randombytes_fu_71_x_address0.read();
    } else {
        rm_seed_address0 =  (sc_lv<11>) ("XXXXXXXXXXX");
    }
}

void crypto_kem_enc::thread_rm_seed_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        rm_seed_ce0 = grp_sample_iid_fu_105_uniformbytes_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        rm_seed_ce0 = grp_randombytes_fu_71_x_ce0.read();
    } else {
        rm_seed_ce0 = ap_const_logic_0;
    }
}

void crypto_kem_enc::thread_rm_seed_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        rm_seed_we0 = grp_randombytes_fu_71_x_we0.read();
    } else {
        rm_seed_we0 = ap_const_logic_0;
    }
}

void crypto_kem_enc::thread_rm_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        rm_we0 = grp_poly_S3_tobytes_fu_96_msg_we0.read();
    } else {
        rm_we0 = ap_const_logic_0;
    }
}

void crypto_kem_enc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_randombytes_fu_71_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_sample_iid_fu_105_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_block_state6_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(grp_poly_S3_tobytes_fu_96_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(grp_sha3_256_fu_62_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(grp_owcpa_enc_fu_87_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<12>) ("XXXXXXXXXXXX");
            break;
    }
}

void crypto_kem_enc::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_address0\" :  \"" << c_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_ce0\" :  \"" << c_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_we0\" :  \"" << c_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_d0\" :  \"" << c_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_address1\" :  \"" << c_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_ce1\" :  \"" << c_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_we1\" :  \"" << c_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_d1\" :  \"" << c_d1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"k_address0\" :  \"" << k_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"k_ce0\" :  \"" << k_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"k_we0\" :  \"" << k_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"k_d0\" :  \"" << k_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pk_address0\" :  \"" << pk_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pk_ce0\" :  \"" << pk_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pk_q0\" :  \"" << pk_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pk_address1\" :  \"" << pk_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pk_ce1\" :  \"" << pk_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pk_q1\" :  \"" << pk_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_V_address0\" :  \"" << DRBG_ctx_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_V_ce0\" :  \"" << DRBG_ctx_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_V_we0\" :  \"" << DRBG_ctx_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_V_d0\" :  \"" << DRBG_ctx_V_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"DRBG_ctx_V_q0\" :  \"" << DRBG_ctx_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_V_address1\" :  \"" << DRBG_ctx_V_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_V_ce1\" :  \"" << DRBG_ctx_V_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"DRBG_ctx_V_q1\" :  \"" << DRBG_ctx_V_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_Key_address0\" :  \"" << DRBG_ctx_Key_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_Key_ce0\" :  \"" << DRBG_ctx_Key_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_Key_we0\" :  \"" << DRBG_ctx_Key_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_Key_d0\" :  \"" << DRBG_ctx_Key_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"DRBG_ctx_Key_q0\" :  \"" << DRBG_ctx_Key_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_Key_address1\" :  \"" << DRBG_ctx_Key_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_Key_ce1\" :  \"" << DRBG_ctx_Key_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"DRBG_ctx_Key_q1\" :  \"" << DRBG_ctx_Key_q1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"DRBG_ctx_reseed_counter_i\" :  \"" << DRBG_ctx_reseed_counter_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_reseed_counter_o\" :  \"" << DRBG_ctx_reseed_counter_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_reseed_counter_o_ap_vld\" :  \"" << DRBG_ctx_reseed_counter_o_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

