// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module owcpa_enc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        c_address0,
        c_ce0,
        c_we0,
        c_d0,
        c_address1,
        c_ce1,
        c_we1,
        c_d1,
        rm_address0,
        rm_ce0,
        rm_q0,
        pk_address0,
        pk_ce0,
        pk_q0,
        pk_address1,
        pk_ce1,
        pk_q1
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] c_address0;
output   c_ce0;
output   c_we0;
output  [7:0] c_d0;
output  [10:0] c_address1;
output   c_ce1;
output   c_we1;
output  [7:0] c_d1;
output  [8:0] rm_address0;
output   rm_ce0;
input  [7:0] rm_q0;
output  [10:0] pk_address0;
output   pk_ce0;
input  [7:0] pk_q0;
output  [10:0] pk_address1;
output   pk_ce1;
input  [7:0] pk_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg rm_ce0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] liftm_coeffs_addr_reg_350;
wire    ap_CS_fsm_state3;
wire   [9:0] i_13_fu_208_p2;
reg   [9:0] i_13_reg_359;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_i_fu_202_p2;
wire   [12:0] phitmp_fu_245_p2;
wire    ap_CS_fsm_state5;
wire   [9:0] i_14_fu_257_p2;
reg   [9:0] i_14_reg_377;
wire    ap_CS_fsm_state7;
reg   [9:0] m_coeffs_addr_reg_382;
wire   [0:0] exitcond_i5_fu_251_p2;
wire   [9:0] i_15_fu_319_p2;
reg   [9:0] i_15_reg_390;
wire    ap_CS_fsm_state14;
reg   [9:0] ct_coeffs_addr_reg_395;
wire   [0:0] exitcond_fu_313_p2;
reg   [9:0] x1_coeffs_address0;
reg    x1_coeffs_ce0;
reg    x1_coeffs_we0;
reg   [15:0] x1_coeffs_d0;
wire   [15:0] x1_coeffs_q0;
reg   [9:0] x1_coeffs_address1;
reg    x1_coeffs_ce1;
reg    x1_coeffs_we1;
reg   [15:0] x1_coeffs_d1;
wire   [15:0] x1_coeffs_q1;
reg   [9:0] x2_coeffs_address0;
reg    x2_coeffs_ce0;
reg    x2_coeffs_we0;
reg   [15:0] x2_coeffs_d0;
wire   [15:0] x2_coeffs_q0;
reg   [9:0] x2_coeffs_address1;
reg    x2_coeffs_ce1;
reg    x2_coeffs_we1;
wire   [15:0] x2_coeffs_q1;
reg   [9:0] x3_coeffs_address0;
reg    x3_coeffs_ce0;
reg    x3_coeffs_we0;
reg   [15:0] x3_coeffs_d0;
wire   [15:0] x3_coeffs_q0;
wire    grp_poly_lift_fu_164_ap_start;
wire    grp_poly_lift_fu_164_ap_done;
wire    grp_poly_lift_fu_164_ap_idle;
wire    grp_poly_lift_fu_164_ap_ready;
wire   [9:0] grp_poly_lift_fu_164_r_coeffs_address0;
wire    grp_poly_lift_fu_164_r_coeffs_ce0;
wire    grp_poly_lift_fu_164_r_coeffs_we0;
wire   [15:0] grp_poly_lift_fu_164_r_coeffs_d0;
wire   [9:0] grp_poly_lift_fu_164_a_coeffs_address0;
wire    grp_poly_lift_fu_164_a_coeffs_ce0;
wire   [9:0] grp_poly_lift_fu_164_a_coeffs_address1;
wire    grp_poly_lift_fu_164_a_coeffs_ce1;
wire    grp_poly_Sq_frombytes_fu_170_ap_start;
wire    grp_poly_Sq_frombytes_fu_170_ap_done;
wire    grp_poly_Sq_frombytes_fu_170_ap_idle;
wire    grp_poly_Sq_frombytes_fu_170_ap_ready;
wire   [9:0] grp_poly_Sq_frombytes_fu_170_r_coeffs_address0;
wire    grp_poly_Sq_frombytes_fu_170_r_coeffs_ce0;
wire    grp_poly_Sq_frombytes_fu_170_r_coeffs_we0;
wire   [15:0] grp_poly_Sq_frombytes_fu_170_r_coeffs_d0;
wire   [9:0] grp_poly_Sq_frombytes_fu_170_r_coeffs_address1;
wire    grp_poly_Sq_frombytes_fu_170_r_coeffs_ce1;
wire    grp_poly_Sq_frombytes_fu_170_r_coeffs_we1;
wire   [15:0] grp_poly_Sq_frombytes_fu_170_r_coeffs_d1;
wire   [10:0] grp_poly_Sq_frombytes_fu_170_a_address0;
wire    grp_poly_Sq_frombytes_fu_170_a_ce0;
wire   [10:0] grp_poly_Sq_frombytes_fu_170_a_address1;
wire    grp_poly_Sq_frombytes_fu_170_a_ce1;
wire    grp_poly_Sq_tobytes_fu_178_ap_start;
wire    grp_poly_Sq_tobytes_fu_178_ap_done;
wire    grp_poly_Sq_tobytes_fu_178_ap_idle;
wire    grp_poly_Sq_tobytes_fu_178_ap_ready;
wire   [10:0] grp_poly_Sq_tobytes_fu_178_r_address0;
wire    grp_poly_Sq_tobytes_fu_178_r_ce0;
wire    grp_poly_Sq_tobytes_fu_178_r_we0;
wire   [7:0] grp_poly_Sq_tobytes_fu_178_r_d0;
wire   [10:0] grp_poly_Sq_tobytes_fu_178_r_address1;
wire    grp_poly_Sq_tobytes_fu_178_r_ce1;
wire    grp_poly_Sq_tobytes_fu_178_r_we1;
wire   [7:0] grp_poly_Sq_tobytes_fu_178_r_d1;
wire   [9:0] grp_poly_Sq_tobytes_fu_178_a_coeffs_address0;
wire    grp_poly_Sq_tobytes_fu_178_a_coeffs_ce0;
wire    grp_poly_S3_frombytes_fu_185_ap_start;
wire    grp_poly_S3_frombytes_fu_185_ap_done;
wire    grp_poly_S3_frombytes_fu_185_ap_idle;
wire    grp_poly_S3_frombytes_fu_185_ap_ready;
wire   [9:0] grp_poly_S3_frombytes_fu_185_r_coeffs_address0;
wire    grp_poly_S3_frombytes_fu_185_r_coeffs_ce0;
wire    grp_poly_S3_frombytes_fu_185_r_coeffs_we0;
wire   [15:0] grp_poly_S3_frombytes_fu_185_r_coeffs_d0;
wire   [9:0] grp_poly_S3_frombytes_fu_185_r_coeffs_address1;
wire    grp_poly_S3_frombytes_fu_185_r_coeffs_ce1;
wire    grp_poly_S3_frombytes_fu_185_r_coeffs_we1;
wire   [15:0] grp_poly_S3_frombytes_fu_185_r_coeffs_d1;
wire   [8:0] grp_poly_S3_frombytes_fu_185_msg_address0;
wire    grp_poly_S3_frombytes_fu_185_msg_ce0;
reg   [9:0] grp_poly_S3_frombytes_fu_185_msg_offset;
wire    grp_poly_Rq_mul_fu_195_ap_start;
wire    grp_poly_Rq_mul_fu_195_ap_done;
wire    grp_poly_Rq_mul_fu_195_ap_idle;
wire    grp_poly_Rq_mul_fu_195_ap_ready;
wire   [9:0] grp_poly_Rq_mul_fu_195_r_coeffs_address0;
wire    grp_poly_Rq_mul_fu_195_r_coeffs_ce0;
wire    grp_poly_Rq_mul_fu_195_r_coeffs_we0;
wire   [15:0] grp_poly_Rq_mul_fu_195_r_coeffs_d0;
wire   [9:0] grp_poly_Rq_mul_fu_195_a_coeffs_address0;
wire    grp_poly_Rq_mul_fu_195_a_coeffs_ce0;
wire   [9:0] grp_poly_Rq_mul_fu_195_b_coeffs_address0;
wire    grp_poly_Rq_mul_fu_195_b_coeffs_ce0;
reg   [12:0] tmp_i_reg_120;
reg   [9:0] i_i_reg_131;
reg   [9:0] i_i4_reg_142;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
reg   [9:0] i_reg_153;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
reg    grp_poly_lift_fu_164_ap_start_reg;
wire    ap_CS_fsm_state12;
reg    grp_poly_Sq_frombytes_fu_170_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_poly_Sq_tobytes_fu_178_ap_start_reg;
wire    ap_CS_fsm_state16;
reg    grp_poly_S3_frombytes_fu_185_ap_start_reg;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg    grp_poly_Rq_mul_fu_195_ap_start_reg;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_287_i_fu_214_p1;
wire   [63:0] tmp_i6_fu_263_p1;
wire   [63:0] tmp_fu_325_p1;
wire   [15:0] tmp_286_i_cast_fu_225_p1;
wire   [15:0] tmp_288_i_fu_238_p2;
wire   [15:0] tmp_51_i_fu_304_p3;
wire   [15:0] tmp_295_cast_fu_345_p1;
wire   [12:0] tmp_i_cast_fu_219_p2;
wire   [12:0] tmp_240_fu_234_p1;
wire   [12:0] tmp_239_fu_230_p1;
wire   [12:0] tmp_87_fu_268_p4;
wire   [12:0] tmp_241_fu_284_p1;
wire   [12:0] tmp_49_i_cast_fu_278_p2;
wire   [2:0] tmp_90_fu_294_p4;
wire   [12:0] tmp_89_fu_288_p2;
wire   [12:0] tmp_243_fu_335_p1;
wire   [12:0] tmp_242_fu_331_p1;
wire   [12:0] tmp_cast_fu_339_p2;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 grp_poly_lift_fu_164_ap_start_reg = 1'b0;
#0 grp_poly_Sq_frombytes_fu_170_ap_start_reg = 1'b0;
#0 grp_poly_Sq_tobytes_fu_178_ap_start_reg = 1'b0;
#0 grp_poly_S3_frombytes_fu_185_ap_start_reg = 1'b0;
#0 grp_poly_Rq_mul_fu_195_ap_start_reg = 1'b0;
end

poly_lift_b_coeffs #(
    .DataWidth( 16 ),
    .AddressRange( 701 ),
    .AddressWidth( 10 ))
x1_coeffs_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x1_coeffs_address0),
    .ce0(x1_coeffs_ce0),
    .we0(x1_coeffs_we0),
    .d0(x1_coeffs_d0),
    .q0(x1_coeffs_q0),
    .address1(x1_coeffs_address1),
    .ce1(x1_coeffs_ce1),
    .we1(x1_coeffs_we1),
    .d1(x1_coeffs_d1),
    .q1(x1_coeffs_q1)
);

poly_lift_b_coeffs #(
    .DataWidth( 16 ),
    .AddressRange( 701 ),
    .AddressWidth( 10 ))
x2_coeffs_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x2_coeffs_address0),
    .ce0(x2_coeffs_ce0),
    .we0(x2_coeffs_we0),
    .d0(x2_coeffs_d0),
    .q0(x2_coeffs_q0),
    .address1(x2_coeffs_address1),
    .ce1(x2_coeffs_ce1),
    .we1(x2_coeffs_we1),
    .d1(grp_poly_S3_frombytes_fu_185_r_coeffs_d1),
    .q1(x2_coeffs_q1)
);

owcpa_enc_x3_coeffs #(
    .DataWidth( 16 ),
    .AddressRange( 701 ),
    .AddressWidth( 10 ))
x3_coeffs_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x3_coeffs_address0),
    .ce0(x3_coeffs_ce0),
    .we0(x3_coeffs_we0),
    .d0(x3_coeffs_d0),
    .q0(x3_coeffs_q0)
);

poly_lift grp_poly_lift_fu_164(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_poly_lift_fu_164_ap_start),
    .ap_done(grp_poly_lift_fu_164_ap_done),
    .ap_idle(grp_poly_lift_fu_164_ap_idle),
    .ap_ready(grp_poly_lift_fu_164_ap_ready),
    .r_coeffs_address0(grp_poly_lift_fu_164_r_coeffs_address0),
    .r_coeffs_ce0(grp_poly_lift_fu_164_r_coeffs_ce0),
    .r_coeffs_we0(grp_poly_lift_fu_164_r_coeffs_we0),
    .r_coeffs_d0(grp_poly_lift_fu_164_r_coeffs_d0),
    .a_coeffs_address0(grp_poly_lift_fu_164_a_coeffs_address0),
    .a_coeffs_ce0(grp_poly_lift_fu_164_a_coeffs_ce0),
    .a_coeffs_q0(x2_coeffs_q0),
    .a_coeffs_address1(grp_poly_lift_fu_164_a_coeffs_address1),
    .a_coeffs_ce1(grp_poly_lift_fu_164_a_coeffs_ce1),
    .a_coeffs_q1(x2_coeffs_q1)
);

poly_Sq_frombytes grp_poly_Sq_frombytes_fu_170(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_poly_Sq_frombytes_fu_170_ap_start),
    .ap_done(grp_poly_Sq_frombytes_fu_170_ap_done),
    .ap_idle(grp_poly_Sq_frombytes_fu_170_ap_idle),
    .ap_ready(grp_poly_Sq_frombytes_fu_170_ap_ready),
    .r_coeffs_address0(grp_poly_Sq_frombytes_fu_170_r_coeffs_address0),
    .r_coeffs_ce0(grp_poly_Sq_frombytes_fu_170_r_coeffs_ce0),
    .r_coeffs_we0(grp_poly_Sq_frombytes_fu_170_r_coeffs_we0),
    .r_coeffs_d0(grp_poly_Sq_frombytes_fu_170_r_coeffs_d0),
    .r_coeffs_address1(grp_poly_Sq_frombytes_fu_170_r_coeffs_address1),
    .r_coeffs_ce1(grp_poly_Sq_frombytes_fu_170_r_coeffs_ce1),
    .r_coeffs_we1(grp_poly_Sq_frombytes_fu_170_r_coeffs_we1),
    .r_coeffs_d1(grp_poly_Sq_frombytes_fu_170_r_coeffs_d1),
    .a_address0(grp_poly_Sq_frombytes_fu_170_a_address0),
    .a_ce0(grp_poly_Sq_frombytes_fu_170_a_ce0),
    .a_q0(pk_q0),
    .a_address1(grp_poly_Sq_frombytes_fu_170_a_address1),
    .a_ce1(grp_poly_Sq_frombytes_fu_170_a_ce1),
    .a_q1(pk_q1)
);

poly_Sq_tobytes grp_poly_Sq_tobytes_fu_178(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_poly_Sq_tobytes_fu_178_ap_start),
    .ap_done(grp_poly_Sq_tobytes_fu_178_ap_done),
    .ap_idle(grp_poly_Sq_tobytes_fu_178_ap_idle),
    .ap_ready(grp_poly_Sq_tobytes_fu_178_ap_ready),
    .r_address0(grp_poly_Sq_tobytes_fu_178_r_address0),
    .r_ce0(grp_poly_Sq_tobytes_fu_178_r_ce0),
    .r_we0(grp_poly_Sq_tobytes_fu_178_r_we0),
    .r_d0(grp_poly_Sq_tobytes_fu_178_r_d0),
    .r_address1(grp_poly_Sq_tobytes_fu_178_r_address1),
    .r_ce1(grp_poly_Sq_tobytes_fu_178_r_ce1),
    .r_we1(grp_poly_Sq_tobytes_fu_178_r_we1),
    .r_d1(grp_poly_Sq_tobytes_fu_178_r_d1),
    .a_coeffs_address0(grp_poly_Sq_tobytes_fu_178_a_coeffs_address0),
    .a_coeffs_ce0(grp_poly_Sq_tobytes_fu_178_a_coeffs_ce0),
    .a_coeffs_q0(x3_coeffs_q0)
);

poly_S3_frombytes grp_poly_S3_frombytes_fu_185(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_poly_S3_frombytes_fu_185_ap_start),
    .ap_done(grp_poly_S3_frombytes_fu_185_ap_done),
    .ap_idle(grp_poly_S3_frombytes_fu_185_ap_idle),
    .ap_ready(grp_poly_S3_frombytes_fu_185_ap_ready),
    .r_coeffs_address0(grp_poly_S3_frombytes_fu_185_r_coeffs_address0),
    .r_coeffs_ce0(grp_poly_S3_frombytes_fu_185_r_coeffs_ce0),
    .r_coeffs_we0(grp_poly_S3_frombytes_fu_185_r_coeffs_we0),
    .r_coeffs_d0(grp_poly_S3_frombytes_fu_185_r_coeffs_d0),
    .r_coeffs_address1(grp_poly_S3_frombytes_fu_185_r_coeffs_address1),
    .r_coeffs_ce1(grp_poly_S3_frombytes_fu_185_r_coeffs_ce1),
    .r_coeffs_we1(grp_poly_S3_frombytes_fu_185_r_coeffs_we1),
    .r_coeffs_d1(grp_poly_S3_frombytes_fu_185_r_coeffs_d1),
    .msg_address0(grp_poly_S3_frombytes_fu_185_msg_address0),
    .msg_ce0(grp_poly_S3_frombytes_fu_185_msg_ce0),
    .msg_q0(rm_q0),
    .msg_offset(grp_poly_S3_frombytes_fu_185_msg_offset)
);

poly_Rq_mul grp_poly_Rq_mul_fu_195(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_poly_Rq_mul_fu_195_ap_start),
    .ap_done(grp_poly_Rq_mul_fu_195_ap_done),
    .ap_idle(grp_poly_Rq_mul_fu_195_ap_idle),
    .ap_ready(grp_poly_Rq_mul_fu_195_ap_ready),
    .r_coeffs_address0(grp_poly_Rq_mul_fu_195_r_coeffs_address0),
    .r_coeffs_ce0(grp_poly_Rq_mul_fu_195_r_coeffs_ce0),
    .r_coeffs_we0(grp_poly_Rq_mul_fu_195_r_coeffs_we0),
    .r_coeffs_d0(grp_poly_Rq_mul_fu_195_r_coeffs_d0),
    .r_coeffs_q0(x3_coeffs_q0),
    .a_coeffs_address0(grp_poly_Rq_mul_fu_195_a_coeffs_address0),
    .a_coeffs_ce0(grp_poly_Rq_mul_fu_195_a_coeffs_ce0),
    .a_coeffs_q0(x2_coeffs_q0),
    .b_coeffs_address0(grp_poly_Rq_mul_fu_195_b_coeffs_address0),
    .b_coeffs_ce0(grp_poly_Rq_mul_fu_195_b_coeffs_ce0),
    .b_coeffs_q0(x1_coeffs_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_poly_Rq_mul_fu_195_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond_i5_fu_251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            grp_poly_Rq_mul_fu_195_ap_start_reg <= 1'b1;
        end else if ((grp_poly_Rq_mul_fu_195_ap_ready == 1'b1)) begin
            grp_poly_Rq_mul_fu_195_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_poly_S3_frombytes_fu_185_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state10) | ((exitcond_i_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
            grp_poly_S3_frombytes_fu_185_ap_start_reg <= 1'b1;
        end else if ((grp_poly_S3_frombytes_fu_185_ap_ready == 1'b1)) begin
            grp_poly_S3_frombytes_fu_185_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_poly_Sq_frombytes_fu_170_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_poly_Sq_frombytes_fu_170_ap_start_reg <= 1'b1;
        end else if ((grp_poly_Sq_frombytes_fu_170_ap_ready == 1'b1)) begin
            grp_poly_Sq_frombytes_fu_170_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_poly_Sq_tobytes_fu_178_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state14) & (exitcond_fu_313_p2 == 1'd1))) begin
            grp_poly_Sq_tobytes_fu_178_ap_start_reg <= 1'b1;
        end else if ((grp_poly_Sq_tobytes_fu_178_ap_ready == 1'b1)) begin
            grp_poly_Sq_tobytes_fu_178_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_poly_lift_fu_164_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            grp_poly_lift_fu_164_ap_start_reg <= 1'b1;
        end else if ((grp_poly_lift_fu_164_ap_ready == 1'b1)) begin
            grp_poly_lift_fu_164_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_i4_reg_142 <= i_14_reg_377;
    end else if (((grp_poly_S3_frombytes_fu_185_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_i4_reg_142 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_i_reg_131 <= i_13_reg_359;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_i_reg_131 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_reg_153 <= i_15_reg_390;
    end else if (((1'b1 == ap_CS_fsm_state13) & (grp_poly_lift_fu_164_ap_done == 1'b1))) begin
        i_reg_153 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_i_reg_120 <= phitmp_fu_245_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_i_reg_120 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_313_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        ct_coeffs_addr_reg_395 <= tmp_fu_325_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_13_reg_359 <= i_13_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_14_reg_377 <= i_14_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_15_reg_390 <= i_15_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i5_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        m_coeffs_addr_reg_382 <= tmp_i6_fu_263_p1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state16) & (grp_poly_Sq_tobytes_fu_178_ap_done == 1'b1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (grp_poly_Sq_tobytes_fu_178_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_poly_S3_frombytes_fu_185_msg_offset = 10'd140;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_poly_S3_frombytes_fu_185_msg_offset = 10'd0;
    end else begin
        grp_poly_S3_frombytes_fu_185_msg_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        rm_ce0 = grp_poly_S3_frombytes_fu_185_msg_ce0;
    end else begin
        rm_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        x1_coeffs_address0 = liftm_coeffs_addr_reg_350;
    end else if (((exitcond_i_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        x1_coeffs_address0 = tmp_287_i_fu_214_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x1_coeffs_address0 = 64'd700;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        x1_coeffs_address0 = grp_poly_Rq_mul_fu_195_b_coeffs_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x1_coeffs_address0 = grp_poly_Sq_frombytes_fu_170_r_coeffs_address0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        x1_coeffs_address0 = grp_poly_lift_fu_164_r_coeffs_address0;
    end else begin
        x1_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        x1_coeffs_address1 = tmp_fu_325_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        x1_coeffs_address1 = 64'd700;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x1_coeffs_address1 = grp_poly_Sq_frombytes_fu_170_r_coeffs_address1;
    end else begin
        x1_coeffs_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((exitcond_i_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((exitcond_i_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        x1_coeffs_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        x1_coeffs_ce0 = grp_poly_Rq_mul_fu_195_b_coeffs_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x1_coeffs_ce0 = grp_poly_Sq_frombytes_fu_170_r_coeffs_ce0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        x1_coeffs_ce0 = grp_poly_lift_fu_164_r_coeffs_ce0;
    end else begin
        x1_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state14))) begin
        x1_coeffs_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x1_coeffs_ce1 = grp_poly_Sq_frombytes_fu_170_r_coeffs_ce1;
    end else begin
        x1_coeffs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        x1_coeffs_d0 = tmp_286_i_cast_fu_225_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x1_coeffs_d0 = 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x1_coeffs_d0 = grp_poly_Sq_frombytes_fu_170_r_coeffs_d0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        x1_coeffs_d0 = grp_poly_lift_fu_164_r_coeffs_d0;
    end else begin
        x1_coeffs_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        x1_coeffs_d1 = tmp_288_i_fu_238_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x1_coeffs_d1 = grp_poly_Sq_frombytes_fu_170_r_coeffs_d1;
    end else begin
        x1_coeffs_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((exitcond_i_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        x1_coeffs_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x1_coeffs_we0 = grp_poly_Sq_frombytes_fu_170_r_coeffs_we0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        x1_coeffs_we0 = grp_poly_lift_fu_164_r_coeffs_we0;
    end else begin
        x1_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        x1_coeffs_we1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x1_coeffs_we1 = grp_poly_Sq_frombytes_fu_170_r_coeffs_we1;
    end else begin
        x1_coeffs_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        x2_coeffs_address0 = m_coeffs_addr_reg_382;
    end else if (((exitcond_i5_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        x2_coeffs_address0 = tmp_i6_fu_263_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        x2_coeffs_address0 = grp_poly_Rq_mul_fu_195_a_coeffs_address0;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        x2_coeffs_address0 = grp_poly_S3_frombytes_fu_185_r_coeffs_address0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        x2_coeffs_address0 = grp_poly_lift_fu_164_a_coeffs_address0;
    end else begin
        x2_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        x2_coeffs_address1 = grp_poly_S3_frombytes_fu_185_r_coeffs_address1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        x2_coeffs_address1 = grp_poly_lift_fu_164_a_coeffs_address1;
    end else begin
        x2_coeffs_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((exitcond_i5_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        x2_coeffs_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        x2_coeffs_ce0 = grp_poly_Rq_mul_fu_195_a_coeffs_ce0;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        x2_coeffs_ce0 = grp_poly_S3_frombytes_fu_185_r_coeffs_ce0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        x2_coeffs_ce0 = grp_poly_lift_fu_164_a_coeffs_ce0;
    end else begin
        x2_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        x2_coeffs_ce1 = grp_poly_S3_frombytes_fu_185_r_coeffs_ce1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        x2_coeffs_ce1 = grp_poly_lift_fu_164_a_coeffs_ce1;
    end else begin
        x2_coeffs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        x2_coeffs_d0 = tmp_51_i_fu_304_p3;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        x2_coeffs_d0 = grp_poly_S3_frombytes_fu_185_r_coeffs_d0;
    end else begin
        x2_coeffs_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        x2_coeffs_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        x2_coeffs_we0 = grp_poly_S3_frombytes_fu_185_r_coeffs_we0;
    end else begin
        x2_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        x2_coeffs_we1 = grp_poly_S3_frombytes_fu_185_r_coeffs_we1;
    end else begin
        x2_coeffs_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        x3_coeffs_address0 = ct_coeffs_addr_reg_395;
    end else if (((exitcond_fu_313_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        x3_coeffs_address0 = tmp_fu_325_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        x3_coeffs_address0 = grp_poly_Rq_mul_fu_195_r_coeffs_address0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        x3_coeffs_address0 = grp_poly_Sq_tobytes_fu_178_a_coeffs_address0;
    end else begin
        x3_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((exitcond_fu_313_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14)))) begin
        x3_coeffs_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        x3_coeffs_ce0 = grp_poly_Rq_mul_fu_195_r_coeffs_ce0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        x3_coeffs_ce0 = grp_poly_Sq_tobytes_fu_178_a_coeffs_ce0;
    end else begin
        x3_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        x3_coeffs_d0 = tmp_295_cast_fu_345_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        x3_coeffs_d0 = grp_poly_Rq_mul_fu_195_r_coeffs_d0;
    end else begin
        x3_coeffs_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        x3_coeffs_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        x3_coeffs_we0 = grp_poly_Rq_mul_fu_195_r_coeffs_we0;
    end else begin
        x3_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_poly_Sq_frombytes_fu_170_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_i_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_poly_S3_frombytes_fu_185_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond_i5_fu_251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            if (((grp_poly_Rq_mul_fu_195_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((grp_poly_S3_frombytes_fu_185_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (grp_poly_lift_fu_164_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (exitcond_fu_313_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (grp_poly_Sq_tobytes_fu_178_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_address0 = grp_poly_Sq_tobytes_fu_178_r_address0;

assign c_address1 = grp_poly_Sq_tobytes_fu_178_r_address1;

assign c_ce0 = grp_poly_Sq_tobytes_fu_178_r_ce0;

assign c_ce1 = grp_poly_Sq_tobytes_fu_178_r_ce1;

assign c_d0 = grp_poly_Sq_tobytes_fu_178_r_d0;

assign c_d1 = grp_poly_Sq_tobytes_fu_178_r_d1;

assign c_we0 = grp_poly_Sq_tobytes_fu_178_r_we0;

assign c_we1 = grp_poly_Sq_tobytes_fu_178_r_we1;

assign exitcond_fu_313_p2 = ((i_reg_153 == 10'd701) ? 1'b1 : 1'b0);

assign exitcond_i5_fu_251_p2 = ((i_i4_reg_142 == 10'd701) ? 1'b1 : 1'b0);

assign exitcond_i_fu_202_p2 = ((i_i_reg_131 == 10'd700) ? 1'b1 : 1'b0);

assign grp_poly_Rq_mul_fu_195_ap_start = grp_poly_Rq_mul_fu_195_ap_start_reg;

assign grp_poly_S3_frombytes_fu_185_ap_start = grp_poly_S3_frombytes_fu_185_ap_start_reg;

assign grp_poly_Sq_frombytes_fu_170_ap_start = grp_poly_Sq_frombytes_fu_170_ap_start_reg;

assign grp_poly_Sq_tobytes_fu_178_ap_start = grp_poly_Sq_tobytes_fu_178_ap_start_reg;

assign grp_poly_lift_fu_164_ap_start = grp_poly_lift_fu_164_ap_start_reg;

assign i_13_fu_208_p2 = (i_i_reg_131 + 10'd1);

assign i_14_fu_257_p2 = (i_i4_reg_142 + 10'd1);

assign i_15_fu_319_p2 = (i_reg_153 + 10'd1);

assign liftm_coeffs_addr_reg_350 = 64'd700;

assign phitmp_fu_245_p2 = (tmp_240_fu_234_p1 + tmp_239_fu_230_p1);

assign pk_address0 = grp_poly_Sq_frombytes_fu_170_a_address0;

assign pk_address1 = grp_poly_Sq_frombytes_fu_170_a_address1;

assign pk_ce0 = grp_poly_Sq_frombytes_fu_170_a_ce0;

assign pk_ce1 = grp_poly_Sq_frombytes_fu_170_a_ce1;

assign rm_address0 = grp_poly_S3_frombytes_fu_185_msg_address0;

assign tmp_239_fu_230_p1 = x1_coeffs_q1[12:0];

assign tmp_240_fu_234_p1 = x1_coeffs_q0[12:0];

assign tmp_241_fu_284_p1 = x2_coeffs_q0[12:0];

assign tmp_242_fu_331_p1 = x1_coeffs_q1[12:0];

assign tmp_243_fu_335_p1 = x3_coeffs_q0[12:0];

assign tmp_286_i_cast_fu_225_p1 = tmp_i_cast_fu_219_p2;

assign tmp_287_i_fu_214_p1 = i_i_reg_131;

assign tmp_288_i_fu_238_p2 = (x1_coeffs_q1 + x1_coeffs_q0);

assign tmp_295_cast_fu_345_p1 = tmp_cast_fu_339_p2;

assign tmp_49_i_cast_fu_278_p2 = (13'd0 - tmp_87_fu_268_p4);

assign tmp_51_i_fu_304_p3 = {{tmp_90_fu_294_p4}, {tmp_89_fu_288_p2}};

assign tmp_87_fu_268_p4 = {{x2_coeffs_q0[13:1]}};

assign tmp_89_fu_288_p2 = (tmp_49_i_cast_fu_278_p2 | tmp_241_fu_284_p1);

assign tmp_90_fu_294_p4 = {{x2_coeffs_q0[15:13]}};

assign tmp_cast_fu_339_p2 = (tmp_243_fu_335_p1 + tmp_242_fu_331_p1);

assign tmp_fu_325_p1 = i_reg_153;

assign tmp_i6_fu_263_p1 = i_i4_reg_142;

assign tmp_i_cast_fu_219_p2 = (13'd0 - tmp_i_reg_120);

endmodule //owcpa_enc
