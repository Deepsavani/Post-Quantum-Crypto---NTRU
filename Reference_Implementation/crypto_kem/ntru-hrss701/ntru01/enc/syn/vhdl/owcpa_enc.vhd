-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity owcpa_enc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    c_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_we0 : OUT STD_LOGIC;
    c_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    c_ce1 : OUT STD_LOGIC;
    c_we1 : OUT STD_LOGIC;
    c_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rm_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    rm_ce0 : OUT STD_LOGIC;
    rm_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pk_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pk_ce0 : OUT STD_LOGIC;
    pk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pk_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pk_ce1 : OUT STD_LOGIC;
    pk_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of owcpa_enc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_8C : STD_LOGIC_VECTOR (9 downto 0) := "0010001100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_2BC : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010111100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_2BC : STD_LOGIC_VECTOR (9 downto 0) := "1010111100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2BD : STD_LOGIC_VECTOR (9 downto 0) := "1010111101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal liftm_coeffs_addr_reg_350 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_13_fu_208_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_13_reg_359 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_i_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_fu_245_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_14_fu_257_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_14_reg_377 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal m_coeffs_addr_reg_382 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i5_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_15_fu_319_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_15_reg_390 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ct_coeffs_addr_reg_395 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x1_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x1_coeffs_ce0 : STD_LOGIC;
    signal x1_coeffs_we0 : STD_LOGIC;
    signal x1_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal x1_coeffs_ce1 : STD_LOGIC;
    signal x1_coeffs_we1 : STD_LOGIC;
    signal x1_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x2_coeffs_ce0 : STD_LOGIC;
    signal x2_coeffs_we0 : STD_LOGIC;
    signal x2_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal x2_coeffs_ce1 : STD_LOGIC;
    signal x2_coeffs_we1 : STD_LOGIC;
    signal x2_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x3_coeffs_ce0 : STD_LOGIC;
    signal x3_coeffs_we0 : STD_LOGIC;
    signal x3_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_lift_fu_164_ap_start : STD_LOGIC;
    signal grp_poly_lift_fu_164_ap_done : STD_LOGIC;
    signal grp_poly_lift_fu_164_ap_idle : STD_LOGIC;
    signal grp_poly_lift_fu_164_ap_ready : STD_LOGIC;
    signal grp_poly_lift_fu_164_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_lift_fu_164_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_lift_fu_164_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_lift_fu_164_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_lift_fu_164_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_lift_fu_164_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_lift_fu_164_a_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_lift_fu_164_a_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_170_ap_start : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_170_ap_done : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_170_ap_idle : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_170_ap_ready : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_170_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_frombytes_fu_170_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_170_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_170_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Sq_frombytes_fu_170_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_frombytes_fu_170_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_170_r_coeffs_we1 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_170_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Sq_frombytes_fu_170_a_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_Sq_frombytes_fu_170_a_ce0 : STD_LOGIC;
    signal grp_poly_Sq_frombytes_fu_170_a_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_Sq_frombytes_fu_170_a_ce1 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_178_ap_start : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_178_ap_done : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_178_ap_idle : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_178_ap_ready : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_178_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_Sq_tobytes_fu_178_r_ce0 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_178_r_we0 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_178_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_Sq_tobytes_fu_178_r_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_Sq_tobytes_fu_178_r_ce1 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_178_r_we1 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_178_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_Sq_tobytes_fu_178_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_tobytes_fu_178_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_185_ap_start : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_185_ap_done : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_185_ap_idle : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_185_ap_ready : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_185_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_frombytes_fu_185_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_185_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_185_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_frombytes_fu_185_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_frombytes_fu_185_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_185_r_coeffs_we1 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_185_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_frombytes_fu_185_msg_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_poly_S3_frombytes_fu_185_msg_ce0 : STD_LOGIC;
    signal grp_poly_S3_frombytes_fu_185_msg_offset : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_195_ap_start : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_195_ap_done : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_195_ap_idle : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_195_ap_ready : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_195_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_195_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_195_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_195_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_mul_fu_195_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_195_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_195_b_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_195_b_coeffs_ce0 : STD_LOGIC;
    signal tmp_i_reg_120 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_i_reg_131 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_i4_reg_142 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_reg_153 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_poly_lift_fu_164_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_poly_Sq_frombytes_fu_170_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_poly_Sq_tobytes_fu_178_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_poly_S3_frombytes_fu_185_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_poly_Rq_mul_fu_195_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_287_i_fu_214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i6_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_286_i_cast_fu_225_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_288_i_fu_238_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_51_i_fu_304_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_295_cast_fu_345_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_cast_fu_219_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_240_fu_234_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_239_fu_230_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_87_fu_268_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_241_fu_284_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_49_i_cast_fu_278_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_90_fu_294_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_89_fu_288_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_243_fu_335_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_242_fu_331_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_cast_fu_339_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component poly_lift IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce1 : OUT STD_LOGIC;
        a_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_Sq_frombytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component poly_Sq_tobytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        r_ce0 : OUT STD_LOGIC;
        r_we0 : OUT STD_LOGIC;
        r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        r_ce1 : OUT STD_LOGIC;
        r_we1 : OUT STD_LOGIC;
        r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_S3_frombytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        msg_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        msg_ce0 : OUT STD_LOGIC;
        msg_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        msg_offset : IN STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component poly_Rq_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        b_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        b_coeffs_ce0 : OUT STD_LOGIC;
        b_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_lift_b_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_enc_x3_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    x1_coeffs_U : component poly_lift_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 701,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x1_coeffs_address0,
        ce0 => x1_coeffs_ce0,
        we0 => x1_coeffs_we0,
        d0 => x1_coeffs_d0,
        q0 => x1_coeffs_q0,
        address1 => x1_coeffs_address1,
        ce1 => x1_coeffs_ce1,
        we1 => x1_coeffs_we1,
        d1 => x1_coeffs_d1,
        q1 => x1_coeffs_q1);

    x2_coeffs_U : component poly_lift_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 701,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x2_coeffs_address0,
        ce0 => x2_coeffs_ce0,
        we0 => x2_coeffs_we0,
        d0 => x2_coeffs_d0,
        q0 => x2_coeffs_q0,
        address1 => x2_coeffs_address1,
        ce1 => x2_coeffs_ce1,
        we1 => x2_coeffs_we1,
        d1 => grp_poly_S3_frombytes_fu_185_r_coeffs_d1,
        q1 => x2_coeffs_q1);

    x3_coeffs_U : component owcpa_enc_x3_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 701,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x3_coeffs_address0,
        ce0 => x3_coeffs_ce0,
        we0 => x3_coeffs_we0,
        d0 => x3_coeffs_d0,
        q0 => x3_coeffs_q0);

    grp_poly_lift_fu_164 : component poly_lift
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_lift_fu_164_ap_start,
        ap_done => grp_poly_lift_fu_164_ap_done,
        ap_idle => grp_poly_lift_fu_164_ap_idle,
        ap_ready => grp_poly_lift_fu_164_ap_ready,
        r_coeffs_address0 => grp_poly_lift_fu_164_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_lift_fu_164_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_lift_fu_164_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_lift_fu_164_r_coeffs_d0,
        a_coeffs_address0 => grp_poly_lift_fu_164_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_lift_fu_164_a_coeffs_ce0,
        a_coeffs_q0 => x2_coeffs_q0,
        a_coeffs_address1 => grp_poly_lift_fu_164_a_coeffs_address1,
        a_coeffs_ce1 => grp_poly_lift_fu_164_a_coeffs_ce1,
        a_coeffs_q1 => x2_coeffs_q1);

    grp_poly_Sq_frombytes_fu_170 : component poly_Sq_frombytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Sq_frombytes_fu_170_ap_start,
        ap_done => grp_poly_Sq_frombytes_fu_170_ap_done,
        ap_idle => grp_poly_Sq_frombytes_fu_170_ap_idle,
        ap_ready => grp_poly_Sq_frombytes_fu_170_ap_ready,
        r_coeffs_address0 => grp_poly_Sq_frombytes_fu_170_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_Sq_frombytes_fu_170_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_Sq_frombytes_fu_170_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_Sq_frombytes_fu_170_r_coeffs_d0,
        r_coeffs_address1 => grp_poly_Sq_frombytes_fu_170_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_Sq_frombytes_fu_170_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_Sq_frombytes_fu_170_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_Sq_frombytes_fu_170_r_coeffs_d1,
        a_address0 => grp_poly_Sq_frombytes_fu_170_a_address0,
        a_ce0 => grp_poly_Sq_frombytes_fu_170_a_ce0,
        a_q0 => pk_q0,
        a_address1 => grp_poly_Sq_frombytes_fu_170_a_address1,
        a_ce1 => grp_poly_Sq_frombytes_fu_170_a_ce1,
        a_q1 => pk_q1);

    grp_poly_Sq_tobytes_fu_178 : component poly_Sq_tobytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Sq_tobytes_fu_178_ap_start,
        ap_done => grp_poly_Sq_tobytes_fu_178_ap_done,
        ap_idle => grp_poly_Sq_tobytes_fu_178_ap_idle,
        ap_ready => grp_poly_Sq_tobytes_fu_178_ap_ready,
        r_address0 => grp_poly_Sq_tobytes_fu_178_r_address0,
        r_ce0 => grp_poly_Sq_tobytes_fu_178_r_ce0,
        r_we0 => grp_poly_Sq_tobytes_fu_178_r_we0,
        r_d0 => grp_poly_Sq_tobytes_fu_178_r_d0,
        r_address1 => grp_poly_Sq_tobytes_fu_178_r_address1,
        r_ce1 => grp_poly_Sq_tobytes_fu_178_r_ce1,
        r_we1 => grp_poly_Sq_tobytes_fu_178_r_we1,
        r_d1 => grp_poly_Sq_tobytes_fu_178_r_d1,
        a_coeffs_address0 => grp_poly_Sq_tobytes_fu_178_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_Sq_tobytes_fu_178_a_coeffs_ce0,
        a_coeffs_q0 => x3_coeffs_q0);

    grp_poly_S3_frombytes_fu_185 : component poly_S3_frombytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_S3_frombytes_fu_185_ap_start,
        ap_done => grp_poly_S3_frombytes_fu_185_ap_done,
        ap_idle => grp_poly_S3_frombytes_fu_185_ap_idle,
        ap_ready => grp_poly_S3_frombytes_fu_185_ap_ready,
        r_coeffs_address0 => grp_poly_S3_frombytes_fu_185_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_S3_frombytes_fu_185_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_S3_frombytes_fu_185_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_S3_frombytes_fu_185_r_coeffs_d0,
        r_coeffs_address1 => grp_poly_S3_frombytes_fu_185_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_S3_frombytes_fu_185_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_S3_frombytes_fu_185_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_S3_frombytes_fu_185_r_coeffs_d1,
        msg_address0 => grp_poly_S3_frombytes_fu_185_msg_address0,
        msg_ce0 => grp_poly_S3_frombytes_fu_185_msg_ce0,
        msg_q0 => rm_q0,
        msg_offset => grp_poly_S3_frombytes_fu_185_msg_offset);

    grp_poly_Rq_mul_fu_195 : component poly_Rq_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Rq_mul_fu_195_ap_start,
        ap_done => grp_poly_Rq_mul_fu_195_ap_done,
        ap_idle => grp_poly_Rq_mul_fu_195_ap_idle,
        ap_ready => grp_poly_Rq_mul_fu_195_ap_ready,
        r_coeffs_address0 => grp_poly_Rq_mul_fu_195_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_Rq_mul_fu_195_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_Rq_mul_fu_195_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_Rq_mul_fu_195_r_coeffs_d0,
        r_coeffs_q0 => x3_coeffs_q0,
        a_coeffs_address0 => grp_poly_Rq_mul_fu_195_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_Rq_mul_fu_195_a_coeffs_ce0,
        a_coeffs_q0 => x2_coeffs_q0,
        b_coeffs_address0 => grp_poly_Rq_mul_fu_195_b_coeffs_address0,
        b_coeffs_ce0 => grp_poly_Rq_mul_fu_195_b_coeffs_ce0,
        b_coeffs_q0 => x1_coeffs_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_poly_Rq_mul_fu_195_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Rq_mul_fu_195_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond_i5_fu_251_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    grp_poly_Rq_mul_fu_195_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Rq_mul_fu_195_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Rq_mul_fu_195_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_S3_frombytes_fu_185_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_S3_frombytes_fu_185_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((exitcond_i_fu_202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    grp_poly_S3_frombytes_fu_185_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_S3_frombytes_fu_185_ap_ready = ap_const_logic_1)) then 
                    grp_poly_S3_frombytes_fu_185_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_Sq_frombytes_fu_170_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Sq_frombytes_fu_170_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_poly_Sq_frombytes_fu_170_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Sq_frombytes_fu_170_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Sq_frombytes_fu_170_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_Sq_tobytes_fu_178_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Sq_tobytes_fu_178_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_fu_313_p2 = ap_const_lv1_1))) then 
                    grp_poly_Sq_tobytes_fu_178_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Sq_tobytes_fu_178_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Sq_tobytes_fu_178_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_lift_fu_164_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_lift_fu_164_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_poly_lift_fu_164_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_lift_fu_164_ap_ready = ap_const_logic_1)) then 
                    grp_poly_lift_fu_164_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i4_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_i4_reg_142 <= i_14_reg_377;
            elsif (((grp_poly_S3_frombytes_fu_185_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_i4_reg_142 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_i_reg_131 <= i_13_reg_359;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_i_reg_131 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_reg_153 <= i_15_reg_390;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_poly_lift_fu_164_ap_done = ap_const_logic_1))) then 
                i_reg_153 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    tmp_i_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                tmp_i_reg_120 <= phitmp_fu_245_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                tmp_i_reg_120 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                ct_coeffs_addr_reg_395 <= tmp_fu_325_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_13_reg_359 <= i_13_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_14_reg_377 <= i_14_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_15_reg_390 <= i_15_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i5_fu_251_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                m_coeffs_addr_reg_382 <= tmp_i6_fu_263_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, exitcond_i_fu_202_p2, ap_CS_fsm_state7, exitcond_i5_fu_251_p2, ap_CS_fsm_state14, exitcond_fu_313_p2, grp_poly_lift_fu_164_ap_done, grp_poly_Sq_frombytes_fu_170_ap_done, grp_poly_Sq_tobytes_fu_178_ap_done, grp_poly_S3_frombytes_fu_185_ap_done, grp_poly_Rq_mul_fu_195_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state2, ap_CS_fsm_state16, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_poly_Sq_frombytes_fu_170_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((exitcond_i_fu_202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((grp_poly_S3_frombytes_fu_185_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((exitcond_i5_fu_251_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((grp_poly_Rq_mul_fu_195_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_poly_S3_frombytes_fu_185_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_poly_lift_fu_164_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_fu_313_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_poly_Sq_tobytes_fu_178_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_poly_Sq_tobytes_fu_178_ap_done, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_poly_Sq_tobytes_fu_178_ap_done = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_poly_Sq_tobytes_fu_178_ap_done, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_poly_Sq_tobytes_fu_178_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_address0 <= grp_poly_Sq_tobytes_fu_178_r_address0;
    c_address1 <= grp_poly_Sq_tobytes_fu_178_r_address1;
    c_ce0 <= grp_poly_Sq_tobytes_fu_178_r_ce0;
    c_ce1 <= grp_poly_Sq_tobytes_fu_178_r_ce1;
    c_d0 <= grp_poly_Sq_tobytes_fu_178_r_d0;
    c_d1 <= grp_poly_Sq_tobytes_fu_178_r_d1;
    c_we0 <= grp_poly_Sq_tobytes_fu_178_r_we0;
    c_we1 <= grp_poly_Sq_tobytes_fu_178_r_we1;
    exitcond_fu_313_p2 <= "1" when (i_reg_153 = ap_const_lv10_2BD) else "0";
    exitcond_i5_fu_251_p2 <= "1" when (i_i4_reg_142 = ap_const_lv10_2BD) else "0";
    exitcond_i_fu_202_p2 <= "1" when (i_i_reg_131 = ap_const_lv10_2BC) else "0";
    grp_poly_Rq_mul_fu_195_ap_start <= grp_poly_Rq_mul_fu_195_ap_start_reg;
    grp_poly_S3_frombytes_fu_185_ap_start <= grp_poly_S3_frombytes_fu_185_ap_start_reg;

    grp_poly_S3_frombytes_fu_185_msg_offset_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_poly_S3_frombytes_fu_185_msg_offset <= ap_const_lv10_8C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_poly_S3_frombytes_fu_185_msg_offset <= ap_const_lv10_0;
        else 
            grp_poly_S3_frombytes_fu_185_msg_offset <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_poly_Sq_frombytes_fu_170_ap_start <= grp_poly_Sq_frombytes_fu_170_ap_start_reg;
    grp_poly_Sq_tobytes_fu_178_ap_start <= grp_poly_Sq_tobytes_fu_178_ap_start_reg;
    grp_poly_lift_fu_164_ap_start <= grp_poly_lift_fu_164_ap_start_reg;
    i_13_fu_208_p2 <= std_logic_vector(unsigned(i_i_reg_131) + unsigned(ap_const_lv10_1));
    i_14_fu_257_p2 <= std_logic_vector(unsigned(i_i4_reg_142) + unsigned(ap_const_lv10_1));
    i_15_fu_319_p2 <= std_logic_vector(unsigned(i_reg_153) + unsigned(ap_const_lv10_1));
    liftm_coeffs_addr_reg_350 <= ap_const_lv64_2BC(10 - 1 downto 0);
    phitmp_fu_245_p2 <= std_logic_vector(unsigned(tmp_240_fu_234_p1) + unsigned(tmp_239_fu_230_p1));
    pk_address0 <= grp_poly_Sq_frombytes_fu_170_a_address0;
    pk_address1 <= grp_poly_Sq_frombytes_fu_170_a_address1;
    pk_ce0 <= grp_poly_Sq_frombytes_fu_170_a_ce0;
    pk_ce1 <= grp_poly_Sq_frombytes_fu_170_a_ce1;
    rm_address0 <= grp_poly_S3_frombytes_fu_185_msg_address0;

    rm_ce0_assign_proc : process(grp_poly_S3_frombytes_fu_185_msg_ce0, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            rm_ce0 <= grp_poly_S3_frombytes_fu_185_msg_ce0;
        else 
            rm_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_239_fu_230_p1 <= x1_coeffs_q1(13 - 1 downto 0);
    tmp_240_fu_234_p1 <= x1_coeffs_q0(13 - 1 downto 0);
    tmp_241_fu_284_p1 <= x2_coeffs_q0(13 - 1 downto 0);
    tmp_242_fu_331_p1 <= x1_coeffs_q1(13 - 1 downto 0);
    tmp_243_fu_335_p1 <= x3_coeffs_q0(13 - 1 downto 0);
    tmp_286_i_cast_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_cast_fu_219_p2),16));
    tmp_287_i_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_131),64));
    tmp_288_i_fu_238_p2 <= std_logic_vector(unsigned(x1_coeffs_q1) + unsigned(x1_coeffs_q0));
    tmp_295_cast_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_cast_fu_339_p2),16));
    tmp_49_i_cast_fu_278_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(tmp_87_fu_268_p4));
    tmp_51_i_fu_304_p3 <= (tmp_90_fu_294_p4 & tmp_89_fu_288_p2);
    tmp_87_fu_268_p4 <= x2_coeffs_q0(13 downto 1);
    tmp_89_fu_288_p2 <= (tmp_49_i_cast_fu_278_p2 or tmp_241_fu_284_p1);
    tmp_90_fu_294_p4 <= x2_coeffs_q0(15 downto 13);
    tmp_cast_fu_339_p2 <= std_logic_vector(unsigned(tmp_243_fu_335_p1) + unsigned(tmp_242_fu_331_p1));
    tmp_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_153),64));
    tmp_i6_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i4_reg_142),64));
    tmp_i_cast_fu_219_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(tmp_i_reg_120));

    x1_coeffs_address0_assign_proc : process(liftm_coeffs_addr_reg_350, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_i_fu_202_p2, grp_poly_lift_fu_164_r_coeffs_address0, grp_poly_Sq_frombytes_fu_170_r_coeffs_address0, grp_poly_Rq_mul_fu_195_b_coeffs_address0, ap_CS_fsm_state13, ap_CS_fsm_state2, ap_CS_fsm_state9, tmp_287_i_fu_214_p1)
    begin
        if (((exitcond_i_fu_202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x1_coeffs_address0 <= liftm_coeffs_addr_reg_350;
        elsif (((exitcond_i_fu_202_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x1_coeffs_address0 <= tmp_287_i_fu_214_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x1_coeffs_address0 <= ap_const_lv64_2BC(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x1_coeffs_address0 <= grp_poly_Rq_mul_fu_195_b_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_address0 <= grp_poly_Sq_frombytes_fu_170_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x1_coeffs_address0 <= grp_poly_lift_fu_164_r_coeffs_address0;
        else 
            x1_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, grp_poly_Sq_frombytes_fu_170_r_coeffs_address1, ap_CS_fsm_state2, tmp_fu_325_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            x1_coeffs_address1 <= tmp_fu_325_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x1_coeffs_address1 <= ap_const_lv64_2BC(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_address1 <= grp_poly_Sq_frombytes_fu_170_r_coeffs_address1;
        else 
            x1_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_i_fu_202_p2, grp_poly_lift_fu_164_r_coeffs_ce0, grp_poly_Sq_frombytes_fu_170_r_coeffs_ce0, grp_poly_Rq_mul_fu_195_b_coeffs_ce0, ap_CS_fsm_state13, ap_CS_fsm_state2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((exitcond_i_fu_202_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((exitcond_i_fu_202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            x1_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x1_coeffs_ce0 <= grp_poly_Rq_mul_fu_195_b_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_ce0 <= grp_poly_Sq_frombytes_fu_170_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x1_coeffs_ce0 <= grp_poly_lift_fu_164_r_coeffs_ce0;
        else 
            x1_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, grp_poly_Sq_frombytes_fu_170_r_coeffs_ce1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            x1_coeffs_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_ce1 <= grp_poly_Sq_frombytes_fu_170_r_coeffs_ce1;
        else 
            x1_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_i_fu_202_p2, grp_poly_lift_fu_164_r_coeffs_d0, grp_poly_Sq_frombytes_fu_170_r_coeffs_d0, ap_CS_fsm_state13, ap_CS_fsm_state2, tmp_286_i_cast_fu_225_p1)
    begin
        if (((exitcond_i_fu_202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x1_coeffs_d0 <= tmp_286_i_cast_fu_225_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x1_coeffs_d0 <= ap_const_lv16_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_d0 <= grp_poly_Sq_frombytes_fu_170_r_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x1_coeffs_d0 <= grp_poly_lift_fu_164_r_coeffs_d0;
        else 
            x1_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_d1_assign_proc : process(ap_CS_fsm_state5, grp_poly_Sq_frombytes_fu_170_r_coeffs_d1, ap_CS_fsm_state2, tmp_288_i_fu_238_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x1_coeffs_d1 <= tmp_288_i_fu_238_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_d1 <= grp_poly_Sq_frombytes_fu_170_r_coeffs_d1;
        else 
            x1_coeffs_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond_i_fu_202_p2, grp_poly_lift_fu_164_r_coeffs_we0, grp_poly_Sq_frombytes_fu_170_r_coeffs_we0, ap_CS_fsm_state13, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((exitcond_i_fu_202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            x1_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_we0 <= grp_poly_Sq_frombytes_fu_170_r_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x1_coeffs_we0 <= grp_poly_lift_fu_164_r_coeffs_we0;
        else 
            x1_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_we1_assign_proc : process(ap_CS_fsm_state5, grp_poly_Sq_frombytes_fu_170_r_coeffs_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x1_coeffs_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_we1 <= grp_poly_Sq_frombytes_fu_170_r_coeffs_we1;
        else 
            x1_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_address0_assign_proc : process(ap_CS_fsm_state7, m_coeffs_addr_reg_382, exitcond_i5_fu_251_p2, grp_poly_lift_fu_164_a_coeffs_address0, grp_poly_S3_frombytes_fu_185_r_coeffs_address0, grp_poly_Rq_mul_fu_195_a_coeffs_address0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state9, tmp_i6_fu_263_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x2_coeffs_address0 <= m_coeffs_addr_reg_382;
        elsif (((exitcond_i5_fu_251_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            x2_coeffs_address0 <= tmp_i6_fu_263_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x2_coeffs_address0 <= grp_poly_Rq_mul_fu_195_a_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            x2_coeffs_address0 <= grp_poly_S3_frombytes_fu_185_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x2_coeffs_address0 <= grp_poly_lift_fu_164_a_coeffs_address0;
        else 
            x2_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_address1_assign_proc : process(grp_poly_lift_fu_164_a_coeffs_address1, grp_poly_S3_frombytes_fu_185_r_coeffs_address1, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            x2_coeffs_address1 <= grp_poly_S3_frombytes_fu_185_r_coeffs_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x2_coeffs_address1 <= grp_poly_lift_fu_164_a_coeffs_address1;
        else 
            x2_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_ce0_assign_proc : process(ap_CS_fsm_state7, exitcond_i5_fu_251_p2, grp_poly_lift_fu_164_a_coeffs_ce0, grp_poly_S3_frombytes_fu_185_r_coeffs_ce0, grp_poly_Rq_mul_fu_195_a_coeffs_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((exitcond_i5_fu_251_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            x2_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x2_coeffs_ce0 <= grp_poly_Rq_mul_fu_195_a_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            x2_coeffs_ce0 <= grp_poly_S3_frombytes_fu_185_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x2_coeffs_ce0 <= grp_poly_lift_fu_164_a_coeffs_ce0;
        else 
            x2_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_ce1_assign_proc : process(grp_poly_lift_fu_164_a_coeffs_ce1, grp_poly_S3_frombytes_fu_185_r_coeffs_ce1, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            x2_coeffs_ce1 <= grp_poly_S3_frombytes_fu_185_r_coeffs_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x2_coeffs_ce1 <= grp_poly_lift_fu_164_a_coeffs_ce1;
        else 
            x2_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_d0_assign_proc : process(grp_poly_S3_frombytes_fu_185_r_coeffs_d0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state11, tmp_51_i_fu_304_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x2_coeffs_d0 <= tmp_51_i_fu_304_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            x2_coeffs_d0 <= grp_poly_S3_frombytes_fu_185_r_coeffs_d0;
        else 
            x2_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_we0_assign_proc : process(grp_poly_S3_frombytes_fu_185_r_coeffs_we0, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x2_coeffs_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            x2_coeffs_we0 <= grp_poly_S3_frombytes_fu_185_r_coeffs_we0;
        else 
            x2_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_we1_assign_proc : process(grp_poly_S3_frombytes_fu_185_r_coeffs_we1, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            x2_coeffs_we1 <= grp_poly_S3_frombytes_fu_185_r_coeffs_we1;
        else 
            x2_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_address0_assign_proc : process(ap_CS_fsm_state14, ct_coeffs_addr_reg_395, exitcond_fu_313_p2, grp_poly_Sq_tobytes_fu_178_a_coeffs_address0, grp_poly_Rq_mul_fu_195_r_coeffs_address0, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state9, tmp_fu_325_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x3_coeffs_address0 <= ct_coeffs_addr_reg_395;
        elsif (((exitcond_fu_313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            x3_coeffs_address0 <= tmp_fu_325_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_address0 <= grp_poly_Rq_mul_fu_195_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            x3_coeffs_address0 <= grp_poly_Sq_tobytes_fu_178_a_coeffs_address0;
        else 
            x3_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_ce0_assign_proc : process(ap_CS_fsm_state14, exitcond_fu_313_p2, grp_poly_Sq_tobytes_fu_178_a_coeffs_ce0, grp_poly_Rq_mul_fu_195_r_coeffs_ce0, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((exitcond_fu_313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            x3_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_ce0 <= grp_poly_Rq_mul_fu_195_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            x3_coeffs_ce0 <= grp_poly_Sq_tobytes_fu_178_a_coeffs_ce0;
        else 
            x3_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_d0_assign_proc : process(grp_poly_Rq_mul_fu_195_r_coeffs_d0, ap_CS_fsm_state15, ap_CS_fsm_state9, tmp_295_cast_fu_345_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x3_coeffs_d0 <= tmp_295_cast_fu_345_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_d0 <= grp_poly_Rq_mul_fu_195_r_coeffs_d0;
        else 
            x3_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_we0_assign_proc : process(grp_poly_Rq_mul_fu_195_r_coeffs_we0, ap_CS_fsm_state15, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x3_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x3_coeffs_we0 <= grp_poly_Rq_mul_fu_195_r_coeffs_we0;
        else 
            x3_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
