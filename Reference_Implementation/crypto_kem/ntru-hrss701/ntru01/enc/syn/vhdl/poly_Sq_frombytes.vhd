-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity poly_Sq_frombytes is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce0 : OUT STD_LOGIC;
    r_coeffs_we0 : OUT STD_LOGIC;
    r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce1 : OUT STD_LOGIC;
    r_coeffs_we1 : OUT STD_LOGIC;
    r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of poly_Sq_frombytes is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_46F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010001101111";
    constant ap_const_lv64_470 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010001110000";
    constant ap_const_lv64_471 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010001110001";
    constant ap_const_lv64_46E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010001101110";
    constant ap_const_lv64_2BB : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010111011";
    constant ap_const_lv64_2BA : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010111010";
    constant ap_const_lv64_46C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010001101100";
    constant ap_const_lv64_46D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010001101101";
    constant ap_const_lv64_2B9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010111001";
    constant ap_const_lv64_46B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010001101011";
    constant ap_const_lv64_2B8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010111000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv7_57 : STD_LOGIC_VECTOR (6 downto 0) := "1010111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv11_6 : STD_LOGIC_VECTOR (10 downto 0) := "00000000110";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv11_7 : STD_LOGIC_VECTOR (10 downto 0) := "00000000111";
    constant ap_const_lv11_8 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv11_9 : STD_LOGIC_VECTOR (10 downto 0) := "00000001001";
    constant ap_const_lv11_A : STD_LOGIC_VECTOR (10 downto 0) := "00000001010";
    constant ap_const_lv11_D : STD_LOGIC_VECTOR (10 downto 0) := "00000001101";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv11_B : STD_LOGIC_VECTOR (10 downto 0) := "00000001011";
    constant ap_const_lv11_C : STD_LOGIC_VECTOR (10 downto 0) := "00000001100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_477 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_s_fu_488_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_reg_1129 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_136_fu_527_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_136_reg_1154 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_459_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_138_reg_1165 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_147_reg_1180 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_201_reg_1190 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_163_reg_1205 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_172_reg_1220 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal next_mul_fu_851_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul_reg_1235 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_178_reg_1240 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_1255 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_179_fu_1000_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_179_reg_1270 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_195_fu_1068_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_195_reg_1285 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_196_fu_1110_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_196_reg_1295 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_435 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal phi_mul_reg_447 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_132_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_134_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_137_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_140_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_143_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_146_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_149_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_152_fu_656_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_156_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_159_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_162_fu_730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_165_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_168_fu_762_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_171_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_174_fu_835_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_181_fu_846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_177_fu_878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_184_fu_899_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_190_fu_910_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_187_fu_962_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_193_fu_995_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_135_fu_522_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_170_cast_fu_599_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_179_cast_fu_646_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_193_cast_fu_720_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_207_cast_fu_804_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_216_cast_fu_868_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_230_cast_fu_952_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_238_cast_fu_985_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_136_cast_fu_1041_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_141_cast_fu_1063_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_149_cast_fu_1105_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_130_fu_1121_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_133_fu_499_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_197_fu_510_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_35_fu_514_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_139_fu_540_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_142_fu_551_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_198_fu_562_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_68_fu_577_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_141_fu_565_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_199_fu_573_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_69_fu_585_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_144_fu_591_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_145_fu_604_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_148_fu_624_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_200_fu_635_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_150_fu_639_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_151_fu_651_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_155_fu_661_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_158_fu_672_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_202_fu_683_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_73_fu_698_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_157_fu_686_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_204_fu_694_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_74_fu_706_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_160_fu_712_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_161_fu_725_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_164_fu_745_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_167_fu_756_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_203_fu_767_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_76_fu_782_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_166_fu_770_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_206_fu_778_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_790_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_169_fu_796_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_170_fu_809_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_173_fu_829_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_180_fu_840_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_207_fu_857_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_175_fu_861_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_176_fu_873_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_183_fu_893_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_189_fu_904_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_205_fu_915_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_81_fu_930_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_182_fu_918_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_208_fu_926_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_82_fu_938_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_185_fu_944_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_186_fu_957_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_188_fu_967_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_191_fu_977_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_192_fu_990_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_153_fu_1004_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_fu_1019_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_123_fu_1007_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_154_fu_1015_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_61_fu_1027_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_124_fu_1033_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_125_fu_1046_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_126_fu_1056_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_194_fu_1072_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_fu_1084_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_128_fu_1076_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_66_fu_1092_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_129_fu_1098_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_33_fu_1114_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_reg_435 <= tmp_s_reg_1129;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_435 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                phi_mul_reg_447 <= next_mul_reg_1235;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_447 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reg_477 <= a_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_477 <= a_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                next_mul_reg_1235 <= next_mul_fu_851_p2;
                tmp_178_reg_1240 <= a_q1(7 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_136_reg_1154(9 downto 3) <= tmp_136_fu_527_p3(9 downto 3);
                tmp_138_reg_1165 <= a_q1(7 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_147_reg_1180 <= a_q1(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_163_reg_1205 <= a_q0(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_172_reg_1220 <= a_q0(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_179_reg_1270 <= tmp_179_fu_1000_p1;
                tmp_reg_1255 <= a_q0(7 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_195_reg_1285 <= tmp_195_fu_1068_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_196_reg_1295 <= tmp_196_fu_1110_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_201_reg_1190 <= a_q0(7 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_s_reg_1129 <= tmp_s_fu_488_p2;
            end if;
        end if;
    end process;
    tmp_136_reg_1154(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_482_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_482_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state2, exitcond_fu_482_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, tmp_132_fu_494_p1, tmp_140_fu_546_p1, tmp_149_fu_630_p1, tmp_159_fu_678_p1, tmp_168_fu_762_p1, tmp_181_fu_846_p1, tmp_190_fu_910_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            a_address0 <= ap_const_lv64_46D(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            a_address0 <= ap_const_lv64_46E(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            a_address0 <= tmp_190_fu_910_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_address0 <= tmp_181_fu_846_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_address0 <= tmp_168_fu_762_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address0 <= tmp_159_fu_678_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_address0 <= tmp_149_fu_630_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_address0 <= tmp_140_fu_546_p1(11 - 1 downto 0);
        elsif (((exitcond_fu_482_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_address0 <= ap_const_lv64_46F(11 - 1 downto 0);
        elsif (((exitcond_fu_482_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_address0 <= tmp_132_fu_494_p1(11 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    a_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state2, exitcond_fu_482_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state12, tmp_134_fu_505_p1, tmp_143_fu_557_p1, tmp_156_fu_667_p1, tmp_165_fu_751_p1, tmp_174_fu_835_p1, tmp_184_fu_899_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            a_address1 <= ap_const_lv64_46B(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            a_address1 <= ap_const_lv64_46C(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            a_address1 <= ap_const_lv64_471(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            a_address1 <= tmp_184_fu_899_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_address1 <= tmp_174_fu_835_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_address1 <= tmp_165_fu_751_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address1 <= tmp_156_fu_667_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_address1 <= tmp_143_fu_557_p1(11 - 1 downto 0);
        elsif (((exitcond_fu_482_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_address1 <= ap_const_lv64_470(11 - 1 downto 0);
        elsif (((exitcond_fu_482_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_address1 <= tmp_134_fu_505_p1(11 - 1 downto 0);
        else 
            a_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state2, exitcond_fu_482_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((exitcond_fu_482_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((exitcond_fu_482_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state2, exitcond_fu_482_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((exitcond_fu_482_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((exitcond_fu_482_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_482_p2 <= "1" when (i_reg_435 = ap_const_lv7_57) else "0";
    grp_fu_459_p4 <= a_q1(7 downto 5);
    next_mul_fu_851_p2 <= std_logic_vector(unsigned(ap_const_lv11_D) + unsigned(phi_mul_reg_447));

    r_coeffs_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state9, tmp_137_fu_535_p1, tmp_146_fu_609_p1, tmp_152_fu_656_p1, tmp_162_fu_730_p1, tmp_171_fu_814_p1, tmp_177_fu_878_p1, tmp_187_fu_962_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_coeffs_address0 <= ap_const_lv64_2BA(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_coeffs_address0 <= tmp_187_fu_962_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_coeffs_address0 <= tmp_177_fu_878_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_coeffs_address0 <= tmp_171_fu_814_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_address0 <= tmp_162_fu_730_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_address0 <= tmp_152_fu_656_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_address0 <= tmp_146_fu_609_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_coeffs_address0 <= tmp_137_fu_535_p1(10 - 1 downto 0);
        else 
            r_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_address1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9, tmp_193_fu_995_p1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            r_coeffs_address1 <= ap_const_lv64_2B8(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            r_coeffs_address1 <= ap_const_lv64_2B9(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_coeffs_address1 <= ap_const_lv64_2BB(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_coeffs_address1 <= tmp_193_fu_995_p1(10 - 1 downto 0);
        else 
            r_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            r_coeffs_ce0 <= ap_const_logic_1;
        else 
            r_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_ce1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            r_coeffs_ce1 <= ap_const_logic_1;
        else 
            r_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state9, tmp_135_fu_522_p1, tmp_170_cast_fu_599_p1, tmp_179_cast_fu_646_p1, tmp_193_cast_fu_720_p1, tmp_207_cast_fu_804_p1, tmp_216_cast_fu_868_p1, tmp_230_cast_fu_952_p1, tmp_141_cast_fu_1063_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_coeffs_d0 <= tmp_141_cast_fu_1063_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_coeffs_d0 <= tmp_230_cast_fu_952_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_coeffs_d0 <= tmp_216_cast_fu_868_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_coeffs_d0 <= tmp_207_cast_fu_804_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_d0 <= tmp_193_cast_fu_720_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_d0 <= tmp_179_cast_fu_646_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_d0 <= tmp_170_cast_fu_599_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_coeffs_d0 <= tmp_135_fu_522_p1;
        else 
            r_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_d1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9, ap_CS_fsm_state13, tmp_238_cast_fu_985_p1, tmp_136_cast_fu_1041_p1, tmp_149_cast_fu_1105_p1, tmp_130_fu_1121_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            r_coeffs_d1 <= tmp_130_fu_1121_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            r_coeffs_d1 <= tmp_149_cast_fu_1105_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_coeffs_d1 <= tmp_136_cast_fu_1041_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_coeffs_d1 <= tmp_238_cast_fu_985_p1;
        else 
            r_coeffs_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            r_coeffs_we0 <= ap_const_logic_1;
        else 
            r_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_we1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            r_coeffs_we1 <= ap_const_logic_1;
        else 
            r_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_123_fu_1007_p3 <= (reg_477 & ap_const_lv1_0);
    tmp_124_fu_1033_p3 <= (tmp_154_fu_1015_p1 & tmp_61_fu_1027_p2);
    tmp_125_fu_1046_p4 <= a_q0(7 downto 2);
    tmp_126_fu_1056_p3 <= (tmp_179_reg_1270 & tmp_125_fu_1046_p4);
    tmp_128_fu_1076_p3 <= (a_q0 & ap_const_lv3_0);
    tmp_129_fu_1098_p3 <= (tmp_195_reg_1285 & tmp_66_fu_1092_p2);
    tmp_130_fu_1121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_1114_p3),16));
    tmp_132_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_447),64));
    tmp_133_fu_499_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(phi_mul_reg_447));
    tmp_134_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_133_fu_499_p2),64));
    tmp_135_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_514_p3),16));
    tmp_136_cast_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_124_fu_1033_p3),16));
    tmp_136_fu_527_p3 <= (i_reg_435 & ap_const_lv3_0);
    tmp_137_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_136_fu_527_p3),64));
    tmp_139_fu_540_p2 <= std_logic_vector(unsigned(ap_const_lv11_2) + unsigned(phi_mul_reg_447));
    tmp_140_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_139_fu_540_p2),64));
    tmp_141_cast_fu_1063_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_126_fu_1056_p3),16));
    tmp_141_fu_565_p3 <= (a_q0 & ap_const_lv3_0);
    tmp_142_fu_551_p2 <= std_logic_vector(unsigned(ap_const_lv11_3) + unsigned(phi_mul_reg_447));
    tmp_143_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_142_fu_551_p2),64));
    tmp_144_fu_591_p3 <= (tmp_199_fu_573_p1 & tmp_69_fu_585_p2);
    tmp_145_fu_604_p2 <= (tmp_136_reg_1154 or ap_const_lv10_1);
    tmp_146_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_145_fu_604_p2),64));
    tmp_148_fu_624_p2 <= std_logic_vector(unsigned(ap_const_lv11_4) + unsigned(phi_mul_reg_447));
    tmp_149_cast_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_129_fu_1098_p3),16));
    tmp_149_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_148_fu_624_p2),64));
    tmp_150_fu_639_p3 <= (tmp_200_fu_635_p1 & tmp_147_reg_1180);
    tmp_151_fu_651_p2 <= (tmp_136_reg_1154 or ap_const_lv10_2);
    tmp_152_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_151_fu_651_p2),64));
    tmp_153_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1255),8));
    tmp_154_fu_1015_p1 <= a_q1(4 - 1 downto 0);
    tmp_155_fu_661_p2 <= std_logic_vector(unsigned(ap_const_lv11_5) + unsigned(phi_mul_reg_447));
    tmp_156_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_155_fu_661_p2),64));
    tmp_157_fu_686_p3 <= (a_q1 & ap_const_lv1_0);
    tmp_158_fu_672_p2 <= std_logic_vector(unsigned(ap_const_lv11_6) + unsigned(phi_mul_reg_447));
    tmp_159_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_158_fu_672_p2),64));
    tmp_160_fu_712_p3 <= (tmp_204_fu_694_p1 & tmp_74_fu_706_p2);
    tmp_161_fu_725_p2 <= (tmp_136_reg_1154 or ap_const_lv10_3);
    tmp_162_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_161_fu_725_p2),64));
    tmp_164_fu_745_p2 <= std_logic_vector(unsigned(ap_const_lv11_7) + unsigned(phi_mul_reg_447));
    tmp_165_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_164_fu_745_p2),64));
    tmp_166_fu_770_p3 <= (a_q1 & ap_const_lv4_0);
    tmp_167_fu_756_p2 <= std_logic_vector(unsigned(ap_const_lv11_8) + unsigned(phi_mul_reg_447));
    tmp_168_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_167_fu_756_p2),64));
    tmp_169_fu_796_p3 <= (tmp_206_fu_778_p1 & tmp_77_fu_790_p2);
    tmp_170_cast_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_144_fu_591_p3),16));
    tmp_170_fu_809_p2 <= (tmp_136_reg_1154 or ap_const_lv10_4);
    tmp_171_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_170_fu_809_p2),64));
    tmp_173_fu_829_p2 <= std_logic_vector(unsigned(ap_const_lv11_9) + unsigned(phi_mul_reg_447));
    tmp_174_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_173_fu_829_p2),64));
    tmp_175_fu_861_p3 <= (tmp_207_fu_857_p1 & tmp_172_reg_1220);
    tmp_176_fu_873_p2 <= (tmp_136_reg_1154 or ap_const_lv10_5);
    tmp_177_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_176_fu_873_p2),64));
    tmp_179_cast_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_150_fu_639_p3),16));
    tmp_179_fu_1000_p1 <= a_q0(7 - 1 downto 0);
    tmp_180_fu_840_p2 <= std_logic_vector(unsigned(ap_const_lv11_A) + unsigned(phi_mul_reg_447));
    tmp_181_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_180_fu_840_p2),64));
    tmp_182_fu_918_p3 <= (reg_477 & ap_const_lv2_0);
    tmp_183_fu_893_p2 <= std_logic_vector(unsigned(ap_const_lv11_B) + unsigned(phi_mul_reg_447));
    tmp_184_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_183_fu_893_p2),64));
    tmp_185_fu_944_p3 <= (tmp_208_fu_926_p1 & tmp_82_fu_938_p2);
    tmp_186_fu_957_p2 <= (tmp_136_reg_1154 or ap_const_lv10_6);
    tmp_187_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_186_fu_957_p2),64));
    tmp_188_fu_967_p4 <= a_q1(7 downto 3);
    tmp_189_fu_904_p2 <= std_logic_vector(unsigned(ap_const_lv11_C) + unsigned(phi_mul_reg_447));
    tmp_190_fu_910_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_189_fu_904_p2),64));
    tmp_191_fu_977_p3 <= (a_q0 & tmp_188_fu_967_p4);
    tmp_192_fu_990_p2 <= (tmp_136_reg_1154 or ap_const_lv10_7);
    tmp_193_cast_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_160_fu_712_p3),16));
    tmp_193_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_192_fu_990_p2),64));
    tmp_194_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_459_p4),8));
    tmp_195_fu_1068_p1 <= a_q0(2 - 1 downto 0);
    tmp_196_fu_1110_p1 <= a_q1(5 - 1 downto 0);
    tmp_197_fu_510_p1 <= a_q1(5 - 1 downto 0);
    tmp_198_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_138_reg_1165),8));
    tmp_199_fu_573_p1 <= a_q1(2 - 1 downto 0);
    tmp_200_fu_635_p1 <= a_q0(7 - 1 downto 0);
    tmp_202_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_201_reg_1190),8));
    tmp_203_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_163_reg_1205),8));
    tmp_204_fu_694_p1 <= a_q0(4 - 1 downto 0);
    tmp_205_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_178_reg_1240),8));
    tmp_206_fu_778_p1 <= a_q0(1 - 1 downto 0);
    tmp_207_cast_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_169_fu_796_p3),16));
    tmp_207_fu_857_p1 <= a_q1(6 - 1 downto 0);
    tmp_208_fu_926_p1 <= a_q1(3 - 1 downto 0);
    tmp_216_cast_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_175_fu_861_p3),16));
    tmp_230_cast_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_185_fu_944_p3),16));
    tmp_238_cast_fu_985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_191_fu_977_p3),16));
    tmp_33_fu_1114_p3 <= (tmp_196_reg_1295 & a_q1);
    tmp_35_fu_514_p3 <= (tmp_197_fu_510_p1 & a_q0);
    tmp_60_fu_1019_p3 <= (ap_const_lv1_0 & tmp_153_fu_1004_p1);
    tmp_61_fu_1027_p2 <= (tmp_60_fu_1019_p3 or tmp_123_fu_1007_p3);
    tmp_65_fu_1084_p3 <= (ap_const_lv3_0 & tmp_194_fu_1072_p1);
    tmp_66_fu_1092_p2 <= (tmp_65_fu_1084_p3 or tmp_128_fu_1076_p3);
    tmp_68_fu_577_p3 <= (ap_const_lv3_0 & tmp_198_fu_562_p1);
    tmp_69_fu_585_p2 <= (tmp_68_fu_577_p3 or tmp_141_fu_565_p3);
    tmp_73_fu_698_p3 <= (ap_const_lv1_0 & tmp_202_fu_683_p1);
    tmp_74_fu_706_p2 <= (tmp_73_fu_698_p3 or tmp_157_fu_686_p3);
    tmp_76_fu_782_p3 <= (ap_const_lv4_0 & tmp_203_fu_767_p1);
    tmp_77_fu_790_p2 <= (tmp_76_fu_782_p3 or tmp_166_fu_770_p3);
    tmp_81_fu_930_p3 <= (ap_const_lv2_0 & tmp_205_fu_915_p1);
    tmp_82_fu_938_p2 <= (tmp_81_fu_930_p3 or tmp_182_fu_918_p3);
    tmp_s_fu_488_p2 <= std_logic_vector(unsigned(i_reg_435) + unsigned(ap_const_lv7_1));
end behav;
