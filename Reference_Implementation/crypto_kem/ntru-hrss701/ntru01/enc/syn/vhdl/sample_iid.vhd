-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sample_iid is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce0 : OUT STD_LOGIC;
    r_coeffs_we0 : OUT STD_LOGIC;
    r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    uniformbytes_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    uniformbytes_ce0 : OUT STD_LOGIC;
    uniformbytes_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    uniformbytes_offset : IN STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of sample_iid is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_2BC : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010111100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_2BC : STD_LOGIC_VECTOR (9 downto 0) := "1010111100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_6_fu_104_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_reg_318 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_3_fu_114_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_reg_326 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_2_fu_246_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_2_reg_336 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_reg_92 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sum_cast_fu_129_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_317_i_fu_311_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_cast_fu_120_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_fu_124_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_138_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_134_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_309_i_cast_fu_152_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_308_i_cast_fu_148_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_162_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_168_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_186_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_fu_182_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal fold1_i_cast_fu_196_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_311_i_cast_fu_202_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_310_i_cast_fu_178_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_1_fu_206_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_212_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_156_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_226_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal fold2_i_cast_fu_236_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_313_i_cast_fu_242_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_312_i_cast_fu_222_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_fu_257_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_fu_262_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_cast_fu_270_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_314_i_fu_278_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal not_tmp_37_i_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_315_i_cast_cast_fu_293_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_316_i_fu_301_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_314_i_cast_fu_283_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_316_i_cast_fu_307_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_92 <= i_3_reg_326;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_92 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_3_reg_326 <= i_3_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                r_2_reg_336 <= r_2_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_6_reg_318 <= tmp_6_fu_104_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_108_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_108_p2)
    begin
        if ((((exitcond_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_108_p2)
    begin
        if (((exitcond_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_cast_fu_270_p3 <= 
        ap_const_lv3_7 when (tmp_11_fu_262_p3(0) = '1') else 
        ap_const_lv3_0;
    exitcond_fu_108_p2 <= "1" when (i_reg_92 = ap_const_lv10_2BC) else "0";
    fold1_i_cast_fu_196_p2 <= std_logic_vector(unsigned(tmp_2_fu_186_p4) + unsigned(tmp_10_fu_182_p1));
    fold2_i_cast_fu_236_p2 <= std_logic_vector(unsigned(fold1_i_cast_fu_196_p2) + unsigned(tmp_3_fu_226_p4));
    i_3_fu_114_p2 <= std_logic_vector(unsigned(i_reg_92) + unsigned(ap_const_lv10_1));
    not_tmp_37_i_fu_287_p2 <= (tmp_11_fu_262_p3 xor ap_const_lv1_1);
    r_1_fu_206_p2 <= std_logic_vector(unsigned(tmp_311_i_cast_fu_202_p1) + unsigned(tmp_310_i_cast_fu_178_p1));
    r_2_fu_246_p2 <= std_logic_vector(unsigned(tmp_313_i_cast_fu_242_p1) + unsigned(tmp_312_i_cast_fu_222_p1));

    r_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, tmp_fu_252_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_address0 <= tmp_fu_252_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r_coeffs_address0 <= ap_const_lv64_2BC(10 - 1 downto 0);
        else 
            r_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            r_coeffs_ce0 <= ap_const_logic_1;
        else 
            r_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, tmp_317_i_fu_311_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_d0 <= tmp_317_i_fu_311_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r_coeffs_d0 <= ap_const_lv16_0;
        else 
            r_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_we0_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_108_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((exitcond_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            r_coeffs_we0 <= ap_const_logic_1;
        else 
            r_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_162_p2 <= std_logic_vector(unsigned(tmp_309_i_cast_fu_152_p1) + unsigned(tmp_308_i_cast_fu_148_p1));
    sum_cast_fu_129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_124_p2),64));
    sum_fu_124_p2 <= std_logic_vector(unsigned(tmp_6_reg_318) + unsigned(tmp_cast_fu_120_p1));
    t_fu_257_p2 <= std_logic_vector(signed(ap_const_lv3_5) + signed(r_2_reg_336));
    tmp_10_fu_182_p1 <= uniformbytes_q0(2 - 1 downto 0);
    tmp_11_fu_262_p3 <= t_fu_257_p2(2 downto 2);
    tmp_2_fu_186_p4 <= uniformbytes_q0(5 downto 4);
    tmp_308_i_cast_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_138_p4),5));
    tmp_309_i_cast_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_134_p1),5));
    tmp_310_i_cast_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_168_p4),4));
    tmp_311_i_cast_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold1_i_cast_fu_196_p2),4));
    tmp_312_i_cast_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_212_p4),3));
    tmp_313_i_cast_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold2_i_cast_fu_236_p2),3));
    tmp_314_i_cast_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_314_i_fu_278_p2),16));
    tmp_314_i_fu_278_p2 <= (r_2_reg_336 and c_cast_fu_270_p3);
    tmp_315_i_cast_cast_fu_293_p3 <= 
        ap_const_lv3_7 when (not_tmp_37_i_fu_287_p2(0) = '1') else 
        ap_const_lv3_0;
        tmp_316_i_cast_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_316_i_fu_301_p2),16));

    tmp_316_i_fu_301_p2 <= (tmp_315_i_cast_cast_fu_293_p3 and t_fu_257_p2);
    tmp_317_i_fu_311_p2 <= (tmp_316_i_cast_fu_307_p1 xor tmp_314_i_cast_fu_283_p1);
    tmp_3_fu_226_p4 <= tmp_5_fu_156_p2(3 downto 2);
    tmp_4_fu_138_p4 <= uniformbytes_q0(7 downto 4);
    tmp_5_fu_156_p2 <= std_logic_vector(unsigned(tmp_4_fu_138_p4) + unsigned(tmp_9_fu_134_p1));
    tmp_6_fu_104_p1 <= uniformbytes_offset(11 - 1 downto 0);
    tmp_7_fu_168_p4 <= r_fu_162_p2(4 downto 2);
    tmp_8_fu_212_p4 <= r_1_fu_206_p2(3 downto 2);
    tmp_9_fu_134_p1 <= uniformbytes_q0(4 - 1 downto 0);
    tmp_cast_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_92),11));
    tmp_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_92),64));
    uniformbytes_address0 <= sum_cast_fu_129_p1(11 - 1 downto 0);

    uniformbytes_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            uniformbytes_ce0 <= ap_const_logic_1;
        else 
            uniformbytes_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
