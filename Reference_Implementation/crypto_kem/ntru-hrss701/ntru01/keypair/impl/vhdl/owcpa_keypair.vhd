-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity owcpa_keypair is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pk_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pk_ce0 : OUT STD_LOGIC;
    pk_we0 : OUT STD_LOGIC;
    pk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pk_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pk_ce1 : OUT STD_LOGIC;
    pk_we1 : OUT STD_LOGIC;
    pk_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sk_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    sk_ce0 : OUT STD_LOGIC;
    sk_we0 : OUT STD_LOGIC;
    sk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sk_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    sk_ce1 : OUT STD_LOGIC;
    sk_we1 : OUT STD_LOGIC;
    sk_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    seed_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    seed_ce0 : OUT STD_LOGIC;
    seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of owcpa_keypair is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (58 downto 0) := "00000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (58 downto 0) := "00000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (58 downto 0) := "00000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (58 downto 0) := "00000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (58 downto 0) := "00000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (58 downto 0) := "00000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (58 downto 0) := "00001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (58 downto 0) := "00010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (58 downto 0) := "00100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (58 downto 0) := "01000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (58 downto 0) := "10000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv10_2BC : STD_LOGIC_VECTOR (9 downto 0) := "1010111100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_2BC : STD_LOGIC_VECTOR (11 downto 0) := "001010111100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv10_8C : STD_LOGIC_VECTOR (9 downto 0) := "0010001100";
    constant ap_const_lv64_2BC : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010111100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv10_2BD : STD_LOGIC_VECTOR (9 downto 0) := "1010111101";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_33_fu_395_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_33_reg_686 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal f_coeffs_addr_reg_691 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_34_fu_457_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_34_reg_699 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal h_coeffs_addr_1_reg_704 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i6_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_coeffs_addr_reg_709 : STD_LOGIC_VECTOR (9 downto 0);
    signal x3_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal last_coeff_reg_714 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_35_fu_519_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_35_reg_722 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_i2_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_229_i_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_229_i_reg_732 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_36_fu_570_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_36_reg_750 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal G_coeffs_addr_2_reg_755 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_37_fu_608_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_37_reg_763 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_i4_76_fu_614_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i4_76_reg_768 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_i_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_38_fu_640_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_38_reg_781 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_252_i_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_252_i_reg_786 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i7_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_coeffs_addr_reg_796 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_39_fu_657_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_39_reg_804 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal h_coeffs_addr_6_reg_809 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i2_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal b_coeffs_ce0 : STD_LOGIC;
    signal b_coeffs_we0 : STD_LOGIC;
    signal b_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_coeffs_ce0 : STD_LOGIC;
    signal c_coeffs_we0 : STD_LOGIC;
    signal c_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_coeffs_ce0 : STD_LOGIC;
    signal s_coeffs_we0 : STD_LOGIC;
    signal s_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ai2_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal ai2_coeffs_ce0 : STD_LOGIC;
    signal ai2_coeffs_we0 : STD_LOGIC_VECTOR (1 downto 0);
    signal ai2_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x1_coeffs_ce0 : STD_LOGIC;
    signal x1_coeffs_we0 : STD_LOGIC;
    signal x1_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x1_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal x1_coeffs_ce1 : STD_LOGIC;
    signal x1_coeffs_we1 : STD_LOGIC;
    signal x1_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x2_coeffs_ce0 : STD_LOGIC;
    signal x2_coeffs_we0 : STD_LOGIC_VECTOR (1 downto 0);
    signal x2_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal x2_coeffs_ce1 : STD_LOGIC;
    signal x2_coeffs_we1 : STD_LOGIC_VECTOR (1 downto 0);
    signal x2_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x3_coeffs_ce0 : STD_LOGIC;
    signal x3_coeffs_we0 : STD_LOGIC;
    signal x3_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal x3_coeffs_ce1 : STD_LOGIC;
    signal x3_coeffs_we1 : STD_LOGIC;
    signal x3_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x3_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x4_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x4_coeffs_ce0 : STD_LOGIC;
    signal x4_coeffs_we0 : STD_LOGIC;
    signal x4_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x4_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x5_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal x5_coeffs_ce0 : STD_LOGIC;
    signal x5_coeffs_we0 : STD_LOGIC;
    signal x5_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_inv_fu_328_ap_start : STD_LOGIC;
    signal grp_poly_S3_inv_fu_328_ap_done : STD_LOGIC;
    signal grp_poly_S3_inv_fu_328_ap_idle : STD_LOGIC;
    signal grp_poly_S3_inv_fu_328_ap_ready : STD_LOGIC;
    signal grp_poly_S3_inv_fu_328_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_inv_fu_328_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_inv_fu_328_r_coeffs_we0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_poly_S3_inv_fu_328_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_inv_fu_328_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_inv_fu_328_r_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_S3_inv_fu_328_r_coeffs_we1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_poly_S3_inv_fu_328_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_inv_fu_328_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_inv_fu_328_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_R2_inv_fu_334_ap_start : STD_LOGIC;
    signal grp_poly_R2_inv_fu_334_ap_done : STD_LOGIC;
    signal grp_poly_R2_inv_fu_334_ap_idle : STD_LOGIC;
    signal grp_poly_R2_inv_fu_334_ap_ready : STD_LOGIC;
    signal grp_poly_R2_inv_fu_334_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_R2_inv_fu_334_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_R2_inv_fu_334_r_coeffs_we0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_poly_R2_inv_fu_334_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_R2_inv_fu_334_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_R2_inv_fu_334_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_1_fu_340_ap_start : STD_LOGIC;
    signal grp_poly_Sq_tobytes_1_fu_340_ap_done : STD_LOGIC;
    signal grp_poly_Sq_tobytes_1_fu_340_ap_idle : STD_LOGIC;
    signal grp_poly_Sq_tobytes_1_fu_340_ap_ready : STD_LOGIC;
    signal grp_poly_Sq_tobytes_1_fu_340_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_Sq_tobytes_1_fu_340_r_ce0 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_1_fu_340_r_we0 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_1_fu_340_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_Sq_tobytes_1_fu_340_r_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_Sq_tobytes_1_fu_340_r_ce1 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_1_fu_340_r_we1 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_1_fu_340_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_Sq_tobytes_1_fu_340_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_tobytes_1_fu_340_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_347_ap_start : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_347_ap_done : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_347_ap_idle : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_347_ap_ready : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_347_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_Sq_tobytes_fu_347_r_ce0 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_347_r_we0 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_347_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_Sq_tobytes_fu_347_r_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_Sq_tobytes_fu_347_r_ce1 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_347_r_we1 : STD_LOGIC;
    signal grp_poly_Sq_tobytes_fu_347_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_Sq_tobytes_fu_347_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Sq_tobytes_fu_347_a_coeffs_ce0 : STD_LOGIC;
    signal grp_sample_iid_plus_fu_354_ap_start : STD_LOGIC;
    signal grp_sample_iid_plus_fu_354_ap_done : STD_LOGIC;
    signal grp_sample_iid_plus_fu_354_ap_idle : STD_LOGIC;
    signal grp_sample_iid_plus_fu_354_ap_ready : STD_LOGIC;
    signal grp_sample_iid_plus_fu_354_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_sample_iid_plus_fu_354_r_coeffs_ce0 : STD_LOGIC;
    signal grp_sample_iid_plus_fu_354_r_coeffs_we0 : STD_LOGIC;
    signal grp_sample_iid_plus_fu_354_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_iid_plus_fu_354_r_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_iid_plus_fu_354_r_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_sample_iid_plus_fu_354_r_coeffs_ce1 : STD_LOGIC;
    signal grp_sample_iid_plus_fu_354_r_coeffs_we1 : STD_LOGIC;
    signal grp_sample_iid_plus_fu_354_r_coeffs_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_iid_plus_fu_354_r_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sample_iid_plus_fu_354_uniformbytes_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_sample_iid_plus_fu_354_uniformbytes_ce0 : STD_LOGIC;
    signal grp_sample_iid_plus_fu_354_uniformbytes_offset : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_poly_Rq_mul_fu_365_ap_start : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_365_ap_done : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_365_ap_idle : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_365_ap_ready : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_365_r_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_365_r_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_365_r_coeffs_we0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_365_r_coeffs_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_mul_fu_365_r_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_mul_fu_365_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_365_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_365_a_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_Rq_mul_fu_365_b_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_Rq_mul_fu_365_b_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_Rq_mul_fu_365_b_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_tobytes_fu_372_ap_start : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_372_ap_done : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_372_ap_idle : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_372_ap_ready : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_372_msg_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_poly_S3_tobytes_fu_372_msg_ce0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_372_msg_we0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_372_msg_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_poly_S3_tobytes_fu_372_msg_offset : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_tobytes_fu_372_a_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_tobytes_fu_372_a_coeffs_ce0 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_372_a_coeffs_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_poly_S3_tobytes_fu_372_a_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_poly_S3_tobytes_fu_372_a_coeffs_ce1 : STD_LOGIC;
    signal grp_poly_S3_tobytes_fu_372_a_coeffs_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_i_reg_251 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_i5_reg_262 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_i2_reg_273 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_reg_284 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_i1_reg_295 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_1_i_reg_306 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal i_i3_reg_317 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_poly_S3_inv_fu_328_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_poly_R2_inv_fu_334_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_poly_Sq_tobytes_1_fu_340_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_poly_Sq_tobytes_fu_347_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal grp_sample_iid_plus_fu_354_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_poly_Rq_mul_fu_365_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal grp_poly_S3_tobytes_fu_372_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_i_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i7_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i4_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_i_fu_442_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_40_i1_fu_504_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_158_i_cast_fu_678_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_231_i_cast_fu_545_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_233_i_cast_fu_559_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_296_cast_fu_597_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_382_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal tmp_fu_406_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_336_fu_422_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_38_i_cast_fu_416_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_40_fu_432_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_39_fu_426_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_41_fu_468_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_337_fu_484_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_38_i1_cast_fu_478_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_44_fu_494_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_43_fu_488_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_230_i_fu_535_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_339_fu_541_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_232_i_fu_550_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_338_fu_555_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_340_fu_581_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_242_fu_587_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_341_fu_593_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_342_fu_619_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i6_cast_fu_623_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i5_fu_668_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_343_fu_674_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_block_state55_on_subcall_done : BOOLEAN;

    component poly_S3_inv IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC_VECTOR (1 downto 0);
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_R2_inv IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_Sq_tobytes_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        r_ce0 : OUT STD_LOGIC;
        r_we0 : OUT STD_LOGIC;
        r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        r_ce1 : OUT STD_LOGIC;
        r_we1 : OUT STD_LOGIC;
        r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_Sq_tobytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        r_ce0 : OUT STD_LOGIC;
        r_we0 : OUT STD_LOGIC;
        r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        r_ce1 : OUT STD_LOGIC;
        r_we1 : OUT STD_LOGIC;
        r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component sample_iid_plus IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        uniformbytes_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        uniformbytes_ce0 : OUT STD_LOGIC;
        uniformbytes_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        uniformbytes_offset : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component poly_Rq_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        b_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        b_coeffs_ce0 : OUT STD_LOGIC;
        b_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_S3_tobytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        msg_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msg_ce0 : OUT STD_LOGIC;
        msg_we0 : OUT STD_LOGIC;
        msg_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        msg_offset : IN STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce0 : OUT STD_LOGIC;
        a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_coeffs_ce1 : OUT STD_LOGIC;
        a_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component poly_S3_inv_b_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_keypair_ai2_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (1 downto 0);
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_keypair_x1_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component owcpa_keypair_x2_coeffs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (1 downto 0);
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC_VECTOR (1 downto 0);
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    b_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 701,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_coeffs_address0,
        ce0 => b_coeffs_ce0,
        we0 => b_coeffs_we0,
        d0 => b_coeffs_d0,
        q0 => b_coeffs_q0);

    c_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 701,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_coeffs_address0,
        ce0 => c_coeffs_ce0,
        we0 => c_coeffs_we0,
        d0 => c_coeffs_d0,
        q0 => c_coeffs_q0);

    s_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 701,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => s_coeffs_address0,
        ce0 => s_coeffs_ce0,
        we0 => s_coeffs_we0,
        d0 => grp_poly_Rq_mul_fu_365_r_coeffs_d0,
        q0 => s_coeffs_q0);

    ai2_coeffs_U : component owcpa_keypair_ai2_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 701,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ai2_coeffs_address0,
        ce0 => ai2_coeffs_ce0,
        we0 => ai2_coeffs_we0,
        d0 => grp_poly_R2_inv_fu_334_r_coeffs_d0,
        q0 => ai2_coeffs_q0);

    x1_coeffs_U : component owcpa_keypair_x1_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 701,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x1_coeffs_address0,
        ce0 => x1_coeffs_ce0,
        we0 => x1_coeffs_we0,
        d0 => x1_coeffs_d0,
        q0 => x1_coeffs_q0,
        address1 => x1_coeffs_address1,
        ce1 => x1_coeffs_ce1,
        we1 => x1_coeffs_we1,
        d1 => grp_sample_iid_plus_fu_354_r_coeffs_d1,
        q1 => x1_coeffs_q1);

    x2_coeffs_U : component owcpa_keypair_x2_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 701,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x2_coeffs_address0,
        ce0 => x2_coeffs_ce0,
        we0 => x2_coeffs_we0,
        d0 => x2_coeffs_d0,
        q0 => x2_coeffs_q0,
        address1 => x2_coeffs_address1,
        ce1 => x2_coeffs_ce1,
        we1 => x2_coeffs_we1,
        d1 => grp_poly_S3_inv_fu_328_r_coeffs_d1,
        q1 => x2_coeffs_q1);

    x3_coeffs_U : component owcpa_keypair_x1_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 701,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x3_coeffs_address0,
        ce0 => x3_coeffs_ce0,
        we0 => x3_coeffs_we0,
        d0 => x3_coeffs_d0,
        q0 => x3_coeffs_q0,
        address1 => x3_coeffs_address1,
        ce1 => x3_coeffs_ce1,
        we1 => x3_coeffs_we1,
        d1 => x3_coeffs_d1,
        q1 => x3_coeffs_q1);

    x4_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 701,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x4_coeffs_address0,
        ce0 => x4_coeffs_ce0,
        we0 => x4_coeffs_we0,
        d0 => x4_coeffs_d0,
        q0 => x4_coeffs_q0);

    x5_coeffs_U : component poly_S3_inv_b_coeffs
    generic map (
        DataWidth => 16,
        AddressRange => 701,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x5_coeffs_address0,
        ce0 => x5_coeffs_ce0,
        we0 => x5_coeffs_we0,
        d0 => grp_poly_Rq_mul_fu_365_r_coeffs_d0,
        q0 => x5_coeffs_q0);

    grp_poly_S3_inv_fu_328 : component poly_S3_inv
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_S3_inv_fu_328_ap_start,
        ap_done => grp_poly_S3_inv_fu_328_ap_done,
        ap_idle => grp_poly_S3_inv_fu_328_ap_idle,
        ap_ready => grp_poly_S3_inv_fu_328_ap_ready,
        r_coeffs_address0 => grp_poly_S3_inv_fu_328_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_S3_inv_fu_328_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_S3_inv_fu_328_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_S3_inv_fu_328_r_coeffs_d0,
        r_coeffs_q0 => x2_coeffs_q0,
        r_coeffs_address1 => grp_poly_S3_inv_fu_328_r_coeffs_address1,
        r_coeffs_ce1 => grp_poly_S3_inv_fu_328_r_coeffs_ce1,
        r_coeffs_we1 => grp_poly_S3_inv_fu_328_r_coeffs_we1,
        r_coeffs_d1 => grp_poly_S3_inv_fu_328_r_coeffs_d1,
        r_coeffs_q1 => x2_coeffs_q1,
        a_coeffs_address0 => grp_poly_S3_inv_fu_328_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_S3_inv_fu_328_a_coeffs_ce0,
        a_coeffs_q0 => x1_coeffs_q0);

    grp_poly_R2_inv_fu_334 : component poly_R2_inv
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_R2_inv_fu_334_ap_start,
        ap_done => grp_poly_R2_inv_fu_334_ap_done,
        ap_idle => grp_poly_R2_inv_fu_334_ap_idle,
        ap_ready => grp_poly_R2_inv_fu_334_ap_ready,
        r_coeffs_address0 => grp_poly_R2_inv_fu_334_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_R2_inv_fu_334_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_R2_inv_fu_334_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_R2_inv_fu_334_r_coeffs_d0,
        r_coeffs_q0 => ai2_coeffs_q0,
        a_coeffs_address0 => grp_poly_R2_inv_fu_334_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_R2_inv_fu_334_a_coeffs_ce0,
        a_coeffs_q0 => x3_coeffs_q0);

    grp_poly_Sq_tobytes_1_fu_340 : component poly_Sq_tobytes_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Sq_tobytes_1_fu_340_ap_start,
        ap_done => grp_poly_Sq_tobytes_1_fu_340_ap_done,
        ap_idle => grp_poly_Sq_tobytes_1_fu_340_ap_idle,
        ap_ready => grp_poly_Sq_tobytes_1_fu_340_ap_ready,
        r_address0 => grp_poly_Sq_tobytes_1_fu_340_r_address0,
        r_ce0 => grp_poly_Sq_tobytes_1_fu_340_r_ce0,
        r_we0 => grp_poly_Sq_tobytes_1_fu_340_r_we0,
        r_d0 => grp_poly_Sq_tobytes_1_fu_340_r_d0,
        r_address1 => grp_poly_Sq_tobytes_1_fu_340_r_address1,
        r_ce1 => grp_poly_Sq_tobytes_1_fu_340_r_ce1,
        r_we1 => grp_poly_Sq_tobytes_1_fu_340_r_we1,
        r_d1 => grp_poly_Sq_tobytes_1_fu_340_r_d1,
        a_coeffs_address0 => grp_poly_Sq_tobytes_1_fu_340_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_Sq_tobytes_1_fu_340_a_coeffs_ce0,
        a_coeffs_q0 => x3_coeffs_q0);

    grp_poly_Sq_tobytes_fu_347 : component poly_Sq_tobytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Sq_tobytes_fu_347_ap_start,
        ap_done => grp_poly_Sq_tobytes_fu_347_ap_done,
        ap_idle => grp_poly_Sq_tobytes_fu_347_ap_idle,
        ap_ready => grp_poly_Sq_tobytes_fu_347_ap_ready,
        r_address0 => grp_poly_Sq_tobytes_fu_347_r_address0,
        r_ce0 => grp_poly_Sq_tobytes_fu_347_r_ce0,
        r_we0 => grp_poly_Sq_tobytes_fu_347_r_we0,
        r_d0 => grp_poly_Sq_tobytes_fu_347_r_d0,
        r_address1 => grp_poly_Sq_tobytes_fu_347_r_address1,
        r_ce1 => grp_poly_Sq_tobytes_fu_347_r_ce1,
        r_we1 => grp_poly_Sq_tobytes_fu_347_r_we1,
        r_d1 => grp_poly_Sq_tobytes_fu_347_r_d1,
        a_coeffs_address0 => grp_poly_Sq_tobytes_fu_347_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_Sq_tobytes_fu_347_a_coeffs_ce0,
        a_coeffs_q0 => x3_coeffs_q0);

    grp_sample_iid_plus_fu_354 : component sample_iid_plus
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sample_iid_plus_fu_354_ap_start,
        ap_done => grp_sample_iid_plus_fu_354_ap_done,
        ap_idle => grp_sample_iid_plus_fu_354_ap_idle,
        ap_ready => grp_sample_iid_plus_fu_354_ap_ready,
        r_coeffs_address0 => grp_sample_iid_plus_fu_354_r_coeffs_address0,
        r_coeffs_ce0 => grp_sample_iid_plus_fu_354_r_coeffs_ce0,
        r_coeffs_we0 => grp_sample_iid_plus_fu_354_r_coeffs_we0,
        r_coeffs_d0 => grp_sample_iid_plus_fu_354_r_coeffs_d0,
        r_coeffs_q0 => grp_sample_iid_plus_fu_354_r_coeffs_q0,
        r_coeffs_address1 => grp_sample_iid_plus_fu_354_r_coeffs_address1,
        r_coeffs_ce1 => grp_sample_iid_plus_fu_354_r_coeffs_ce1,
        r_coeffs_we1 => grp_sample_iid_plus_fu_354_r_coeffs_we1,
        r_coeffs_d1 => grp_sample_iid_plus_fu_354_r_coeffs_d1,
        r_coeffs_q1 => grp_sample_iid_plus_fu_354_r_coeffs_q1,
        uniformbytes_address0 => grp_sample_iid_plus_fu_354_uniformbytes_address0,
        uniformbytes_ce0 => grp_sample_iid_plus_fu_354_uniformbytes_ce0,
        uniformbytes_q0 => seed_q0,
        uniformbytes_offset => grp_sample_iid_plus_fu_354_uniformbytes_offset);

    grp_poly_Rq_mul_fu_365 : component poly_Rq_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_Rq_mul_fu_365_ap_start,
        ap_done => grp_poly_Rq_mul_fu_365_ap_done,
        ap_idle => grp_poly_Rq_mul_fu_365_ap_idle,
        ap_ready => grp_poly_Rq_mul_fu_365_ap_ready,
        r_coeffs_address0 => grp_poly_Rq_mul_fu_365_r_coeffs_address0,
        r_coeffs_ce0 => grp_poly_Rq_mul_fu_365_r_coeffs_ce0,
        r_coeffs_we0 => grp_poly_Rq_mul_fu_365_r_coeffs_we0,
        r_coeffs_d0 => grp_poly_Rq_mul_fu_365_r_coeffs_d0,
        r_coeffs_q0 => grp_poly_Rq_mul_fu_365_r_coeffs_q0,
        a_coeffs_address0 => grp_poly_Rq_mul_fu_365_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_Rq_mul_fu_365_a_coeffs_ce0,
        a_coeffs_q0 => grp_poly_Rq_mul_fu_365_a_coeffs_q0,
        b_coeffs_address0 => grp_poly_Rq_mul_fu_365_b_coeffs_address0,
        b_coeffs_ce0 => grp_poly_Rq_mul_fu_365_b_coeffs_ce0,
        b_coeffs_q0 => grp_poly_Rq_mul_fu_365_b_coeffs_q0);

    grp_poly_S3_tobytes_fu_372 : component poly_S3_tobytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_poly_S3_tobytes_fu_372_ap_start,
        ap_done => grp_poly_S3_tobytes_fu_372_ap_done,
        ap_idle => grp_poly_S3_tobytes_fu_372_ap_idle,
        ap_ready => grp_poly_S3_tobytes_fu_372_ap_ready,
        msg_address0 => grp_poly_S3_tobytes_fu_372_msg_address0,
        msg_ce0 => grp_poly_S3_tobytes_fu_372_msg_ce0,
        msg_we0 => grp_poly_S3_tobytes_fu_372_msg_we0,
        msg_d0 => grp_poly_S3_tobytes_fu_372_msg_d0,
        msg_offset => grp_poly_S3_tobytes_fu_372_msg_offset,
        a_coeffs_address0 => grp_poly_S3_tobytes_fu_372_a_coeffs_address0,
        a_coeffs_ce0 => grp_poly_S3_tobytes_fu_372_a_coeffs_ce0,
        a_coeffs_q0 => grp_poly_S3_tobytes_fu_372_a_coeffs_q0,
        a_coeffs_address1 => grp_poly_S3_tobytes_fu_372_a_coeffs_address1,
        a_coeffs_ce1 => grp_poly_S3_tobytes_fu_372_a_coeffs_ce1,
        a_coeffs_q1 => grp_poly_S3_tobytes_fu_372_a_coeffs_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_poly_R2_inv_fu_334_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_R2_inv_fu_334_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    grp_poly_R2_inv_fu_334_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_R2_inv_fu_334_ap_ready = ap_const_logic_1)) then 
                    grp_poly_R2_inv_fu_334_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_Rq_mul_fu_365_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Rq_mul_fu_365_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond_i2_fu_651_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond_i7_fu_634_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond_fu_564_p2 = ap_const_lv1_1)))) then 
                    grp_poly_Rq_mul_fu_365_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Rq_mul_fu_365_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Rq_mul_fu_365_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_S3_inv_fu_328_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_S3_inv_fu_328_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_poly_S3_inv_fu_328_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_S3_inv_fu_328_ap_ready = ap_const_logic_1)) then 
                    grp_poly_S3_inv_fu_328_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_S3_tobytes_fu_372_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_S3_tobytes_fu_372_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_poly_S3_tobytes_fu_372_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_S3_tobytes_fu_372_ap_ready = ap_const_logic_1)) then 
                    grp_poly_S3_tobytes_fu_372_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_Sq_tobytes_1_fu_340_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Sq_tobytes_1_fu_340_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond_i2_fu_651_p2 = ap_const_lv1_1))) then 
                    grp_poly_Sq_tobytes_1_fu_340_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Sq_tobytes_1_fu_340_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Sq_tobytes_1_fu_340_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_poly_Sq_tobytes_fu_347_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_poly_Sq_tobytes_fu_347_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                    grp_poly_Sq_tobytes_fu_347_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_poly_Sq_tobytes_fu_347_ap_ready = ap_const_logic_1)) then 
                    grp_poly_Sq_tobytes_fu_347_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sample_iid_plus_fu_354_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sample_iid_plus_fu_354_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_sample_iid_plus_fu_354_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sample_iid_plus_fu_354_ap_ready = ap_const_logic_1)) then 
                    grp_sample_iid_plus_fu_354_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_i_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond1_i_fu_602_p2 = ap_const_lv1_1))) then 
                i_1_i_reg_306 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_1_i_reg_306 <= i_38_reg_781;
            end if; 
        end if;
    end process;

    i_i1_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_i1_reg_295 <= i_37_reg_763;
            elsif (((grp_poly_R2_inv_fu_334_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                i_i1_reg_295 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i2_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_i2_reg_273 <= i_35_reg_722;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_i2_reg_273 <= ap_const_lv10_2BC;
            end if; 
        end if;
    end process;

    i_i3_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                i_i3_reg_317 <= i_39_reg_804;
            elsif (((grp_poly_Rq_mul_fu_365_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                i_i3_reg_317 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_i5_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_i_fu_389_p2 = ap_const_lv1_1))) then 
                i_i5_reg_262 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_i5_reg_262 <= i_34_reg_699;
            end if; 
        end if;
    end process;

    i_i_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_i_reg_251 <= i_33_reg_686;
            elsif (((grp_poly_S3_tobytes_fu_372_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_i_reg_251 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_reg_284 <= i_36_reg_750;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_reg_284 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond_fu_564_p2 = ap_const_lv1_0))) then
                G_coeffs_addr_2_reg_755 <= tmp_s_fu_576_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_i_fu_389_p2 = ap_const_lv1_0))) then
                f_coeffs_addr_reg_691 <= tmp_i_fu_401_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_i6_fu_451_p2 = ap_const_lv1_0))) then
                h_coeffs_addr_1_reg_704 <= tmp_i7_fu_463_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond_i2_fu_651_p2 = ap_const_lv1_0))) then
                h_coeffs_addr_6_reg_809 <= tmp_i3_fu_663_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_33_reg_686 <= i_33_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_34_reg_699 <= i_34_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_i2_fu_513_p2 = ap_const_lv1_0))) then
                i_35_reg_722 <= i_35_fu_519_p2;
                    tmp_229_i_reg_732(9 downto 0) <= tmp_229_i_fu_530_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_36_reg_750 <= i_36_fu_570_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                i_37_reg_763 <= i_37_fu_608_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                i_38_reg_781 <= i_38_fu_640_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                i_39_reg_804 <= i_39_fu_657_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                last_coeff_reg_714 <= x3_coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond_i7_fu_634_p2 = ap_const_lv1_0))) then
                    tmp_252_i_reg_786(9 downto 0) <= tmp_252_i_fu_646_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond1_i_fu_602_p2 = ap_const_lv1_0))) then
                    tmp_i4_76_reg_768(9 downto 0) <= tmp_i4_76_fu_614_p1(9 downto 0);
            end if;
        end if;
    end process;
    tmp_229_i_reg_732(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    tmp_i4_76_reg_768(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    tmp_252_i_reg_786(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state9, exitcond_i_fu_389_p2, ap_CS_fsm_state11, exitcond_i6_fu_451_p2, ap_CS_fsm_state14, tmp_i2_fu_513_p2, ap_CS_fsm_state17, exitcond_fu_564_p2, ap_CS_fsm_state22, exitcond1_i_fu_602_p2, ap_CS_fsm_state24, exitcond_i7_fu_634_p2, ap_CS_fsm_state53, exitcond_i2_fu_651_p2, grp_poly_R2_inv_fu_334_ap_done, grp_poly_Sq_tobytes_fu_347_ap_done, grp_sample_iid_plus_fu_354_ap_done, grp_poly_Rq_mul_fu_365_ap_done, grp_poly_S3_tobytes_fu_372_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state21, ap_CS_fsm_state52, ap_CS_fsm_state4, ap_CS_fsm_state55, ap_CS_fsm_state59, ap_CS_fsm_state2, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state57, ap_CS_fsm_state6, ap_block_state4_on_subcall_done, ap_block_state55_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_sample_iid_plus_fu_354_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_poly_S3_tobytes_fu_372_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_poly_S3_tobytes_fu_372_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_i_fu_389_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_i6_fu_451_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_i2_fu_513_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond_fu_564_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state19 => 
                if (((grp_poly_Rq_mul_fu_365_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_poly_R2_inv_fu_334_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond1_i_fu_602_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond_i7_fu_634_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state26 => 
                if (((grp_poly_Rq_mul_fu_365_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((grp_poly_Rq_mul_fu_365_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((grp_poly_Rq_mul_fu_365_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((grp_poly_Rq_mul_fu_365_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((grp_poly_Rq_mul_fu_365_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((grp_poly_Rq_mul_fu_365_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((grp_poly_Rq_mul_fu_365_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((grp_poly_Rq_mul_fu_365_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((grp_poly_Rq_mul_fu_365_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                if (((grp_poly_Rq_mul_fu_365_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond_i2_fu_651_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state55 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state55) and (ap_const_boolean_0 = ap_block_state55_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                if (((grp_poly_Rq_mul_fu_365_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                if (((grp_poly_Sq_tobytes_fu_347_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ai2_coeffs_address0_assign_proc : process(ap_CS_fsm_state24, tmp_252_i_fu_646_p1, grp_poly_R2_inv_fu_334_r_coeffs_address0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ai2_coeffs_address0 <= tmp_252_i_fu_646_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ai2_coeffs_address0 <= grp_poly_R2_inv_fu_334_r_coeffs_address0;
        else 
            ai2_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    ai2_coeffs_ce0_assign_proc : process(ap_CS_fsm_state24, grp_poly_R2_inv_fu_334_r_coeffs_ce0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ai2_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ai2_coeffs_ce0 <= grp_poly_R2_inv_fu_334_r_coeffs_ce0;
        else 
            ai2_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ai2_coeffs_we0_assign_proc : process(grp_poly_R2_inv_fu_334_r_coeffs_we0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ai2_coeffs_we0 <= grp_poly_R2_inv_fu_334_r_coeffs_we0;
        else 
            ai2_coeffs_we0 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state4_on_subcall_done_assign_proc : process(grp_poly_S3_inv_fu_328_ap_done, grp_sample_iid_plus_fu_354_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_sample_iid_plus_fu_354_ap_done = ap_const_logic_0) or (grp_poly_S3_inv_fu_328_ap_done = ap_const_logic_0));
    end process;


    ap_block_state55_on_subcall_done_assign_proc : process(grp_poly_Sq_tobytes_1_fu_340_ap_done, grp_poly_Rq_mul_fu_365_ap_done)
    begin
                ap_block_state55_on_subcall_done <= ((grp_poly_Rq_mul_fu_365_ap_done = ap_const_logic_0) or (grp_poly_Sq_tobytes_1_fu_340_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_poly_Sq_tobytes_fu_347_ap_done, ap_CS_fsm_state59)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_poly_Sq_tobytes_fu_347_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_poly_Sq_tobytes_fu_347_ap_done, ap_CS_fsm_state59)
    begin
        if (((grp_poly_Sq_tobytes_fu_347_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_coeffs_address0_assign_proc : process(tmp_i4_76_reg_768, grp_poly_Rq_mul_fu_365_b_coeffs_address0, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state32, ap_CS_fsm_state38, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            b_coeffs_address0 <= tmp_i4_76_reg_768(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            b_coeffs_address0 <= grp_poly_Rq_mul_fu_365_b_coeffs_address0;
        else 
            b_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    b_coeffs_ce0_assign_proc : process(grp_poly_Rq_mul_fu_365_b_coeffs_ce0, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state32, ap_CS_fsm_state38, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            b_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            b_coeffs_ce0 <= grp_poly_Rq_mul_fu_365_b_coeffs_ce0;
        else 
            b_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_coeffs_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i6_cast_fu_623_p2),16));

    b_coeffs_we0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            b_coeffs_we0 <= ap_const_logic_1;
        else 
            b_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    c_coeffs_addr_reg_796 <= ap_const_lv64_0(10 - 1 downto 0);

    c_coeffs_address0_assign_proc : process(c_coeffs_addr_reg_796, ap_CS_fsm_state27, grp_poly_Rq_mul_fu_365_r_coeffs_address0, grp_poly_Rq_mul_fu_365_a_coeffs_address0, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            c_coeffs_address0 <= c_coeffs_addr_reg_796;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            c_coeffs_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            c_coeffs_address0 <= grp_poly_Rq_mul_fu_365_a_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            c_coeffs_address0 <= grp_poly_Rq_mul_fu_365_r_coeffs_address0;
        else 
            c_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    c_coeffs_ce0_assign_proc : process(ap_CS_fsm_state27, grp_poly_Rq_mul_fu_365_r_coeffs_ce0, grp_poly_Rq_mul_fu_365_a_coeffs_ce0, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            c_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            c_coeffs_ce0 <= grp_poly_Rq_mul_fu_365_a_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            c_coeffs_ce0 <= grp_poly_Rq_mul_fu_365_r_coeffs_ce0;
        else 
            c_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_coeffs_d0_assign_proc : process(grp_poly_Rq_mul_fu_365_r_coeffs_d0, ap_CS_fsm_state26, ap_CS_fsm_state32, ap_CS_fsm_state38, ap_CS_fsm_state44, ap_CS_fsm_state28, grp_fu_382_p2, ap_CS_fsm_state34, ap_CS_fsm_state40, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            c_coeffs_d0 <= grp_fu_382_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            c_coeffs_d0 <= grp_poly_Rq_mul_fu_365_r_coeffs_d0;
        else 
            c_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c_coeffs_we0_assign_proc : process(grp_poly_Rq_mul_fu_365_r_coeffs_we0, ap_CS_fsm_state26, ap_CS_fsm_state32, ap_CS_fsm_state38, ap_CS_fsm_state44, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state40, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            c_coeffs_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            c_coeffs_we0 <= grp_poly_Rq_mul_fu_365_r_coeffs_we0;
        else 
            c_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i_fu_602_p2 <= "1" when (i_i1_reg_295 = ap_const_lv10_2BD) else "0";
    exitcond_fu_564_p2 <= "1" when (i_reg_284 = ap_const_lv10_2BD) else "0";
    exitcond_i2_fu_651_p2 <= "1" when (i_i3_reg_317 = ap_const_lv10_2BD) else "0";
    exitcond_i6_fu_451_p2 <= "1" when (i_i5_reg_262 = ap_const_lv10_2BD) else "0";
    exitcond_i7_fu_634_p2 <= "1" when (i_1_i_reg_306 = ap_const_lv10_2BD) else "0";
    exitcond_i_fu_389_p2 <= "1" when (i_i_reg_251 = ap_const_lv10_2BD) else "0";
    grp_fu_382_p2 <= std_logic_vector(unsigned(c_coeffs_q0) + unsigned(ap_const_lv16_2));
    grp_poly_R2_inv_fu_334_ap_start <= grp_poly_R2_inv_fu_334_ap_start_reg;

    grp_poly_Rq_mul_fu_365_a_coeffs_q0_assign_proc : process(c_coeffs_q0, s_coeffs_q0, x2_coeffs_q0, x4_coeffs_q0, x5_coeffs_q0, ap_CS_fsm_state52, ap_CS_fsm_state55, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            grp_poly_Rq_mul_fu_365_a_coeffs_q0 <= x5_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            grp_poly_Rq_mul_fu_365_a_coeffs_q0 <= s_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_poly_Rq_mul_fu_365_a_coeffs_q0 <= c_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            grp_poly_Rq_mul_fu_365_a_coeffs_q0 <= x4_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_poly_Rq_mul_fu_365_a_coeffs_q0 <= x2_coeffs_q0;
        else 
            grp_poly_Rq_mul_fu_365_a_coeffs_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_poly_Rq_mul_fu_365_ap_start <= grp_poly_Rq_mul_fu_365_ap_start_reg;

    grp_poly_Rq_mul_fu_365_b_coeffs_q0_assign_proc : process(b_coeffs_q0, s_coeffs_q0, x1_coeffs_q0, x2_coeffs_q0, x4_coeffs_q0, ap_CS_fsm_state52, ap_CS_fsm_state55, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            grp_poly_Rq_mul_fu_365_b_coeffs_q0 <= x2_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_poly_Rq_mul_fu_365_b_coeffs_q0 <= s_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_poly_Rq_mul_fu_365_b_coeffs_q0 <= x4_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            grp_poly_Rq_mul_fu_365_b_coeffs_q0 <= b_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            grp_poly_Rq_mul_fu_365_b_coeffs_q0 <= x1_coeffs_q0;
        else 
            grp_poly_Rq_mul_fu_365_b_coeffs_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_Rq_mul_fu_365_r_coeffs_q0_assign_proc : process(x3_coeffs_q0, c_coeffs_q0, s_coeffs_q0, x4_coeffs_q0, x5_coeffs_q0, ap_CS_fsm_state52, ap_CS_fsm_state55, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            grp_poly_Rq_mul_fu_365_r_coeffs_q0 <= x5_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_poly_Rq_mul_fu_365_r_coeffs_q0 <= x4_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_poly_Rq_mul_fu_365_r_coeffs_q0 <= s_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            grp_poly_Rq_mul_fu_365_r_coeffs_q0 <= c_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            grp_poly_Rq_mul_fu_365_r_coeffs_q0 <= x3_coeffs_q0;
        else 
            grp_poly_Rq_mul_fu_365_r_coeffs_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_poly_S3_inv_fu_328_ap_start <= grp_poly_S3_inv_fu_328_ap_start_reg;

    grp_poly_S3_tobytes_fu_372_a_coeffs_q0_assign_proc : process(x1_coeffs_q0, x2_coeffs_q0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_poly_S3_tobytes_fu_372_a_coeffs_q0 <= x2_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_poly_S3_tobytes_fu_372_a_coeffs_q0 <= x1_coeffs_q0;
        else 
            grp_poly_S3_tobytes_fu_372_a_coeffs_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_poly_S3_tobytes_fu_372_a_coeffs_q1_assign_proc : process(x1_coeffs_q1, x2_coeffs_q1, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_poly_S3_tobytes_fu_372_a_coeffs_q1 <= x2_coeffs_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_poly_S3_tobytes_fu_372_a_coeffs_q1 <= x1_coeffs_q1;
        else 
            grp_poly_S3_tobytes_fu_372_a_coeffs_q1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_poly_S3_tobytes_fu_372_ap_start <= grp_poly_S3_tobytes_fu_372_ap_start_reg;

    grp_poly_S3_tobytes_fu_372_msg_offset_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_poly_S3_tobytes_fu_372_msg_offset <= ap_const_lv10_8C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_poly_S3_tobytes_fu_372_msg_offset <= ap_const_lv10_0;
        else 
            grp_poly_S3_tobytes_fu_372_msg_offset <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_poly_Sq_tobytes_1_fu_340_ap_start <= grp_poly_Sq_tobytes_1_fu_340_ap_start_reg;
    grp_poly_Sq_tobytes_fu_347_ap_start <= grp_poly_Sq_tobytes_fu_347_ap_start_reg;
    grp_sample_iid_plus_fu_354_ap_start <= grp_sample_iid_plus_fu_354_ap_start_reg;

    grp_sample_iid_plus_fu_354_r_coeffs_q0_assign_proc : process(x3_coeffs_q0, x1_coeffs_q0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_sample_iid_plus_fu_354_r_coeffs_q0 <= x3_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_sample_iid_plus_fu_354_r_coeffs_q0 <= x1_coeffs_q0;
        else 
            grp_sample_iid_plus_fu_354_r_coeffs_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sample_iid_plus_fu_354_r_coeffs_q1_assign_proc : process(x1_coeffs_q1, x3_coeffs_q1, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_sample_iid_plus_fu_354_r_coeffs_q1 <= x3_coeffs_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_sample_iid_plus_fu_354_r_coeffs_q1 <= x1_coeffs_q1;
        else 
            grp_sample_iid_plus_fu_354_r_coeffs_q1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sample_iid_plus_fu_354_uniformbytes_offset_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_sample_iid_plus_fu_354_uniformbytes_offset <= ap_const_lv12_2BC;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_sample_iid_plus_fu_354_uniformbytes_offset <= ap_const_lv12_0;
        else 
            grp_sample_iid_plus_fu_354_uniformbytes_offset <= "XXXXXXXXXXXX";
        end if; 
    end process;

    h_coeffs_addr_reg_709 <= ap_const_lv64_2BC(10 - 1 downto 0);
    i_33_fu_395_p2 <= std_logic_vector(unsigned(i_i_reg_251) + unsigned(ap_const_lv10_1));
    i_34_fu_457_p2 <= std_logic_vector(unsigned(i_i5_reg_262) + unsigned(ap_const_lv10_1));
    i_35_fu_519_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(i_i2_reg_273));
    i_36_fu_570_p2 <= std_logic_vector(unsigned(i_reg_284) + unsigned(ap_const_lv10_1));
    i_37_fu_608_p2 <= std_logic_vector(unsigned(i_i1_reg_295) + unsigned(ap_const_lv10_1));
    i_38_fu_640_p2 <= std_logic_vector(unsigned(i_1_i_reg_306) + unsigned(ap_const_lv10_1));
    i_39_fu_657_p2 <= std_logic_vector(unsigned(i_i3_reg_317) + unsigned(ap_const_lv10_1));
    pk_address0 <= grp_poly_Sq_tobytes_fu_347_r_address0;
    pk_address1 <= grp_poly_Sq_tobytes_fu_347_r_address1;
    pk_ce0 <= grp_poly_Sq_tobytes_fu_347_r_ce0;
    pk_ce1 <= grp_poly_Sq_tobytes_fu_347_r_ce1;
    pk_d0 <= grp_poly_Sq_tobytes_fu_347_r_d0;
    pk_d1 <= grp_poly_Sq_tobytes_fu_347_r_d1;
    pk_we0 <= grp_poly_Sq_tobytes_fu_347_r_we0;
    pk_we1 <= grp_poly_Sq_tobytes_fu_347_r_we1;

    s_coeffs_address0_assign_proc : process(grp_poly_Rq_mul_fu_365_r_coeffs_address0, grp_poly_Rq_mul_fu_365_a_coeffs_address0, grp_poly_Rq_mul_fu_365_b_coeffs_address0, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            s_coeffs_address0 <= grp_poly_Rq_mul_fu_365_b_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            s_coeffs_address0 <= grp_poly_Rq_mul_fu_365_a_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            s_coeffs_address0 <= grp_poly_Rq_mul_fu_365_r_coeffs_address0;
        else 
            s_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    s_coeffs_ce0_assign_proc : process(grp_poly_Rq_mul_fu_365_r_coeffs_ce0, grp_poly_Rq_mul_fu_365_a_coeffs_ce0, grp_poly_Rq_mul_fu_365_b_coeffs_ce0, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            s_coeffs_ce0 <= grp_poly_Rq_mul_fu_365_b_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            s_coeffs_ce0 <= grp_poly_Rq_mul_fu_365_a_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            s_coeffs_ce0 <= grp_poly_Rq_mul_fu_365_r_coeffs_ce0;
        else 
            s_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_coeffs_we0_assign_proc : process(grp_poly_Rq_mul_fu_365_r_coeffs_we0, ap_CS_fsm_state30, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            s_coeffs_we0 <= grp_poly_Rq_mul_fu_365_r_coeffs_we0;
        else 
            s_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    seed_address0 <= grp_sample_iid_plus_fu_354_uniformbytes_address0;

    seed_ce0_assign_proc : process(grp_sample_iid_plus_fu_354_uniformbytes_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            seed_ce0 <= grp_sample_iid_plus_fu_354_uniformbytes_ce0;
        else 
            seed_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_address0_assign_proc : process(grp_poly_Sq_tobytes_1_fu_340_r_address0, grp_poly_S3_tobytes_fu_372_msg_address0, ap_CS_fsm_state8, ap_CS_fsm_state55, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sk_address0 <= grp_poly_S3_tobytes_fu_372_msg_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            sk_address0 <= grp_poly_Sq_tobytes_1_fu_340_r_address0;
        else 
            sk_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    sk_address1 <= grp_poly_Sq_tobytes_1_fu_340_r_address1;

    sk_ce0_assign_proc : process(grp_poly_Sq_tobytes_1_fu_340_r_ce0, grp_poly_S3_tobytes_fu_372_msg_ce0, ap_CS_fsm_state8, ap_CS_fsm_state55, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sk_ce0 <= grp_poly_S3_tobytes_fu_372_msg_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            sk_ce0 <= grp_poly_Sq_tobytes_1_fu_340_r_ce0;
        else 
            sk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_ce1_assign_proc : process(grp_poly_Sq_tobytes_1_fu_340_r_ce1, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            sk_ce1 <= grp_poly_Sq_tobytes_1_fu_340_r_ce1;
        else 
            sk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sk_d0_assign_proc : process(grp_poly_Sq_tobytes_1_fu_340_r_d0, grp_poly_S3_tobytes_fu_372_msg_d0, ap_CS_fsm_state8, ap_CS_fsm_state55, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sk_d0 <= grp_poly_S3_tobytes_fu_372_msg_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            sk_d0 <= grp_poly_Sq_tobytes_1_fu_340_r_d0;
        else 
            sk_d0 <= "XXXXXXXX";
        end if; 
    end process;

    sk_d1 <= grp_poly_Sq_tobytes_1_fu_340_r_d1;

    sk_we0_assign_proc : process(grp_poly_Sq_tobytes_1_fu_340_r_we0, grp_poly_S3_tobytes_fu_372_msg_we0, ap_CS_fsm_state8, ap_CS_fsm_state55, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sk_we0 <= grp_poly_S3_tobytes_fu_372_msg_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            sk_we0 <= grp_poly_Sq_tobytes_1_fu_340_r_we0;
        else 
            sk_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_we1_assign_proc : process(grp_poly_Sq_tobytes_1_fu_340_r_we1, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            sk_we1 <= grp_poly_Sq_tobytes_1_fu_340_r_we1;
        else 
            sk_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_158_i_cast_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_343_fu_674_p1),16));
    tmp_229_i_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i2_reg_273),64));
    tmp_230_i_fu_535_p2 <= std_logic_vector(unsigned(x3_coeffs_q0) - unsigned(x3_coeffs_q1));
    tmp_231_i_cast_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_339_fu_541_p1),16));
    tmp_232_i_fu_550_p2 <= std_logic_vector(unsigned(last_coeff_reg_714) - unsigned(x3_coeffs_q0));
    tmp_233_i_cast_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_338_fu_555_p1),16));
    tmp_242_fu_587_p2 <= std_logic_vector(unsigned(tmp_340_fu_581_p2) - unsigned(x2_coeffs_q0));
    tmp_252_i_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_i_reg_306),64));
    tmp_296_cast_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_341_fu_593_p1),16));
    tmp_336_fu_422_p1 <= x1_coeffs_q0(13 - 1 downto 0);
    tmp_337_fu_484_p1 <= x3_coeffs_q0(13 - 1 downto 0);
    tmp_338_fu_555_p1 <= tmp_232_i_fu_550_p2(13 - 1 downto 0);
    tmp_339_fu_541_p1 <= tmp_230_i_fu_535_p2(13 - 1 downto 0);
    tmp_340_fu_581_p2 <= std_logic_vector(shift_left(unsigned(x2_coeffs_q0),to_integer(unsigned('0' & ap_const_lv16_2(16-1 downto 0)))));
    tmp_341_fu_593_p1 <= tmp_242_fu_587_p2(13 - 1 downto 0);
    tmp_342_fu_619_p1 <= x3_coeffs_q1(13 - 1 downto 0);
    tmp_343_fu_674_p1 <= tmp_i5_fu_668_p2(13 - 1 downto 0);
    tmp_38_i1_cast_fu_478_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(tmp_41_fu_468_p4));
    tmp_38_i_cast_fu_416_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(tmp_fu_406_p4));
    tmp_39_fu_426_p2 <= (tmp_38_i_cast_fu_416_p2 or tmp_336_fu_422_p1);
    tmp_40_fu_432_p4 <= x1_coeffs_q0(15 downto 13);
    tmp_40_i1_fu_504_p3 <= (tmp_44_fu_494_p4 & tmp_43_fu_488_p2);
    tmp_40_i_fu_442_p3 <= (tmp_40_fu_432_p4 & tmp_39_fu_426_p2);
    tmp_41_fu_468_p4 <= x3_coeffs_q0(13 downto 1);
    tmp_43_fu_488_p2 <= (tmp_38_i1_cast_fu_478_p2 or tmp_337_fu_484_p1);
    tmp_44_fu_494_p4 <= x3_coeffs_q0(15 downto 13);
    tmp_fu_406_p4 <= x1_coeffs_q0(13 downto 1);
    tmp_i2_fu_513_p2 <= "1" when (i_i2_reg_273 = ap_const_lv10_0) else "0";
    tmp_i3_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i3_reg_317),64));
    tmp_i4_76_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_295),64));
    tmp_i4_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_35_fu_519_p2),64));
    tmp_i5_fu_668_p2 <= std_logic_vector(unsigned(x3_coeffs_q1) - unsigned(x3_coeffs_q0));
    tmp_i6_cast_fu_623_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(tmp_342_fu_619_p1));
    tmp_i7_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i5_reg_262),64));
    tmp_i_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_251),64));
    tmp_s_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_284),64));

    x1_coeffs_address0_assign_proc : process(ap_CS_fsm_state9, f_coeffs_addr_reg_691, grp_poly_S3_inv_fu_328_a_coeffs_address0, grp_sample_iid_plus_fu_354_r_coeffs_address0, grp_poly_Rq_mul_fu_365_b_coeffs_address0, grp_poly_S3_tobytes_fu_372_a_coeffs_address0, ap_CS_fsm_state10, ap_CS_fsm_state52, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state19, ap_CS_fsm_state50, ap_CS_fsm_state6, tmp_i_fu_401_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x1_coeffs_address0 <= f_coeffs_addr_reg_691;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x1_coeffs_address0 <= tmp_i_fu_401_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x1_coeffs_address0 <= grp_poly_S3_tobytes_fu_372_a_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            x1_coeffs_address0 <= grp_poly_Rq_mul_fu_365_b_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_address0 <= grp_sample_iid_plus_fu_354_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x1_coeffs_address0 <= grp_poly_S3_inv_fu_328_a_coeffs_address0;
        else 
            x1_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_address1_assign_proc : process(grp_sample_iid_plus_fu_354_r_coeffs_address1, grp_poly_S3_tobytes_fu_372_a_coeffs_address1, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x1_coeffs_address1 <= grp_poly_S3_tobytes_fu_372_a_coeffs_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_address1 <= grp_sample_iid_plus_fu_354_r_coeffs_address1;
        else 
            x1_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_ce0_assign_proc : process(ap_CS_fsm_state9, grp_poly_S3_inv_fu_328_a_coeffs_ce0, grp_sample_iid_plus_fu_354_r_coeffs_ce0, grp_poly_Rq_mul_fu_365_b_coeffs_ce0, grp_poly_S3_tobytes_fu_372_a_coeffs_ce0, ap_CS_fsm_state10, ap_CS_fsm_state52, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state19, ap_CS_fsm_state50, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            x1_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x1_coeffs_ce0 <= grp_poly_S3_tobytes_fu_372_a_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            x1_coeffs_ce0 <= grp_poly_Rq_mul_fu_365_b_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_ce0 <= grp_sample_iid_plus_fu_354_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x1_coeffs_ce0 <= grp_poly_S3_inv_fu_328_a_coeffs_ce0;
        else 
            x1_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_ce1_assign_proc : process(grp_sample_iid_plus_fu_354_r_coeffs_ce1, grp_poly_S3_tobytes_fu_372_a_coeffs_ce1, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x1_coeffs_ce1 <= grp_poly_S3_tobytes_fu_372_a_coeffs_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_ce1 <= grp_sample_iid_plus_fu_354_r_coeffs_ce1;
        else 
            x1_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_d0_assign_proc : process(grp_sample_iid_plus_fu_354_r_coeffs_d0, ap_CS_fsm_state10, ap_CS_fsm_state2, tmp_40_i_fu_442_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x1_coeffs_d0 <= tmp_40_i_fu_442_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_d0 <= grp_sample_iid_plus_fu_354_r_coeffs_d0;
        else 
            x1_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x1_coeffs_we0_assign_proc : process(grp_sample_iid_plus_fu_354_r_coeffs_we0, ap_CS_fsm_state10, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x1_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_we0 <= grp_sample_iid_plus_fu_354_r_coeffs_we0;
        else 
            x1_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x1_coeffs_we1_assign_proc : process(grp_sample_iid_plus_fu_354_r_coeffs_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_coeffs_we1 <= grp_sample_iid_plus_fu_354_r_coeffs_we1;
        else 
            x1_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_address0_assign_proc : process(tmp_229_i_reg_732, ap_CS_fsm_state17, G_coeffs_addr_2_reg_755, exitcond_fu_564_p2, grp_poly_S3_inv_fu_328_r_coeffs_address0, grp_poly_Rq_mul_fu_365_a_coeffs_address0, grp_poly_Rq_mul_fu_365_b_coeffs_address0, grp_poly_S3_tobytes_fu_372_a_coeffs_address0, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state55, ap_CS_fsm_state19, ap_CS_fsm_state57, tmp_s_fu_576_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            x2_coeffs_address0 <= G_coeffs_addr_2_reg_755;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond_fu_564_p2 = ap_const_lv1_0))) then 
            x2_coeffs_address0 <= tmp_s_fu_576_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            x2_coeffs_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x2_coeffs_address0 <= tmp_229_i_reg_732(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x2_coeffs_address0 <= grp_poly_S3_tobytes_fu_372_a_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            x2_coeffs_address0 <= grp_poly_Rq_mul_fu_365_b_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            x2_coeffs_address0 <= grp_poly_Rq_mul_fu_365_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x2_coeffs_address0 <= grp_poly_S3_inv_fu_328_r_coeffs_address0;
        else 
            x2_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_address1_assign_proc : process(grp_poly_S3_inv_fu_328_r_coeffs_address1, grp_poly_S3_tobytes_fu_372_a_coeffs_address1, ap_CS_fsm_state8, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x2_coeffs_address1 <= grp_poly_S3_tobytes_fu_372_a_coeffs_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x2_coeffs_address1 <= grp_poly_S3_inv_fu_328_r_coeffs_address1;
        else 
            x2_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_ce0_assign_proc : process(ap_CS_fsm_state17, exitcond_fu_564_p2, grp_poly_S3_inv_fu_328_r_coeffs_ce0, grp_poly_Rq_mul_fu_365_a_coeffs_ce0, grp_poly_Rq_mul_fu_365_b_coeffs_ce0, grp_poly_S3_tobytes_fu_372_a_coeffs_ce0, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state55, ap_CS_fsm_state19, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond_fu_564_p2 = ap_const_lv1_0)))) then 
            x2_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x2_coeffs_ce0 <= grp_poly_S3_tobytes_fu_372_a_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            x2_coeffs_ce0 <= grp_poly_Rq_mul_fu_365_b_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            x2_coeffs_ce0 <= grp_poly_Rq_mul_fu_365_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x2_coeffs_ce0 <= grp_poly_S3_inv_fu_328_r_coeffs_ce0;
        else 
            x2_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_ce1_assign_proc : process(grp_poly_S3_inv_fu_328_r_coeffs_ce1, grp_poly_S3_tobytes_fu_372_a_coeffs_ce1, ap_CS_fsm_state8, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x2_coeffs_ce1 <= grp_poly_S3_tobytes_fu_372_a_coeffs_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x2_coeffs_ce1 <= grp_poly_S3_inv_fu_328_r_coeffs_ce1;
        else 
            x2_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x2_coeffs_d0_assign_proc : process(grp_poly_S3_inv_fu_328_r_coeffs_d0, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state4, tmp_231_i_cast_fu_545_p1, tmp_233_i_cast_fu_559_p1, tmp_296_cast_fu_597_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            x2_coeffs_d0 <= tmp_296_cast_fu_597_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            x2_coeffs_d0 <= tmp_233_i_cast_fu_559_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            x2_coeffs_d0 <= tmp_231_i_cast_fu_545_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x2_coeffs_d0 <= grp_poly_S3_inv_fu_328_r_coeffs_d0;
        else 
            x2_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x2_coeffs_we0_assign_proc : process(grp_poly_S3_inv_fu_328_r_coeffs_we0, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            x2_coeffs_we0 <= ap_const_lv2_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x2_coeffs_we0 <= grp_poly_S3_inv_fu_328_r_coeffs_we0;
        else 
            x2_coeffs_we0 <= ap_const_lv2_0;
        end if; 
    end process;


    x2_coeffs_we1_assign_proc : process(grp_poly_S3_inv_fu_328_r_coeffs_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x2_coeffs_we1 <= grp_poly_S3_inv_fu_328_r_coeffs_we1;
        else 
            x2_coeffs_we1 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;


    x3_coeffs_address0_assign_proc : process(ap_CS_fsm_state11, h_coeffs_addr_1_reg_704, exitcond_i6_fu_451_p2, h_coeffs_addr_reg_709, ap_CS_fsm_state14, tmp_i2_fu_513_p2, ap_CS_fsm_state53, exitcond_i2_fu_651_p2, grp_poly_R2_inv_fu_334_a_coeffs_address0, grp_poly_Sq_tobytes_1_fu_340_a_coeffs_address0, grp_poly_Sq_tobytes_fu_347_a_coeffs_address0, grp_sample_iid_plus_fu_354_r_coeffs_address0, grp_poly_Rq_mul_fu_365_r_coeffs_address0, ap_CS_fsm_state12, ap_CS_fsm_state21, ap_CS_fsm_state52, ap_CS_fsm_state4, ap_CS_fsm_state55, ap_CS_fsm_state59, ap_CS_fsm_state19, ap_CS_fsm_state57, tmp_i7_fu_463_p1, tmp_i4_fu_525_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond_i2_fu_651_p2 = ap_const_lv1_0))) then 
            x3_coeffs_address0 <= h_coeffs_addr_reg_709;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_i2_fu_513_p2 = ap_const_lv1_1))) then 
            x3_coeffs_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_i2_fu_513_p2 = ap_const_lv1_0))) then 
            x3_coeffs_address0 <= tmp_i4_fu_525_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x3_coeffs_address0 <= h_coeffs_addr_1_reg_704;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_i6_fu_451_p2 = ap_const_lv1_1))) then 
            x3_coeffs_address0 <= ap_const_lv64_2BC(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_i6_fu_451_p2 = ap_const_lv1_0))) then 
            x3_coeffs_address0 <= tmp_i7_fu_463_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            x3_coeffs_address0 <= grp_poly_Rq_mul_fu_365_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x3_coeffs_address0 <= grp_sample_iid_plus_fu_354_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            x3_coeffs_address0 <= grp_poly_Sq_tobytes_fu_347_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            x3_coeffs_address0 <= grp_poly_Sq_tobytes_1_fu_340_a_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            x3_coeffs_address0 <= grp_poly_R2_inv_fu_334_a_coeffs_address0;
        else 
            x3_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_address1_assign_proc : process(ap_CS_fsm_state14, tmp_229_i_fu_530_p1, ap_CS_fsm_state22, tmp_i4_76_fu_614_p1, ap_CS_fsm_state53, h_coeffs_addr_6_reg_809, exitcond_i2_fu_651_p2, grp_sample_iid_plus_fu_354_r_coeffs_address1, ap_CS_fsm_state54, ap_CS_fsm_state4, tmp_i3_fu_663_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            x3_coeffs_address1 <= h_coeffs_addr_6_reg_809;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond_i2_fu_651_p2 = ap_const_lv1_0))) then 
            x3_coeffs_address1 <= tmp_i3_fu_663_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            x3_coeffs_address1 <= tmp_i4_76_fu_614_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            x3_coeffs_address1 <= tmp_229_i_fu_530_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x3_coeffs_address1 <= grp_sample_iid_plus_fu_354_r_coeffs_address1;
        else 
            x3_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_ce0_assign_proc : process(ap_CS_fsm_state11, exitcond_i6_fu_451_p2, ap_CS_fsm_state14, tmp_i2_fu_513_p2, ap_CS_fsm_state53, exitcond_i2_fu_651_p2, grp_poly_R2_inv_fu_334_a_coeffs_ce0, grp_poly_Sq_tobytes_1_fu_340_a_coeffs_ce0, grp_poly_Sq_tobytes_fu_347_a_coeffs_ce0, grp_sample_iid_plus_fu_354_r_coeffs_ce0, grp_poly_Rq_mul_fu_365_r_coeffs_ce0, ap_CS_fsm_state12, ap_CS_fsm_state21, ap_CS_fsm_state52, ap_CS_fsm_state4, ap_CS_fsm_state55, ap_CS_fsm_state59, ap_CS_fsm_state19, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond_i2_fu_651_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_i2_fu_513_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_i2_fu_513_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_i6_fu_451_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_i6_fu_451_p2 = ap_const_lv1_0)))) then 
            x3_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            x3_coeffs_ce0 <= grp_poly_Rq_mul_fu_365_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x3_coeffs_ce0 <= grp_sample_iid_plus_fu_354_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            x3_coeffs_ce0 <= grp_poly_Sq_tobytes_fu_347_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            x3_coeffs_ce0 <= grp_poly_Sq_tobytes_1_fu_340_a_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            x3_coeffs_ce0 <= grp_poly_R2_inv_fu_334_a_coeffs_ce0;
        else 
            x3_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_ce1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state22, ap_CS_fsm_state53, exitcond_i2_fu_651_p2, grp_sample_iid_plus_fu_354_r_coeffs_ce1, ap_CS_fsm_state54, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (exitcond_i2_fu_651_p2 = ap_const_lv1_0)))) then 
            x3_coeffs_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x3_coeffs_ce1 <= grp_sample_iid_plus_fu_354_r_coeffs_ce1;
        else 
            x3_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_d0_assign_proc : process(grp_sample_iid_plus_fu_354_r_coeffs_d0, grp_poly_Rq_mul_fu_365_r_coeffs_d0, ap_CS_fsm_state12, ap_CS_fsm_state52, ap_CS_fsm_state4, ap_CS_fsm_state19, ap_CS_fsm_state57, tmp_40_i1_fu_504_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x3_coeffs_d0 <= tmp_40_i1_fu_504_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            x3_coeffs_d0 <= grp_poly_Rq_mul_fu_365_r_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x3_coeffs_d0 <= grp_sample_iid_plus_fu_354_r_coeffs_d0;
        else 
            x3_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_d1_assign_proc : process(grp_sample_iid_plus_fu_354_r_coeffs_d1, ap_CS_fsm_state54, ap_CS_fsm_state4, tmp_158_i_cast_fu_678_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            x3_coeffs_d1 <= tmp_158_i_cast_fu_678_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x3_coeffs_d1 <= grp_sample_iid_plus_fu_354_r_coeffs_d1;
        else 
            x3_coeffs_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x3_coeffs_we0_assign_proc : process(grp_sample_iid_plus_fu_354_r_coeffs_we0, grp_poly_Rq_mul_fu_365_r_coeffs_we0, ap_CS_fsm_state12, ap_CS_fsm_state52, ap_CS_fsm_state4, ap_CS_fsm_state19, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x3_coeffs_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            x3_coeffs_we0 <= grp_poly_Rq_mul_fu_365_r_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x3_coeffs_we0 <= grp_sample_iid_plus_fu_354_r_coeffs_we0;
        else 
            x3_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x3_coeffs_we1_assign_proc : process(grp_sample_iid_plus_fu_354_r_coeffs_we1, ap_CS_fsm_state54, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            x3_coeffs_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x3_coeffs_we1 <= grp_sample_iid_plus_fu_354_r_coeffs_we1;
        else 
            x3_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    x4_coeffs_address0_assign_proc : process(tmp_252_i_reg_786, grp_poly_Rq_mul_fu_365_r_coeffs_address0, grp_poly_Rq_mul_fu_365_a_coeffs_address0, grp_poly_Rq_mul_fu_365_b_coeffs_address0, ap_CS_fsm_state25, ap_CS_fsm_state55, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state48, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            x4_coeffs_address0 <= tmp_252_i_reg_786(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            x4_coeffs_address0 <= grp_poly_Rq_mul_fu_365_b_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            x4_coeffs_address0 <= grp_poly_Rq_mul_fu_365_a_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            x4_coeffs_address0 <= grp_poly_Rq_mul_fu_365_r_coeffs_address0;
        else 
            x4_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x4_coeffs_ce0_assign_proc : process(grp_poly_Rq_mul_fu_365_r_coeffs_ce0, grp_poly_Rq_mul_fu_365_a_coeffs_ce0, grp_poly_Rq_mul_fu_365_b_coeffs_ce0, ap_CS_fsm_state25, ap_CS_fsm_state55, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state48, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            x4_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            x4_coeffs_ce0 <= grp_poly_Rq_mul_fu_365_b_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            x4_coeffs_ce0 <= grp_poly_Rq_mul_fu_365_a_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            x4_coeffs_ce0 <= grp_poly_Rq_mul_fu_365_r_coeffs_ce0;
        else 
            x4_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x4_coeffs_d0_assign_proc : process(ai2_coeffs_q0, grp_poly_Rq_mul_fu_365_r_coeffs_d0, ap_CS_fsm_state25, ap_CS_fsm_state36, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            x4_coeffs_d0 <= ai2_coeffs_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            x4_coeffs_d0 <= grp_poly_Rq_mul_fu_365_r_coeffs_d0;
        else 
            x4_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x4_coeffs_we0_assign_proc : process(grp_poly_Rq_mul_fu_365_r_coeffs_we0, ap_CS_fsm_state25, ap_CS_fsm_state36, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            x4_coeffs_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            x4_coeffs_we0 <= grp_poly_Rq_mul_fu_365_r_coeffs_we0;
        else 
            x4_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x5_coeffs_address0_assign_proc : process(grp_poly_Rq_mul_fu_365_r_coeffs_address0, grp_poly_Rq_mul_fu_365_a_coeffs_address0, ap_CS_fsm_state52, ap_CS_fsm_state55, ap_CS_fsm_state50, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            x5_coeffs_address0 <= grp_poly_Rq_mul_fu_365_a_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            x5_coeffs_address0 <= grp_poly_Rq_mul_fu_365_r_coeffs_address0;
        else 
            x5_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x5_coeffs_ce0_assign_proc : process(grp_poly_Rq_mul_fu_365_r_coeffs_ce0, grp_poly_Rq_mul_fu_365_a_coeffs_ce0, ap_CS_fsm_state52, ap_CS_fsm_state55, ap_CS_fsm_state50, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            x5_coeffs_ce0 <= grp_poly_Rq_mul_fu_365_a_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            x5_coeffs_ce0 <= grp_poly_Rq_mul_fu_365_r_coeffs_ce0;
        else 
            x5_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x5_coeffs_we0_assign_proc : process(grp_poly_Rq_mul_fu_365_r_coeffs_we0, ap_CS_fsm_state55, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            x5_coeffs_we0 <= grp_poly_Rq_mul_fu_365_r_coeffs_we0;
        else 
            x5_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
