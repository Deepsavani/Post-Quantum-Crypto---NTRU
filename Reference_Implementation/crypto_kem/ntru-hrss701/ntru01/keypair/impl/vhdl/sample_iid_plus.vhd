-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sample_iid_plus is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce0 : OUT STD_LOGIC;
    r_coeffs_we0 : OUT STD_LOGIC;
    r_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    r_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    r_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    r_coeffs_ce1 : OUT STD_LOGIC;
    r_coeffs_we1 : OUT STD_LOGIC;
    r_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    r_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    uniformbytes_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    uniformbytes_ce0 : OUT STD_LOGIC;
    uniformbytes_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    uniformbytes_offset : IN STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of sample_iid_plus is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_2BC : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010111100";
    constant ap_const_lv10_2BC : STD_LOGIC_VECTOR (9 downto 0) := "1010111100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_2BD : STD_LOGIC_VECTOR (9 downto 0) := "1010111101";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_12_fu_220_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_reg_589 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_8_fu_230_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_8_reg_597 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_i_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_2_fu_362_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_2_reg_607 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_4_fu_440_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_4_reg_616 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal r_coeffs_addr_reg_621 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond2_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_484_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_5_reg_629 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond1_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_644 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_coeffs_load_1_reg_649 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal r_coeffs_load_2_reg_654 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_583_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal r_coeffs_addr_3_reg_667 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_3_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_519_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_6_reg_672 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_7_fu_545_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_7_reg_680 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal r_coeffs_addr_4_reg_685 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i_reg_152 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_reg_164 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_1_reg_175 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_reg_186 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_2_reg_198 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_3_reg_209 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sum_i_cast_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_306_i_i_fu_427_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_471_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_531_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_cast_fu_578_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_cast_fu_236_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_i_fu_240_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_254_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_fu_250_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_298_i_i_cast_fu_268_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_297_i_i_cast_fu_264_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_278_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_fu_284_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_fu_302_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_19_fu_298_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal fold1_i_i_cast_fu_312_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_300_i_i_cast_fu_318_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_299_i_i_cast_fu_294_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_1_fu_322_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_18_fu_328_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_fu_272_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_fu_342_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal fold2_i_i_cast_fu_352_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_302_i_i_cast_fu_358_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_301_i_i_cast_fu_338_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_fu_373_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_21_fu_378_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_cast_fu_386_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_303_i_i_fu_394_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal not_tmp_240_i_i_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_304_i_i_cast_cas_fu_409_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_305_i_i_fu_417_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_303_i_i_cast_fu_399_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_305_i_i_cast_fu_423_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_451_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_20_fu_461_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_465_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mt_fu_525_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_560_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_cast_fu_568_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_23_fu_556_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_fu_572_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component crypto_kem_keypair_mac_muladd_16s_16s_16ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    crypto_kem_keypair_mac_muladd_16s_16s_16ns_16_1_1_U30 : component crypto_kem_keypair_mac_muladd_16s_16s_16ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => r_coeffs_load_1_reg_649,
        din1 => r_coeffs_load_2_reg_654,
        din2 => s_reg_186,
        dout => grp_fu_583_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_434_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_1_reg_175 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_1_reg_175 <= i_5_reg_629;
            end if; 
        end if;
    end process;

    i_2_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_2_reg_198 <= i_6_reg_672;
            elsif (((exitcond1_fu_478_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_2_reg_198 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_3_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_508_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_3_reg_209 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_3_reg_209 <= i_7_reg_680;
            end if; 
        end if;
    end process;

    i_i_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_i_reg_152 <= i_8_reg_597;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_i_reg_152 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    i_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_164 <= i_4_reg_616;
            elsif (((exitcond_i_fu_224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_164 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    s_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_434_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                s_reg_186 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                s_reg_186 <= grp_fu_583_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_4_reg_616 <= i_4_fu_440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_5_reg_629 <= i_5_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_3_fu_508_p2 = ap_const_lv1_1))) then
                i_6_reg_672 <= i_6_fu_519_p2;
                r_coeffs_addr_3_reg_667 <= tmp_7_fu_514_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_7_reg_680 <= i_7_fu_545_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_8_reg_597 <= i_8_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                r_2_reg_607 <= r_2_fu_362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_539_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                r_coeffs_addr_4_reg_685 <= tmp_10_fu_551_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                r_coeffs_addr_reg_621 <= tmp_fu_446_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                r_coeffs_load_1_reg_649 <= r_coeffs_q0;
                r_coeffs_load_2_reg_654 <= r_coeffs_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_12_reg_589 <= tmp_12_fu_220_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_478_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_22_reg_644 <= s_reg_186(15 downto 15);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_i_fu_224_p2, ap_CS_fsm_state5, exitcond2_fu_434_p2, ap_CS_fsm_state7, exitcond1_fu_478_p2, ap_CS_fsm_state10, tmp_3_fu_508_p2, ap_CS_fsm_state12, exitcond_fu_539_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_i_fu_224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                if (((exitcond2_fu_434_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((exitcond1_fu_478_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state10 => 
                if (((tmp_3_fu_508_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_539_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12, exitcond_fu_539_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_539_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_539_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_539_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_cast_fu_386_p3 <= 
        ap_const_lv3_7 when (tmp_21_fu_378_p3(0) = '1') else 
        ap_const_lv3_0;
    exitcond1_fu_478_p2 <= "1" when (i_1_reg_175 = ap_const_lv10_2BC) else "0";
    exitcond2_fu_434_p2 <= "1" when (i_reg_164 = ap_const_lv10_2BC) else "0";
    exitcond_fu_539_p2 <= "1" when (i_3_reg_209 = ap_const_lv10_2BD) else "0";
    exitcond_i_fu_224_p2 <= "1" when (i_i_reg_152 = ap_const_lv10_2BC) else "0";
    fold1_i_i_cast_fu_312_p2 <= std_logic_vector(unsigned(tmp_15_fu_302_p4) + unsigned(tmp_19_fu_298_p1));
    fold2_i_i_cast_fu_352_p2 <= std_logic_vector(unsigned(fold1_i_i_cast_fu_312_p2) + unsigned(tmp_16_fu_342_p4));
    i_4_fu_440_p2 <= std_logic_vector(unsigned(i_reg_164) + unsigned(ap_const_lv10_1));
    i_5_fu_484_p2 <= std_logic_vector(unsigned(i_1_reg_175) + unsigned(ap_const_lv10_1));
    i_6_fu_519_p2 <= std_logic_vector(unsigned(i_2_reg_198) + unsigned(ap_const_lv10_2));
    i_7_fu_545_p2 <= std_logic_vector(unsigned(i_3_reg_209) + unsigned(ap_const_lv10_1));
    i_8_fu_230_p2 <= std_logic_vector(unsigned(i_i_reg_152) + unsigned(ap_const_lv10_1));
    mt_fu_525_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(r_coeffs_q1));
    not_tmp_240_i_i_fu_403_p2 <= (tmp_21_fu_378_p3 xor ap_const_lv1_1);
    r_1_fu_322_p2 <= std_logic_vector(unsigned(tmp_300_i_i_cast_fu_318_p1) + unsigned(tmp_299_i_i_cast_fu_294_p1));
    r_2_fu_362_p2 <= std_logic_vector(unsigned(tmp_302_i_i_cast_fu_358_p1) + unsigned(tmp_301_i_i_cast_fu_338_p1));

    r_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, r_coeffs_addr_reg_621, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state6, tmp_i_fu_368_p1, tmp_fu_446_p1, tmp_s_fu_490_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_coeffs_address0 <= tmp_s_fu_490_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_address0 <= r_coeffs_addr_reg_621;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_address0 <= tmp_fu_446_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_address0 <= tmp_i_fu_368_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r_coeffs_address0 <= ap_const_lv64_2BC(10 - 1 downto 0);
        else 
            r_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_address1_assign_proc : process(ap_CS_fsm_state7, r_coeffs_addr_3_reg_667, ap_CS_fsm_state10, ap_CS_fsm_state12, r_coeffs_addr_4_reg_685, ap_CS_fsm_state11, ap_CS_fsm_state13, tmp_1_fu_495_p1, tmp_7_fu_514_p1, tmp_10_fu_551_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            r_coeffs_address1 <= r_coeffs_addr_4_reg_685;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            r_coeffs_address1 <= tmp_10_fu_551_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_coeffs_address1 <= r_coeffs_addr_3_reg_667;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_coeffs_address1 <= tmp_7_fu_514_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_coeffs_address1 <= tmp_1_fu_495_p1(10 - 1 downto 0);
        else 
            r_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            r_coeffs_ce0 <= ap_const_logic_1;
        else 
            r_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            r_coeffs_ce1 <= ap_const_logic_1;
        else 
            r_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, tmp_306_i_i_fu_427_p2, tmp_6_fu_471_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_d0 <= tmp_6_fu_471_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_d0 <= tmp_306_i_i_fu_427_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r_coeffs_d0 <= ap_const_lv16_0;
        else 
            r_coeffs_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_d1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state13, tmp_9_fu_531_p3, tmp_13_cast_fu_578_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            r_coeffs_d1 <= tmp_13_cast_fu_578_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_coeffs_d1 <= tmp_9_fu_531_p3;
        else 
            r_coeffs_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_we0_assign_proc : process(ap_CS_fsm_state2, exitcond_i_fu_224_p2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((exitcond_i_fu_224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            r_coeffs_we0 <= ap_const_logic_1;
        else 
            r_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_we1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            r_coeffs_we1 <= ap_const_logic_1;
        else 
            r_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_278_p2 <= std_logic_vector(unsigned(tmp_298_i_i_cast_fu_268_p1) + unsigned(tmp_297_i_i_cast_fu_264_p1));
    sum_i_cast_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_fu_240_p2),64));
    sum_i_fu_240_p2 <= std_logic_vector(unsigned(tmp_12_reg_589) + unsigned(tmp_i_cast_fu_236_p1));
    t_fu_373_p2 <= std_logic_vector(signed(ap_const_lv3_5) + signed(r_2_reg_607));
    tmp_10_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_209),64));
    tmp_11_cast_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_560_p3),2));
    tmp_11_fu_272_p2 <= std_logic_vector(unsigned(tmp_8_fu_254_p4) + unsigned(tmp_14_fu_250_p1));
    tmp_12_fu_220_p1 <= uniformbytes_offset(11 - 1 downto 0);
    tmp_13_cast_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_572_p2),16));
    tmp_13_fu_572_p2 <= (tmp_23_fu_556_p1 xor tmp_11_cast_fu_568_p1);
    tmp_14_fu_250_p1 <= uniformbytes_q0(4 - 1 downto 0);
    tmp_15_fu_302_p4 <= uniformbytes_q0(5 downto 4);
    tmp_16_fu_342_p4 <= tmp_11_fu_272_p2(3 downto 2);
    tmp_17_fu_284_p4 <= r_fu_278_p2(4 downto 2);
    tmp_18_fu_328_p4 <= r_1_fu_322_p2(3 downto 2);
    tmp_19_fu_298_p1 <= uniformbytes_q0(2 - 1 downto 0);
    tmp_1_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_175),64));
    tmp_20_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_451_p4),16));
    tmp_21_fu_378_p3 <= t_fu_373_p2(2 downto 2);
    tmp_23_fu_556_p1 <= r_coeffs_q1(2 - 1 downto 0);
    tmp_24_fu_560_p3 <= r_coeffs_q1(15 downto 15);
    tmp_297_i_i_cast_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_254_p4),5));
    tmp_298_i_i_cast_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_250_p1),5));
    tmp_299_i_i_cast_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_284_p4),4));
    tmp_300_i_i_cast_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold1_i_i_cast_fu_312_p2),4));
    tmp_301_i_i_cast_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_328_p4),3));
    tmp_302_i_i_cast_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fold2_i_i_cast_fu_352_p2),3));
    tmp_303_i_i_cast_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_303_i_i_fu_394_p2),16));
    tmp_303_i_i_fu_394_p2 <= (r_2_reg_607 and c_cast_fu_386_p3);
    tmp_304_i_i_cast_cas_fu_409_p3 <= 
        ap_const_lv3_7 when (not_tmp_240_i_i_fu_403_p2(0) = '1') else 
        ap_const_lv3_0;
        tmp_305_i_i_cast_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_305_i_i_fu_417_p2),16));

    tmp_305_i_i_fu_417_p2 <= (tmp_304_i_i_cast_cas_fu_409_p3 and t_fu_373_p2);
    tmp_306_i_i_fu_427_p2 <= (tmp_305_i_i_cast_fu_423_p1 xor tmp_303_i_i_cast_fu_399_p1);
    tmp_3_fu_508_p2 <= "1" when (unsigned(i_2_reg_198) < unsigned(ap_const_lv10_2BD)) else "0";
    tmp_4_fu_451_p4 <= r_coeffs_q0(15 downto 1);
    tmp_5_fu_465_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_20_fu_461_p1));
    tmp_6_fu_471_p2 <= (tmp_5_fu_465_p2 or r_coeffs_q0);
    tmp_7_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_198),64));
    tmp_8_fu_254_p4 <= uniformbytes_q0(7 downto 4);
    tmp_9_fu_531_p3 <= 
        mt_fu_525_p2 when (tmp_22_reg_644(0) = '1') else 
        r_coeffs_q1;
    tmp_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_164),64));
    tmp_i_cast_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_152),11));
    tmp_i_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_152),64));
    tmp_s_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_fu_484_p2),64));
    uniformbytes_address0 <= sum_i_cast_fu_245_p1(11 - 1 downto 0);

    uniformbytes_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            uniformbytes_ce0 <= ap_const_logic_1;
        else 
            uniformbytes_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
