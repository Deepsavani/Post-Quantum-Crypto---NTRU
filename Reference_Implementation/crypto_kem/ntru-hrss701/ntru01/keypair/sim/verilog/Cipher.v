// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Cipher (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        RoundKey_address0,
        RoundKey_ce0,
        RoundKey_q0
);

parameter    ap_ST_fsm_state1 = 36'd1;
parameter    ap_ST_fsm_state2 = 36'd2;
parameter    ap_ST_fsm_state3 = 36'd4;
parameter    ap_ST_fsm_state4 = 36'd8;
parameter    ap_ST_fsm_state5 = 36'd16;
parameter    ap_ST_fsm_state6 = 36'd32;
parameter    ap_ST_fsm_state7 = 36'd64;
parameter    ap_ST_fsm_state8 = 36'd128;
parameter    ap_ST_fsm_state9 = 36'd256;
parameter    ap_ST_fsm_state10 = 36'd512;
parameter    ap_ST_fsm_state11 = 36'd1024;
parameter    ap_ST_fsm_state12 = 36'd2048;
parameter    ap_ST_fsm_state13 = 36'd4096;
parameter    ap_ST_fsm_state14 = 36'd8192;
parameter    ap_ST_fsm_state15 = 36'd16384;
parameter    ap_ST_fsm_state16 = 36'd32768;
parameter    ap_ST_fsm_state17 = 36'd65536;
parameter    ap_ST_fsm_state18 = 36'd131072;
parameter    ap_ST_fsm_state19 = 36'd262144;
parameter    ap_ST_fsm_state20 = 36'd524288;
parameter    ap_ST_fsm_state21 = 36'd1048576;
parameter    ap_ST_fsm_state22 = 36'd2097152;
parameter    ap_ST_fsm_state23 = 36'd4194304;
parameter    ap_ST_fsm_state24 = 36'd8388608;
parameter    ap_ST_fsm_state25 = 36'd16777216;
parameter    ap_ST_fsm_state26 = 36'd33554432;
parameter    ap_ST_fsm_state27 = 36'd67108864;
parameter    ap_ST_fsm_state28 = 36'd134217728;
parameter    ap_ST_fsm_state29 = 36'd268435456;
parameter    ap_ST_fsm_state30 = 36'd536870912;
parameter    ap_ST_fsm_state31 = 36'd1073741824;
parameter    ap_ST_fsm_state32 = 36'd2147483648;
parameter    ap_ST_fsm_state33 = 36'd4294967296;
parameter    ap_ST_fsm_state34 = 36'd8589934592;
parameter    ap_ST_fsm_state35 = 36'd17179869184;
parameter    ap_ST_fsm_state36 = 36'd34359738368;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;
output  [7:0] RoundKey_address0;
output   RoundKey_ce0;
input  [7:0] RoundKey_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] state_d1;
reg RoundKey_ce0;

(* fsm_encoding = "none" *) reg   [35:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] reg_257;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state24;
reg   [7:0] reg_262;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state29;
reg   [7:0] reg_269;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state25;
reg   [7:0] reg_276;
reg   [7:0] reg_281;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state26;
reg   [7:0] reg_286;
reg   [7:0] reg_291;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state27;
reg   [7:0] reg_296;
reg   [7:0] reg_301;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state28;
reg   [7:0] reg_306;
wire    ap_CS_fsm_state2;
wire    grp_AddRoundKey_fu_238_ap_ready;
wire    grp_AddRoundKey_fu_238_ap_done;
wire   [2:0] i_fu_323_p2;
reg   [2:0] i_reg_654;
wire    ap_CS_fsm_state17;
wire   [4:0] tmp_214_fu_329_p3;
reg   [4:0] tmp_214_reg_659;
wire   [0:0] tmp_i_fu_317_p2;
reg   [3:0] state_addr_12_reg_665;
reg   [3:0] state_addr_13_reg_670;
wire   [5:0] round_cast8_cast_fu_357_p1;
reg   [5:0] round_cast8_cast_reg_675;
wire   [3:0] round_1_fu_362_p2;
reg   [3:0] round_1_reg_680;
reg   [3:0] state_addr_14_reg_685;
reg   [3:0] state_addr_15_reg_690;
wire   [7:0] tmp_321_i_fu_542_p2;
reg   [7:0] tmp_321_i_reg_695;
wire    ap_CS_fsm_state19;
wire   [7:0] tmp_323_i_fu_582_p2;
reg   [7:0] tmp_323_i_reg_700;
wire    grp_AddRoundKey_fu_238_ap_start;
wire    grp_AddRoundKey_fu_238_ap_idle;
reg   [5:0] grp_AddRoundKey_fu_238_round;
wire   [3:0] grp_AddRoundKey_fu_238_state_address0;
wire    grp_AddRoundKey_fu_238_state_ce0;
wire    grp_AddRoundKey_fu_238_state_we0;
wire   [7:0] grp_AddRoundKey_fu_238_state_d0;
wire   [7:0] grp_AddRoundKey_fu_238_RoundKey_address0;
wire    grp_AddRoundKey_fu_238_RoundKey_ce0;
wire    grp_SubBytes_fu_249_ap_start;
wire    grp_SubBytes_fu_249_ap_done;
wire    grp_SubBytes_fu_249_ap_idle;
wire    grp_SubBytes_fu_249_ap_ready;
wire   [3:0] grp_SubBytes_fu_249_state_address0;
wire    grp_SubBytes_fu_249_state_ce0;
wire    grp_SubBytes_fu_249_state_we0;
wire   [7:0] grp_SubBytes_fu_249_state_d0;
reg   [3:0] round_reg_215;
wire    ap_CS_fsm_state21;
reg   [2:0] i_i_reg_227;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state20;
reg    grp_AddRoundKey_fu_238_ap_start_reg;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
reg    grp_SubBytes_fu_249_ap_start_reg;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_311_p2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state22;
wire   [63:0] tmp_215_fu_337_p1;
wire   [63:0] tmp_217_fu_348_p3;
wire   [63:0] tmp_219_fu_373_p3;
wire   [63:0] tmp_221_fu_387_p3;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire   [7:0] tmp_317_i_fu_448_p2;
wire   [7:0] tmp_319_i_fu_495_p2;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire   [4:0] tmp_216_fu_342_p2;
wire   [4:0] tmp_218_fu_368_p2;
wire   [4:0] tmp_220_fu_382_p2;
wire   [7:0] Tm_fu_396_p2;
wire   [7:0] tmp_315_i_fu_402_p2;
wire   [0:0] tmp_351_fu_420_p3;
wire   [7:0] tmp_2_i_i_cast_cast_fu_428_p3;
wire   [7:0] tmp_350_fu_414_p2;
wire   [7:0] Tmp_fu_408_p2;
wire   [7:0] tmp1_fu_442_p2;
wire   [7:0] tmp_fu_436_p2;
wire   [7:0] Tm_1_fu_455_p2;
wire   [0:0] tmp_353_fu_467_p3;
wire   [7:0] tmp_2_i4_i_cast_cast_fu_475_p3;
wire   [7:0] tmp_352_fu_461_p2;
wire   [7:0] tmp3_fu_489_p2;
wire   [7:0] tmp2_fu_483_p2;
wire   [7:0] Tm_2_fu_502_p2;
wire   [0:0] tmp_355_fu_514_p3;
wire   [7:0] tmp_2_i9_i_cast_cast_fu_522_p3;
wire   [7:0] tmp_354_fu_508_p2;
wire   [7:0] tmp5_fu_536_p2;
wire   [7:0] tmp4_fu_530_p2;
wire   [7:0] Tm_3_fu_548_p2;
wire   [0:0] tmp_357_fu_560_p3;
wire   [7:0] tmp_356_fu_554_p2;
wire   [7:0] tmp6_fu_576_p2;
wire   [7:0] tmp_2_i14_i_cast_cas_fu_568_p3;
reg   [35:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 36'd1;
#0 grp_AddRoundKey_fu_238_ap_start_reg = 1'b0;
#0 grp_SubBytes_fu_249_ap_start_reg = 1'b0;
end

AddRoundKey grp_AddRoundKey_fu_238(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AddRoundKey_fu_238_ap_start),
    .ap_done(grp_AddRoundKey_fu_238_ap_done),
    .ap_idle(grp_AddRoundKey_fu_238_ap_idle),
    .ap_ready(grp_AddRoundKey_fu_238_ap_ready),
    .round(grp_AddRoundKey_fu_238_round),
    .state_address0(grp_AddRoundKey_fu_238_state_address0),
    .state_ce0(grp_AddRoundKey_fu_238_state_ce0),
    .state_we0(grp_AddRoundKey_fu_238_state_we0),
    .state_d0(grp_AddRoundKey_fu_238_state_d0),
    .state_q0(state_q0),
    .RoundKey_address0(grp_AddRoundKey_fu_238_RoundKey_address0),
    .RoundKey_ce0(grp_AddRoundKey_fu_238_RoundKey_ce0),
    .RoundKey_q0(RoundKey_q0)
);

SubBytes grp_SubBytes_fu_249(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_SubBytes_fu_249_ap_start),
    .ap_done(grp_SubBytes_fu_249_ap_done),
    .ap_idle(grp_SubBytes_fu_249_ap_idle),
    .ap_ready(grp_SubBytes_fu_249_ap_ready),
    .state_address0(grp_SubBytes_fu_249_state_address0),
    .state_ce0(grp_SubBytes_fu_249_state_ce0),
    .state_we0(grp_SubBytes_fu_249_state_we0),
    .state_d0(grp_SubBytes_fu_249_state_d0),
    .state_q0(state_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AddRoundKey_fu_238_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state35) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_i_fu_317_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17)))) begin
            grp_AddRoundKey_fu_238_ap_start_reg <= 1'b1;
        end else if ((grp_AddRoundKey_fu_238_ap_ready == 1'b1)) begin
            grp_AddRoundKey_fu_238_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_SubBytes_fu_249_ap_start_reg <= 1'b0;
    end else begin
        if ((((exitcond_fu_311_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((exitcond_fu_311_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
            grp_SubBytes_fu_249_ap_start_reg <= 1'b1;
        end else if ((grp_SubBytes_fu_249_ap_ready == 1'b1)) begin
            grp_SubBytes_fu_249_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_i_reg_227 <= i_reg_654;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        i_i_reg_227 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state29))) begin
        reg_262 <= state_q0;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_262 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state29))) begin
        reg_269 <= state_q1;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_269 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((grp_AddRoundKey_fu_238_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state21)) begin
            round_reg_215 <= round_1_reg_680;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            round_reg_215 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_reg_654 <= i_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_257 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_276 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_281 <= state_q0;
        reg_286 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_291 <= state_q0;
        reg_296 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_301 <= state_q0;
        reg_306 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_317_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        round_1_reg_680 <= round_1_fu_362_p2;
        round_cast8_cast_reg_675[3 : 0] <= round_cast8_cast_fu_357_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        state_addr_12_reg_665[3 : 2] <= tmp_215_fu_337_p1[3 : 2];
        state_addr_13_reg_670[3 : 2] <= tmp_217_fu_348_p3[3 : 2];
        tmp_214_reg_659[4 : 2] <= tmp_214_fu_329_p3[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        state_addr_14_reg_685[3 : 2] <= tmp_219_fu_373_p3[3 : 2];
        state_addr_15_reg_690[3 : 2] <= tmp_221_fu_387_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_321_i_reg_695 <= tmp_321_i_fu_542_p2;
        tmp_323_i_reg_700 <= tmp_323_i_fu_582_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state2))) begin
        RoundKey_ce0 = grp_AddRoundKey_fu_238_RoundKey_ce0;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state36) & (grp_AddRoundKey_fu_238_ap_done == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) & (grp_AddRoundKey_fu_238_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_AddRoundKey_fu_238_round = 6'd14;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_AddRoundKey_fu_238_round = round_cast8_cast_reg_675;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_AddRoundKey_fu_238_round = 6'd0;
    end else begin
        grp_AddRoundKey_fu_238_round = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        state_address0 = state_addr_14_reg_685;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        state_address0 = state_addr_12_reg_665;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_address0 = tmp_219_fu_373_p3;
    end else if (((tmp_i_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        state_address0 = tmp_215_fu_337_p1;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state10))) begin
        state_address0 = 64'd11;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state9))) begin
        state_address0 = 64'd3;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8))) begin
        state_address0 = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state7))) begin
        state_address0 = 64'd2;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state12))) begin
        state_address0 = 64'd9;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state29))) begin
        state_address0 = 64'd1;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state4))) begin
        state_address0 = grp_SubBytes_fu_249_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state2))) begin
        state_address0 = grp_AddRoundKey_fu_238_state_address0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        state_address1 = state_addr_15_reg_690;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        state_address1 = state_addr_13_reg_670;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_address1 = tmp_221_fu_387_p3;
    end else if (((tmp_i_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        state_address1 = tmp_217_fu_348_p3;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state10))) begin
        state_address1 = 64'd7;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state9))) begin
        state_address1 = 64'd15;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8))) begin
        state_address1 = 64'd14;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state7))) begin
        state_address1 = 64'd10;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state12))) begin
        state_address1 = 64'd13;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state29))) begin
        state_address1 = 64'd5;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state29) | ((tmp_i_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17)))) begin
        state_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state4))) begin
        state_ce0 = grp_SubBytes_fu_249_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state2))) begin
        state_ce0 = grp_AddRoundKey_fu_238_state_ce0;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state29) | ((tmp_i_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17)))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        state_d0 = tmp_321_i_reg_695;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        state_d0 = tmp_317_i_fu_448_p2;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state16))) begin
        state_d0 = reg_269;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state15))) begin
        state_d0 = reg_306;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state14))) begin
        state_d0 = reg_296;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state13))) begin
        state_d0 = reg_286;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state12))) begin
        state_d0 = reg_276;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state29))) begin
        state_d0 = reg_262;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state4))) begin
        state_d0 = grp_SubBytes_fu_249_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state2))) begin
        state_d0 = grp_AddRoundKey_fu_238_state_d0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        state_d1 = tmp_323_i_reg_700;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        state_d1 = tmp_319_i_fu_495_p2;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state16))) begin
        state_d1 = reg_301;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state15))) begin
        state_d1 = reg_262;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state14))) begin
        state_d1 = reg_291;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state13))) begin
        state_d1 = reg_281;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state12))) begin
        state_d1 = reg_257;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state29))) begin
        state_d1 = reg_269;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state29))) begin
        state_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state4))) begin
        state_we0 = grp_SubBytes_fu_249_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state2))) begin
        state_we0 = grp_AddRoundKey_fu_238_state_we0;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state29))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_AddRoundKey_fu_238_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_fu_311_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_SubBytes_fu_249_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((tmp_i_fu_317_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (grp_AddRoundKey_fu_238_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((grp_SubBytes_fu_249_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == ap_CS_fsm_state36) & (grp_AddRoundKey_fu_238_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign RoundKey_address0 = grp_AddRoundKey_fu_238_RoundKey_address0;

assign Tm_1_fu_455_p2 = (state_q0 ^ reg_262);

assign Tm_2_fu_502_p2 = (state_q1 ^ state_q0);

assign Tm_3_fu_548_p2 = (state_q1 ^ reg_257);

assign Tm_fu_396_p2 = (reg_262 ^ reg_257);

assign Tmp_fu_408_p2 = (tmp_315_i_fu_402_p2 ^ state_q1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond_fu_311_p2 = ((round_reg_215 == 4'd14) ? 1'b1 : 1'b0);

assign grp_AddRoundKey_fu_238_ap_start = grp_AddRoundKey_fu_238_ap_start_reg;

assign grp_SubBytes_fu_249_ap_start = grp_SubBytes_fu_249_ap_start_reg;

assign i_fu_323_p2 = (i_i_reg_227 + 3'd1);

assign round_1_fu_362_p2 = (round_reg_215 + 4'd1);

assign round_cast8_cast_fu_357_p1 = round_reg_215;

assign tmp1_fu_442_p2 = (tmp_350_fu_414_p2 ^ Tmp_fu_408_p2);

assign tmp2_fu_483_p2 = (tmp_2_i4_i_cast_cast_fu_475_p3 ^ reg_262);

assign tmp3_fu_489_p2 = (tmp_352_fu_461_p2 ^ Tmp_fu_408_p2);

assign tmp4_fu_530_p2 = (tmp_2_i9_i_cast_cast_fu_522_p3 ^ state_q0);

assign tmp5_fu_536_p2 = (tmp_354_fu_508_p2 ^ Tmp_fu_408_p2);

assign tmp6_fu_576_p2 = (tmp_356_fu_554_p2 ^ tmp_315_i_fu_402_p2);

assign tmp_214_fu_329_p3 = {{i_i_reg_227}, {2'd0}};

assign tmp_215_fu_337_p1 = tmp_214_fu_329_p3;

assign tmp_216_fu_342_p2 = (tmp_214_fu_329_p3 | 5'd1);

assign tmp_217_fu_348_p3 = {{59'd0}, {tmp_216_fu_342_p2}};

assign tmp_218_fu_368_p2 = (tmp_214_reg_659 | 5'd2);

assign tmp_219_fu_373_p3 = {{59'd0}, {tmp_218_fu_368_p2}};

assign tmp_220_fu_382_p2 = (tmp_214_reg_659 | 5'd3);

assign tmp_221_fu_387_p3 = {{59'd0}, {tmp_220_fu_382_p2}};

assign tmp_2_i14_i_cast_cas_fu_568_p3 = ((tmp_357_fu_560_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_2_i4_i_cast_cast_fu_475_p3 = ((tmp_353_fu_467_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_2_i9_i_cast_cast_fu_522_p3 = ((tmp_355_fu_514_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_2_i_i_cast_cast_fu_428_p3 = ((tmp_351_fu_420_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_315_i_fu_402_p2 = (state_q0 ^ Tm_fu_396_p2);

assign tmp_317_i_fu_448_p2 = (tmp_fu_436_p2 ^ tmp1_fu_442_p2);

assign tmp_319_i_fu_495_p2 = (tmp3_fu_489_p2 ^ tmp2_fu_483_p2);

assign tmp_321_i_fu_542_p2 = (tmp5_fu_536_p2 ^ tmp4_fu_530_p2);

assign tmp_323_i_fu_582_p2 = (tmp_2_i14_i_cast_cas_fu_568_p3 ^ tmp6_fu_576_p2);

assign tmp_350_fu_414_p2 = Tm_fu_396_p2 << 8'd1;

assign tmp_351_fu_420_p3 = Tm_fu_396_p2[32'd7];

assign tmp_352_fu_461_p2 = Tm_1_fu_455_p2 << 8'd1;

assign tmp_353_fu_467_p3 = Tm_1_fu_455_p2[32'd7];

assign tmp_354_fu_508_p2 = Tm_2_fu_502_p2 << 8'd1;

assign tmp_355_fu_514_p3 = Tm_2_fu_502_p2[32'd7];

assign tmp_356_fu_554_p2 = Tm_3_fu_548_p2 << 8'd1;

assign tmp_357_fu_560_p3 = Tm_3_fu_548_p2[32'd7];

assign tmp_fu_436_p2 = (tmp_2_i_i_cast_cast_fu_428_p3 ^ reg_257);

assign tmp_i_fu_317_p2 = ((i_i_reg_227 == 3'd4) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_214_reg_659[1:0] <= 2'b00;
    state_addr_12_reg_665[1:0] <= 2'b00;
    state_addr_13_reg_670[1:0] <= 2'b01;
    round_cast8_cast_reg_675[5:4] <= 2'b00;
    state_addr_14_reg_685[1:0] <= 2'b10;
    state_addr_15_reg_690[1:0] <= 2'b11;
end

endmodule //Cipher
