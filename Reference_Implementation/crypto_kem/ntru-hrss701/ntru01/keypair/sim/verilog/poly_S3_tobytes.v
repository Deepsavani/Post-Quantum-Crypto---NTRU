// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module poly_S3_tobytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        msg_address0,
        msg_ce0,
        msg_we0,
        msg_d0,
        msg_offset,
        a_coeffs_address0,
        a_coeffs_ce0,
        a_coeffs_q0,
        a_coeffs_address1,
        a_coeffs_ce1,
        a_coeffs_q1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] msg_address0;
output   msg_ce0;
output   msg_we0;
output  [7:0] msg_d0;
input  [9:0] msg_offset;
output  [9:0] a_coeffs_address0;
output   a_coeffs_ce0;
input  [15:0] a_coeffs_q0;
output  [9:0] a_coeffs_address1;
output   a_coeffs_ce1;
input  [15:0] a_coeffs_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg msg_ce0;
reg msg_we0;
reg[9:0] a_coeffs_address0;
reg a_coeffs_ce0;
reg[9:0] a_coeffs_address1;
reg a_coeffs_ce1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] tmp_166_fu_117_p1;
reg   [8:0] tmp_166_reg_302;
wire   [7:0] i_10_fu_131_p2;
reg   [7:0] i_10_reg_310;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_fu_145_p2;
reg   [9:0] tmp_reg_315;
wire   [0:0] exitcond_fu_125_p2;
wire   [8:0] sum_fu_177_p2;
reg   [8:0] sum_reg_332;
wire   [7:0] c_1_fu_208_p2;
reg   [7:0] c_1_reg_337;
wire    ap_CS_fsm_state3;
wire   [7:0] c_2_fu_238_p2;
reg   [7:0] c_2_reg_348;
wire    ap_CS_fsm_state4;
wire   [7:0] c_3_fu_272_p2;
reg   [7:0] c_3_reg_364;
wire    ap_CS_fsm_state5;
wire   [7:0] tmp_180_fu_278_p1;
reg   [7:0] tmp_180_reg_370;
reg   [7:0] i_reg_106;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_158_fu_157_p1;
wire   [63:0] tmp_161_fu_168_p1;
wire   [63:0] tmp_165_fu_219_p1;
wire   [63:0] tmp_169_fu_249_p1;
wire   [63:0] tmp_171_fu_254_p1;
wire   [63:0] sum_cast_fu_298_p1;
wire   [9:0] p_shl5_fu_137_p3;
wire   [9:0] i_cast1_fu_121_p1;
wire   [9:0] tmp_s_fu_151_p2;
wire   [9:0] tmp_160_fu_162_p2;
wire   [8:0] tmp_175_cast_fu_173_p1;
wire   [5:0] tmp_173_fu_186_p1;
wire   [7:0] p_shl4_fu_190_p3;
wire   [7:0] c_fu_182_p1;
wire   [7:0] tmp_159_fu_198_p2;
wire   [7:0] tmp_174_fu_204_p1;
wire   [9:0] tmp_164_fu_214_p2;
wire   [7:0] tmp_175_fu_224_p2;
wire   [7:0] tmp_176_fu_234_p1;
wire   [7:0] tmp_163_fu_229_p2;
wire   [9:0] tmp_168_fu_244_p2;
wire   [7:0] tmp_177_fu_258_p2;
wire   [7:0] tmp_178_fu_268_p1;
wire   [7:0] tmp_167_fu_263_p2;
wire   [7:0] tmp_179_fu_282_p2;
wire   [7:0] tmp_170_fu_287_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_106 <= i_10_reg_310;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_106 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_1_reg_337 <= c_1_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_2_reg_348 <= c_2_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_3_reg_364 <= c_3_fu_272_p2;
        tmp_180_reg_370 <= tmp_180_fu_278_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_10_reg_310 <= i_10_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_125_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_reg_332 <= sum_fu_177_p2;
        tmp_reg_315 <= tmp_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_166_reg_302 <= tmp_166_fu_117_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_coeffs_address0 = tmp_171_fu_254_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_coeffs_address0 = tmp_165_fu_219_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_coeffs_address0 = tmp_158_fu_157_p1;
    end else begin
        a_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_coeffs_address1 = tmp_169_fu_249_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_coeffs_address1 = tmp_161_fu_168_p1;
    end else begin
        a_coeffs_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        a_coeffs_ce0 = 1'b1;
    end else begin
        a_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        a_coeffs_ce1 = 1'b1;
    end else begin
        a_coeffs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        msg_ce0 = 1'b1;
    end else begin
        msg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        msg_we0 = 1'b1;
    end else begin
        msg_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign c_1_fu_208_p2 = (tmp_159_fu_198_p2 + tmp_174_fu_204_p1);

assign c_2_fu_238_p2 = (tmp_176_fu_234_p1 + tmp_163_fu_229_p2);

assign c_3_fu_272_p2 = (tmp_178_fu_268_p1 + tmp_167_fu_263_p2);

assign c_fu_182_p1 = a_coeffs_q0[7:0];

assign exitcond_fu_125_p2 = ((i_reg_106 == 8'd140) ? 1'b1 : 1'b0);

assign i_10_fu_131_p2 = (i_reg_106 + 8'd1);

assign i_cast1_fu_121_p1 = i_reg_106;

assign msg_address0 = sum_cast_fu_298_p1;

assign msg_d0 = (tmp_180_reg_370 + tmp_170_fu_287_p2);

assign p_shl4_fu_190_p3 = {{tmp_173_fu_186_p1}, {2'd0}};

assign p_shl5_fu_137_p3 = {{i_reg_106}, {2'd0}};

assign sum_cast_fu_298_p1 = sum_reg_332;

assign sum_fu_177_p2 = (tmp_175_cast_fu_173_p1 + tmp_166_reg_302);

assign tmp_158_fu_157_p1 = tmp_s_fu_151_p2;

assign tmp_159_fu_198_p2 = (p_shl4_fu_190_p3 - c_fu_182_p1);

assign tmp_160_fu_162_p2 = (10'd3 + tmp_fu_145_p2);

assign tmp_161_fu_168_p1 = tmp_160_fu_162_p2;

assign tmp_163_fu_229_p2 = (tmp_175_fu_224_p2 - c_1_reg_337);

assign tmp_164_fu_214_p2 = (10'd2 + tmp_reg_315);

assign tmp_165_fu_219_p1 = tmp_164_fu_214_p2;

assign tmp_166_fu_117_p1 = msg_offset[8:0];

assign tmp_167_fu_263_p2 = (tmp_177_fu_258_p2 - c_2_reg_348);

assign tmp_168_fu_244_p2 = (10'd1 + tmp_reg_315);

assign tmp_169_fu_249_p1 = tmp_168_fu_244_p2;

assign tmp_170_fu_287_p2 = (tmp_179_fu_282_p2 - c_3_reg_364);

assign tmp_171_fu_254_p1 = tmp_reg_315;

assign tmp_173_fu_186_p1 = a_coeffs_q0[5:0];

assign tmp_174_fu_204_p1 = a_coeffs_q1[7:0];

assign tmp_175_cast_fu_173_p1 = i_reg_106;

assign tmp_175_fu_224_p2 = c_1_reg_337 << 8'd2;

assign tmp_176_fu_234_p1 = a_coeffs_q0[7:0];

assign tmp_177_fu_258_p2 = c_2_reg_348 << 8'd2;

assign tmp_178_fu_268_p1 = a_coeffs_q1[7:0];

assign tmp_179_fu_282_p2 = c_3_reg_364 << 8'd2;

assign tmp_180_fu_278_p1 = a_coeffs_q0[7:0];

assign tmp_fu_145_p2 = (p_shl5_fu_137_p3 + i_cast1_fu_121_p1);

assign tmp_s_fu_151_p2 = (10'd4 + tmp_fu_145_p2);

endmodule //poly_S3_tobytes
