// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sample_iid_plus (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_coeffs_address0,
        r_coeffs_ce0,
        r_coeffs_we0,
        r_coeffs_d0,
        r_coeffs_q0,
        r_coeffs_address1,
        r_coeffs_ce1,
        r_coeffs_we1,
        r_coeffs_d1,
        r_coeffs_q1,
        uniformbytes_address0,
        uniformbytes_ce0,
        uniformbytes_q0,
        uniformbytes_offset
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] r_coeffs_address0;
output   r_coeffs_ce0;
output   r_coeffs_we0;
output  [15:0] r_coeffs_d0;
input  [15:0] r_coeffs_q0;
output  [9:0] r_coeffs_address1;
output   r_coeffs_ce1;
output   r_coeffs_we1;
output  [15:0] r_coeffs_d1;
input  [15:0] r_coeffs_q1;
output  [10:0] uniformbytes_address0;
output   uniformbytes_ce0;
input  [7:0] uniformbytes_q0;
input  [11:0] uniformbytes_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] r_coeffs_address0;
reg r_coeffs_ce0;
reg r_coeffs_we0;
reg[15:0] r_coeffs_d0;
reg[9:0] r_coeffs_address1;
reg r_coeffs_ce1;
reg r_coeffs_we1;
reg[15:0] r_coeffs_d1;
reg uniformbytes_ce0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] tmp_12_fu_220_p1;
reg   [10:0] tmp_12_reg_589;
wire   [9:0] i_8_fu_230_p2;
reg   [9:0] i_8_reg_597;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_i_fu_224_p2;
wire   [2:0] r_2_fu_362_p2;
reg   [2:0] r_2_reg_607;
wire    ap_CS_fsm_state3;
wire   [9:0] i_4_fu_440_p2;
reg   [9:0] i_4_reg_616;
wire    ap_CS_fsm_state5;
reg   [9:0] r_coeffs_addr_reg_621;
wire   [0:0] exitcond2_fu_434_p2;
wire   [9:0] i_5_fu_484_p2;
reg   [9:0] i_5_reg_629;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond1_fu_478_p2;
reg   [0:0] tmp_22_reg_644;
reg  signed [15:0] r_coeffs_load_1_reg_649;
wire    ap_CS_fsm_state8;
reg  signed [15:0] r_coeffs_load_2_reg_654;
wire  signed [15:0] grp_fu_583_p3;
wire    ap_CS_fsm_state9;
reg   [9:0] r_coeffs_addr_3_reg_667;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_3_fu_508_p2;
wire   [9:0] i_6_fu_519_p2;
reg   [9:0] i_6_reg_672;
wire   [9:0] i_7_fu_545_p2;
reg   [9:0] i_7_reg_680;
wire    ap_CS_fsm_state12;
reg   [9:0] r_coeffs_addr_4_reg_685;
wire   [0:0] exitcond_fu_539_p2;
reg   [9:0] i_i_reg_152;
wire    ap_CS_fsm_state4;
reg   [9:0] i_reg_164;
wire    ap_CS_fsm_state6;
reg   [9:0] i_1_reg_175;
reg   [15:0] s_reg_186;
reg   [9:0] i_2_reg_198;
wire    ap_CS_fsm_state11;
reg   [9:0] i_3_reg_209;
wire    ap_CS_fsm_state13;
wire   [63:0] sum_i_cast_fu_245_p1;
wire   [63:0] tmp_i_fu_368_p1;
wire   [63:0] tmp_fu_446_p1;
wire   [63:0] tmp_s_fu_490_p1;
wire   [63:0] tmp_1_fu_495_p1;
wire   [63:0] tmp_7_fu_514_p1;
wire   [63:0] tmp_10_fu_551_p1;
wire   [15:0] tmp_306_i_i_fu_427_p2;
wire   [15:0] tmp_6_fu_471_p2;
wire   [15:0] tmp_9_fu_531_p3;
wire   [15:0] tmp_13_cast_fu_578_p1;
wire   [10:0] tmp_i_cast_fu_236_p1;
wire   [10:0] sum_i_fu_240_p2;
wire   [3:0] tmp_8_fu_254_p4;
wire   [3:0] tmp_14_fu_250_p1;
wire   [4:0] tmp_298_i_i_cast_fu_268_p1;
wire   [4:0] tmp_297_i_i_cast_fu_264_p1;
wire   [4:0] r_fu_278_p2;
wire   [2:0] tmp_17_fu_284_p4;
wire   [1:0] tmp_15_fu_302_p4;
wire   [1:0] tmp_19_fu_298_p1;
wire   [1:0] fold1_i_i_cast_fu_312_p2;
wire   [3:0] tmp_300_i_i_cast_fu_318_p1;
wire   [3:0] tmp_299_i_i_cast_fu_294_p1;
wire   [3:0] r_1_fu_322_p2;
wire   [1:0] tmp_18_fu_328_p4;
wire   [3:0] tmp_11_fu_272_p2;
wire   [1:0] tmp_16_fu_342_p4;
wire   [1:0] fold2_i_i_cast_fu_352_p2;
wire   [2:0] tmp_302_i_i_cast_fu_358_p1;
wire   [2:0] tmp_301_i_i_cast_fu_338_p1;
wire   [2:0] t_fu_373_p2;
wire   [0:0] tmp_21_fu_378_p3;
wire   [2:0] c_cast_fu_386_p3;
wire   [2:0] tmp_303_i_i_fu_394_p2;
wire   [0:0] not_tmp_240_i_i_fu_403_p2;
wire   [2:0] tmp_304_i_i_cast_cas_fu_409_p3;
wire   [2:0] tmp_305_i_i_fu_417_p2;
wire   [15:0] tmp_303_i_i_cast_fu_399_p1;
wire  signed [15:0] tmp_305_i_i_cast_fu_423_p1;
wire   [14:0] tmp_4_fu_451_p4;
wire   [15:0] tmp_20_fu_461_p1;
wire   [15:0] tmp_5_fu_465_p2;
wire   [15:0] mt_fu_525_p2;
wire   [0:0] tmp_24_fu_560_p3;
wire   [1:0] tmp_11_cast_fu_568_p1;
wire   [1:0] tmp_23_fu_556_p1;
wire   [1:0] tmp_13_fu_572_p2;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

crypto_kem_keypair_mac_muladd_16s_16s_16ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
crypto_kem_keypair_mac_muladd_16s_16s_16ns_16_1_1_U30(
    .din0(r_coeffs_load_1_reg_649),
    .din1(r_coeffs_load_2_reg_654),
    .din2(s_reg_186),
    .dout(grp_fu_583_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_434_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_1_reg_175 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_1_reg_175 <= i_5_reg_629;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_2_reg_198 <= i_6_reg_672;
    end else if (((exitcond1_fu_478_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_2_reg_198 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_508_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        i_3_reg_209 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i_3_reg_209 <= i_7_reg_680;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_i_reg_152 <= i_8_reg_597;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_i_reg_152 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_164 <= i_4_reg_616;
    end else if (((exitcond_i_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_164 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_434_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        s_reg_186 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        s_reg_186 <= grp_fu_583_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_4_reg_616 <= i_4_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_5_reg_629 <= i_5_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_3_fu_508_p2 == 1'd1))) begin
        i_6_reg_672 <= i_6_fu_519_p2;
        r_coeffs_addr_3_reg_667 <= tmp_7_fu_514_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_7_reg_680 <= i_7_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_8_reg_597 <= i_8_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        r_2_reg_607 <= r_2_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_539_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        r_coeffs_addr_4_reg_685 <= tmp_10_fu_551_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_434_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        r_coeffs_addr_reg_621 <= tmp_fu_446_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        r_coeffs_load_1_reg_649 <= r_coeffs_q0;
        r_coeffs_load_2_reg_654 <= r_coeffs_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_12_reg_589 <= tmp_12_fu_220_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_478_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_22_reg_644 <= s_reg_186[32'd15];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_539_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_539_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_coeffs_address0 = tmp_s_fu_490_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_address0 = r_coeffs_addr_reg_621;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_coeffs_address0 = tmp_fu_446_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_coeffs_address0 = tmp_i_fu_368_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        r_coeffs_address0 = 64'd700;
    end else begin
        r_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        r_coeffs_address1 = r_coeffs_addr_4_reg_685;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        r_coeffs_address1 = tmp_10_fu_551_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        r_coeffs_address1 = r_coeffs_addr_3_reg_667;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        r_coeffs_address1 = tmp_7_fu_514_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_coeffs_address1 = tmp_1_fu_495_p1;
    end else begin
        r_coeffs_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        r_coeffs_ce0 = 1'b1;
    end else begin
        r_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10))) begin
        r_coeffs_ce1 = 1'b1;
    end else begin
        r_coeffs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_d0 = tmp_6_fu_471_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_coeffs_d0 = tmp_306_i_i_fu_427_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        r_coeffs_d0 = 16'd0;
    end else begin
        r_coeffs_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        r_coeffs_d1 = tmp_13_cast_fu_578_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        r_coeffs_d1 = tmp_9_fu_531_p3;
    end else begin
        r_coeffs_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | ((exitcond_i_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        r_coeffs_we0 = 1'b1;
    end else begin
        r_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11))) begin
        r_coeffs_we1 = 1'b1;
    end else begin
        r_coeffs_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        uniformbytes_ce0 = 1'b1;
    end else begin
        uniformbytes_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_i_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond2_fu_434_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond1_fu_478_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state10 : begin
            if (((tmp_3_fu_508_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_539_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_cast_fu_386_p3 = ((tmp_21_fu_378_p3[0:0] === 1'b1) ? 3'd7 : 3'd0);

assign exitcond1_fu_478_p2 = ((i_1_reg_175 == 10'd700) ? 1'b1 : 1'b0);

assign exitcond2_fu_434_p2 = ((i_reg_164 == 10'd700) ? 1'b1 : 1'b0);

assign exitcond_fu_539_p2 = ((i_3_reg_209 == 10'd701) ? 1'b1 : 1'b0);

assign exitcond_i_fu_224_p2 = ((i_i_reg_152 == 10'd700) ? 1'b1 : 1'b0);

assign fold1_i_i_cast_fu_312_p2 = (tmp_15_fu_302_p4 + tmp_19_fu_298_p1);

assign fold2_i_i_cast_fu_352_p2 = (fold1_i_i_cast_fu_312_p2 + tmp_16_fu_342_p4);

assign i_4_fu_440_p2 = (i_reg_164 + 10'd1);

assign i_5_fu_484_p2 = (i_1_reg_175 + 10'd1);

assign i_6_fu_519_p2 = (i_2_reg_198 + 10'd2);

assign i_7_fu_545_p2 = (i_3_reg_209 + 10'd1);

assign i_8_fu_230_p2 = (i_i_reg_152 + 10'd1);

assign mt_fu_525_p2 = (16'd0 - r_coeffs_q1);

assign not_tmp_240_i_i_fu_403_p2 = (tmp_21_fu_378_p3 ^ 1'd1);

assign r_1_fu_322_p2 = (tmp_300_i_i_cast_fu_318_p1 + tmp_299_i_i_cast_fu_294_p1);

assign r_2_fu_362_p2 = (tmp_302_i_i_cast_fu_358_p1 + tmp_301_i_i_cast_fu_338_p1);

assign r_fu_278_p2 = (tmp_298_i_i_cast_fu_268_p1 + tmp_297_i_i_cast_fu_264_p1);

assign sum_i_cast_fu_245_p1 = sum_i_fu_240_p2;

assign sum_i_fu_240_p2 = (tmp_12_reg_589 + tmp_i_cast_fu_236_p1);

assign t_fu_373_p2 = ($signed(3'd5) + $signed(r_2_reg_607));

assign tmp_10_fu_551_p1 = i_3_reg_209;

assign tmp_11_cast_fu_568_p1 = tmp_24_fu_560_p3;

assign tmp_11_fu_272_p2 = (tmp_8_fu_254_p4 + tmp_14_fu_250_p1);

assign tmp_12_fu_220_p1 = uniformbytes_offset[10:0];

assign tmp_13_cast_fu_578_p1 = tmp_13_fu_572_p2;

assign tmp_13_fu_572_p2 = (tmp_23_fu_556_p1 ^ tmp_11_cast_fu_568_p1);

assign tmp_14_fu_250_p1 = uniformbytes_q0[3:0];

assign tmp_15_fu_302_p4 = {{uniformbytes_q0[5:4]}};

assign tmp_16_fu_342_p4 = {{tmp_11_fu_272_p2[3:2]}};

assign tmp_17_fu_284_p4 = {{r_fu_278_p2[4:2]}};

assign tmp_18_fu_328_p4 = {{r_1_fu_322_p2[3:2]}};

assign tmp_19_fu_298_p1 = uniformbytes_q0[1:0];

assign tmp_1_fu_495_p1 = i_1_reg_175;

assign tmp_20_fu_461_p1 = tmp_4_fu_451_p4;

assign tmp_21_fu_378_p3 = t_fu_373_p2[32'd2];

assign tmp_23_fu_556_p1 = r_coeffs_q1[1:0];

assign tmp_24_fu_560_p3 = r_coeffs_q1[32'd15];

assign tmp_297_i_i_cast_fu_264_p1 = tmp_8_fu_254_p4;

assign tmp_298_i_i_cast_fu_268_p1 = tmp_14_fu_250_p1;

assign tmp_299_i_i_cast_fu_294_p1 = tmp_17_fu_284_p4;

assign tmp_300_i_i_cast_fu_318_p1 = fold1_i_i_cast_fu_312_p2;

assign tmp_301_i_i_cast_fu_338_p1 = tmp_18_fu_328_p4;

assign tmp_302_i_i_cast_fu_358_p1 = fold2_i_i_cast_fu_352_p2;

assign tmp_303_i_i_cast_fu_399_p1 = tmp_303_i_i_fu_394_p2;

assign tmp_303_i_i_fu_394_p2 = (r_2_reg_607 & c_cast_fu_386_p3);

assign tmp_304_i_i_cast_cas_fu_409_p3 = ((not_tmp_240_i_i_fu_403_p2[0:0] === 1'b1) ? 3'd7 : 3'd0);

assign tmp_305_i_i_cast_fu_423_p1 = $signed(tmp_305_i_i_fu_417_p2);

assign tmp_305_i_i_fu_417_p2 = (tmp_304_i_i_cast_cas_fu_409_p3 & t_fu_373_p2);

assign tmp_306_i_i_fu_427_p2 = (tmp_305_i_i_cast_fu_423_p1 ^ tmp_303_i_i_cast_fu_399_p1);

assign tmp_3_fu_508_p2 = ((i_2_reg_198 < 10'd701) ? 1'b1 : 1'b0);

assign tmp_4_fu_451_p4 = {{r_coeffs_q0[15:1]}};

assign tmp_5_fu_465_p2 = (16'd0 - tmp_20_fu_461_p1);

assign tmp_6_fu_471_p2 = (tmp_5_fu_465_p2 | r_coeffs_q0);

assign tmp_7_fu_514_p1 = i_2_reg_198;

assign tmp_8_fu_254_p4 = {{uniformbytes_q0[7:4]}};

assign tmp_9_fu_531_p3 = ((tmp_22_reg_644[0:0] === 1'b1) ? mt_fu_525_p2 : r_coeffs_q1);

assign tmp_fu_446_p1 = i_reg_164;

assign tmp_i_cast_fu_236_p1 = i_i_reg_152;

assign tmp_i_fu_368_p1 = i_i_reg_152;

assign tmp_s_fu_490_p1 = i_5_fu_484_p2;

assign uniformbytes_address0 = sum_i_cast_fu_245_p1;

endmodule //sample_iid_plus
