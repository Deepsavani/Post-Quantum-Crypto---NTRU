// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "crypto_kem_keypair.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic crypto_kem_keypair::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic crypto_kem_keypair::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> crypto_kem_keypair::ap_ST_fsm_state1 = "1";
const sc_lv<6> crypto_kem_keypair::ap_ST_fsm_state2 = "10";
const sc_lv<6> crypto_kem_keypair::ap_ST_fsm_state3 = "100";
const sc_lv<6> crypto_kem_keypair::ap_ST_fsm_state4 = "1000";
const sc_lv<6> crypto_kem_keypair::ap_ST_fsm_state5 = "10000";
const sc_lv<6> crypto_kem_keypair::ap_ST_fsm_state6 = "100000";
const sc_lv<32> crypto_kem_keypair::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> crypto_kem_keypair::ap_const_lv32_2 = "10";
const sc_lv<32> crypto_kem_keypair::ap_const_lv32_3 = "11";
const sc_lv<32> crypto_kem_keypair::ap_const_lv32_1 = "1";
const sc_lv<32> crypto_kem_keypair::ap_const_lv32_4 = "100";
const sc_lv<32> crypto_kem_keypair::ap_const_lv32_5 = "101";
const bool crypto_kem_keypair::ap_const_boolean_1 = true;

crypto_kem_keypair::crypto_kem_keypair(sc_module_name name) : sc_module(name), mVcdFile(0) {
    seed_U = new crypto_kem_keypair_seed("seed_U");
    seed_U->clk(ap_clk);
    seed_U->reset(ap_rst);
    seed_U->address0(seed_address0);
    seed_U->ce0(seed_ce0);
    seed_U->we0(seed_we0);
    seed_U->d0(grp_randombytes_fu_43_x_d0);
    seed_U->q0(seed_q0);
    grp_owcpa_keypair_fu_34 = new owcpa_keypair("grp_owcpa_keypair_fu_34");
    grp_owcpa_keypair_fu_34->ap_clk(ap_clk);
    grp_owcpa_keypair_fu_34->ap_rst(ap_rst);
    grp_owcpa_keypair_fu_34->ap_start(grp_owcpa_keypair_fu_34_ap_start);
    grp_owcpa_keypair_fu_34->ap_done(grp_owcpa_keypair_fu_34_ap_done);
    grp_owcpa_keypair_fu_34->ap_idle(grp_owcpa_keypair_fu_34_ap_idle);
    grp_owcpa_keypair_fu_34->ap_ready(grp_owcpa_keypair_fu_34_ap_ready);
    grp_owcpa_keypair_fu_34->pk_address0(grp_owcpa_keypair_fu_34_pk_address0);
    grp_owcpa_keypair_fu_34->pk_ce0(grp_owcpa_keypair_fu_34_pk_ce0);
    grp_owcpa_keypair_fu_34->pk_we0(grp_owcpa_keypair_fu_34_pk_we0);
    grp_owcpa_keypair_fu_34->pk_d0(grp_owcpa_keypair_fu_34_pk_d0);
    grp_owcpa_keypair_fu_34->pk_address1(grp_owcpa_keypair_fu_34_pk_address1);
    grp_owcpa_keypair_fu_34->pk_ce1(grp_owcpa_keypair_fu_34_pk_ce1);
    grp_owcpa_keypair_fu_34->pk_we1(grp_owcpa_keypair_fu_34_pk_we1);
    grp_owcpa_keypair_fu_34->pk_d1(grp_owcpa_keypair_fu_34_pk_d1);
    grp_owcpa_keypair_fu_34->sk_address0(grp_owcpa_keypair_fu_34_sk_address0);
    grp_owcpa_keypair_fu_34->sk_ce0(grp_owcpa_keypair_fu_34_sk_ce0);
    grp_owcpa_keypair_fu_34->sk_we0(grp_owcpa_keypair_fu_34_sk_we0);
    grp_owcpa_keypair_fu_34->sk_d0(grp_owcpa_keypair_fu_34_sk_d0);
    grp_owcpa_keypair_fu_34->sk_address1(grp_owcpa_keypair_fu_34_sk_address1);
    grp_owcpa_keypair_fu_34->sk_ce1(grp_owcpa_keypair_fu_34_sk_ce1);
    grp_owcpa_keypair_fu_34->sk_we1(grp_owcpa_keypair_fu_34_sk_we1);
    grp_owcpa_keypair_fu_34->sk_d1(grp_owcpa_keypair_fu_34_sk_d1);
    grp_owcpa_keypair_fu_34->seed_address0(grp_owcpa_keypair_fu_34_seed_address0);
    grp_owcpa_keypair_fu_34->seed_ce0(grp_owcpa_keypair_fu_34_seed_ce0);
    grp_owcpa_keypair_fu_34->seed_q0(seed_q0);
    grp_randombytes_fu_43 = new randombytes("grp_randombytes_fu_43");
    grp_randombytes_fu_43->ap_clk(ap_clk);
    grp_randombytes_fu_43->ap_rst(ap_rst);
    grp_randombytes_fu_43->ap_start(grp_randombytes_fu_43_ap_start);
    grp_randombytes_fu_43->ap_done(grp_randombytes_fu_43_ap_done);
    grp_randombytes_fu_43->ap_idle(grp_randombytes_fu_43_ap_idle);
    grp_randombytes_fu_43->ap_ready(grp_randombytes_fu_43_ap_ready);
    grp_randombytes_fu_43->x_address0(grp_randombytes_fu_43_x_address0);
    grp_randombytes_fu_43->x_ce0(grp_randombytes_fu_43_x_ce0);
    grp_randombytes_fu_43->x_we0(grp_randombytes_fu_43_x_we0);
    grp_randombytes_fu_43->x_d0(grp_randombytes_fu_43_x_d0);
    grp_randombytes_fu_43->DRBG_ctx_V_address0(grp_randombytes_fu_43_DRBG_ctx_V_address0);
    grp_randombytes_fu_43->DRBG_ctx_V_ce0(grp_randombytes_fu_43_DRBG_ctx_V_ce0);
    grp_randombytes_fu_43->DRBG_ctx_V_we0(grp_randombytes_fu_43_DRBG_ctx_V_we0);
    grp_randombytes_fu_43->DRBG_ctx_V_d0(grp_randombytes_fu_43_DRBG_ctx_V_d0);
    grp_randombytes_fu_43->DRBG_ctx_V_q0(DRBG_ctx_V_q0);
    grp_randombytes_fu_43->DRBG_ctx_V_address1(grp_randombytes_fu_43_DRBG_ctx_V_address1);
    grp_randombytes_fu_43->DRBG_ctx_V_ce1(grp_randombytes_fu_43_DRBG_ctx_V_ce1);
    grp_randombytes_fu_43->DRBG_ctx_V_q1(DRBG_ctx_V_q1);
    grp_randombytes_fu_43->DRBG_ctx_Key_address0(grp_randombytes_fu_43_DRBG_ctx_Key_address0);
    grp_randombytes_fu_43->DRBG_ctx_Key_ce0(grp_randombytes_fu_43_DRBG_ctx_Key_ce0);
    grp_randombytes_fu_43->DRBG_ctx_Key_we0(grp_randombytes_fu_43_DRBG_ctx_Key_we0);
    grp_randombytes_fu_43->DRBG_ctx_Key_d0(grp_randombytes_fu_43_DRBG_ctx_Key_d0);
    grp_randombytes_fu_43->DRBG_ctx_Key_q0(DRBG_ctx_Key_q0);
    grp_randombytes_fu_43->DRBG_ctx_Key_address1(grp_randombytes_fu_43_DRBG_ctx_Key_address1);
    grp_randombytes_fu_43->DRBG_ctx_Key_ce1(grp_randombytes_fu_43_DRBG_ctx_Key_ce1);
    grp_randombytes_fu_43->DRBG_ctx_Key_q1(DRBG_ctx_Key_q1);
    grp_randombytes_fu_43->DRBG_ctx_reseed_counter_i(DRBG_ctx_reseed_counter_i);
    grp_randombytes_fu_43->DRBG_ctx_reseed_counter_o(grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o);
    grp_randombytes_fu_43->DRBG_ctx_reseed_counter_o_ap_vld(grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o_ap_vld);
    grp_randombytes_1_fu_59 = new randombytes_1("grp_randombytes_1_fu_59");
    grp_randombytes_1_fu_59->ap_clk(ap_clk);
    grp_randombytes_1_fu_59->ap_rst(ap_rst);
    grp_randombytes_1_fu_59->ap_start(grp_randombytes_1_fu_59_ap_start);
    grp_randombytes_1_fu_59->ap_done(grp_randombytes_1_fu_59_ap_done);
    grp_randombytes_1_fu_59->ap_idle(grp_randombytes_1_fu_59_ap_idle);
    grp_randombytes_1_fu_59->ap_ready(grp_randombytes_1_fu_59_ap_ready);
    grp_randombytes_1_fu_59->x_address0(grp_randombytes_1_fu_59_x_address0);
    grp_randombytes_1_fu_59->x_ce0(grp_randombytes_1_fu_59_x_ce0);
    grp_randombytes_1_fu_59->x_we0(grp_randombytes_1_fu_59_x_we0);
    grp_randombytes_1_fu_59->x_d0(grp_randombytes_1_fu_59_x_d0);
    grp_randombytes_1_fu_59->DRBG_ctx_V_address0(grp_randombytes_1_fu_59_DRBG_ctx_V_address0);
    grp_randombytes_1_fu_59->DRBG_ctx_V_ce0(grp_randombytes_1_fu_59_DRBG_ctx_V_ce0);
    grp_randombytes_1_fu_59->DRBG_ctx_V_we0(grp_randombytes_1_fu_59_DRBG_ctx_V_we0);
    grp_randombytes_1_fu_59->DRBG_ctx_V_d0(grp_randombytes_1_fu_59_DRBG_ctx_V_d0);
    grp_randombytes_1_fu_59->DRBG_ctx_V_q0(DRBG_ctx_V_q0);
    grp_randombytes_1_fu_59->DRBG_ctx_V_address1(grp_randombytes_1_fu_59_DRBG_ctx_V_address1);
    grp_randombytes_1_fu_59->DRBG_ctx_V_ce1(grp_randombytes_1_fu_59_DRBG_ctx_V_ce1);
    grp_randombytes_1_fu_59->DRBG_ctx_V_q1(DRBG_ctx_V_q1);
    grp_randombytes_1_fu_59->DRBG_ctx_Key_address0(grp_randombytes_1_fu_59_DRBG_ctx_Key_address0);
    grp_randombytes_1_fu_59->DRBG_ctx_Key_ce0(grp_randombytes_1_fu_59_DRBG_ctx_Key_ce0);
    grp_randombytes_1_fu_59->DRBG_ctx_Key_we0(grp_randombytes_1_fu_59_DRBG_ctx_Key_we0);
    grp_randombytes_1_fu_59->DRBG_ctx_Key_d0(grp_randombytes_1_fu_59_DRBG_ctx_Key_d0);
    grp_randombytes_1_fu_59->DRBG_ctx_Key_q0(DRBG_ctx_Key_q0);
    grp_randombytes_1_fu_59->DRBG_ctx_Key_address1(grp_randombytes_1_fu_59_DRBG_ctx_Key_address1);
    grp_randombytes_1_fu_59->DRBG_ctx_Key_ce1(grp_randombytes_1_fu_59_DRBG_ctx_Key_ce1);
    grp_randombytes_1_fu_59->DRBG_ctx_Key_q1(DRBG_ctx_Key_q1);
    grp_randombytes_1_fu_59->DRBG_ctx_reseed_counter_i(DRBG_ctx_reseed_counter_i);
    grp_randombytes_1_fu_59->DRBG_ctx_reseed_counter_o(grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o);
    grp_randombytes_1_fu_59->DRBG_ctx_reseed_counter_o_ap_vld(grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o_ap_vld);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_DRBG_ctx_Key_address0);
    sensitive << ( grp_randombytes_fu_43_DRBG_ctx_Key_address0 );
    sensitive << ( grp_randombytes_1_fu_59_DRBG_ctx_Key_address0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_DRBG_ctx_Key_address1);
    sensitive << ( grp_randombytes_fu_43_DRBG_ctx_Key_address1 );
    sensitive << ( grp_randombytes_1_fu_59_DRBG_ctx_Key_address1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_DRBG_ctx_Key_ce0);
    sensitive << ( grp_randombytes_fu_43_DRBG_ctx_Key_ce0 );
    sensitive << ( grp_randombytes_1_fu_59_DRBG_ctx_Key_ce0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_DRBG_ctx_Key_ce1);
    sensitive << ( grp_randombytes_fu_43_DRBG_ctx_Key_ce1 );
    sensitive << ( grp_randombytes_1_fu_59_DRBG_ctx_Key_ce1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_DRBG_ctx_Key_d0);
    sensitive << ( grp_randombytes_fu_43_DRBG_ctx_Key_d0 );
    sensitive << ( grp_randombytes_1_fu_59_DRBG_ctx_Key_d0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_DRBG_ctx_Key_we0);
    sensitive << ( grp_randombytes_fu_43_DRBG_ctx_Key_we0 );
    sensitive << ( grp_randombytes_1_fu_59_DRBG_ctx_Key_we0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_DRBG_ctx_V_address0);
    sensitive << ( grp_randombytes_fu_43_DRBG_ctx_V_address0 );
    sensitive << ( grp_randombytes_1_fu_59_DRBG_ctx_V_address0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_DRBG_ctx_V_address1);
    sensitive << ( grp_randombytes_fu_43_DRBG_ctx_V_address1 );
    sensitive << ( grp_randombytes_1_fu_59_DRBG_ctx_V_address1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_DRBG_ctx_V_ce0);
    sensitive << ( grp_randombytes_fu_43_DRBG_ctx_V_ce0 );
    sensitive << ( grp_randombytes_1_fu_59_DRBG_ctx_V_ce0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_DRBG_ctx_V_ce1);
    sensitive << ( grp_randombytes_fu_43_DRBG_ctx_V_ce1 );
    sensitive << ( grp_randombytes_1_fu_59_DRBG_ctx_V_ce1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_DRBG_ctx_V_d0);
    sensitive << ( grp_randombytes_fu_43_DRBG_ctx_V_d0 );
    sensitive << ( grp_randombytes_1_fu_59_DRBG_ctx_V_d0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_DRBG_ctx_V_we0);
    sensitive << ( grp_randombytes_fu_43_DRBG_ctx_V_we0 );
    sensitive << ( grp_randombytes_1_fu_59_DRBG_ctx_V_we0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_DRBG_ctx_reseed_counter_o);
    sensitive << ( DRBG_ctx_reseed_counter_i );
    sensitive << ( grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o );
    sensitive << ( grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o_ap_vld );
    sensitive << ( grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o );
    sensitive << ( grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o_ap_vld );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_DRBG_ctx_reseed_counter_o_ap_vld);
    sensitive << ( grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o_ap_vld );
    sensitive << ( grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o_ap_vld );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_randombytes_1_fu_59_ap_done );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_randombytes_1_fu_59_ap_done );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_return);
    sensitive << ( grp_randombytes_1_fu_59_ap_done );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_grp_owcpa_keypair_fu_34_ap_start);
    sensitive << ( grp_owcpa_keypair_fu_34_ap_start_reg );

    SC_METHOD(thread_grp_randombytes_1_fu_59_ap_start);
    sensitive << ( grp_randombytes_1_fu_59_ap_start_reg );

    SC_METHOD(thread_grp_randombytes_fu_43_ap_start);
    sensitive << ( grp_randombytes_fu_43_ap_start_reg );

    SC_METHOD(thread_pk_address0);
    sensitive << ( grp_owcpa_keypair_fu_34_pk_address0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_pk_address1);
    sensitive << ( grp_owcpa_keypair_fu_34_pk_address1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_pk_ce0);
    sensitive << ( grp_owcpa_keypair_fu_34_pk_ce0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_pk_ce1);
    sensitive << ( grp_owcpa_keypair_fu_34_pk_ce1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_pk_d0);
    sensitive << ( grp_owcpa_keypair_fu_34_pk_d0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_pk_d1);
    sensitive << ( grp_owcpa_keypair_fu_34_pk_d1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_pk_we0);
    sensitive << ( grp_owcpa_keypair_fu_34_pk_we0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_pk_we1);
    sensitive << ( grp_owcpa_keypair_fu_34_pk_we1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_seed_address0);
    sensitive << ( grp_owcpa_keypair_fu_34_seed_address0 );
    sensitive << ( grp_randombytes_fu_43_x_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_seed_ce0);
    sensitive << ( grp_owcpa_keypair_fu_34_seed_ce0 );
    sensitive << ( grp_randombytes_fu_43_x_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_seed_we0);
    sensitive << ( grp_randombytes_fu_43_x_we0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sk_address0);
    sensitive << ( grp_owcpa_keypair_fu_34_sk_address0 );
    sensitive << ( grp_randombytes_1_fu_59_x_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_sk_address1);
    sensitive << ( grp_owcpa_keypair_fu_34_sk_address1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_sk_ce0);
    sensitive << ( grp_owcpa_keypair_fu_34_sk_ce0 );
    sensitive << ( grp_randombytes_1_fu_59_x_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_sk_ce1);
    sensitive << ( grp_owcpa_keypair_fu_34_sk_ce1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_sk_d0);
    sensitive << ( grp_owcpa_keypair_fu_34_sk_d0 );
    sensitive << ( grp_randombytes_1_fu_59_x_d0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_sk_d1);
    sensitive << ( grp_owcpa_keypair_fu_34_sk_d1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_sk_we0);
    sensitive << ( grp_owcpa_keypair_fu_34_sk_we0 );
    sensitive << ( grp_randombytes_1_fu_59_x_we0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_sk_we1);
    sensitive << ( grp_owcpa_keypair_fu_34_sk_we1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_owcpa_keypair_fu_34_ap_done );
    sensitive << ( grp_randombytes_fu_43_ap_done );
    sensitive << ( grp_randombytes_1_fu_59_ap_done );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    grp_owcpa_keypair_fu_34_ap_start_reg = SC_LOGIC_0;
    grp_randombytes_fu_43_ap_start_reg = SC_LOGIC_0;
    grp_randombytes_1_fu_59_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "crypto_kem_keypair_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, pk_address0, "(port)pk_address0");
    sc_trace(mVcdFile, pk_ce0, "(port)pk_ce0");
    sc_trace(mVcdFile, pk_we0, "(port)pk_we0");
    sc_trace(mVcdFile, pk_d0, "(port)pk_d0");
    sc_trace(mVcdFile, pk_address1, "(port)pk_address1");
    sc_trace(mVcdFile, pk_ce1, "(port)pk_ce1");
    sc_trace(mVcdFile, pk_we1, "(port)pk_we1");
    sc_trace(mVcdFile, pk_d1, "(port)pk_d1");
    sc_trace(mVcdFile, sk_address0, "(port)sk_address0");
    sc_trace(mVcdFile, sk_ce0, "(port)sk_ce0");
    sc_trace(mVcdFile, sk_we0, "(port)sk_we0");
    sc_trace(mVcdFile, sk_d0, "(port)sk_d0");
    sc_trace(mVcdFile, sk_address1, "(port)sk_address1");
    sc_trace(mVcdFile, sk_ce1, "(port)sk_ce1");
    sc_trace(mVcdFile, sk_we1, "(port)sk_we1");
    sc_trace(mVcdFile, sk_d1, "(port)sk_d1");
    sc_trace(mVcdFile, DRBG_ctx_V_address0, "(port)DRBG_ctx_V_address0");
    sc_trace(mVcdFile, DRBG_ctx_V_ce0, "(port)DRBG_ctx_V_ce0");
    sc_trace(mVcdFile, DRBG_ctx_V_we0, "(port)DRBG_ctx_V_we0");
    sc_trace(mVcdFile, DRBG_ctx_V_d0, "(port)DRBG_ctx_V_d0");
    sc_trace(mVcdFile, DRBG_ctx_V_q0, "(port)DRBG_ctx_V_q0");
    sc_trace(mVcdFile, DRBG_ctx_V_address1, "(port)DRBG_ctx_V_address1");
    sc_trace(mVcdFile, DRBG_ctx_V_ce1, "(port)DRBG_ctx_V_ce1");
    sc_trace(mVcdFile, DRBG_ctx_V_q1, "(port)DRBG_ctx_V_q1");
    sc_trace(mVcdFile, DRBG_ctx_Key_address0, "(port)DRBG_ctx_Key_address0");
    sc_trace(mVcdFile, DRBG_ctx_Key_ce0, "(port)DRBG_ctx_Key_ce0");
    sc_trace(mVcdFile, DRBG_ctx_Key_we0, "(port)DRBG_ctx_Key_we0");
    sc_trace(mVcdFile, DRBG_ctx_Key_d0, "(port)DRBG_ctx_Key_d0");
    sc_trace(mVcdFile, DRBG_ctx_Key_q0, "(port)DRBG_ctx_Key_q0");
    sc_trace(mVcdFile, DRBG_ctx_Key_address1, "(port)DRBG_ctx_Key_address1");
    sc_trace(mVcdFile, DRBG_ctx_Key_ce1, "(port)DRBG_ctx_Key_ce1");
    sc_trace(mVcdFile, DRBG_ctx_Key_q1, "(port)DRBG_ctx_Key_q1");
    sc_trace(mVcdFile, DRBG_ctx_reseed_counter_i, "(port)DRBG_ctx_reseed_counter_i");
    sc_trace(mVcdFile, DRBG_ctx_reseed_counter_o, "(port)DRBG_ctx_reseed_counter_o");
    sc_trace(mVcdFile, DRBG_ctx_reseed_counter_o_ap_vld, "(port)DRBG_ctx_reseed_counter_o_ap_vld");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, seed_address0, "seed_address0");
    sc_trace(mVcdFile, seed_ce0, "seed_ce0");
    sc_trace(mVcdFile, seed_we0, "seed_we0");
    sc_trace(mVcdFile, seed_q0, "seed_q0");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_ap_start, "grp_owcpa_keypair_fu_34_ap_start");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_ap_done, "grp_owcpa_keypair_fu_34_ap_done");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_ap_idle, "grp_owcpa_keypair_fu_34_ap_idle");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_ap_ready, "grp_owcpa_keypair_fu_34_ap_ready");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_pk_address0, "grp_owcpa_keypair_fu_34_pk_address0");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_pk_ce0, "grp_owcpa_keypair_fu_34_pk_ce0");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_pk_we0, "grp_owcpa_keypair_fu_34_pk_we0");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_pk_d0, "grp_owcpa_keypair_fu_34_pk_d0");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_pk_address1, "grp_owcpa_keypair_fu_34_pk_address1");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_pk_ce1, "grp_owcpa_keypair_fu_34_pk_ce1");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_pk_we1, "grp_owcpa_keypair_fu_34_pk_we1");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_pk_d1, "grp_owcpa_keypair_fu_34_pk_d1");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_sk_address0, "grp_owcpa_keypair_fu_34_sk_address0");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_sk_ce0, "grp_owcpa_keypair_fu_34_sk_ce0");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_sk_we0, "grp_owcpa_keypair_fu_34_sk_we0");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_sk_d0, "grp_owcpa_keypair_fu_34_sk_d0");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_sk_address1, "grp_owcpa_keypair_fu_34_sk_address1");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_sk_ce1, "grp_owcpa_keypair_fu_34_sk_ce1");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_sk_we1, "grp_owcpa_keypair_fu_34_sk_we1");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_sk_d1, "grp_owcpa_keypair_fu_34_sk_d1");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_seed_address0, "grp_owcpa_keypair_fu_34_seed_address0");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_seed_ce0, "grp_owcpa_keypair_fu_34_seed_ce0");
    sc_trace(mVcdFile, grp_randombytes_fu_43_ap_start, "grp_randombytes_fu_43_ap_start");
    sc_trace(mVcdFile, grp_randombytes_fu_43_ap_done, "grp_randombytes_fu_43_ap_done");
    sc_trace(mVcdFile, grp_randombytes_fu_43_ap_idle, "grp_randombytes_fu_43_ap_idle");
    sc_trace(mVcdFile, grp_randombytes_fu_43_ap_ready, "grp_randombytes_fu_43_ap_ready");
    sc_trace(mVcdFile, grp_randombytes_fu_43_x_address0, "grp_randombytes_fu_43_x_address0");
    sc_trace(mVcdFile, grp_randombytes_fu_43_x_ce0, "grp_randombytes_fu_43_x_ce0");
    sc_trace(mVcdFile, grp_randombytes_fu_43_x_we0, "grp_randombytes_fu_43_x_we0");
    sc_trace(mVcdFile, grp_randombytes_fu_43_x_d0, "grp_randombytes_fu_43_x_d0");
    sc_trace(mVcdFile, grp_randombytes_fu_43_DRBG_ctx_V_address0, "grp_randombytes_fu_43_DRBG_ctx_V_address0");
    sc_trace(mVcdFile, grp_randombytes_fu_43_DRBG_ctx_V_ce0, "grp_randombytes_fu_43_DRBG_ctx_V_ce0");
    sc_trace(mVcdFile, grp_randombytes_fu_43_DRBG_ctx_V_we0, "grp_randombytes_fu_43_DRBG_ctx_V_we0");
    sc_trace(mVcdFile, grp_randombytes_fu_43_DRBG_ctx_V_d0, "grp_randombytes_fu_43_DRBG_ctx_V_d0");
    sc_trace(mVcdFile, grp_randombytes_fu_43_DRBG_ctx_V_address1, "grp_randombytes_fu_43_DRBG_ctx_V_address1");
    sc_trace(mVcdFile, grp_randombytes_fu_43_DRBG_ctx_V_ce1, "grp_randombytes_fu_43_DRBG_ctx_V_ce1");
    sc_trace(mVcdFile, grp_randombytes_fu_43_DRBG_ctx_Key_address0, "grp_randombytes_fu_43_DRBG_ctx_Key_address0");
    sc_trace(mVcdFile, grp_randombytes_fu_43_DRBG_ctx_Key_ce0, "grp_randombytes_fu_43_DRBG_ctx_Key_ce0");
    sc_trace(mVcdFile, grp_randombytes_fu_43_DRBG_ctx_Key_we0, "grp_randombytes_fu_43_DRBG_ctx_Key_we0");
    sc_trace(mVcdFile, grp_randombytes_fu_43_DRBG_ctx_Key_d0, "grp_randombytes_fu_43_DRBG_ctx_Key_d0");
    sc_trace(mVcdFile, grp_randombytes_fu_43_DRBG_ctx_Key_address1, "grp_randombytes_fu_43_DRBG_ctx_Key_address1");
    sc_trace(mVcdFile, grp_randombytes_fu_43_DRBG_ctx_Key_ce1, "grp_randombytes_fu_43_DRBG_ctx_Key_ce1");
    sc_trace(mVcdFile, grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o, "grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o");
    sc_trace(mVcdFile, grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o_ap_vld, "grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o_ap_vld");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_ap_start, "grp_randombytes_1_fu_59_ap_start");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_ap_done, "grp_randombytes_1_fu_59_ap_done");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_ap_idle, "grp_randombytes_1_fu_59_ap_idle");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_ap_ready, "grp_randombytes_1_fu_59_ap_ready");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_x_address0, "grp_randombytes_1_fu_59_x_address0");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_x_ce0, "grp_randombytes_1_fu_59_x_ce0");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_x_we0, "grp_randombytes_1_fu_59_x_we0");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_x_d0, "grp_randombytes_1_fu_59_x_d0");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_DRBG_ctx_V_address0, "grp_randombytes_1_fu_59_DRBG_ctx_V_address0");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_DRBG_ctx_V_ce0, "grp_randombytes_1_fu_59_DRBG_ctx_V_ce0");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_DRBG_ctx_V_we0, "grp_randombytes_1_fu_59_DRBG_ctx_V_we0");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_DRBG_ctx_V_d0, "grp_randombytes_1_fu_59_DRBG_ctx_V_d0");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_DRBG_ctx_V_address1, "grp_randombytes_1_fu_59_DRBG_ctx_V_address1");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_DRBG_ctx_V_ce1, "grp_randombytes_1_fu_59_DRBG_ctx_V_ce1");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_DRBG_ctx_Key_address0, "grp_randombytes_1_fu_59_DRBG_ctx_Key_address0");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_DRBG_ctx_Key_ce0, "grp_randombytes_1_fu_59_DRBG_ctx_Key_ce0");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_DRBG_ctx_Key_we0, "grp_randombytes_1_fu_59_DRBG_ctx_Key_we0");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_DRBG_ctx_Key_d0, "grp_randombytes_1_fu_59_DRBG_ctx_Key_d0");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_DRBG_ctx_Key_address1, "grp_randombytes_1_fu_59_DRBG_ctx_Key_address1");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_DRBG_ctx_Key_ce1, "grp_randombytes_1_fu_59_DRBG_ctx_Key_ce1");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o, "grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o_ap_vld, "grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o_ap_vld");
    sc_trace(mVcdFile, grp_owcpa_keypair_fu_34_ap_start_reg, "grp_owcpa_keypair_fu_34_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_randombytes_fu_43_ap_start_reg, "grp_randombytes_fu_43_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_randombytes_1_fu_59_ap_start_reg, "grp_randombytes_1_fu_59_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("crypto_kem_keypair.hdltvin.dat");
    mHdltvoutHandle.open("crypto_kem_keypair.hdltvout.dat");
}

crypto_kem_keypair::~crypto_kem_keypair() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete seed_U;
    delete grp_owcpa_keypair_fu_34;
    delete grp_randombytes_fu_43;
    delete grp_randombytes_1_fu_59;
}

void crypto_kem_keypair::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_owcpa_keypair_fu_34_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            grp_owcpa_keypair_fu_34_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_owcpa_keypair_fu_34_ap_ready.read())) {
            grp_owcpa_keypair_fu_34_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_randombytes_1_fu_59_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            grp_randombytes_1_fu_59_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_randombytes_1_fu_59_ap_ready.read())) {
            grp_randombytes_1_fu_59_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_randombytes_fu_43_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            grp_randombytes_fu_43_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_randombytes_fu_43_ap_ready.read())) {
            grp_randombytes_fu_43_ap_start_reg = ap_const_logic_0;
        }
    }
}

void crypto_kem_keypair::thread_DRBG_ctx_Key_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_Key_address0 = grp_randombytes_1_fu_59_DRBG_ctx_Key_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        DRBG_ctx_Key_address0 = grp_randombytes_fu_43_DRBG_ctx_Key_address0.read();
    } else {
        DRBG_ctx_Key_address0 = "XXXXX";
    }
}

void crypto_kem_keypair::thread_DRBG_ctx_Key_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_Key_address1 = grp_randombytes_1_fu_59_DRBG_ctx_Key_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        DRBG_ctx_Key_address1 = grp_randombytes_fu_43_DRBG_ctx_Key_address1.read();
    } else {
        DRBG_ctx_Key_address1 = "XXXXX";
    }
}

void crypto_kem_keypair::thread_DRBG_ctx_Key_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_Key_ce0 = grp_randombytes_1_fu_59_DRBG_ctx_Key_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        DRBG_ctx_Key_ce0 = grp_randombytes_fu_43_DRBG_ctx_Key_ce0.read();
    } else {
        DRBG_ctx_Key_ce0 = ap_const_logic_0;
    }
}

void crypto_kem_keypair::thread_DRBG_ctx_Key_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_Key_ce1 = grp_randombytes_1_fu_59_DRBG_ctx_Key_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        DRBG_ctx_Key_ce1 = grp_randombytes_fu_43_DRBG_ctx_Key_ce1.read();
    } else {
        DRBG_ctx_Key_ce1 = ap_const_logic_0;
    }
}

void crypto_kem_keypair::thread_DRBG_ctx_Key_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_Key_d0 = grp_randombytes_1_fu_59_DRBG_ctx_Key_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        DRBG_ctx_Key_d0 = grp_randombytes_fu_43_DRBG_ctx_Key_d0.read();
    } else {
        DRBG_ctx_Key_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void crypto_kem_keypair::thread_DRBG_ctx_Key_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_Key_we0 = grp_randombytes_1_fu_59_DRBG_ctx_Key_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        DRBG_ctx_Key_we0 = grp_randombytes_fu_43_DRBG_ctx_Key_we0.read();
    } else {
        DRBG_ctx_Key_we0 = ap_const_logic_0;
    }
}

void crypto_kem_keypair::thread_DRBG_ctx_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_V_address0 = grp_randombytes_1_fu_59_DRBG_ctx_V_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        DRBG_ctx_V_address0 = grp_randombytes_fu_43_DRBG_ctx_V_address0.read();
    } else {
        DRBG_ctx_V_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void crypto_kem_keypair::thread_DRBG_ctx_V_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_V_address1 = grp_randombytes_1_fu_59_DRBG_ctx_V_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        DRBG_ctx_V_address1 = grp_randombytes_fu_43_DRBG_ctx_V_address1.read();
    } else {
        DRBG_ctx_V_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void crypto_kem_keypair::thread_DRBG_ctx_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_V_ce0 = grp_randombytes_1_fu_59_DRBG_ctx_V_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        DRBG_ctx_V_ce0 = grp_randombytes_fu_43_DRBG_ctx_V_ce0.read();
    } else {
        DRBG_ctx_V_ce0 = ap_const_logic_0;
    }
}

void crypto_kem_keypair::thread_DRBG_ctx_V_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_V_ce1 = grp_randombytes_1_fu_59_DRBG_ctx_V_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        DRBG_ctx_V_ce1 = grp_randombytes_fu_43_DRBG_ctx_V_ce1.read();
    } else {
        DRBG_ctx_V_ce1 = ap_const_logic_0;
    }
}

void crypto_kem_keypair::thread_DRBG_ctx_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_V_d0 = grp_randombytes_1_fu_59_DRBG_ctx_V_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        DRBG_ctx_V_d0 = grp_randombytes_fu_43_DRBG_ctx_V_d0.read();
    } else {
        DRBG_ctx_V_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void crypto_kem_keypair::thread_DRBG_ctx_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_V_we0 = grp_randombytes_1_fu_59_DRBG_ctx_V_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        DRBG_ctx_V_we0 = grp_randombytes_fu_43_DRBG_ctx_V_we0.read();
    } else {
        DRBG_ctx_V_we0 = ap_const_logic_0;
    }
}

void crypto_kem_keypair::thread_DRBG_ctx_reseed_counter_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o_ap_vld.read()))) {
        DRBG_ctx_reseed_counter_o = grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o_ap_vld.read()))) {
        DRBG_ctx_reseed_counter_o = grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o.read();
    } else {
        DRBG_ctx_reseed_counter_o = DRBG_ctx_reseed_counter_i.read();
    }
}

void crypto_kem_keypair::thread_DRBG_ctx_reseed_counter_o_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        DRBG_ctx_reseed_counter_o_ap_vld = grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o_ap_vld.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        DRBG_ctx_reseed_counter_o_ap_vld = grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o_ap_vld.read();
    } else {
        DRBG_ctx_reseed_counter_o_ap_vld = ap_const_logic_0;
    }
}

void crypto_kem_keypair::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void crypto_kem_keypair::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void crypto_kem_keypair::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void crypto_kem_keypair::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void crypto_kem_keypair::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void crypto_kem_keypair::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void crypto_kem_keypair::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(grp_randombytes_1_fu_59_ap_done.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void crypto_kem_keypair::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void crypto_kem_keypair::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(grp_randombytes_1_fu_59_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void crypto_kem_keypair::thread_ap_return() {
    ap_return = ap_const_lv32_0;
}

void crypto_kem_keypair::thread_grp_owcpa_keypair_fu_34_ap_start() {
    grp_owcpa_keypair_fu_34_ap_start = grp_owcpa_keypair_fu_34_ap_start_reg.read();
}

void crypto_kem_keypair::thread_grp_randombytes_1_fu_59_ap_start() {
    grp_randombytes_1_fu_59_ap_start = grp_randombytes_1_fu_59_ap_start_reg.read();
}

void crypto_kem_keypair::thread_grp_randombytes_fu_43_ap_start() {
    grp_randombytes_fu_43_ap_start = grp_randombytes_fu_43_ap_start_reg.read();
}

void crypto_kem_keypair::thread_pk_address0() {
    pk_address0 = grp_owcpa_keypair_fu_34_pk_address0.read();
}

void crypto_kem_keypair::thread_pk_address1() {
    pk_address1 = grp_owcpa_keypair_fu_34_pk_address1.read();
}

void crypto_kem_keypair::thread_pk_ce0() {
    pk_ce0 = grp_owcpa_keypair_fu_34_pk_ce0.read();
}

void crypto_kem_keypair::thread_pk_ce1() {
    pk_ce1 = grp_owcpa_keypair_fu_34_pk_ce1.read();
}

void crypto_kem_keypair::thread_pk_d0() {
    pk_d0 = grp_owcpa_keypair_fu_34_pk_d0.read();
}

void crypto_kem_keypair::thread_pk_d1() {
    pk_d1 = grp_owcpa_keypair_fu_34_pk_d1.read();
}

void crypto_kem_keypair::thread_pk_we0() {
    pk_we0 = grp_owcpa_keypair_fu_34_pk_we0.read();
}

void crypto_kem_keypair::thread_pk_we1() {
    pk_we1 = grp_owcpa_keypair_fu_34_pk_we1.read();
}

void crypto_kem_keypair::thread_seed_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        seed_address0 = grp_randombytes_fu_43_x_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        seed_address0 = grp_owcpa_keypair_fu_34_seed_address0.read();
    } else {
        seed_address0 =  (sc_lv<11>) ("XXXXXXXXXXX");
    }
}

void crypto_kem_keypair::thread_seed_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        seed_ce0 = grp_randombytes_fu_43_x_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        seed_ce0 = grp_owcpa_keypair_fu_34_seed_ce0.read();
    } else {
        seed_ce0 = ap_const_logic_0;
    }
}

void crypto_kem_keypair::thread_seed_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        seed_we0 = grp_randombytes_fu_43_x_we0.read();
    } else {
        seed_we0 = ap_const_logic_0;
    }
}

void crypto_kem_keypair::thread_sk_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sk_address0 = grp_randombytes_1_fu_59_x_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sk_address0 = grp_owcpa_keypair_fu_34_sk_address0.read();
    } else {
        sk_address0 =  (sc_lv<11>) ("XXXXXXXXXXX");
    }
}

void crypto_kem_keypair::thread_sk_address1() {
    sk_address1 = grp_owcpa_keypair_fu_34_sk_address1.read();
}

void crypto_kem_keypair::thread_sk_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sk_ce0 = grp_randombytes_1_fu_59_x_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sk_ce0 = grp_owcpa_keypair_fu_34_sk_ce0.read();
    } else {
        sk_ce0 = ap_const_logic_0;
    }
}

void crypto_kem_keypair::thread_sk_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sk_ce1 = grp_owcpa_keypair_fu_34_sk_ce1.read();
    } else {
        sk_ce1 = ap_const_logic_0;
    }
}

void crypto_kem_keypair::thread_sk_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sk_d0 = grp_randombytes_1_fu_59_x_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sk_d0 = grp_owcpa_keypair_fu_34_sk_d0.read();
    } else {
        sk_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void crypto_kem_keypair::thread_sk_d1() {
    sk_d1 = grp_owcpa_keypair_fu_34_sk_d1.read();
}

void crypto_kem_keypair::thread_sk_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sk_we0 = grp_randombytes_1_fu_59_x_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sk_we0 = grp_owcpa_keypair_fu_34_sk_we0.read();
    } else {
        sk_we0 = ap_const_logic_0;
    }
}

void crypto_kem_keypair::thread_sk_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sk_we1 = grp_owcpa_keypair_fu_34_sk_we1.read();
    } else {
        sk_we1 = ap_const_logic_0;
    }
}

void crypto_kem_keypair::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_randombytes_fu_43_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_owcpa_keypair_fu_34_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(grp_randombytes_1_fu_59_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

void crypto_kem_keypair::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pk_address0\" :  \"" << pk_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pk_ce0\" :  \"" << pk_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pk_we0\" :  \"" << pk_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pk_d0\" :  \"" << pk_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pk_address1\" :  \"" << pk_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pk_ce1\" :  \"" << pk_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pk_we1\" :  \"" << pk_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pk_d1\" :  \"" << pk_d1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_address0\" :  \"" << sk_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_ce0\" :  \"" << sk_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_we0\" :  \"" << sk_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_d0\" :  \"" << sk_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_address1\" :  \"" << sk_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_ce1\" :  \"" << sk_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_we1\" :  \"" << sk_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_d1\" :  \"" << sk_d1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_V_address0\" :  \"" << DRBG_ctx_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_V_ce0\" :  \"" << DRBG_ctx_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_V_we0\" :  \"" << DRBG_ctx_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_V_d0\" :  \"" << DRBG_ctx_V_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"DRBG_ctx_V_q0\" :  \"" << DRBG_ctx_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_V_address1\" :  \"" << DRBG_ctx_V_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_V_ce1\" :  \"" << DRBG_ctx_V_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"DRBG_ctx_V_q1\" :  \"" << DRBG_ctx_V_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_Key_address0\" :  \"" << DRBG_ctx_Key_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_Key_ce0\" :  \"" << DRBG_ctx_Key_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_Key_we0\" :  \"" << DRBG_ctx_Key_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_Key_d0\" :  \"" << DRBG_ctx_Key_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"DRBG_ctx_Key_q0\" :  \"" << DRBG_ctx_Key_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_Key_address1\" :  \"" << DRBG_ctx_Key_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_Key_ce1\" :  \"" << DRBG_ctx_Key_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"DRBG_ctx_Key_q1\" :  \"" << DRBG_ctx_Key_q1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"DRBG_ctx_reseed_counter_i\" :  \"" << DRBG_ctx_reseed_counter_i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_reseed_counter_o\" :  \"" << DRBG_ctx_reseed_counter_o.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"DRBG_ctx_reseed_counter_o_ap_vld\" :  \"" << DRBG_ctx_reseed_counter_o_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

