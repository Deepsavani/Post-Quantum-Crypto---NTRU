-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_kem_keypair is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pk_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pk_ce0 : OUT STD_LOGIC;
    pk_we0 : OUT STD_LOGIC;
    pk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    pk_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pk_ce1 : OUT STD_LOGIC;
    pk_we1 : OUT STD_LOGIC;
    pk_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sk_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    sk_ce0 : OUT STD_LOGIC;
    sk_we0 : OUT STD_LOGIC;
    sk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sk_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    sk_ce1 : OUT STD_LOGIC;
    sk_we1 : OUT STD_LOGIC;
    sk_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    DRBG_ctx_V_ce0 : OUT STD_LOGIC;
    DRBG_ctx_V_we0 : OUT STD_LOGIC;
    DRBG_ctx_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    DRBG_ctx_V_ce1 : OUT STD_LOGIC;
    DRBG_ctx_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    DRBG_ctx_Key_ce0 : OUT STD_LOGIC;
    DRBG_ctx_Key_we0 : OUT STD_LOGIC;
    DRBG_ctx_Key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    DRBG_ctx_Key_ce1 : OUT STD_LOGIC;
    DRBG_ctx_Key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    DRBG_ctx_reseed_counter_i : IN STD_LOGIC_VECTOR (31 downto 0);
    DRBG_ctx_reseed_counter_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    DRBG_ctx_reseed_counter_o_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of crypto_kem_keypair is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "crypto_kem_keypair,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tfbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.122000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=43,HLS_SYN_DSP=9,HLS_SYN_FF=4980,HLS_SYN_LUT=21858,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal seed_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal seed_ce0 : STD_LOGIC;
    signal seed_we0 : STD_LOGIC;
    signal seed_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_owcpa_keypair_fu_34_ap_start : STD_LOGIC;
    signal grp_owcpa_keypair_fu_34_ap_done : STD_LOGIC;
    signal grp_owcpa_keypair_fu_34_ap_idle : STD_LOGIC;
    signal grp_owcpa_keypair_fu_34_ap_ready : STD_LOGIC;
    signal grp_owcpa_keypair_fu_34_pk_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_owcpa_keypair_fu_34_pk_ce0 : STD_LOGIC;
    signal grp_owcpa_keypair_fu_34_pk_we0 : STD_LOGIC;
    signal grp_owcpa_keypair_fu_34_pk_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_owcpa_keypair_fu_34_pk_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_owcpa_keypair_fu_34_pk_ce1 : STD_LOGIC;
    signal grp_owcpa_keypair_fu_34_pk_we1 : STD_LOGIC;
    signal grp_owcpa_keypair_fu_34_pk_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_owcpa_keypair_fu_34_sk_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_owcpa_keypair_fu_34_sk_ce0 : STD_LOGIC;
    signal grp_owcpa_keypair_fu_34_sk_we0 : STD_LOGIC;
    signal grp_owcpa_keypair_fu_34_sk_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_owcpa_keypair_fu_34_sk_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_owcpa_keypair_fu_34_sk_ce1 : STD_LOGIC;
    signal grp_owcpa_keypair_fu_34_sk_we1 : STD_LOGIC;
    signal grp_owcpa_keypair_fu_34_sk_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_owcpa_keypair_fu_34_seed_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_owcpa_keypair_fu_34_seed_ce0 : STD_LOGIC;
    signal grp_randombytes_fu_43_ap_start : STD_LOGIC;
    signal grp_randombytes_fu_43_ap_done : STD_LOGIC;
    signal grp_randombytes_fu_43_ap_idle : STD_LOGIC;
    signal grp_randombytes_fu_43_ap_ready : STD_LOGIC;
    signal grp_randombytes_fu_43_x_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_randombytes_fu_43_x_ce0 : STD_LOGIC;
    signal grp_randombytes_fu_43_x_we0 : STD_LOGIC;
    signal grp_randombytes_fu_43_x_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_randombytes_fu_43_DRBG_ctx_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_randombytes_fu_43_DRBG_ctx_V_ce0 : STD_LOGIC;
    signal grp_randombytes_fu_43_DRBG_ctx_V_we0 : STD_LOGIC;
    signal grp_randombytes_fu_43_DRBG_ctx_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_randombytes_fu_43_DRBG_ctx_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_randombytes_fu_43_DRBG_ctx_V_ce1 : STD_LOGIC;
    signal grp_randombytes_fu_43_DRBG_ctx_Key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_randombytes_fu_43_DRBG_ctx_Key_ce0 : STD_LOGIC;
    signal grp_randombytes_fu_43_DRBG_ctx_Key_we0 : STD_LOGIC;
    signal grp_randombytes_fu_43_DRBG_ctx_Key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_randombytes_fu_43_DRBG_ctx_Key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_randombytes_fu_43_DRBG_ctx_Key_ce1 : STD_LOGIC;
    signal grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o_ap_vld : STD_LOGIC;
    signal grp_randombytes_1_fu_59_ap_start : STD_LOGIC;
    signal grp_randombytes_1_fu_59_ap_done : STD_LOGIC;
    signal grp_randombytes_1_fu_59_ap_idle : STD_LOGIC;
    signal grp_randombytes_1_fu_59_ap_ready : STD_LOGIC;
    signal grp_randombytes_1_fu_59_x_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_randombytes_1_fu_59_x_ce0 : STD_LOGIC;
    signal grp_randombytes_1_fu_59_x_we0 : STD_LOGIC;
    signal grp_randombytes_1_fu_59_x_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_randombytes_1_fu_59_DRBG_ctx_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_randombytes_1_fu_59_DRBG_ctx_V_ce0 : STD_LOGIC;
    signal grp_randombytes_1_fu_59_DRBG_ctx_V_we0 : STD_LOGIC;
    signal grp_randombytes_1_fu_59_DRBG_ctx_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_randombytes_1_fu_59_DRBG_ctx_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_randombytes_1_fu_59_DRBG_ctx_V_ce1 : STD_LOGIC;
    signal grp_randombytes_1_fu_59_DRBG_ctx_Key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_randombytes_1_fu_59_DRBG_ctx_Key_ce0 : STD_LOGIC;
    signal grp_randombytes_1_fu_59_DRBG_ctx_Key_we0 : STD_LOGIC;
    signal grp_randombytes_1_fu_59_DRBG_ctx_Key_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_randombytes_1_fu_59_DRBG_ctx_Key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_randombytes_1_fu_59_DRBG_ctx_Key_ce1 : STD_LOGIC;
    signal grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o_ap_vld : STD_LOGIC;
    signal grp_owcpa_keypair_fu_34_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_randombytes_fu_43_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_randombytes_1_fu_59_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component owcpa_keypair IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pk_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        pk_ce0 : OUT STD_LOGIC;
        pk_we0 : OUT STD_LOGIC;
        pk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        pk_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        pk_ce1 : OUT STD_LOGIC;
        pk_we1 : OUT STD_LOGIC;
        pk_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sk_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        sk_ce0 : OUT STD_LOGIC;
        sk_we0 : OUT STD_LOGIC;
        sk_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sk_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        sk_ce1 : OUT STD_LOGIC;
        sk_we1 : OUT STD_LOGIC;
        sk_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        seed_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        seed_ce0 : OUT STD_LOGIC;
        seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component randombytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_we0 : OUT STD_LOGIC;
        x_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        DRBG_ctx_V_ce0 : OUT STD_LOGIC;
        DRBG_ctx_V_we0 : OUT STD_LOGIC;
        DRBG_ctx_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        DRBG_ctx_V_ce1 : OUT STD_LOGIC;
        DRBG_ctx_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        DRBG_ctx_Key_ce0 : OUT STD_LOGIC;
        DRBG_ctx_Key_we0 : OUT STD_LOGIC;
        DRBG_ctx_Key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        DRBG_ctx_Key_ce1 : OUT STD_LOGIC;
        DRBG_ctx_Key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_reseed_counter_i : IN STD_LOGIC_VECTOR (31 downto 0);
        DRBG_ctx_reseed_counter_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        DRBG_ctx_reseed_counter_o_ap_vld : OUT STD_LOGIC );
    end component;


    component randombytes_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_we0 : OUT STD_LOGIC;
        x_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        DRBG_ctx_V_ce0 : OUT STD_LOGIC;
        DRBG_ctx_V_we0 : OUT STD_LOGIC;
        DRBG_ctx_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        DRBG_ctx_V_ce1 : OUT STD_LOGIC;
        DRBG_ctx_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        DRBG_ctx_Key_ce0 : OUT STD_LOGIC;
        DRBG_ctx_Key_we0 : OUT STD_LOGIC;
        DRBG_ctx_Key_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        DRBG_ctx_Key_ce1 : OUT STD_LOGIC;
        DRBG_ctx_Key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        DRBG_ctx_reseed_counter_i : IN STD_LOGIC_VECTOR (31 downto 0);
        DRBG_ctx_reseed_counter_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        DRBG_ctx_reseed_counter_o_ap_vld : OUT STD_LOGIC );
    end component;


    component crypto_kem_keypair_seed IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    seed_U : component crypto_kem_keypair_seed
    generic map (
        DataWidth => 8,
        AddressRange => 1400,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => seed_address0,
        ce0 => seed_ce0,
        we0 => seed_we0,
        d0 => grp_randombytes_fu_43_x_d0,
        q0 => seed_q0);

    grp_owcpa_keypair_fu_34 : component owcpa_keypair
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_owcpa_keypair_fu_34_ap_start,
        ap_done => grp_owcpa_keypair_fu_34_ap_done,
        ap_idle => grp_owcpa_keypair_fu_34_ap_idle,
        ap_ready => grp_owcpa_keypair_fu_34_ap_ready,
        pk_address0 => grp_owcpa_keypair_fu_34_pk_address0,
        pk_ce0 => grp_owcpa_keypair_fu_34_pk_ce0,
        pk_we0 => grp_owcpa_keypair_fu_34_pk_we0,
        pk_d0 => grp_owcpa_keypair_fu_34_pk_d0,
        pk_address1 => grp_owcpa_keypair_fu_34_pk_address1,
        pk_ce1 => grp_owcpa_keypair_fu_34_pk_ce1,
        pk_we1 => grp_owcpa_keypair_fu_34_pk_we1,
        pk_d1 => grp_owcpa_keypair_fu_34_pk_d1,
        sk_address0 => grp_owcpa_keypair_fu_34_sk_address0,
        sk_ce0 => grp_owcpa_keypair_fu_34_sk_ce0,
        sk_we0 => grp_owcpa_keypair_fu_34_sk_we0,
        sk_d0 => grp_owcpa_keypair_fu_34_sk_d0,
        sk_address1 => grp_owcpa_keypair_fu_34_sk_address1,
        sk_ce1 => grp_owcpa_keypair_fu_34_sk_ce1,
        sk_we1 => grp_owcpa_keypair_fu_34_sk_we1,
        sk_d1 => grp_owcpa_keypair_fu_34_sk_d1,
        seed_address0 => grp_owcpa_keypair_fu_34_seed_address0,
        seed_ce0 => grp_owcpa_keypair_fu_34_seed_ce0,
        seed_q0 => seed_q0);

    grp_randombytes_fu_43 : component randombytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_randombytes_fu_43_ap_start,
        ap_done => grp_randombytes_fu_43_ap_done,
        ap_idle => grp_randombytes_fu_43_ap_idle,
        ap_ready => grp_randombytes_fu_43_ap_ready,
        x_address0 => grp_randombytes_fu_43_x_address0,
        x_ce0 => grp_randombytes_fu_43_x_ce0,
        x_we0 => grp_randombytes_fu_43_x_we0,
        x_d0 => grp_randombytes_fu_43_x_d0,
        DRBG_ctx_V_address0 => grp_randombytes_fu_43_DRBG_ctx_V_address0,
        DRBG_ctx_V_ce0 => grp_randombytes_fu_43_DRBG_ctx_V_ce0,
        DRBG_ctx_V_we0 => grp_randombytes_fu_43_DRBG_ctx_V_we0,
        DRBG_ctx_V_d0 => grp_randombytes_fu_43_DRBG_ctx_V_d0,
        DRBG_ctx_V_q0 => DRBG_ctx_V_q0,
        DRBG_ctx_V_address1 => grp_randombytes_fu_43_DRBG_ctx_V_address1,
        DRBG_ctx_V_ce1 => grp_randombytes_fu_43_DRBG_ctx_V_ce1,
        DRBG_ctx_V_q1 => DRBG_ctx_V_q1,
        DRBG_ctx_Key_address0 => grp_randombytes_fu_43_DRBG_ctx_Key_address0,
        DRBG_ctx_Key_ce0 => grp_randombytes_fu_43_DRBG_ctx_Key_ce0,
        DRBG_ctx_Key_we0 => grp_randombytes_fu_43_DRBG_ctx_Key_we0,
        DRBG_ctx_Key_d0 => grp_randombytes_fu_43_DRBG_ctx_Key_d0,
        DRBG_ctx_Key_q0 => DRBG_ctx_Key_q0,
        DRBG_ctx_Key_address1 => grp_randombytes_fu_43_DRBG_ctx_Key_address1,
        DRBG_ctx_Key_ce1 => grp_randombytes_fu_43_DRBG_ctx_Key_ce1,
        DRBG_ctx_Key_q1 => DRBG_ctx_Key_q1,
        DRBG_ctx_reseed_counter_i => DRBG_ctx_reseed_counter_i,
        DRBG_ctx_reseed_counter_o => grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o,
        DRBG_ctx_reseed_counter_o_ap_vld => grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o_ap_vld);

    grp_randombytes_1_fu_59 : component randombytes_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_randombytes_1_fu_59_ap_start,
        ap_done => grp_randombytes_1_fu_59_ap_done,
        ap_idle => grp_randombytes_1_fu_59_ap_idle,
        ap_ready => grp_randombytes_1_fu_59_ap_ready,
        x_address0 => grp_randombytes_1_fu_59_x_address0,
        x_ce0 => grp_randombytes_1_fu_59_x_ce0,
        x_we0 => grp_randombytes_1_fu_59_x_we0,
        x_d0 => grp_randombytes_1_fu_59_x_d0,
        DRBG_ctx_V_address0 => grp_randombytes_1_fu_59_DRBG_ctx_V_address0,
        DRBG_ctx_V_ce0 => grp_randombytes_1_fu_59_DRBG_ctx_V_ce0,
        DRBG_ctx_V_we0 => grp_randombytes_1_fu_59_DRBG_ctx_V_we0,
        DRBG_ctx_V_d0 => grp_randombytes_1_fu_59_DRBG_ctx_V_d0,
        DRBG_ctx_V_q0 => DRBG_ctx_V_q0,
        DRBG_ctx_V_address1 => grp_randombytes_1_fu_59_DRBG_ctx_V_address1,
        DRBG_ctx_V_ce1 => grp_randombytes_1_fu_59_DRBG_ctx_V_ce1,
        DRBG_ctx_V_q1 => DRBG_ctx_V_q1,
        DRBG_ctx_Key_address0 => grp_randombytes_1_fu_59_DRBG_ctx_Key_address0,
        DRBG_ctx_Key_ce0 => grp_randombytes_1_fu_59_DRBG_ctx_Key_ce0,
        DRBG_ctx_Key_we0 => grp_randombytes_1_fu_59_DRBG_ctx_Key_we0,
        DRBG_ctx_Key_d0 => grp_randombytes_1_fu_59_DRBG_ctx_Key_d0,
        DRBG_ctx_Key_q0 => DRBG_ctx_Key_q0,
        DRBG_ctx_Key_address1 => grp_randombytes_1_fu_59_DRBG_ctx_Key_address1,
        DRBG_ctx_Key_ce1 => grp_randombytes_1_fu_59_DRBG_ctx_Key_ce1,
        DRBG_ctx_Key_q1 => DRBG_ctx_Key_q1,
        DRBG_ctx_reseed_counter_i => DRBG_ctx_reseed_counter_i,
        DRBG_ctx_reseed_counter_o => grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o,
        DRBG_ctx_reseed_counter_o_ap_vld => grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_owcpa_keypair_fu_34_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_owcpa_keypair_fu_34_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_owcpa_keypair_fu_34_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_owcpa_keypair_fu_34_ap_ready = ap_const_logic_1)) then 
                    grp_owcpa_keypair_fu_34_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_randombytes_1_fu_59_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_randombytes_1_fu_59_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_randombytes_1_fu_59_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_randombytes_1_fu_59_ap_ready = ap_const_logic_1)) then 
                    grp_randombytes_1_fu_59_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_randombytes_fu_43_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_randombytes_fu_43_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_randombytes_fu_43_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_randombytes_fu_43_ap_ready = ap_const_logic_1)) then 
                    grp_randombytes_fu_43_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_owcpa_keypair_fu_34_ap_done, grp_randombytes_fu_43_ap_done, grp_randombytes_1_fu_59_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_randombytes_fu_43_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_owcpa_keypair_fu_34_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_randombytes_1_fu_59_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    DRBG_ctx_Key_address0_assign_proc : process(grp_randombytes_fu_43_DRBG_ctx_Key_address0, grp_randombytes_1_fu_59_DRBG_ctx_Key_address0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_Key_address0 <= grp_randombytes_1_fu_59_DRBG_ctx_Key_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            DRBG_ctx_Key_address0 <= grp_randombytes_fu_43_DRBG_ctx_Key_address0;
        else 
            DRBG_ctx_Key_address0 <= "XXXXX";
        end if; 
    end process;


    DRBG_ctx_Key_address1_assign_proc : process(grp_randombytes_fu_43_DRBG_ctx_Key_address1, grp_randombytes_1_fu_59_DRBG_ctx_Key_address1, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_Key_address1 <= grp_randombytes_1_fu_59_DRBG_ctx_Key_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            DRBG_ctx_Key_address1 <= grp_randombytes_fu_43_DRBG_ctx_Key_address1;
        else 
            DRBG_ctx_Key_address1 <= "XXXXX";
        end if; 
    end process;


    DRBG_ctx_Key_ce0_assign_proc : process(grp_randombytes_fu_43_DRBG_ctx_Key_ce0, grp_randombytes_1_fu_59_DRBG_ctx_Key_ce0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_Key_ce0 <= grp_randombytes_1_fu_59_DRBG_ctx_Key_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            DRBG_ctx_Key_ce0 <= grp_randombytes_fu_43_DRBG_ctx_Key_ce0;
        else 
            DRBG_ctx_Key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_Key_ce1_assign_proc : process(grp_randombytes_fu_43_DRBG_ctx_Key_ce1, grp_randombytes_1_fu_59_DRBG_ctx_Key_ce1, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_Key_ce1 <= grp_randombytes_1_fu_59_DRBG_ctx_Key_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            DRBG_ctx_Key_ce1 <= grp_randombytes_fu_43_DRBG_ctx_Key_ce1;
        else 
            DRBG_ctx_Key_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_Key_d0_assign_proc : process(grp_randombytes_fu_43_DRBG_ctx_Key_d0, grp_randombytes_1_fu_59_DRBG_ctx_Key_d0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_Key_d0 <= grp_randombytes_1_fu_59_DRBG_ctx_Key_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            DRBG_ctx_Key_d0 <= grp_randombytes_fu_43_DRBG_ctx_Key_d0;
        else 
            DRBG_ctx_Key_d0 <= "XXXXXXXX";
        end if; 
    end process;


    DRBG_ctx_Key_we0_assign_proc : process(grp_randombytes_fu_43_DRBG_ctx_Key_we0, grp_randombytes_1_fu_59_DRBG_ctx_Key_we0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_Key_we0 <= grp_randombytes_1_fu_59_DRBG_ctx_Key_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            DRBG_ctx_Key_we0 <= grp_randombytes_fu_43_DRBG_ctx_Key_we0;
        else 
            DRBG_ctx_Key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_V_address0_assign_proc : process(grp_randombytes_fu_43_DRBG_ctx_V_address0, grp_randombytes_1_fu_59_DRBG_ctx_V_address0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_V_address0 <= grp_randombytes_1_fu_59_DRBG_ctx_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            DRBG_ctx_V_address0 <= grp_randombytes_fu_43_DRBG_ctx_V_address0;
        else 
            DRBG_ctx_V_address0 <= "XXXX";
        end if; 
    end process;


    DRBG_ctx_V_address1_assign_proc : process(grp_randombytes_fu_43_DRBG_ctx_V_address1, grp_randombytes_1_fu_59_DRBG_ctx_V_address1, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_V_address1 <= grp_randombytes_1_fu_59_DRBG_ctx_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            DRBG_ctx_V_address1 <= grp_randombytes_fu_43_DRBG_ctx_V_address1;
        else 
            DRBG_ctx_V_address1 <= "XXXX";
        end if; 
    end process;


    DRBG_ctx_V_ce0_assign_proc : process(grp_randombytes_fu_43_DRBG_ctx_V_ce0, grp_randombytes_1_fu_59_DRBG_ctx_V_ce0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_V_ce0 <= grp_randombytes_1_fu_59_DRBG_ctx_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            DRBG_ctx_V_ce0 <= grp_randombytes_fu_43_DRBG_ctx_V_ce0;
        else 
            DRBG_ctx_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_V_ce1_assign_proc : process(grp_randombytes_fu_43_DRBG_ctx_V_ce1, grp_randombytes_1_fu_59_DRBG_ctx_V_ce1, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_V_ce1 <= grp_randombytes_1_fu_59_DRBG_ctx_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            DRBG_ctx_V_ce1 <= grp_randombytes_fu_43_DRBG_ctx_V_ce1;
        else 
            DRBG_ctx_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_V_d0_assign_proc : process(grp_randombytes_fu_43_DRBG_ctx_V_d0, grp_randombytes_1_fu_59_DRBG_ctx_V_d0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_V_d0 <= grp_randombytes_1_fu_59_DRBG_ctx_V_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            DRBG_ctx_V_d0 <= grp_randombytes_fu_43_DRBG_ctx_V_d0;
        else 
            DRBG_ctx_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    DRBG_ctx_V_we0_assign_proc : process(grp_randombytes_fu_43_DRBG_ctx_V_we0, grp_randombytes_1_fu_59_DRBG_ctx_V_we0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_V_we0 <= grp_randombytes_1_fu_59_DRBG_ctx_V_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            DRBG_ctx_V_we0 <= grp_randombytes_fu_43_DRBG_ctx_V_we0;
        else 
            DRBG_ctx_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    DRBG_ctx_reseed_counter_o_assign_proc : process(DRBG_ctx_reseed_counter_i, grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o, grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o_ap_vld, grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o, grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o_ap_vld, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o_ap_vld = ap_const_logic_1))) then 
            DRBG_ctx_reseed_counter_o <= grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o_ap_vld = ap_const_logic_1))) then 
            DRBG_ctx_reseed_counter_o <= grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o;
        else 
            DRBG_ctx_reseed_counter_o <= DRBG_ctx_reseed_counter_i;
        end if; 
    end process;


    DRBG_ctx_reseed_counter_o_ap_vld_assign_proc : process(grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o_ap_vld, grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o_ap_vld, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            DRBG_ctx_reseed_counter_o_ap_vld <= grp_randombytes_1_fu_59_DRBG_ctx_reseed_counter_o_ap_vld;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            DRBG_ctx_reseed_counter_o_ap_vld <= grp_randombytes_fu_43_DRBG_ctx_reseed_counter_o_ap_vld;
        else 
            DRBG_ctx_reseed_counter_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(grp_randombytes_1_fu_59_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_randombytes_1_fu_59_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_randombytes_1_fu_59_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_randombytes_1_fu_59_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;
    grp_owcpa_keypair_fu_34_ap_start <= grp_owcpa_keypair_fu_34_ap_start_reg;
    grp_randombytes_1_fu_59_ap_start <= grp_randombytes_1_fu_59_ap_start_reg;
    grp_randombytes_fu_43_ap_start <= grp_randombytes_fu_43_ap_start_reg;
    pk_address0 <= grp_owcpa_keypair_fu_34_pk_address0;
    pk_address1 <= grp_owcpa_keypair_fu_34_pk_address1;
    pk_ce0 <= grp_owcpa_keypair_fu_34_pk_ce0;
    pk_ce1 <= grp_owcpa_keypair_fu_34_pk_ce1;
    pk_d0 <= grp_owcpa_keypair_fu_34_pk_d0;
    pk_d1 <= grp_owcpa_keypair_fu_34_pk_d1;
    pk_we0 <= grp_owcpa_keypair_fu_34_pk_we0;
    pk_we1 <= grp_owcpa_keypair_fu_34_pk_we1;

    seed_address0_assign_proc : process(grp_owcpa_keypair_fu_34_seed_address0, grp_randombytes_fu_43_x_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seed_address0 <= grp_randombytes_fu_43_x_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seed_address0 <= grp_owcpa_keypair_fu_34_seed_address0;
        else 
            seed_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    seed_ce0_assign_proc : process(grp_owcpa_keypair_fu_34_seed_ce0, grp_randombytes_fu_43_x_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seed_ce0 <= grp_randombytes_fu_43_x_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seed_ce0 <= grp_owcpa_keypair_fu_34_seed_ce0;
        else 
            seed_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_we0_assign_proc : process(grp_randombytes_fu_43_x_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seed_we0 <= grp_randombytes_fu_43_x_we0;
        else 
            seed_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_address0_assign_proc : process(grp_owcpa_keypair_fu_34_sk_address0, grp_randombytes_1_fu_59_x_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sk_address0 <= grp_randombytes_1_fu_59_x_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sk_address0 <= grp_owcpa_keypair_fu_34_sk_address0;
        else 
            sk_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    sk_address1 <= grp_owcpa_keypair_fu_34_sk_address1;

    sk_ce0_assign_proc : process(grp_owcpa_keypair_fu_34_sk_ce0, grp_randombytes_1_fu_59_x_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sk_ce0 <= grp_randombytes_1_fu_59_x_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sk_ce0 <= grp_owcpa_keypair_fu_34_sk_ce0;
        else 
            sk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_ce1_assign_proc : process(grp_owcpa_keypair_fu_34_sk_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sk_ce1 <= grp_owcpa_keypair_fu_34_sk_ce1;
        else 
            sk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sk_d0_assign_proc : process(grp_owcpa_keypair_fu_34_sk_d0, grp_randombytes_1_fu_59_x_d0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sk_d0 <= grp_randombytes_1_fu_59_x_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sk_d0 <= grp_owcpa_keypair_fu_34_sk_d0;
        else 
            sk_d0 <= "XXXXXXXX";
        end if; 
    end process;

    sk_d1 <= grp_owcpa_keypair_fu_34_sk_d1;

    sk_we0_assign_proc : process(grp_owcpa_keypair_fu_34_sk_we0, grp_randombytes_1_fu_59_x_we0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sk_we0 <= grp_randombytes_1_fu_59_x_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sk_we0 <= grp_owcpa_keypair_fu_34_sk_we0;
        else 
            sk_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_we1_assign_proc : process(grp_owcpa_keypair_fu_34_sk_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sk_we1 <= grp_owcpa_keypair_fu_34_sk_we1;
        else 
            sk_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
