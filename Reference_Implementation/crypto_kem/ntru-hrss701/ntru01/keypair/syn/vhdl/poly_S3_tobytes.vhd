-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity poly_S3_tobytes is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    msg_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    msg_ce0 : OUT STD_LOGIC;
    msg_we0 : OUT STD_LOGIC;
    msg_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    msg_offset : IN STD_LOGIC_VECTOR (9 downto 0);
    a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a_coeffs_ce0 : OUT STD_LOGIC;
    a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a_coeffs_ce1 : OUT STD_LOGIC;
    a_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of poly_S3_tobytes is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_8C : STD_LOGIC_VECTOR (7 downto 0) := "10001100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_166_fu_117_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_166_reg_302 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_10_fu_131_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_10_reg_310 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_145_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_reg_315 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_fu_177_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_reg_332 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_1_fu_208_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_1_reg_337 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal c_2_fu_238_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_2_reg_348 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal c_3_fu_272_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_3_reg_364 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_180_fu_278_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_180_reg_370 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_106 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_158_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_161_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_165_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_169_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_171_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl5_fu_137_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_cast1_fu_121_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_151_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_160_fu_162_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_175_cast_fu_173_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_173_fu_186_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_fu_190_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_fu_182_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_159_fu_198_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_174_fu_204_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_164_fu_214_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_175_fu_224_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_176_fu_234_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_163_fu_229_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_168_fu_244_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_177_fu_258_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_178_fu_268_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_167_fu_263_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_179_fu_282_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_170_fu_287_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_106 <= i_10_reg_310;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_106 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_1_reg_337 <= c_1_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                c_2_reg_348 <= c_2_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                c_3_reg_364 <= c_3_fu_272_p2;
                tmp_180_reg_370 <= tmp_180_fu_278_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_10_reg_310 <= i_10_fu_131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_125_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sum_reg_332 <= sum_fu_177_p2;
                tmp_reg_315 <= tmp_fu_145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_166_reg_302 <= tmp_166_fu_117_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_125_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_125_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    a_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_158_fu_157_p1, tmp_165_fu_219_p1, tmp_171_fu_254_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_coeffs_address0 <= tmp_171_fu_254_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_coeffs_address0 <= tmp_165_fu_219_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_coeffs_address0 <= tmp_158_fu_157_p1(10 - 1 downto 0);
        else 
            a_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    a_coeffs_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, tmp_161_fu_168_p1, tmp_169_fu_249_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_coeffs_address1 <= tmp_169_fu_249_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_coeffs_address1 <= tmp_161_fu_168_p1(10 - 1 downto 0);
        else 
            a_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    a_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_coeffs_ce0 <= ap_const_logic_1;
        else 
            a_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_coeffs_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_coeffs_ce1 <= ap_const_logic_1;
        else 
            a_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_125_p2)
    begin
        if ((((exitcond_fu_125_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_125_p2)
    begin
        if (((exitcond_fu_125_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_1_fu_208_p2 <= std_logic_vector(unsigned(tmp_159_fu_198_p2) + unsigned(tmp_174_fu_204_p1));
    c_2_fu_238_p2 <= std_logic_vector(unsigned(tmp_176_fu_234_p1) + unsigned(tmp_163_fu_229_p2));
    c_3_fu_272_p2 <= std_logic_vector(unsigned(tmp_178_fu_268_p1) + unsigned(tmp_167_fu_263_p2));
    c_fu_182_p1 <= a_coeffs_q0(8 - 1 downto 0);
    exitcond_fu_125_p2 <= "1" when (i_reg_106 = ap_const_lv8_8C) else "0";
    i_10_fu_131_p2 <= std_logic_vector(unsigned(i_reg_106) + unsigned(ap_const_lv8_1));
    i_cast1_fu_121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_106),10));
    msg_address0 <= sum_cast_fu_298_p1(11 - 1 downto 0);

    msg_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            msg_ce0 <= ap_const_logic_1;
        else 
            msg_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    msg_d0 <= std_logic_vector(unsigned(tmp_180_reg_370) + unsigned(tmp_170_fu_287_p2));

    msg_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            msg_we0 <= ap_const_logic_1;
        else 
            msg_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl4_fu_190_p3 <= (tmp_173_fu_186_p1 & ap_const_lv2_0);
    p_shl5_fu_137_p3 <= (i_reg_106 & ap_const_lv2_0);
    sum_cast_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_reg_332),64));
    sum_fu_177_p2 <= std_logic_vector(unsigned(tmp_175_cast_fu_173_p1) + unsigned(tmp_166_reg_302));
    tmp_158_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_151_p2),64));
    tmp_159_fu_198_p2 <= std_logic_vector(unsigned(p_shl4_fu_190_p3) - unsigned(c_fu_182_p1));
    tmp_160_fu_162_p2 <= std_logic_vector(unsigned(ap_const_lv10_3) + unsigned(tmp_fu_145_p2));
    tmp_161_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_160_fu_162_p2),64));
    tmp_163_fu_229_p2 <= std_logic_vector(unsigned(tmp_175_fu_224_p2) - unsigned(c_1_reg_337));
    tmp_164_fu_214_p2 <= std_logic_vector(unsigned(ap_const_lv10_2) + unsigned(tmp_reg_315));
    tmp_165_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_164_fu_214_p2),64));
    tmp_166_fu_117_p1 <= msg_offset(9 - 1 downto 0);
    tmp_167_fu_263_p2 <= std_logic_vector(unsigned(tmp_177_fu_258_p2) - unsigned(c_2_reg_348));
    tmp_168_fu_244_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(tmp_reg_315));
    tmp_169_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_168_fu_244_p2),64));
    tmp_170_fu_287_p2 <= std_logic_vector(unsigned(tmp_179_fu_282_p2) - unsigned(c_3_reg_364));
    tmp_171_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_315),64));
    tmp_173_fu_186_p1 <= a_coeffs_q0(6 - 1 downto 0);
    tmp_174_fu_204_p1 <= a_coeffs_q1(8 - 1 downto 0);
    tmp_175_cast_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_106),9));
    tmp_175_fu_224_p2 <= std_logic_vector(shift_left(unsigned(c_1_reg_337),to_integer(unsigned('0' & ap_const_lv8_2(8-1 downto 0)))));
    tmp_176_fu_234_p1 <= a_coeffs_q0(8 - 1 downto 0);
    tmp_177_fu_258_p2 <= std_logic_vector(shift_left(unsigned(c_2_reg_348),to_integer(unsigned('0' & ap_const_lv8_2(8-1 downto 0)))));
    tmp_178_fu_268_p1 <= a_coeffs_q1(8 - 1 downto 0);
    tmp_179_fu_282_p2 <= std_logic_vector(shift_left(unsigned(c_3_reg_364),to_integer(unsigned('0' & ap_const_lv8_2(8-1 downto 0)))));
    tmp_180_fu_278_p1 <= a_coeffs_q0(8 - 1 downto 0);
    tmp_fu_145_p2 <= std_logic_vector(unsigned(p_shl5_fu_137_p3) + unsigned(i_cast1_fu_121_p1));
    tmp_s_fu_151_p2 <= std_logic_vector(unsigned(ap_const_lv10_4) + unsigned(tmp_fu_145_p2));
end behav;
