-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity poly_Sq_tobytes is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    r_ce0 : OUT STD_LOGIC;
    r_we0 : OUT STD_LOGIC;
    r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    r_ce1 : OUT STD_LOGIC;
    r_we1 : OUT STD_LOGIC;
    r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a_coeffs_ce0 : OUT STD_LOGIC;
    a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of poly_Sq_tobytes is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_471 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010001110001";
    constant ap_const_lv64_470 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010001110000";
    constant ap_const_lv64_46F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010001101111";
    constant ap_const_lv64_46E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010001101110";
    constant ap_const_lv64_46D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010001101101";
    constant ap_const_lv64_46C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010001101100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_46B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010001101011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv11_D : STD_LOGIC_VECTOR (10 downto 0) := "00000001101";
    constant ap_const_lv7_57 : STD_LOGIC_VECTOR (6 downto 0) := "1010111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv11_6 : STD_LOGIC_VECTOR (10 downto 0) := "00000000110";
    constant ap_const_lv11_7 : STD_LOGIC_VECTOR (10 downto 0) := "00000000111";
    constant ap_const_lv11_8 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv11_9 : STD_LOGIC_VECTOR (10 downto 0) := "00000001001";
    constant ap_const_lv11_A : STD_LOGIC_VECTOR (10 downto 0) := "00000001010";
    constant ap_const_lv11_B : STD_LOGIC_VECTOR (10 downto 0) := "00000001011";
    constant ap_const_lv11_C : STD_LOGIC_VECTOR (10 downto 0) := "00000001100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_568_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul_reg_1252 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_96_fu_580_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_96_reg_1260 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_586_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_reg_1265 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond3_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_604_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_reg_1273 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond2_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_reg_1283 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_100_reg_1288 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_528_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_89_reg_1293 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_550_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_109_reg_1298 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_120_reg_1303 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_105_reg_1308 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_138_reg_1313 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_55_fu_1045_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_55_reg_1321 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond1_fu_1039_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_1080_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal exitcond_fu_1069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_158_fu_1113_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_158_reg_1339 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_159_fu_1131_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_159_reg_1344 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_518_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_163_reg_1349 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_164_fu_1177_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_164_reg_1354 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce1 : STD_LOGIC;
    signal t_we1 : STD_LOGIC;
    signal t_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_460 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal phi_mul_reg_471 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_reg_483 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_1_reg_495 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal j_2_reg_507 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_131_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_132_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_fu_670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_fu_701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_77_fu_738_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_84_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_88_fu_778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_93_fu_815_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_97_fu_837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_104_fu_894_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_fu_933_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_fu_955_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_124_fu_1012_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_128_fu_1034_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_fu_1059_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_fu_1064_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_157_fu_1075_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_101_fu_625_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_64_fu_657_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_75_fu_723_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_82_fu_755_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_91_fu_800_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_98_fu_879_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_111_fu_921_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_122_fu_997_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_137_fu_1104_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_144_fu_1124_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_149_fu_1158_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_155_fu_1198_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_165_fu_1205_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast6_fu_594_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_130_fu_610_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_108_fu_645_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_85_fu_649_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_635_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_fu_664_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_69_fu_695_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_110_fu_706_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_102_fu_710_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_103_fu_718_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_76_fu_732_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_119_fu_743_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_90_fu_747_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_83_fu_761_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_87_fu_772_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_121_fu_783_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_114_fu_787_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_560_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_118_fu_795_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_92_fu_809_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_95_fu_831_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_135_fu_852_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_125_fu_856_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_134_fu_869_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_133_fu_864_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_99_fu_888_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_136_fu_909_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_106_fu_913_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_112_fu_927_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_116_fu_949_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_146_fu_970_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_140_fu_974_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_145_fu_987_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_142_fu_982_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_123_fu_1006_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_127_fu_1028_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_fu_1051_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_153_fu_1086_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_148_fu_1090_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_150_fu_1098_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_141_fu_1117_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_161_fu_1145_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_160_fu_1135_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_162_fu_1152_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_154_fu_1188_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_152_fu_1181_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component poly_Sq_tobytes_1_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    t_U : component poly_Sq_tobytes_1_t
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0,
        address1 => t_address1,
        ce1 => t_ce1,
        we1 => t_we1,
        d1 => a_coeffs_q0,
        q1 => t_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_reg_460 <= tmp_96_reg_1260;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_460 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_1_reg_495_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_1_reg_495 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j_1_reg_495 <= tmp_55_reg_1321;
            end if; 
        end if;
    end process;

    j_2_reg_507_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond1_fu_1039_p2 = ap_const_lv1_1))) then 
                j_2_reg_507 <= ap_const_lv4_4;
            elsif (((exitcond_fu_1069_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                j_2_reg_507 <= j_4_fu_1080_p2;
            end if; 
        end if;
    end process;

    j_reg_483_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_574_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_483 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_483 <= j_3_reg_1273;
            end if; 
        end if;
    end process;

    phi_mul_reg_471_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                phi_mul_reg_471 <= next_mul_reg_1252;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_471 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_3_reg_1273 <= j_3_fu_604_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul_reg_1252 <= next_mul_fu_568_p2;
                tmp_96_reg_1260 <= tmp_96_fu_580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_100_reg_1288 <= t_q1(15 downto 11);
                tmp_68_reg_1283 <= t_q1(10 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_105_reg_1308 <= t_q0(14 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_109_reg_1298 <= t_q0(15 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_120_reg_1303 <= t_q1(15 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_138_reg_1313 <= t_q1(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_158_reg_1339 <= tmp_158_fu_1113_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_159_reg_1344 <= tmp_159_fu_1131_p1;
                tmp_163_reg_1349 <= t_q1(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_164_reg_1354 <= tmp_164_fu_1177_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_55_reg_1321 <= tmp_55_fu_1045_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_89_reg_1293 <= t_q1(13 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_574_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_reg_1265(9 downto 3) <= tmp_fu_586_p3(9 downto 3);
            end if;
        end if;
    end process;
    tmp_reg_1265(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_574_p2, ap_CS_fsm_state3, exitcond2_fu_598_p2, ap_CS_fsm_state12, exitcond1_fu_1039_p2, ap_CS_fsm_state14, exitcond_fu_1069_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond2_fu_598_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond1_fu_1039_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                if (((exitcond_fu_1069_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    a_coeffs_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, tmp_131_fu_615_p1, tmp_53_fu_1059_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            a_coeffs_address0 <= tmp_53_fu_1059_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_coeffs_address0 <= tmp_131_fu_615_p1(10 - 1 downto 0);
        else 
            a_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    a_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            a_coeffs_ce0 <= ap_const_logic_1;
        else 
            a_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_1039_p2 <= "1" when (j_1_reg_495 = ap_const_lv3_4) else "0";
    exitcond2_fu_598_p2 <= "1" when (j_reg_483 = ap_const_lv4_8) else "0";
    exitcond3_fu_574_p2 <= "1" when (i_reg_460 = ap_const_lv7_57) else "0";
    exitcond_fu_1069_p2 <= "1" when (j_2_reg_507 = ap_const_lv4_8) else "0";
    grp_fu_518_p4 <= t_q1(5 downto 3);
    grp_fu_528_p4 <= t_q1(13 downto 6);
    grp_fu_550_p4 <= t_q0(15 downto 9);
    grp_fu_560_p3 <= t_q1(3 downto 3);
    j_3_fu_604_p2 <= std_logic_vector(unsigned(j_reg_483) + unsigned(ap_const_lv4_1));
    j_4_fu_1080_p2 <= std_logic_vector(unsigned(j_2_reg_507) + unsigned(ap_const_lv4_1));
    j_cast6_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_483),10));
    next_mul_fu_568_p2 <= std_logic_vector(unsigned(phi_mul_reg_471) + unsigned(ap_const_lv11_D));

    r_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state11, tmp_58_fu_630_p1, tmp_70_fu_701_p1, tmp_84_fu_767_p1, tmp_93_fu_815_p1, tmp_104_fu_894_p1, tmp_117_fu_955_p1, tmp_128_fu_1034_p1, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            r_address0 <= ap_const_lv64_46C(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_address0 <= ap_const_lv64_46E(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            r_address0 <= ap_const_lv64_470(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_address0 <= tmp_128_fu_1034_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_address0 <= tmp_117_fu_955_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_address0 <= tmp_104_fu_894_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_address0 <= tmp_93_fu_815_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_address0 <= tmp_84_fu_767_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_address0 <= tmp_70_fu_701_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_address0 <= tmp_58_fu_630_p1(11 - 1 downto 0);
        else 
            r_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    r_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state11, tmp_66_fu_670_p1, tmp_77_fu_738_p1, tmp_88_fu_778_p1, tmp_97_fu_837_p1, tmp_113_fu_933_p1, tmp_124_fu_1012_p1, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            r_address1 <= ap_const_lv64_46B(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_address1 <= ap_const_lv64_46D(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            r_address1 <= ap_const_lv64_46F(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            r_address1 <= ap_const_lv64_471(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_address1 <= tmp_124_fu_1012_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_address1 <= tmp_113_fu_933_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_address1 <= tmp_97_fu_837_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_address1 <= tmp_88_fu_778_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_address1 <= tmp_77_fu_738_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_address1 <= tmp_66_fu_670_p1(11 - 1 downto 0);
        else 
            r_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    r_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state11, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_ce0 <= ap_const_logic_1;
        else 
            r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state11, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_ce1 <= ap_const_logic_1;
        else 
            r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_d0_assign_proc : process(tmp_68_reg_1283, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state17, t_q0, t_q1, ap_CS_fsm_state11, ap_CS_fsm_state18, tmp_101_fu_625_p1, tmp_82_fu_755_p2, tmp_91_fu_800_p3, tmp_98_fu_879_p3, tmp_149_fu_1158_p3, tmp_155_fu_1198_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            r_d0 <= tmp_155_fu_1198_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_d0 <= tmp_149_fu_1158_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            r_d0 <= t_q0(8 downto 1);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_d0 <= t_q0(12 downto 5);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_d0 <= t_q1(9 downto 2);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_d0 <= tmp_98_fu_879_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_d0 <= tmp_91_fu_800_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_d0 <= tmp_82_fu_755_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_d0 <= tmp_68_reg_1283;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_d0 <= tmp_101_fu_625_p1;
        else 
            r_d0 <= "XXXXXXXX";
        end if; 
    end process;


    r_d1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, t_q0, t_q1, ap_CS_fsm_state11, ap_CS_fsm_state18, tmp_64_fu_657_p2, tmp_75_fu_723_p3, tmp_111_fu_921_p2, tmp_122_fu_997_p3, tmp_137_fu_1104_p3, tmp_144_fu_1124_p2, tmp_165_fu_1205_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            r_d1 <= tmp_165_fu_1205_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_d1 <= t_q0(10 downto 3);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            r_d1 <= tmp_144_fu_1124_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            r_d1 <= tmp_137_fu_1104_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_d1 <= tmp_122_fu_997_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_d1 <= tmp_111_fu_921_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_d1 <= t_q1(11 downto 4);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_d1 <= t_q0(8 downto 1);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_d1 <= tmp_75_fu_723_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_d1 <= tmp_64_fu_657_p2;
        else 
            r_d1 <= "XXXXXXXX";
        end if; 
    end process;


    r_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state11, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_we0 <= ap_const_logic_1;
        else 
            r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state11, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_we1 <= ap_const_logic_1;
        else 
            r_we1 <= ap_const_logic_0;
        end if; 
    end process;


    t_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state14, exitcond_fu_1069_p2, ap_CS_fsm_state16, ap_CS_fsm_state4, tmp_132_fu_620_p1, tmp_157_fu_1075_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((exitcond_fu_1069_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            t_address0 <= tmp_157_fu_1075_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            t_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            t_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_fu_1069_p2 = ap_const_lv1_1)))) then 
            t_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_address0 <= tmp_132_fu_620_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            t_address0 <= "XXX";
        end if; 
    end process;


    t_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state13, tmp_54_fu_1064_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            t_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            t_address1 <= tmp_54_fu_1064_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            t_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            t_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            t_address1 <= "XXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state14, exitcond_fu_1069_p2, ap_CS_fsm_state16, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_fu_1069_p2 = ap_const_lv1_1)) or ((exitcond_fu_1069_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            t_ce1 <= ap_const_logic_1;
        else 
            t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(a_coeffs_q0, ap_CS_fsm_state14, exitcond_fu_1069_p2, ap_CS_fsm_state4)
    begin
        if (((exitcond_fu_1069_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            t_d0 <= ap_const_lv16_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_d0 <= a_coeffs_q0;
        else 
            t_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    t_we0_assign_proc : process(ap_CS_fsm_state14, exitcond_fu_1069_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((exitcond_fu_1069_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_we1_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            t_we1 <= ap_const_logic_1;
        else 
            t_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_101_fu_625_p1 <= t_q0(8 - 1 downto 0);
    tmp_102_fu_710_p3 <= (tmp_110_fu_706_p1 & ap_const_lv2_0);
    tmp_103_fu_718_p2 <= (tmp_102_fu_710_p3 or tmp_100_reg_1288);
    tmp_104_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_99_fu_888_p2),64));
    tmp_106_fu_913_p3 <= (tmp_136_fu_909_p1 & ap_const_lv6_0);
    tmp_108_fu_645_p1 <= t_q1(3 - 1 downto 0);
    tmp_10_fu_1051_p3 <= (ap_const_lv7_57 & j_1_reg_495);
    tmp_110_fu_706_p1 <= t_q1(3 - 1 downto 0);
    tmp_111_fu_921_p2 <= (tmp_106_fu_913_p3 or tmp_105_reg_1308);
    tmp_112_fu_927_p2 <= std_logic_vector(unsigned(ap_const_lv11_9) + unsigned(phi_mul_reg_471));
    tmp_113_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_fu_927_p2),64));
    tmp_114_fu_787_p3 <= (tmp_121_fu_783_p1 & ap_const_lv4_0);
    tmp_116_fu_949_p2 <= std_logic_vector(unsigned(ap_const_lv11_A) + unsigned(phi_mul_reg_471));
    tmp_117_fu_955_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_fu_949_p2),64));
    tmp_118_fu_795_p2 <= (tmp_114_fu_787_p3 or tmp_109_reg_1298);
    tmp_119_fu_743_p1 <= t_q0(1 - 1 downto 0);
    tmp_121_fu_783_p1 <= t_q1(3 - 1 downto 0);
    tmp_122_fu_997_p3 <= (tmp_145_fu_987_p4 & tmp_142_fu_982_p2);
    tmp_123_fu_1006_p2 <= std_logic_vector(unsigned(ap_const_lv11_B) + unsigned(phi_mul_reg_471));
    tmp_124_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_123_fu_1006_p2),64));
    tmp_125_fu_856_p3 <= (tmp_135_fu_852_p1 & ap_const_lv1_0);
    tmp_127_fu_1028_p2 <= std_logic_vector(unsigned(ap_const_lv11_C) + unsigned(phi_mul_reg_471));
    tmp_128_fu_1034_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_fu_1028_p2),64));
    tmp_130_fu_610_p2 <= std_logic_vector(unsigned(tmp_reg_1265) + unsigned(j_cast6_fu_594_p1));
    tmp_131_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_130_fu_610_p2),64));
    tmp_132_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_483),64));
    tmp_133_fu_864_p2 <= (tmp_125_fu_856_p3 or tmp_120_reg_1303);
    tmp_134_fu_869_p4 <= t_q0(6 downto 3);
    tmp_135_fu_852_p1 <= t_q0(3 - 1 downto 0);
    tmp_136_fu_909_p1 <= t_q1(2 - 1 downto 0);
    tmp_137_fu_1104_p3 <= (grp_fu_560_p3 & tmp_150_fu_1098_p2);
    tmp_140_fu_974_p3 <= (tmp_146_fu_970_p1 & ap_const_lv3_0);
    tmp_141_fu_1117_p3 <= (tmp_158_reg_1339 & ap_const_lv7_0);
    tmp_142_fu_982_p2 <= (tmp_140_fu_974_p3 or tmp_138_reg_1313);
    tmp_144_fu_1124_p2 <= (tmp_141_fu_1117_p3 or grp_fu_528_p4);
    tmp_145_fu_987_p4 <= t_q0(4 downto 3);
    tmp_146_fu_970_p1 <= t_q0(3 - 1 downto 0);
    tmp_148_fu_1090_p3 <= (tmp_153_fu_1086_p1 & ap_const_lv4_0);
    tmp_149_fu_1158_p3 <= (tmp_163_reg_1349 & tmp_162_fu_1152_p2);
    tmp_150_fu_1098_p2 <= (tmp_148_fu_1090_p3 or grp_fu_550_p4);
    tmp_152_fu_1181_p3 <= (tmp_164_reg_1354 & ap_const_lv5_0);
    tmp_153_fu_1086_p1 <= t_q1(3 - 1 downto 0);
    tmp_154_fu_1188_p4 <= t_q1(15 downto 8);
    tmp_155_fu_1198_p2 <= (tmp_154_fu_1188_p4 or tmp_152_fu_1181_p3);
    tmp_157_fu_1075_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_507),64));
    tmp_158_fu_1113_p1 <= t_q0(1 - 1 downto 0);
    tmp_159_fu_1131_p1 <= t_q1(3 - 1 downto 0);
    tmp_160_fu_1135_p4 <= t_q0(15 downto 11);
    tmp_161_fu_1145_p3 <= (tmp_159_reg_1344 & ap_const_lv2_0);
    tmp_162_fu_1152_p2 <= (tmp_161_fu_1145_p3 or tmp_160_fu_1135_p4);
    tmp_164_fu_1177_p1 <= t_q0(3 - 1 downto 0);
    tmp_165_fu_1205_p1 <= t_q1(8 - 1 downto 0);
    tmp_53_fu_1059_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_1051_p3),64));
    tmp_54_fu_1064_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_495),64));
    tmp_55_fu_1045_p2 <= std_logic_vector(unsigned(j_1_reg_495) + unsigned(ap_const_lv3_1));
    tmp_58_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_471),64));
    tmp_64_fu_657_p2 <= (tmp_s_fu_635_p4 or tmp_85_fu_649_p3);
    tmp_65_fu_664_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(phi_mul_reg_471));
    tmp_66_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_65_fu_664_p2),64));
    tmp_69_fu_695_p2 <= std_logic_vector(unsigned(ap_const_lv11_2) + unsigned(phi_mul_reg_471));
    tmp_70_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_fu_695_p2),64));
    tmp_75_fu_723_p3 <= (grp_fu_518_p4 & tmp_103_fu_718_p2);
    tmp_76_fu_732_p2 <= std_logic_vector(unsigned(ap_const_lv11_3) + unsigned(phi_mul_reg_471));
    tmp_77_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_76_fu_732_p2),64));
    tmp_82_fu_755_p2 <= (tmp_90_fu_747_p3 or tmp_89_reg_1293);
    tmp_83_fu_761_p2 <= std_logic_vector(unsigned(ap_const_lv11_4) + unsigned(phi_mul_reg_471));
    tmp_84_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_83_fu_761_p2),64));
    tmp_85_fu_649_p3 <= (tmp_108_fu_645_p1 & ap_const_lv5_0);
    tmp_87_fu_772_p2 <= std_logic_vector(unsigned(ap_const_lv11_5) + unsigned(phi_mul_reg_471));
    tmp_88_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_87_fu_772_p2),64));
    tmp_90_fu_747_p3 <= (tmp_119_fu_743_p1 & ap_const_lv7_0);
    tmp_91_fu_800_p3 <= (grp_fu_560_p3 & tmp_118_fu_795_p2);
    tmp_92_fu_809_p2 <= std_logic_vector(unsigned(ap_const_lv11_6) + unsigned(phi_mul_reg_471));
    tmp_93_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_92_fu_809_p2),64));
    tmp_95_fu_831_p2 <= std_logic_vector(unsigned(ap_const_lv11_7) + unsigned(phi_mul_reg_471));
    tmp_96_fu_580_p2 <= std_logic_vector(unsigned(i_reg_460) + unsigned(ap_const_lv7_1));
    tmp_97_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_95_fu_831_p2),64));
    tmp_98_fu_879_p3 <= (tmp_134_fu_869_p4 & tmp_133_fu_864_p2);
    tmp_99_fu_888_p2 <= std_logic_vector(unsigned(ap_const_lv11_8) + unsigned(phi_mul_reg_471));
    tmp_fu_586_p3 <= (i_reg_460 & ap_const_lv3_0);
    tmp_s_fu_635_p4 <= t_q0(15 downto 8);
end behav;
