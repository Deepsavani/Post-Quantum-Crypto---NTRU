-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity poly_Sq_tobytes_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    r_ce0 : OUT STD_LOGIC;
    r_we0 : OUT STD_LOGIC;
    r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    r_ce1 : OUT STD_LOGIC;
    r_we1 : OUT STD_LOGIC;
    r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a_coeffs_ce0 : OUT STD_LOGIC;
    a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of poly_Sq_tobytes_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_589 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010110001001";
    constant ap_const_lv64_588 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010110001000";
    constant ap_const_lv64_587 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010110000111";
    constant ap_const_lv64_586 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010110000110";
    constant ap_const_lv64_585 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010110000101";
    constant ap_const_lv64_584 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010110000100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_583 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010110000011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv11_D : STD_LOGIC_VECTOR (10 downto 0) := "00000001101";
    constant ap_const_lv7_57 : STD_LOGIC_VECTOR (6 downto 0) := "1010111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv11_118 : STD_LOGIC_VECTOR (10 downto 0) := "00100011000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_119 : STD_LOGIC_VECTOR (10 downto 0) := "00100011001";
    constant ap_const_lv11_11A : STD_LOGIC_VECTOR (10 downto 0) := "00100011010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_11B : STD_LOGIC_VECTOR (10 downto 0) := "00100011011";
    constant ap_const_lv11_11C : STD_LOGIC_VECTOR (10 downto 0) := "00100011100";
    constant ap_const_lv11_11D : STD_LOGIC_VECTOR (10 downto 0) := "00100011101";
    constant ap_const_lv11_11E : STD_LOGIC_VECTOR (10 downto 0) := "00100011110";
    constant ap_const_lv11_11F : STD_LOGIC_VECTOR (10 downto 0) := "00100011111";
    constant ap_const_lv11_120 : STD_LOGIC_VECTOR (10 downto 0) := "00100100000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv11_121 : STD_LOGIC_VECTOR (10 downto 0) := "00100100001";
    constant ap_const_lv11_122 : STD_LOGIC_VECTOR (10 downto 0) := "00100100010";
    constant ap_const_lv11_123 : STD_LOGIC_VECTOR (10 downto 0) := "00100100011";
    constant ap_const_lv11_124 : STD_LOGIC_VECTOR (10 downto 0) := "00100100100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_570_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul_reg_1260 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_31_fu_582_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_31_reg_1268 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_588_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_reg_1273 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond3_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_606_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_reg_1281 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond2_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_reg_1291 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_23_reg_1296 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_530_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_reg_1301 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_552_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_44_reg_1306 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_55_reg_1311 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_61_reg_1316 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_68_reg_1321 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_30_fu_1053_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_30_reg_1329 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond1_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_1088_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal exitcond_fu_1077_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_fu_1121_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_reg_1347 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_89_fu_1139_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_89_reg_1352 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_520_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_93_reg_1357 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_94_fu_1185_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_94_reg_1362 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce1 : STD_LOGIC;
    signal t_we1 : STD_LOGIC;
    signal t_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_462 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal phi_mul_reg_473 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_reg_485 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_1_reg_497 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal j_2_reg_509 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_78_fu_617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_82_fu_622_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_cast_fu_709_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum3_cast_fu_746_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_cast_fu_775_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum5_cast_fu_786_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum6_cast_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum7_cast_fu_845_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum8_cast_fu_902_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum9_cast_fu_941_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum10_cast_fu_963_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum11_cast_fu_1020_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum12_cast_fu_1042_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_1067_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_1072_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_81_fu_1083_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_32_fu_627_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_fu_665_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_fu_731_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_fu_763_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_51_fu_808_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_fu_887_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_fu_929_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_74_fu_1005_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_48_fu_1112_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_54_fu_1132_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_62_fu_1166_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_79_fu_1206_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_95_fu_1213_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast6_fu_596_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_77_fu_612_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_fu_632_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_41_fu_653_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_29_fu_657_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_643_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum2_fu_672_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum1_fu_703_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_45_fu_714_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_37_fu_718_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_38_fu_726_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum3_fu_740_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_49_fu_751_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_755_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum4_fu_769_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum5_fu_780_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_56_fu_791_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_46_fu_795_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_562_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_803_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum6_fu_817_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum7_fu_839_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_67_fu_860_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_57_fu_864_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_59_fu_877_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_58_fu_872_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum8_fu_896_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_76_fu_917_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_64_fu_921_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum9_fu_935_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum10_fu_957_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_80_fu_978_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_69_fu_982_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_71_fu_995_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_70_fu_990_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum11_fu_1014_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum12_fu_1036_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_fu_1059_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_83_fu_1094_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_85_fu_1098_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_86_fu_1106_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_52_fu_1125_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_91_fu_1153_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_90_fu_1143_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_92_fu_1160_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_fu_1196_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_73_fu_1189_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component poly_Sq_tobytes_1_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    t_U : component poly_Sq_tobytes_1_t
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0,
        address1 => t_address1,
        ce1 => t_ce1,
        we1 => t_we1,
        d1 => a_coeffs_q0,
        q1 => t_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_462_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_reg_462 <= tmp_31_reg_1268;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_462 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_1_reg_497_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_576_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_1_reg_497 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j_1_reg_497 <= tmp_30_reg_1329;
            end if; 
        end if;
    end process;

    j_2_reg_509_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond1_fu_1047_p2 = ap_const_lv1_1))) then 
                j_2_reg_509 <= ap_const_lv4_4;
            elsif (((exitcond_fu_1077_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                j_2_reg_509 <= j_4_fu_1088_p2;
            end if; 
        end if;
    end process;

    j_reg_485_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_576_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_485 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_485 <= j_3_reg_1281;
            end if; 
        end if;
    end process;

    phi_mul_reg_473_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                phi_mul_reg_473 <= next_mul_reg_1260;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_473 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_3_reg_1281 <= j_3_fu_606_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul_reg_1260 <= next_mul_fu_570_p2;
                tmp_31_reg_1268 <= tmp_31_fu_582_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_23_reg_1296 <= t_q1(15 downto 11);
                tmp_36_reg_1291 <= t_q1(10 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_30_reg_1329 <= tmp_30_fu_1053_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_34_reg_1301 <= t_q1(13 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_44_reg_1306 <= t_q0(15 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_55_reg_1311 <= t_q1(15 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_61_reg_1316 <= t_q0(14 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_68_reg_1321 <= t_q1(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_88_reg_1347 <= tmp_88_fu_1121_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_89_reg_1352 <= tmp_89_fu_1139_p1;
                tmp_93_reg_1357 <= t_q1(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_94_reg_1362 <= tmp_94_fu_1185_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_576_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_reg_1273(9 downto 3) <= tmp_fu_588_p3(9 downto 3);
            end if;
        end if;
    end process;
    tmp_reg_1273(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_576_p2, ap_CS_fsm_state3, exitcond2_fu_600_p2, ap_CS_fsm_state12, exitcond1_fu_1047_p2, ap_CS_fsm_state14, exitcond_fu_1077_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_576_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond2_fu_600_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond1_fu_1047_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                if (((exitcond_fu_1077_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    a_coeffs_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, tmp_78_fu_617_p1, tmp_s_fu_1067_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            a_coeffs_address0 <= tmp_s_fu_1067_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_coeffs_address0 <= tmp_78_fu_617_p1(10 - 1 downto 0);
        else 
            a_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    a_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            a_coeffs_ce0 <= ap_const_logic_1;
        else 
            a_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_1047_p2 <= "1" when (j_1_reg_497 = ap_const_lv3_4) else "0";
    exitcond2_fu_600_p2 <= "1" when (j_reg_485 = ap_const_lv4_8) else "0";
    exitcond3_fu_576_p2 <= "1" when (i_reg_462 = ap_const_lv7_57) else "0";
    exitcond_fu_1077_p2 <= "1" when (j_2_reg_509 = ap_const_lv4_8) else "0";
    grp_fu_520_p4 <= t_q1(5 downto 3);
    grp_fu_530_p4 <= t_q1(13 downto 6);
    grp_fu_552_p4 <= t_q0(15 downto 9);
    grp_fu_562_p3 <= t_q1(3 downto 3);
    j_3_fu_606_p2 <= std_logic_vector(unsigned(j_reg_485) + unsigned(ap_const_lv4_1));
    j_4_fu_1088_p2 <= std_logic_vector(unsigned(j_2_reg_509) + unsigned(ap_const_lv4_1));
    j_cast6_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_485),10));
    next_mul_fu_570_p2 <= std_logic_vector(unsigned(phi_mul_reg_473) + unsigned(ap_const_lv11_D));

    r_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state11, sum_cast_fu_638_p1, sum1_cast_fu_709_p1, sum4_cast_fu_775_p1, sum6_cast_fu_823_p1, sum8_cast_fu_902_p1, sum10_cast_fu_963_p1, sum12_cast_fu_1042_p1, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            r_address0 <= ap_const_lv64_584(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_address0 <= ap_const_lv64_586(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            r_address0 <= ap_const_lv64_588(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_address0 <= sum12_cast_fu_1042_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_address0 <= sum10_cast_fu_963_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_address0 <= sum8_cast_fu_902_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_address0 <= sum6_cast_fu_823_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_address0 <= sum4_cast_fu_775_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_address0 <= sum1_cast_fu_709_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_address0 <= sum_cast_fu_638_p1(11 - 1 downto 0);
        else 
            r_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    r_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state11, sum2_cast_fu_678_p1, sum3_cast_fu_746_p1, sum5_cast_fu_786_p1, sum7_cast_fu_845_p1, sum9_cast_fu_941_p1, sum11_cast_fu_1020_p1, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            r_address1 <= ap_const_lv64_583(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_address1 <= ap_const_lv64_585(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            r_address1 <= ap_const_lv64_587(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            r_address1 <= ap_const_lv64_589(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_address1 <= sum11_cast_fu_1020_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_address1 <= sum9_cast_fu_941_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_address1 <= sum7_cast_fu_845_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_address1 <= sum5_cast_fu_786_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_address1 <= sum3_cast_fu_746_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_address1 <= sum2_cast_fu_678_p1(11 - 1 downto 0);
        else 
            r_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    r_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state11, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_ce0 <= ap_const_logic_1;
        else 
            r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state11, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_ce1 <= ap_const_logic_1;
        else 
            r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_d0_assign_proc : process(tmp_36_reg_1291, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state17, t_q0, t_q1, ap_CS_fsm_state11, ap_CS_fsm_state18, tmp_32_fu_627_p1, tmp_42_fu_763_p2, tmp_51_fu_808_p3, tmp_60_fu_887_p3, tmp_62_fu_1166_p3, tmp_79_fu_1206_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            r_d0 <= tmp_79_fu_1206_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_d0 <= tmp_62_fu_1166_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            r_d0 <= t_q0(8 downto 1);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_d0 <= t_q0(12 downto 5);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_d0 <= t_q1(9 downto 2);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_d0 <= tmp_60_fu_887_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_d0 <= tmp_51_fu_808_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_d0 <= tmp_42_fu_763_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_d0 <= tmp_36_reg_1291;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_d0 <= tmp_32_fu_627_p1;
        else 
            r_d0 <= "XXXXXXXX";
        end if; 
    end process;


    r_d1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, t_q0, t_q1, ap_CS_fsm_state11, ap_CS_fsm_state18, tmp_33_fu_665_p2, tmp_40_fu_731_p3, tmp_65_fu_929_p2, tmp_74_fu_1005_p3, tmp_48_fu_1112_p3, tmp_54_fu_1132_p2, tmp_95_fu_1213_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            r_d1 <= tmp_95_fu_1213_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_d1 <= t_q0(10 downto 3);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            r_d1 <= tmp_54_fu_1132_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            r_d1 <= tmp_48_fu_1112_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_d1 <= tmp_74_fu_1005_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_d1 <= tmp_65_fu_929_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_d1 <= t_q1(11 downto 4);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_d1 <= t_q0(8 downto 1);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_d1 <= tmp_40_fu_731_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_d1 <= tmp_33_fu_665_p2;
        else 
            r_d1 <= "XXXXXXXX";
        end if; 
    end process;


    r_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state11, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_we0 <= ap_const_logic_1;
        else 
            r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state11, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_we1 <= ap_const_logic_1;
        else 
            r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sum10_cast_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum10_fu_957_p2),64));
    sum10_fu_957_p2 <= std_logic_vector(unsigned(ap_const_lv11_122) + unsigned(phi_mul_reg_473));
    sum11_cast_fu_1020_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum11_fu_1014_p2),64));
    sum11_fu_1014_p2 <= std_logic_vector(unsigned(ap_const_lv11_123) + unsigned(phi_mul_reg_473));
    sum12_cast_fu_1042_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum12_fu_1036_p2),64));
    sum12_fu_1036_p2 <= std_logic_vector(unsigned(ap_const_lv11_124) + unsigned(phi_mul_reg_473));
    sum1_cast_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_703_p2),64));
    sum1_fu_703_p2 <= std_logic_vector(unsigned(ap_const_lv11_11A) + unsigned(phi_mul_reg_473));
    sum2_cast_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_672_p2),64));
    sum2_fu_672_p2 <= std_logic_vector(unsigned(ap_const_lv11_119) + unsigned(phi_mul_reg_473));
    sum3_cast_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_fu_740_p2),64));
    sum3_fu_740_p2 <= std_logic_vector(unsigned(ap_const_lv11_11B) + unsigned(phi_mul_reg_473));
    sum4_cast_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_fu_769_p2),64));
    sum4_fu_769_p2 <= std_logic_vector(unsigned(ap_const_lv11_11C) + unsigned(phi_mul_reg_473));
    sum5_cast_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_fu_780_p2),64));
    sum5_fu_780_p2 <= std_logic_vector(unsigned(ap_const_lv11_11D) + unsigned(phi_mul_reg_473));
    sum6_cast_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum6_fu_817_p2),64));
    sum6_fu_817_p2 <= std_logic_vector(unsigned(ap_const_lv11_11E) + unsigned(phi_mul_reg_473));
    sum7_cast_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum7_fu_839_p2),64));
    sum7_fu_839_p2 <= std_logic_vector(unsigned(ap_const_lv11_11F) + unsigned(phi_mul_reg_473));
    sum8_cast_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum8_fu_896_p2),64));
    sum8_fu_896_p2 <= std_logic_vector(unsigned(ap_const_lv11_120) + unsigned(phi_mul_reg_473));
    sum9_cast_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum9_fu_935_p2),64));
    sum9_fu_935_p2 <= std_logic_vector(unsigned(ap_const_lv11_121) + unsigned(phi_mul_reg_473));
    sum_cast_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_632_p2),64));
    sum_fu_632_p2 <= std_logic_vector(unsigned(ap_const_lv11_118) + unsigned(phi_mul_reg_473));

    t_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state14, exitcond_fu_1077_p2, ap_CS_fsm_state16, ap_CS_fsm_state4, tmp_82_fu_622_p1, tmp_81_fu_1083_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((exitcond_fu_1077_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            t_address0 <= tmp_81_fu_1083_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            t_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            t_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_fu_1077_p2 = ap_const_lv1_1)))) then 
            t_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_address0 <= tmp_82_fu_622_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            t_address0 <= "XXX";
        end if; 
    end process;


    t_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state13, tmp_27_fu_1072_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            t_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            t_address1 <= tmp_27_fu_1072_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            t_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            t_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            t_address1 <= "XXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state14, exitcond_fu_1077_p2, ap_CS_fsm_state16, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_fu_1077_p2 = ap_const_lv1_1)) or ((exitcond_fu_1077_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            t_ce1 <= ap_const_logic_1;
        else 
            t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(a_coeffs_q0, ap_CS_fsm_state14, exitcond_fu_1077_p2, ap_CS_fsm_state4)
    begin
        if (((exitcond_fu_1077_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            t_d0 <= ap_const_lv16_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_d0 <= a_coeffs_q0;
        else 
            t_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    t_we0_assign_proc : process(ap_CS_fsm_state14, exitcond_fu_1077_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((exitcond_fu_1077_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_we1_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            t_we1 <= ap_const_logic_1;
        else 
            t_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_1059_p3 <= (ap_const_lv7_57 & j_1_reg_497);
    tmp_26_fu_1196_p4 <= t_q1(15 downto 8);
    tmp_27_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_497),64));
    tmp_28_fu_643_p4 <= t_q0(15 downto 8);
    tmp_29_fu_657_p3 <= (tmp_41_fu_653_p1 & ap_const_lv5_0);
    tmp_30_fu_1053_p2 <= std_logic_vector(unsigned(j_1_reg_497) + unsigned(ap_const_lv3_1));
    tmp_31_fu_582_p2 <= std_logic_vector(unsigned(i_reg_462) + unsigned(ap_const_lv7_1));
    tmp_32_fu_627_p1 <= t_q0(8 - 1 downto 0);
    tmp_33_fu_665_p2 <= (tmp_29_fu_657_p3 or tmp_28_fu_643_p4);
    tmp_35_fu_755_p3 <= (tmp_49_fu_751_p1 & ap_const_lv7_0);
    tmp_37_fu_718_p3 <= (tmp_45_fu_714_p1 & ap_const_lv2_0);
    tmp_38_fu_726_p2 <= (tmp_37_fu_718_p3 or tmp_23_reg_1296);
    tmp_40_fu_731_p3 <= (grp_fu_520_p4 & tmp_38_fu_726_p2);
    tmp_41_fu_653_p1 <= t_q1(3 - 1 downto 0);
    tmp_42_fu_763_p2 <= (tmp_35_fu_755_p3 or tmp_34_reg_1301);
    tmp_45_fu_714_p1 <= t_q1(3 - 1 downto 0);
    tmp_46_fu_795_p3 <= (tmp_56_fu_791_p1 & ap_const_lv4_0);
    tmp_47_fu_803_p2 <= (tmp_46_fu_795_p3 or tmp_44_reg_1306);
    tmp_48_fu_1112_p3 <= (grp_fu_562_p3 & tmp_86_fu_1106_p2);
    tmp_49_fu_751_p1 <= t_q0(1 - 1 downto 0);
    tmp_51_fu_808_p3 <= (grp_fu_562_p3 & tmp_47_fu_803_p2);
    tmp_52_fu_1125_p3 <= (tmp_88_reg_1347 & ap_const_lv7_0);
    tmp_54_fu_1132_p2 <= (tmp_52_fu_1125_p3 or grp_fu_530_p4);
    tmp_56_fu_791_p1 <= t_q1(3 - 1 downto 0);
    tmp_57_fu_864_p3 <= (tmp_67_fu_860_p1 & ap_const_lv1_0);
    tmp_58_fu_872_p2 <= (tmp_57_fu_864_p3 or tmp_55_reg_1311);
    tmp_59_fu_877_p4 <= t_q0(6 downto 3);
    tmp_60_fu_887_p3 <= (tmp_59_fu_877_p4 & tmp_58_fu_872_p2);
    tmp_62_fu_1166_p3 <= (tmp_93_reg_1357 & tmp_92_fu_1160_p2);
    tmp_64_fu_921_p3 <= (tmp_76_fu_917_p1 & ap_const_lv6_0);
    tmp_65_fu_929_p2 <= (tmp_64_fu_921_p3 or tmp_61_reg_1316);
    tmp_67_fu_860_p1 <= t_q0(3 - 1 downto 0);
    tmp_69_fu_982_p3 <= (tmp_80_fu_978_p1 & ap_const_lv3_0);
    tmp_70_fu_990_p2 <= (tmp_69_fu_982_p3 or tmp_68_reg_1321);
    tmp_71_fu_995_p4 <= t_q0(4 downto 3);
    tmp_73_fu_1189_p3 <= (tmp_94_reg_1362 & ap_const_lv5_0);
    tmp_74_fu_1005_p3 <= (tmp_71_fu_995_p4 & tmp_70_fu_990_p2);
    tmp_76_fu_917_p1 <= t_q1(2 - 1 downto 0);
    tmp_77_fu_612_p2 <= std_logic_vector(unsigned(tmp_reg_1273) + unsigned(j_cast6_fu_596_p1));
    tmp_78_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_fu_612_p2),64));
    tmp_79_fu_1206_p2 <= (tmp_73_fu_1189_p3 or tmp_26_fu_1196_p4);
    tmp_80_fu_978_p1 <= t_q0(3 - 1 downto 0);
    tmp_81_fu_1083_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_509),64));
    tmp_82_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_485),64));
    tmp_83_fu_1094_p1 <= t_q1(3 - 1 downto 0);
    tmp_85_fu_1098_p3 <= (tmp_83_fu_1094_p1 & ap_const_lv4_0);
    tmp_86_fu_1106_p2 <= (tmp_85_fu_1098_p3 or grp_fu_552_p4);
    tmp_88_fu_1121_p1 <= t_q0(1 - 1 downto 0);
    tmp_89_fu_1139_p1 <= t_q1(3 - 1 downto 0);
    tmp_90_fu_1143_p4 <= t_q0(15 downto 11);
    tmp_91_fu_1153_p3 <= (tmp_89_reg_1352 & ap_const_lv2_0);
    tmp_92_fu_1160_p2 <= (tmp_91_fu_1153_p3 or tmp_90_fu_1143_p4);
    tmp_94_fu_1185_p1 <= t_q0(3 - 1 downto 0);
    tmp_95_fu_1213_p1 <= t_q1(8 - 1 downto 0);
    tmp_fu_588_p3 <= (i_reg_462 & ap_const_lv3_0);
    tmp_s_fu_1067_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_1059_p3),64));
end behav;
